
wave_gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011238  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  080113c8  080113c8  000123c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124ec  080124ec  00014310  2**0
                  CONTENTS
  4 .ARM          00000008  080124ec  080124ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124f4  080124f4  00014310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124f4  080124f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080124f8  080124f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  080124fc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014310  2**0
                  CONTENTS
 10 .bss          000036bc  20000310  20000310  00014310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200039cc  200039cc  00014310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d3c1  00000000  00000000  00014340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004774  00000000  00000000  00031701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00035e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001537  00000000  00000000  000379c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261e5  00000000  00000000  00038eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002365c  00000000  00000000  0005f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7723  00000000  00000000  00082740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159e63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008938  00000000  00000000  00159ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001627e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080113b0 	.word	0x080113b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	080113b0 	.word	0x080113b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <write_reg>:
#include "accel_mma7660.h"

static bool write_reg(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t val) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	70bb      	strb	r3, [r7, #2]
    for (int t = 0; t < 3; ++t) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e017      	b.n	8000fea <write_reg+0x46>
        if (HAL_I2C_Mem_Write(hi2c, MMA7660_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1cbb      	adds	r3, r7, #2
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2198      	movs	r1, #152	@ 0x98
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f004 fc36 	bl	8005840 <HAL_I2C_Mem_Write>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <write_reg+0x3a>
                              &val, 1, 100) == HAL_OK) {
            return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e009      	b.n	8000ff2 <write_reg+0x4e>
        }
        HAL_Delay(2);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f002 fe5a 	bl	8003c98 <HAL_Delay>
    for (int t = 0; t < 3; ++t) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	dde4      	ble.n	8000fba <write_reg+0x16>
    }
    return false;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <read_reg>:

static bool read_reg(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *val) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b08a      	sub	sp, #40	@ 0x28
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	460b      	mov	r3, r1
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	72fb      	strb	r3, [r7, #11]
    for (int t = 0; t < 3; ++t) {
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e017      	b.n	800103e <read_reg+0x44>
        if (HAL_I2C_Mem_Read(hi2c, MMA7660_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	b29a      	uxth	r2, r3
 8001012:	2364      	movs	r3, #100	@ 0x64
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	2198      	movs	r1, #152	@ 0x98
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f004 fd06 	bl	8005a34 <HAL_I2C_Mem_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <read_reg+0x38>
                             val, 1, 100) == HAL_OK) {
            return true;
 800102e:	2301      	movs	r3, #1
 8001030:	e009      	b.n	8001046 <read_reg+0x4c>
        }
        HAL_Delay(2);
 8001032:	2002      	movs	r0, #2
 8001034:	f002 fe30 	bl	8003c98 <HAL_Delay>
    for (int t = 0; t < 3; ++t) {
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b02      	cmp	r3, #2
 8001042:	dde4      	ble.n	800100e <read_reg+0x14>
    }
    return false;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <MMA7660_Init>:

bool MMA7660_Init(I2C_HandleTypeDef *hi2c,
                  GPIO_TypeDef *gpio_avdd, uint16_t gpio_pin)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
    /* Alimentação AVDD via PB5 (conforme esquemático) */
    HAL_GPIO_WritePin(gpio_avdd, gpio_pin, GPIO_PIN_RESET);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	f004 fa50 	bl	8005508 <HAL_GPIO_WritePin>
    HAL_Delay(30);
 8001068:	201e      	movs	r0, #30
 800106a:	f002 fe15 	bl	8003c98 <HAL_Delay>
    HAL_GPIO_WritePin(gpio_avdd, gpio_pin, GPIO_PIN_SET);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	2201      	movs	r2, #1
 8001072:	4619      	mov	r1, r3
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f004 fa47 	bl	8005508 <HAL_GPIO_WritePin>
    HAL_Delay(30);
 800107a:	201e      	movs	r0, #30
 800107c:	f002 fe0c 	bl	8003c98 <HAL_Delay>

    /* Presença no barramento (até 4 tentativas) */
    for (int i = 0; i < 4; ++i) {
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e013      	b.n	80010ae <MMA7660_Init+0x60>
        if (HAL_I2C_IsDeviceReady(hi2c, MMA7660_I2C_ADDR, 1, 100) == HAL_OK) {
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	2201      	movs	r2, #1
 800108a:	2198      	movs	r1, #152	@ 0x98
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f004 ff03 	bl	8005e98 <HAL_I2C_IsDeviceReady>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00e      	beq.n	80010b6 <MMA7660_Init+0x68>
            break;
        }
        if (i == 3) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d101      	bne.n	80010a2 <MMA7660_Init+0x54>
            return false; /* não respondeu */
 800109e:	2300      	movs	r3, #0
 80010a0:	e035      	b.n	800110e <MMA7660_Init+0xc0>
        }
        HAL_Delay(5);
 80010a2:	2005      	movs	r0, #5
 80010a4:	f002 fdf8 	bl	8003c98 <HAL_Delay>
    for (int i = 0; i < 4; ++i) {
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	dde8      	ble.n	8001086 <MMA7660_Init+0x38>
 80010b4:	e000      	b.n	80010b8 <MMA7660_Init+0x6a>
            break;
 80010b6:	bf00      	nop
    }

    /* Entrar em STANDBY para configurar */
    if (!write_reg(hi2c, MMA7660_REG_MODE, MMA7660_MODE_STANDBY)) {
 80010b8:	2200      	movs	r2, #0
 80010ba:	2107      	movs	r1, #7
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff71 	bl	8000fa4 <write_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MMA7660_Init+0x84>
        return false;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e01d      	b.n	800110e <MMA7660_Init+0xc0>
    }

    /* Sample Rate = 64 Hz (qualquer outro pode ser usado) */
    if (!write_reg(hi2c, MMA7660_REG_SR, MMA7660_SR_64HZ)) {
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff64 	bl	8000fa4 <write_reg>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MMA7660_Init+0x9e>
        return false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e010      	b.n	800110e <MMA7660_Init+0xc0>
    }

    /* Ativar */
    if (!write_reg(hi2c, MMA7660_REG_MODE, MMA7660_MODE_ACTIVE)) {
 80010ec:	2201      	movs	r2, #1
 80010ee:	2107      	movs	r1, #7
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff57 	bl	8000fa4 <write_reg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MMA7660_Init+0xb8>
        return false;
 8001102:	2300      	movs	r3, #0
 8001104:	e003      	b.n	800110e <MMA7660_Init+0xc0>
    }

    HAL_Delay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f002 fdc6 	bl	8003c98 <HAL_Delay>
    return true;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MMA7660_ReadXYZ>:
    *value = MMA7660_AXIS_SIGNED_VALUE(raw);
    return true;
}

bool MMA7660_ReadXYZ(I2C_HandleTypeDef *hi2c, int8_t *x, int8_t *y, int8_t *z)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
    uint8_t regs[3] = { MMA7660_REG_X_OUT, MMA7660_REG_Y_OUT, MMA7660_REG_Z_OUT };
 8001126:	4a38      	ldr	r2, [pc, #224]	@ (8001208 <MMA7660_ReadXYZ+0xf0>)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4611      	mov	r1, r2
 8001130:	8019      	strh	r1, [r3, #0]
 8001132:	3302      	adds	r3, #2
 8001134:	0c12      	lsrs	r2, r2, #16
 8001136:	701a      	strb	r2, [r3, #0]
    uint8_t raw;
    if (!read_reg(hi2c, regs[0], &raw)) return false; *x = MMA7660_AXIS_SIGNED_VALUE(raw);
 8001138:	7d3b      	ldrb	r3, [r7, #20]
 800113a:	f107 0213 	add.w	r2, r7, #19
 800113e:	4619      	mov	r1, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff5a 	bl	8000ffa <read_reg>
 8001146:	4603      	mov	r3, r0
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MMA7660_ReadXYZ+0x3e>
 8001152:	2300      	movs	r3, #0
 8001154:	e054      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800115e:	b25b      	sxtb	r3, r3
 8001160:	7cfa      	ldrb	r2, [r7, #19]
 8001162:	f002 0220 	and.w	r2, r2, #32
 8001166:	2a00      	cmp	r2, #0
 8001168:	d002      	beq.n	8001170 <MMA7660_ReadXYZ+0x58>
 800116a:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 800116e:	e000      	b.n	8001172 <MMA7660_ReadXYZ+0x5a>
 8001170:	2200      	movs	r2, #0
 8001172:	4313      	orrs	r3, r2
 8001174:	b25a      	sxtb	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	701a      	strb	r2, [r3, #0]
    if (!read_reg(hi2c, regs[1], &raw)) return false; *y = MMA7660_AXIS_SIGNED_VALUE(raw);
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	f107 0213 	add.w	r2, r7, #19
 8001180:	4619      	mov	r1, r3
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff39 	bl	8000ffa <read_reg>
 8001188:	4603      	mov	r3, r0
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MMA7660_ReadXYZ+0x80>
 8001194:	2300      	movs	r3, #0
 8001196:	e033      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 8001198:	7cfb      	ldrb	r3, [r7, #19]
 800119a:	b25b      	sxtb	r3, r3
 800119c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	7cfa      	ldrb	r2, [r7, #19]
 80011a4:	f002 0220 	and.w	r2, r2, #32
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d002      	beq.n	80011b2 <MMA7660_ReadXYZ+0x9a>
 80011ac:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 80011b0:	e000      	b.n	80011b4 <MMA7660_ReadXYZ+0x9c>
 80011b2:	2200      	movs	r2, #0
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	701a      	strb	r2, [r3, #0]
    if (!read_reg(hi2c, regs[2], &raw)) return false; *z = MMA7660_AXIS_SIGNED_VALUE(raw);
 80011bc:	7dbb      	ldrb	r3, [r7, #22]
 80011be:	f107 0213 	add.w	r2, r7, #19
 80011c2:	4619      	mov	r1, r3
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff18 	bl	8000ffa <read_reg>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MMA7660_ReadXYZ+0xc2>
 80011d6:	2300      	movs	r3, #0
 80011d8:	e012      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	7cfa      	ldrb	r2, [r7, #19]
 80011e6:	f002 0220 	and.w	r2, r2, #32
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	d002      	beq.n	80011f4 <MMA7660_ReadXYZ+0xdc>
 80011ee:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 80011f2:	e000      	b.n	80011f6 <MMA7660_ReadXYZ+0xde>
 80011f4:	2200      	movs	r2, #0
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
    return true;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080113c8 	.word	0x080113c8

0800120c <Error_Handler>:
#include "main.h"
#include <stdio.h>

void Error_Handler(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
    __disable_irq();
    while(1) {
        // Indicar erro com LEDs
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <Error_Handler+0x3c>)
 800121a:	f004 f98e 	bl	800553a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800121e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <Error_Handler+0x3c>)
 8001224:	f004 f989 	bl	800553a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122c:	4806      	ldr	r0, [pc, #24]	@ (8001248 <Error_Handler+0x3c>)
 800122e:	f004 f984 	bl	800553a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001232:	2110      	movs	r1, #16
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <Error_Handler+0x40>)
 8001236:	f004 f980 	bl	800553a <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800123e:	f002 fd2b 	bl	8003c98 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001242:	bf00      	nop
 8001244:	e7e6      	b.n	8001214 <Error_Handler+0x8>
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400

08001250 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <__NVIC_SystemReset+0x24>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001262:	4904      	ldr	r1, [pc, #16]	@ (8001274 <__NVIC_SystemReset+0x24>)
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_SystemReset+0x28>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800126a:	f3bf 8f4f 	dsb	sy
}
 800126e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <__NVIC_SystemReset+0x20>
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	05fa0004 	.word	0x05fa0004

0800127c <kalman_step>:
static KFilter kx = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static KFilter ky = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static KFilter kz = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static uint8_t g_kalman_on = 1;

static inline float kalman_step(KFilter *kf, float z){
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	ed87 0a00 	vstr	s0, [r7]
  kf->P += kf->Q;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a03 	vldr	s14, [r3, #12]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edc3 7a03 	vstr	s15, [r3, #12]
  float K = kf->P / (kf->P + kf->R);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80012b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
  kf->x = kf->x + K*(z - kf->x);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	ed93 7a02 	vldr	s14, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c8:	edd7 6a00 	vldr	s13, [r7]
 80012cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a02 	vstr	s15, [r3, #8]
  kf->P = (1.f - K)*kf->P;
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a03 	vstr	s15, [r3, #12]
  return kf->x;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	ee07 3a90 	vmov	s15, r3
}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <fmax_from_fs>:
typedef enum { WIN_NONE, WIN_HANN, WIN_BLACKMAN, WIN_NUTTALL } WinType;
static WaveType g_wave = WT_SINE;
static WinType  g_win  = WIN_NONE;
static float    g_taper_percent = 50.f; // 0..100

static inline float fmax_from_fs(float fs, int N){ return fs / (float)N; }
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	6038      	str	r0, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed97 7a01 	vldr	s14, [r7, #4]
 800132e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001332:	eef0 7a66 	vmov.f32	s15, s13
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	0000      	movs	r0, r0
	...

08001348 <apply_window>:

static void apply_window(float *w, int N, WinType wt, float taper_pct){
 8001348:	b580      	push	{r7, lr}
 800134a:	ed2d 8b02 	vpush	{d8}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	ed87 0a00 	vstr	s0, [r7]
 800135c:	71fb      	strb	r3, [r7, #7]
  if (wt==WIN_NONE || taper_pct<=0.1f){ for(int i=0;i<N;i++) w[i]=1.0f; return; }
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <apply_window+0x2e>
 8001364:	edd7 7a00 	vldr	s15, [r7]
 8001368:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001610 <apply_window+0x2c8>
 800136c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d811      	bhi.n	800139a <apply_window+0x52>
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800137a:	e009      	b.n	8001390 <apply_window+0x48>
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	3301      	adds	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <apply_window+0x34>
 8001398:	e127      	b.n	80015ea <apply_window+0x2a2>
  float M=(float)(N-1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3b01      	subs	r3, #1
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	edc7 7a07 	vstr	s15, [r7, #28]
  for(int n=0;n<N;n++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ae:	e117      	b.n	80015e0 <apply_window+0x298>
    float a = (float)n/M;
 80013b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	edc7 7a06 	vstr	s15, [r7, #24]
    float mult=1.f;
 80013c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
    switch(wt){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d062      	beq.n	8001498 <apply_window+0x150>
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	f300 80b6 	bgt.w	8001544 <apply_window+0x1fc>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <apply_window+0x9a>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d020      	beq.n	8001422 <apply_window+0xda>
      case WIN_HANN:     mult = 0.5f*(1.f - cosf(2.f*M_PI*a)); break;
      case WIN_BLACKMAN: mult = 0.42f - 0.5f*cosf(2.f*M_PI*a) + 0.08f*cosf(4.f*M_PI*a); break;
      case WIN_NUTTALL:  mult = 0.355768f - 0.487396f*cosf(2.f*M_PI*a) + 0.144232f*cosf(4.f*M_PI*a) - 0.012604f*cosf(6.f*M_PI*a); break;
      default: break;
 80013e0:	e0b0      	b.n	8001544 <apply_window+0x1fc>
      case WIN_HANN:     mult = 0.5f*(1.f - cosf(2.f*M_PI*a)); break;
 80013e2:	69b8      	ldr	r0, [r7, #24]
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	a383      	add	r3, pc, #524	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbd5 	bl	8000ba8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	ee00 3a10 	vmov	s0, r3
 8001404:	f00c f9e0 	bl	800d7c8 <cosf>
 8001408:	eef0 7a40 	vmov.f32	s15, s0
 800140c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001420:	e091      	b.n	8001546 <apply_window+0x1fe>
      case WIN_BLACKMAN: mult = 0.42f - 0.5f*cosf(2.f*M_PI*a) + 0.08f*cosf(4.f*M_PI*a); break;
 8001422:	69b8      	ldr	r0, [r7, #24]
 8001424:	f7ff f898 	bl	8000558 <__aeabi_f2d>
 8001428:	a373      	add	r3, pc, #460	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f8eb 	bl	8000608 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbb5 	bl	8000ba8 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	ee00 3a10 	vmov	s0, r3
 8001444:	f00c f9c0 	bl	800d7c8 <cosf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001614 <apply_window+0x2cc>
 8001458:	ee37 8a67 	vsub.f32	s16, s14, s15
 800145c:	69b8      	ldr	r0, [r7, #24]
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	a367      	add	r3, pc, #412	@ (adr r3, 8001600 <apply_window+0x2b8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ce 	bl	8000608 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb98 	bl	8000ba8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	ee00 3a10 	vmov	s0, r3
 800147e:	f00c f9a3 	bl	800d7c8 <cosf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001618 <apply_window+0x2d0>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001492:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001496:	e056      	b.n	8001546 <apply_window+0x1fe>
      case WIN_NUTTALL:  mult = 0.355768f - 0.487396f*cosf(2.f*M_PI*a) + 0.144232f*cosf(4.f*M_PI*a) - 0.012604f*cosf(6.f*M_PI*a); break;
 8001498:	69b8      	ldr	r0, [r7, #24]
 800149a:	f7ff f85d 	bl	8000558 <__aeabi_f2d>
 800149e:	a356      	add	r3, pc, #344	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8b0 	bl	8000608 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb7a 	bl	8000ba8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee00 3a10 	vmov	s0, r3
 80014ba:	f00c f985 	bl	800d7c8 <cosf>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800161c <apply_window+0x2d4>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001620 <apply_window+0x2d8>
 80014ce:	ee37 8a67 	vsub.f32	s16, s14, s15
 80014d2:	69b8      	ldr	r0, [r7, #24]
 80014d4:	f7ff f840 	bl	8000558 <__aeabi_f2d>
 80014d8:	a349      	add	r3, pc, #292	@ (adr r3, 8001600 <apply_window+0x2b8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f893 	bl	8000608 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb5d 	bl	8000ba8 <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	ee00 3a10 	vmov	s0, r3
 80014f4:	f00c f968 	bl	800d7c8 <cosf>
 80014f8:	eef0 7a40 	vmov.f32	s15, s0
 80014fc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001624 <apply_window+0x2dc>
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001508:	69b8      	ldr	r0, [r7, #24]
 800150a:	f7ff f825 	bl	8000558 <__aeabi_f2d>
 800150e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001608 <apply_window+0x2c0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f878 	bl	8000608 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb42 	bl	8000ba8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	ee00 3a10 	vmov	s0, r3
 800152a:	f00c f94d 	bl	800d7c8 <cosf>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001628 <apply_window+0x2e0>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800153e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001542:	e000      	b.n	8001546 <apply_window+0x1fe>
      default: break;
 8001544:	bf00      	nop
    }
    float edge = taper_pct/100.f, t=1.f;
 8001546:	ed97 7a00 	vldr	s14, [r7]
 800154a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800162c <apply_window+0x2e4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a05 	vstr	s15, [r7, #20]
 8001556:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800155a:	623b      	str	r3, [r7, #32]
    if (a<edge) t=a/edge; else if (a>(1.f-edge)) t=(1.f-a)/edge;
 800155c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001560:	edd7 7a05 	vldr	s15, [r7, #20]
 8001564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d508      	bpl.n	8001580 <apply_window+0x238>
 800156e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001572:	ed97 7a05 	vldr	s14, [r7, #20]
 8001576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157a:	edc7 7a08 	vstr	s15, [r7, #32]
 800157e:	e018      	b.n	80015b2 <apply_window+0x26a>
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001584:	edd7 7a05 	vldr	s15, [r7, #20]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	dd0b      	ble.n	80015b2 <apply_window+0x26a>
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80015aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ae:	edc7 7a08 	vstr	s15, [r7, #32]
    w[n] = 1.f - (1.f - mult)*t;
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015be:	edd7 7a08 	vldr	s15, [r7, #32]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	edc3 7a00 	vstr	s15, [r3]
  for(int n=0;n<N;n++){
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	3301      	adds	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f6ff aee3 	blt.w	80013b0 <apply_window+0x68>
  }
}
 80015ea:	3730      	adds	r7, #48	@ 0x30
 80015ec:	46bd      	mov	sp, r7
 80015ee:	ecbd 8b02 	vpop	{d8}
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	401921fb 	.word	0x401921fb
 8001600:	54442d18 	.word	0x54442d18
 8001604:	402921fb 	.word	0x402921fb
 8001608:	7f3321d2 	.word	0x7f3321d2
 800160c:	4032d97c 	.word	0x4032d97c
 8001610:	3dcccccd 	.word	0x3dcccccd
 8001614:	3ed70a3d 	.word	0x3ed70a3d
 8001618:	3da3d70a 	.word	0x3da3d70a
 800161c:	3ef98bf8 	.word	0x3ef98bf8
 8001620:	3eb62739 	.word	0x3eb62739
 8001624:	3e13b18e 	.word	0x3e13b18e
 8001628:	3c4e8102 	.word	0x3c4e8102
 800162c:	42c80000 	.word	0x42c80000

08001630 <fill_lut>:

static void fill_lut(WaveType wt){
 8001630:	b580      	push	{r7, lr}
 8001632:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001636:	af00      	add	r7, sp, #0
 8001638:	4602      	mov	r2, r0
 800163a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800163e:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001642:	701a      	strb	r2, [r3, #0]
  float win[LUT_N]; apply_window(win, LUT_N, g_win, g_taper_percent);
 8001644:	4b84      	ldr	r3, [pc, #528]	@ (8001858 <fill_lut+0x228>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b84      	ldr	r3, [pc, #528]	@ (800185c <fill_lut+0x22c>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fe74 	bl	8001348 <apply_window>
  for (int i=0;i<LUT_N;i++){
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001666:	e0e8      	b.n	800183a <fill_lut+0x20a>
    float ph=(float)i/(float)LUT_N, y=0.f;
 8001668:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001860 <fill_lut+0x230>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001680:	edc3 7a00 	vstr	s15, [r3]
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800168c:	6013      	str	r3, [r2, #0]
    switch(wt){
 800168e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001692:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d87a      	bhi.n	8001792 <fill_lut+0x162>
 800169c:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <fill_lut+0x74>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016b9 	.word	0x080016b9
 80016a8:	08001701 	.word	0x08001701
 80016ac:	08001729 	.word	0x08001729
 80016b0:	0800176b 	.word	0x0800176b
 80016b4:	08001779 	.word	0x08001779
      case WT_SINE:   y = 0.5f*(sinf(2.f*M_PI*ph)+1.f); break;
 80016b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	a363      	add	r3, pc, #396	@ (adr r3, 8001850 <fill_lut+0x220>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff9e 	bl	8000608 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa68 	bl	8000ba8 <__aeabi_d2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	ee00 3a10 	vmov	s0, r3
 80016de:	f00c f8b7 	bl	800d850 <sinf>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80016fa:	edc3 7a00 	vstr	s15, [r3]
 80016fe:	e048      	b.n	8001792 <fill_lut+0x162>
      case WT_SQUARE: y = (ph<0.5f)?1.f:0.f; break;
 8001700:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d502      	bpl.n	800171c <fill_lut+0xec>
 8001716:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800171a:	e001      	b.n	8001720 <fill_lut+0xf0>
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e034      	b.n	8001792 <fill_lut+0x162>
      case WT_TRI:    y = (ph<0.5f)?(ph*2.f):(2.f-2.f*ph); break;
 8001728:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d506      	bpl.n	800174c <fill_lut+0x11c>
 800173e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174a:	e009      	b.n	8001760 <fill_lut+0x130>
 800174c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001758:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001764:	edc3 7a00 	vstr	s15, [r3]
 8001768:	e013      	b.n	8001792 <fill_lut+0x162>
      case WT_SAWUP:  y = ph; break;
 800176a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00c      	b.n	8001792 <fill_lut+0x162>
      case WT_SAWDN:  y = 1.f - ph; break;
 8001778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800178c:	edc3 7a00 	vstr	s15, [r3]
 8001790:	bf00      	nop
    }
    y *= win[i];
 8001792:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001796:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 800179a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017b6:	edc3 7a00 	vstr	s15, [r3]
    float v = y*4095.f; if (v<0) v=0; if (v>4095.f) v=4095.f;
 80017ba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001864 <fill_lut+0x234>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017ce:	edc3 7a00 	vstr	s15, [r3]
 80017d2:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d504      	bpl.n	80017ee <fill_lut+0x1be>
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001864 <fill_lut+0x234>
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd03      	ble.n	800180c <fill_lut+0x1dc>
 8001804:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <fill_lut+0x238>)
 8001806:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 800180a:	6013      	str	r3, [r2, #0]
    s_lut[i] = (uint16_t)(v+0.5f);
 800180c:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 3a90 	vmov	r3, s15
 8001824:	b299      	uxth	r1, r3
 8001826:	4a11      	ldr	r2, [pc, #68]	@ (800186c <fill_lut+0x23c>)
 8001828:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800182c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0;i<LUT_N;i++){
 8001830:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001834:	3301      	adds	r3, #1
 8001836:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800183a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	f77f af12 	ble.w	8001668 <fill_lut+0x38>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	54442d18 	.word	0x54442d18
 8001854:	401921fb 	.word	0x401921fb
 8001858:	20000761 	.word	0x20000761
 800185c:	20000038 	.word	0x20000038
 8001860:	43800000 	.word	0x43800000
 8001864:	457ff000 	.word	0x457ff000
 8001868:	457ff000 	.word	0x457ff000
 800186c:	20000560 	.word	0x20000560

08001870 <dac_start>:

static bool dac_start(float freq){
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	ed87 0a01 	vstr	s0, [r7, #4]
  if (freq<=0) return false;
 800187a:	edd7 7a01 	vldr	s15, [r7, #4]
 800187e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d801      	bhi.n	800188c <dac_start+0x1c>
 8001888:	2300      	movs	r3, #0
 800188a:	e077      	b.n	800197c <dac_start+0x10c>
  float fs = (float)LUT_N * freq; if (fs>DAC_FS_MAX_HZ) fs=DAC_FS_MAX_HZ;
 800188c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001890:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001984 <dac_start+0x114>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	edc7 7a07 	vstr	s15, [r7, #28]
 800189c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001988 <dac_start+0x118>
 80018a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	dd01      	ble.n	80018b2 <dac_start+0x42>
 80018ae:	4b37      	ldr	r3, [pc, #220]	@ (800198c <dac_start+0x11c>)
 80018b0:	61fb      	str	r3, [r7, #28]

  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();     // ~42 MHz
 80018b2:	f006 fe55 	bl	8008560 <HAL_RCC_GetPCLK1Freq>
 80018b6:	6138      	str	r0, [r7, #16]
  uint32_t timclk = pclk1*2U; if (timclk==0) timclk=84000000U;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <dac_start+0x58>
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <dac_start+0x120>)
 80018c6:	61bb      	str	r3, [r7, #24]

  uint32_t psc=0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t arr = (uint32_t)((float)timclk/fs); if (arr<1) arr=1; arr-=1;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <dac_start+0x82>
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]

  __HAL_TIM_DISABLE(&htim2);
 80018f8:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <dac_start+0x124>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10f      	bne.n	8001928 <dac_start+0xb8>
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <dac_start+0x124>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <dac_start+0xb8>
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <dac_start+0x124>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <dac_start+0x124>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, psc);
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <dac_start+0x124>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <dac_start+0x124>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001938:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <dac_start+0x124>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <dac_start+0x124>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)s_lut, LUT_N, DAC_ALIGN_12B_R)!=HAL_OK) return false;
 8001946:	2300      	movs	r3, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <dac_start+0x128>)
 8001950:	2100      	movs	r1, #0
 8001952:	4812      	ldr	r0, [pc, #72]	@ (800199c <dac_start+0x12c>)
 8001954:	f003 f938 	bl	8004bc8 <HAL_DAC_Start_DMA>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <dac_start+0xf2>
 800195e:	2300      	movs	r3, #0
 8001960:	e00c      	b.n	800197c <dac_start+0x10c>
  if (HAL_TIM_Base_Start(&htim2)!=HAL_OK){ HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1); return false; }
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <dac_start+0x124>)
 8001964:	f007 fac6 	bl	8008ef4 <HAL_TIM_Base_Start>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <dac_start+0x10a>
 800196e:	2100      	movs	r1, #0
 8001970:	480a      	ldr	r0, [pc, #40]	@ (800199c <dac_start+0x12c>)
 8001972:	f003 f9e9 	bl	8004d48 <HAL_DAC_Stop_DMA>
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <dac_start+0x10c>
  return true;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	43800000 	.word	0x43800000
 8001988:	49742400 	.word	0x49742400
 800198c:	49742400 	.word	0x49742400
 8001990:	0501bd00 	.word	0x0501bd00
 8001994:	200004cc 	.word	0x200004cc
 8001998:	20000560 	.word	0x20000560
 800199c:	2000040c 	.word	0x2000040c

080019a0 <dac_stop>:

static void dac_stop(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop(&htim2);
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <dac_stop+0x18>)
 80019a6:	f007 fb0d 	bl	8008fc4 <HAL_TIM_Base_Stop>
  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80019aa:	2100      	movs	r1, #0
 80019ac:	4803      	ldr	r0, [pc, #12]	@ (80019bc <dac_stop+0x1c>)
 80019ae:	f003 f9cb 	bl	8004d48 <HAL_DAC_Stop_DMA>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200004cc 	.word	0x200004cc
 80019bc:	2000040c 	.word	0x2000040c

080019c0 <put_prompt>:

/* ============================ Heartbeat ============================ */
static inline void put_prompt(void){ printf("> "); }
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <put_prompt+0x10>)
 80019c6:	f00d fce5 	bl	800f394 <iprintf>
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	080113cc 	.word	0x080113cc

080019d4 <hb_tick>:
static void hb_tick(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  static uint32_t t0=0; if (!g_hb_enable) return;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <hb_tick+0x38>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d012      	beq.n	8001a08 <hb_tick+0x34>
  if (HAL_GetTick()-t0>500){ t0=HAL_GetTick(); HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); }
 80019e2:	f002 f94d 	bl	8003c80 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <hb_tick+0x3c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019f2:	d90a      	bls.n	8001a0a <hb_tick+0x36>
 80019f4:	f002 f944 	bl	8003c80 <HAL_GetTick>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <hb_tick+0x3c>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	2110      	movs	r1, #16
 8001a00:	4804      	ldr	r0, [pc, #16]	@ (8001a14 <hb_tick+0x40>)
 8001a02:	f003 fd9a 	bl	800553a <HAL_GPIO_TogglePin>
 8001a06:	e000      	b.n	8001a0a <hb_tick+0x36>
  static uint32_t t0=0; if (!g_hb_enable) return;
 8001a08:	bf00      	nop
}
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20001780 	.word	0x20001780
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_ADC_ConvHalfCpltCallback>:
} AdcCfg;
static AdcCfg g_adc2_cfg = { ADC_CHANNEL_1, ADC_SAMPLETIME_15CYCLES };
static AdcCfg g_adc3_cfg = { ADC_CHANNEL_3, ADC_SAMPLETIME_15CYCLES };

/* Stream callbacks (Cube chama): imprime como “ADC:<val>” */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if (hadc->Instance!=ADC1 || !g_adc1_stream_on) return;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11c      	bne.n	8001a64 <HAL_ADC_ConvHalfCpltCallback+0x4c>
 8001a2a:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <HAL_ADC_ConvHalfCpltCallback+0x4c>
  for (int i=0;i<ADC1_BUF_LEN/2;i++){ printf("ADC:%u\r\n",(unsigned)g_adc1_buf[i]); if (!g_adc1_stream_on) break; }
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e00f      	b.n	8001a5a <HAL_ADC_ConvHalfCpltCallback+0x42>
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001a46:	f00d fca5 	bl	800f394 <iprintf>
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <HAL_ADC_ConvHalfCpltCallback+0x50>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a60:	dbeb      	blt.n	8001a3a <HAL_ADC_ConvHalfCpltCallback+0x22>
 8001a62:	e002      	b.n	8001a6a <HAL_ADC_ConvHalfCpltCallback+0x52>
  if (hadc->Instance!=ADC1 || !g_adc1_stream_on) return;
 8001a64:	bf00      	nop
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_ConvHalfCpltCallback+0x52>
  for (int i=0;i<ADC1_BUF_LEN/2;i++){ printf("ADC:%u\r\n",(unsigned)g_adc1_buf[i]); if (!g_adc1_stream_on) break; }
 8001a68:	bf00      	nop
}
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40012000 	.word	0x40012000
 8001a74:	20000f64 	.word	0x20000f64
 8001a78:	20000764 	.word	0x20000764
 8001a7c:	080113d0 	.word	0x080113d0

08001a80 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if (hadc->Instance!=ADC1 || !g_adc1_stream_on) return;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_ADC_ConvCpltCallback+0x5c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11d      	bne.n	8001ace <HAL_ADC_ConvCpltCallback+0x4e>
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0x60>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d018      	beq.n	8001ace <HAL_ADC_ConvCpltCallback+0x4e>
  for (int i=ADC1_BUF_LEN/2;i<ADC1_BUF_LEN;i++){ printf("ADC:%u\r\n",(unsigned)g_adc1_buf[i]); if (!g_adc1_stream_on) break; }
 8001a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e00f      	b.n	8001ac4 <HAL_ADC_ConvCpltCallback+0x44>
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <HAL_ADC_ConvCpltCallback+0x64>)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aac:	4619      	mov	r1, r3
 8001aae:	480e      	ldr	r0, [pc, #56]	@ (8001ae8 <HAL_ADC_ConvCpltCallback+0x68>)
 8001ab0:	f00d fc70 	bl	800f394 <iprintf>
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0x60>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_ADC_ConvCpltCallback+0x52>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aca:	dbeb      	blt.n	8001aa4 <HAL_ADC_ConvCpltCallback+0x24>
 8001acc:	e002      	b.n	8001ad4 <HAL_ADC_ConvCpltCallback+0x54>
  if (hadc->Instance!=ADC1 || !g_adc1_stream_on) return;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_ConvCpltCallback+0x54>
  for (int i=ADC1_BUF_LEN/2;i<ADC1_BUF_LEN;i++){ printf("ADC:%u\r\n",(unsigned)g_adc1_buf[i]); if (!g_adc1_stream_on) break; }
 8001ad2:	bf00      	nop
}
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	20000f64 	.word	0x20000f64
 8001ae4:	20000764 	.word	0x20000764
 8001ae8:	080113d0 	.word	0x080113d0

08001aec <adc1_start_stream>:

static void adc1_start_stream(void){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  g_adc1_stream_on=1;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <adc1_start_stream+0x20>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_adc1_buf, ADC1_BUF_LEN);
 8001af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afa:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <adc1_start_stream+0x24>)
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <adc1_start_stream+0x28>)
 8001afe:	f002 fac3 	bl	8004088 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <adc1_start_stream+0x2c>)
 8001b04:	f007 f9f6 	bl	8008ef4 <HAL_TIM_Base_Start>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000f64 	.word	0x20000f64
 8001b10:	20000764 	.word	0x20000764
 8001b14:	2000032c 	.word	0x2000032c
 8001b18:	20000514 	.word	0x20000514

08001b1c <adc1_stop_stream>:
static void adc1_stop_stream(void){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  g_adc1_stream_on=0;
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <adc1_stop_stream+0x1c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Stop(&htim3);
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <adc1_stop_stream+0x20>)
 8001b28:	f007 fa4c 	bl	8008fc4 <HAL_TIM_Base_Stop>
  HAL_ADC_Stop_DMA(&hadc1);
 8001b2c:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <adc1_stop_stream+0x24>)
 8001b2e:	f002 fbbf 	bl	80042b0 <HAL_ADC_Stop_DMA>
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000f64 	.word	0x20000f64
 8001b3c:	20000514 	.word	0x20000514
 8001b40:	2000032c 	.word	0x2000032c

08001b44 <adc_poll_one>:

/* ADC2/ADC3 leitura single-shot (bloqueante) */
static bool adc_poll_one(ADC_HandleTypeDef *hadc, uint32_t channel, uint32_t sample, uint16_t *out){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  ADC_ChannelConfTypeDef s={0};
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  s.Channel=channel; s.Rank=1; s.SamplingTime=sample;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(hadc,&s)!=HAL_OK) return false;
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f002 fc0e 	bl	8004394 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <adc_poll_one+0x3e>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e01b      	b.n	8001bba <adc_poll_one+0x76>
  if (HAL_ADC_Start(hadc)!=HAL_OK) return false;
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f002 f8f0 	bl	8003d68 <HAL_ADC_Start>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <adc_poll_one+0x4e>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e013      	b.n	8001bba <adc_poll_one+0x76>
  if (HAL_ADC_PollForConversion(hadc, 10)!=HAL_OK) return false;
 8001b92:	210a      	movs	r1, #10
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f002 f9ec 	bl	8003f72 <HAL_ADC_PollForConversion>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <adc_poll_one+0x60>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e00a      	b.n	8001bba <adc_poll_one+0x76>
  *out = (uint16_t)HAL_ADC_GetValue(hadc);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f002 fbdd 	bl	8004364 <HAL_ADC_GetValue>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(hadc);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f002 f9aa 	bl	8003f0c <HAL_ADC_Stop>
  return true;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <fpga_cs_low>:
static volatile uint32_t g_bin_crc_calc   = 0;

static uint8_t  g_rx_bin_buf[RX_BIN_BUF_SZ];
static volatile uint32_t g_rx_bin_w=0, g_rx_bin_r=0;

static inline void fpga_cs_low(void){ HAL_GPIO_WritePin(FPGA_CS_GPIO_Port, FPGA_CS_Pin, GPIO_PIN_RESET); }
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bce:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <fpga_cs_low+0x14>)
 8001bd0:	f003 fc9a 	bl	8005508 <HAL_GPIO_WritePin>
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020400 	.word	0x40020400

08001bdc <fpga_cs_high>:
static inline void fpga_cs_high(void){ HAL_GPIO_WritePin(FPGA_CS_GPIO_Port, FPGA_CS_Pin, GPIO_PIN_SET); }
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001be6:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <fpga_cs_high+0x14>)
 8001be8:	f003 fc8e 	bl	8005508 <HAL_GPIO_WritePin>
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <spi_set_prescaler>:

static void spi_set_prescaler(uint32_t br_prescaler){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  hspi1.Init.BaudRatePrescaler = br_prescaler;
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <spi_set_prescaler+0x28>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	61d3      	str	r3, [r2, #28]
  if (HAL_SPI_Init(&hspi1)!=HAL_OK) Error_Handler();
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <spi_set_prescaler+0x28>)
 8001c04:	f006 fcd4 	bl	80085b0 <HAL_SPI_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <spi_set_prescaler+0x1e>
 8001c0e:	f7ff fafd 	bl	800120c <Error_Handler>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000474 	.word	0x20000474

08001c20 <bin_reset_ring>:

static void bin_reset_ring(void){ __disable_irq(); g_rx_bin_w=g_rx_bin_r=0; __enable_irq(); }
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
 8001c28:	2300      	movs	r3, #0
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <bin_reset_ring+0x20>)
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <bin_reset_ring+0x24>)
 8001c30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c32:	b662      	cpsie	i
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	2000177c 	.word	0x2000177c
 8001c44:	20001778 	.word	0x20001778

08001c48 <bin_ring_avail>:
static uint32_t bin_ring_avail(void){ uint32_t w=g_rx_bin_w,r=g_rx_bin_r; return (w>=r)?(w-r):(RX_BIN_BUF_SZ-r+w); }
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <bin_ring_avail+0x38>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <bin_ring_avail+0x3c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d303      	bcc.n	8001c6a <bin_ring_avail+0x22>
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	e004      	b.n	8001c74 <bin_ring_avail+0x2c>
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20001778 	.word	0x20001778
 8001c84:	2000177c 	.word	0x2000177c

08001c88 <bin_ring_read>:

static uint32_t bin_ring_read(uint8_t *dst, uint32_t want){
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t got=0; __disable_irq();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c96:	b672      	cpsid	i
}
 8001c98:	bf00      	nop
  while (got<want && g_rx_bin_r!=g_rx_bin_w){
 8001c9a:	e014      	b.n	8001cc6 <bin_ring_read+0x3e>
    dst[got++]=g_rx_bin_buf[g_rx_bin_r++]; if (g_rx_bin_r>=RX_BIN_BUF_SZ) g_rx_bin_r=0;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <bin_ring_read+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4912      	ldr	r1, [pc, #72]	@ (8001cec <bin_ring_read+0x64>)
 8001ca4:	600a      	str	r2, [r1, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	1c51      	adds	r1, r2, #1
 8001caa:	60f9      	str	r1, [r7, #12]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	440a      	add	r2, r1
 8001cb0:	490f      	ldr	r1, [pc, #60]	@ (8001cf0 <bin_ring_read+0x68>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	7013      	strb	r3, [r2, #0]
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <bin_ring_read+0x64>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cbe:	d302      	bcc.n	8001cc6 <bin_ring_read+0x3e>
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <bin_ring_read+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
  while (got<want && g_rx_bin_r!=g_rx_bin_w){
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d205      	bcs.n	8001cda <bin_ring_read+0x52>
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <bin_ring_read+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <bin_ring_read+0x6c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d1e0      	bne.n	8001c9c <bin_ring_read+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cda:	b662      	cpsie	i
}
 8001cdc:	bf00      	nop
  }
  __enable_irq(); return got;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	2000177c 	.word	0x2000177c
 8001cf0:	20000f78 	.word	0x20000f78
 8001cf4:	20001778 	.word	0x20001778

08001cf8 <CDC_OnRxData>:

/* Hook chamado pelo usbd_cdc_if.c quando App_IsBinaryMode()=1 */
void CDC_OnRxData(uint8_t *buf, uint32_t len){
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  if (!g_bin_mode || len==0) return;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <CDC_OnRxData+0x74>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d027      	beq.n	8001d5c <CDC_OnRxData+0x64>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d024      	beq.n	8001d5c <CDC_OnRxData+0x64>
  for (uint32_t i=0;i<len;i++){
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e01c      	b.n	8001d52 <CDC_OnRxData+0x5a>
    uint32_t next=g_rx_bin_w+1; if (next>=RX_BIN_BUF_SZ) next=0;
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <CDC_OnRxData+0x78>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d26:	d301      	bcc.n	8001d2c <CDC_OnRxData+0x34>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
    if (next==g_rx_bin_r) break; // overflow (descarta)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <CDC_OnRxData+0x7c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d014      	beq.n	8001d60 <CDC_OnRxData+0x68>
    g_rx_bin_buf[g_rx_bin_w]=buf[i]; g_rx_bin_w=next;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <CDC_OnRxData+0x78>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	7811      	ldrb	r1, [r2, #0]
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <CDC_OnRxData+0x80>)
 8001d44:	54d1      	strb	r1, [r2, r3]
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <CDC_OnRxData+0x78>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	6013      	str	r3, [r2, #0]
  for (uint32_t i=0;i<len;i++){
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3de      	bcc.n	8001d18 <CDC_OnRxData+0x20>
 8001d5a:	e002      	b.n	8001d62 <CDC_OnRxData+0x6a>
  if (!g_bin_mode || len==0) return;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <CDC_OnRxData+0x6a>
    if (next==g_rx_bin_r) break; // overflow (descarta)
 8001d60:	bf00      	nop
  }
}
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000f65 	.word	0x20000f65
 8001d70:	20001778 	.word	0x20001778
 8001d74:	2000177c 	.word	0x2000177c
 8001d78:	20000f78 	.word	0x20000f78

08001d7c <App_IsBinaryMode>:
uint8_t App_IsBinaryMode(void){ return g_bin_mode; }
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <App_IsBinaryMode+0x14>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20000f65 	.word	0x20000f65

08001d94 <process_fpga_upload>:

static void process_fpga_upload(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
  if (!g_bin_mode) return;
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec4 <process_fpga_upload+0x130>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8087 	beq.w	8001eb4 <process_fpga_upload+0x120>
  static uint8_t chunk[1024];

  uint32_t need = (g_bin_bytes_left>sizeof(chunk))?sizeof(chunk):g_bin_bytes_left;
 8001da6:	4b48      	ldr	r3, [pc, #288]	@ (8001ec8 <process_fpga_upload+0x134>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dae:	d802      	bhi.n	8001db6 <process_fpga_upload+0x22>
 8001db0:	4b45      	ldr	r3, [pc, #276]	@ (8001ec8 <process_fpga_upload+0x134>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	e001      	b.n	8001dba <process_fpga_upload+0x26>
 8001db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dba:	613b      	str	r3, [r7, #16]
  if (bin_ring_avail()<need) return; // aguarda mais bytes
 8001dbc:	f7ff ff44 	bl	8001c48 <bin_ring_avail>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d877      	bhi.n	8001eb8 <process_fpga_upload+0x124>

  uint32_t got = bin_ring_read(chunk, need); if (!got) return;
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	4840      	ldr	r0, [pc, #256]	@ (8001ecc <process_fpga_upload+0x138>)
 8001dcc:	f7ff ff5c 	bl	8001c88 <bin_ring_read>
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d071      	beq.n	8001ebc <process_fpga_upload+0x128>

  // CRC
  uint32_t w=got/4, rem=got%4;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	607b      	str	r3, [r7, #4]
  if (w) HAL_CRC_Accumulate(&hcrc,(uint32_t*)chunk,w);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <process_fpga_upload+0x62>
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <process_fpga_upload+0x138>)
 8001df0:	4837      	ldr	r0, [pc, #220]	@ (8001ed0 <process_fpga_upload+0x13c>)
 8001df2:	f002 fe9c 	bl	8004b2e <HAL_CRC_Accumulate>
  if (rem){ uint8_t pad[4]={0,0,0,0}; for (uint32_t i=0;i<rem;i++) pad[i]=chunk[4*w+i]; HAL_CRC_Accumulate(&hcrc,(uint32_t*)pad,1); }
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01c      	beq.n	8001e36 <process_fpga_upload+0xa2>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e00d      	b.n	8001e22 <process_fpga_upload+0x8e>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ecc <process_fpga_upload+0x138>)
 8001e10:	5cd1      	ldrb	r1, [r2, r3]
 8001e12:	463a      	mov	r2, r7
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	460a      	mov	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3ed      	bcc.n	8001e06 <process_fpga_upload+0x72>
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4827      	ldr	r0, [pc, #156]	@ (8001ed0 <process_fpga_upload+0x13c>)
 8001e32:	f002 fe7c 	bl	8004b2e <HAL_CRC_Accumulate>

  // SPI TX
  if (HAL_SPI_Transmit(&hspi1, chunk, got, HAL_MAX_DELAY)!=HAL_OK){
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	4923      	ldr	r1, [pc, #140]	@ (8001ecc <process_fpga_upload+0x138>)
 8001e40:	4824      	ldr	r0, [pc, #144]	@ (8001ed4 <process_fpga_upload+0x140>)
 8001e42:	f006 fc3e 	bl	80086c2 <HAL_SPI_Transmit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <process_fpga_upload+0xce>
    printf("ERROR: SPI TX\r\n"); g_bin_mode=0; fpga_cs_high(); put_prompt(); return;
 8001e4c:	4822      	ldr	r0, [pc, #136]	@ (8001ed8 <process_fpga_upload+0x144>)
 8001e4e:	f00d fb09 	bl	800f464 <puts>
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <process_fpga_upload+0x130>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	f7ff fec0 	bl	8001bdc <fpga_cs_high>
 8001e5c:	f7ff fdb0 	bl	80019c0 <put_prompt>
 8001e60:	e02d      	b.n	8001ebe <process_fpga_upload+0x12a>
  }

  g_bin_bytes_left -= got;
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <process_fpga_upload+0x134>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <process_fpga_upload+0x134>)
 8001e6c:	6013      	str	r3, [r2, #0]
  if (g_bin_bytes_left==0){
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <process_fpga_upload+0x134>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d123      	bne.n	8001ebe <process_fpga_upload+0x12a>
    g_bin_crc_calc = hcrc.Instance->DR;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <process_fpga_upload+0x13c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <process_fpga_upload+0x148>)
 8001e7e:	6013      	str	r3, [r2, #0]
    fpga_cs_high(); g_bin_mode=0;
 8001e80:	f7ff feac 	bl	8001bdc <fpga_cs_high>
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <process_fpga_upload+0x130>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
    if (g_bin_crc_calc==g_bin_crc_expect) printf("FPGA_UPLOAD_OK\r\n");
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <process_fpga_upload+0x148>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <process_fpga_upload+0x14c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d103      	bne.n	8001e9e <process_fpga_upload+0x10a>
 8001e96:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <process_fpga_upload+0x150>)
 8001e98:	f00d fae4 	bl	800f464 <puts>
 8001e9c:	e007      	b.n	8001eae <process_fpga_upload+0x11a>
    else printf("FPGA_UPLOAD_BADCRC exp:%lu got:%lu\r\n",(unsigned long)g_bin_crc_expect,(unsigned long)g_bin_crc_calc);
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <process_fpga_upload+0x14c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8001edc <process_fpga_upload+0x148>)
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <process_fpga_upload+0x154>)
 8001eaa:	f00d fa73 	bl	800f394 <iprintf>
    put_prompt();
 8001eae:	f7ff fd87 	bl	80019c0 <put_prompt>
 8001eb2:	e004      	b.n	8001ebe <process_fpga_upload+0x12a>
  if (!g_bin_mode) return;
 8001eb4:	bf00      	nop
 8001eb6:	e002      	b.n	8001ebe <process_fpga_upload+0x12a>
  if (bin_ring_avail()<need) return; // aguarda mais bytes
 8001eb8:	bf00      	nop
 8001eba:	e000      	b.n	8001ebe <process_fpga_upload+0x12a>
  uint32_t got = bin_ring_read(chunk, need); if (!got) return;
 8001ebc:	bf00      	nop
  }
}
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000f65 	.word	0x20000f65
 8001ec8:	20000f6c 	.word	0x20000f6c
 8001ecc:	20001784 	.word	0x20001784
 8001ed0:	20000404 	.word	0x20000404
 8001ed4:	20000474 	.word	0x20000474
 8001ed8:	080113dc 	.word	0x080113dc
 8001edc:	20000f74 	.word	0x20000f74
 8001ee0:	20000f70 	.word	0x20000f70
 8001ee4:	080113ec 	.word	0x080113ec
 8001ee8:	080113fc 	.word	0x080113fc

08001eec <cli_help>:

  {"NOOP",      cli_noop,      "No operation"},
};

/* Helpers CLI */
static void cli_help(int argc, char**argv){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  printf("Comandos:\r\n");
 8001ef6:	4813      	ldr	r0, [pc, #76]	@ (8001f44 <cli_help+0x58>)
 8001ef8:	f00d fab4 	bl	800f464 <puts>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++) printf("  %-12s %s\r\n", cmds[i].name, cmds[i].help);
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e017      	b.n	8001f32 <cli_help+0x46>
 8001f02:	4911      	ldr	r1, [pc, #68]	@ (8001f48 <cli_help+0x5c>)
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <cli_help+0x5c>)
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4403      	add	r3, r0
 8001f20:	3308      	adds	r3, #8
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <cli_help+0x60>)
 8001f28:	f00d fa34 	bl	800f394 <iprintf>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b13      	cmp	r3, #19
 8001f36:	d9e4      	bls.n	8001f02 <cli_help+0x16>
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08011748 	.word	0x08011748
 8001f48:	08011bf8 	.word	0x08011bf8
 8001f4c:	08011754 	.word	0x08011754

08001f50 <cli_ping>:
static void cli_ping(int argc, char**argv){ printf("PONG\r\n"); }
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <cli_ping+0x18>)
 8001f5c:	f00d fa82 	bl	800f464 <puts>
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	08011764 	.word	0x08011764

08001f6c <cli_led>:

static void cli_led(int argc, char**argv){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: LED <n> <0|1>\r\n"); return; }
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	dc03      	bgt.n	8001f84 <cli_led+0x18>
 8001f7c:	4828      	ldr	r0, [pc, #160]	@ (8002020 <cli_led+0xb4>)
 8001f7e:	f00d fa71 	bl	800f464 <puts>
 8001f82:	e049      	b.n	8002018 <cli_led+0xac>
  int n=atoi(argv[1]), v=atoi(argv[2]);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3304      	adds	r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00c f9da 	bl	800e344 <atoi>
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3308      	adds	r3, #8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f00c f9d3 	bl	800e344 <atoi>
 8001f9e:	60b8      	str	r0, [r7, #8]
  GPIO_TypeDef *port=NULL; uint16_t pin=0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	827b      	strh	r3, [r7, #18]
  switch(n){
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d821      	bhi.n	8001ff2 <cli_led+0x86>
 8001fae:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <cli_led+0x48>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fdd 	.word	0x08001fdd
 8001fc0:	08001fe9 	.word	0x08001fe9
    case 0: port=LED_RED_GPIO_Port;    pin=LED_RED_Pin;    break;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <cli_led+0xb8>)
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fcc:	827b      	strh	r3, [r7, #18]
 8001fce:	e014      	b.n	8001ffa <cli_led+0x8e>
    case 1: port=LED_GREEN_GPIO_Port;  pin=LED_GREEN_Pin;  break;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <cli_led+0xb8>)
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fd8:	827b      	strh	r3, [r7, #18]
 8001fda:	e00e      	b.n	8001ffa <cli_led+0x8e>
    case 2: port=LED_YELLOW_GPIO_Port; pin=LED_YELLOW_Pin; break;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <cli_led+0xb8>)
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fe4:	827b      	strh	r3, [r7, #18]
 8001fe6:	e008      	b.n	8001ffa <cli_led+0x8e>
    case 3: port=LED_BLUE_GPIO_Port;   pin=LED_BLUE_Pin;   break;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <cli_led+0xbc>)
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	2310      	movs	r3, #16
 8001fee:	827b      	strh	r3, [r7, #18]
 8001ff0:	e003      	b.n	8001ffa <cli_led+0x8e>
    default: printf("ERROR: LED invalido\r\n"); return;
 8001ff2:	480e      	ldr	r0, [pc, #56]	@ (800202c <cli_led+0xc0>)
 8001ff4:	f00d fa36 	bl	800f464 <puts>
 8001ff8:	e00e      	b.n	8002018 <cli_led+0xac>
  }
  HAL_GPIO_WritePin(port,pin,v?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	8a7b      	ldrh	r3, [r7, #18]
 800200a:	4619      	mov	r1, r3
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f003 fa7b 	bl	8005508 <HAL_GPIO_WritePin>
  printf("OK\r\n");
 8002012:	4807      	ldr	r0, [pc, #28]	@ (8002030 <cli_led+0xc4>)
 8002014:	f00d fa26 	bl	800f464 <puts>
}
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	0801176c 	.word	0x0801176c
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	08011784 	.word	0x08011784
 8002030:	0801179c 	.word	0x0801179c

08002034 <cli_accel>:

static void cli_accel(int argc, char**argv){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: ACCEL <0|1>\r\n"); return; }
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b01      	cmp	r3, #1
 8002042:	dc03      	bgt.n	800204c <cli_accel+0x18>
 8002044:	4814      	ldr	r0, [pc, #80]	@ (8002098 <cli_accel+0x64>)
 8002046:	f00d fa0d 	bl	800f464 <puts>
 800204a:	e022      	b.n	8002092 <cli_accel+0x5e>
  int on=atoi(argv[1]);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f00c f976 	bl	800e344 <atoi>
 8002058:	60f8      	str	r0, [r7, #12]
  if (on){
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <cli_accel+0x52>
    if (!MMA7660_Init(&hi2c1, MMA_AVDD_GPIO_Port, MMA_AVDD_Pin)){ printf("ERROR: MMA7660 init\r\n"); return; }
 8002060:	2220      	movs	r2, #32
 8002062:	490e      	ldr	r1, [pc, #56]	@ (800209c <cli_accel+0x68>)
 8002064:	480e      	ldr	r0, [pc, #56]	@ (80020a0 <cli_accel+0x6c>)
 8002066:	f7fe fff2 	bl	800104e <MMA7660_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <cli_accel+0x4a>
 8002076:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <cli_accel+0x70>)
 8002078:	f00d f9f4 	bl	800f464 <puts>
 800207c:	e009      	b.n	8002092 <cli_accel+0x5e>
    g_app_state=STATE_STREAMING_ACCEL;
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <cli_accel+0x74>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e002      	b.n	800208c <cli_accel+0x58>
  } else g_app_state=STATE_IDLE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <cli_accel+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  printf("OK\r\n");
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <cli_accel+0x78>)
 800208e:	f00d f9e9 	bl	800f464 <puts>
}
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	080117a0 	.word	0x080117a0
 800209c:	40020400 	.word	0x40020400
 80020a0:	20000420 	.word	0x20000420
 80020a4:	080117b4 	.word	0x080117b4
 80020a8:	2000055c 	.word	0x2000055c
 80020ac:	0801179c 	.word	0x0801179c

080020b0 <cli_kalman>:

static void cli_kalman(int argc, char**argv){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: KALMAN <0|1>\r\n"); return; }
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	dc03      	bgt.n	80020c8 <cli_kalman+0x18>
 80020c0:	4809      	ldr	r0, [pc, #36]	@ (80020e8 <cli_kalman+0x38>)
 80020c2:	f00d f9cf 	bl	800f464 <puts>
 80020c6:	e00c      	b.n	80020e2 <cli_kalman+0x32>
  g_kalman_on=(uint8_t)atoi(argv[1]); printf("OK\r\n");
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00c f938 	bl	800e344 <atoi>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <cli_kalman+0x3c>)
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <cli_kalman+0x40>)
 80020de:	f00d f9c1 	bl	800f464 <puts>
}
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	080117cc 	.word	0x080117cc
 80020ec:	20000034 	.word	0x20000034
 80020f0:	0801179c 	.word	0x0801179c

080020f4 <cli_kalman_set>:
static void cli_kalman_set(int argc, char**argv){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: KALMAN_SET <Q> <R>\r\n"); return; }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	dc03      	bgt.n	800210c <cli_kalman_set+0x18>
 8002104:	4818      	ldr	r0, [pc, #96]	@ (8002168 <cli_kalman_set+0x74>)
 8002106:	f00d f9ad 	bl	800f464 <puts>
 800210a:	e02a      	b.n	8002162 <cli_kalman_set+0x6e>
  float Q=strtof(argv[1],NULL), R=strtof(argv[2],NULL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3304      	adds	r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f00c ff1b 	bl	800ef50 <strtof>
 800211a:	ed87 0a03 	vstr	s0, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3308      	adds	r3, #8
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f00c ff12 	bl	800ef50 <strtof>
 800212c:	ed87 0a02 	vstr	s0, [r7, #8]
  kx.Q=ky.Q=kz.Q=Q; kx.R=ky.R=kz.R=R; printf("OK\r\n");
 8002130:	4a0e      	ldr	r2, [pc, #56]	@ (800216c <cli_kalman_set+0x78>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <cli_kalman_set+0x78>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <cli_kalman_set+0x7c>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <cli_kalman_set+0x7c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0c      	ldr	r2, [pc, #48]	@ (8002174 <cli_kalman_set+0x80>)
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <cli_kalman_set+0x78>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6053      	str	r3, [r2, #4]
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <cli_kalman_set+0x78>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <cli_kalman_set+0x7c>)
 8002152:	6053      	str	r3, [r2, #4]
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <cli_kalman_set+0x7c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <cli_kalman_set+0x80>)
 800215a:	6053      	str	r3, [r2, #4]
 800215c:	4806      	ldr	r0, [pc, #24]	@ (8002178 <cli_kalman_set+0x84>)
 800215e:	f00d f981 	bl	800f464 <puts>
}
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	080117e4 	.word	0x080117e4
 800216c:	20000024 	.word	0x20000024
 8002170:	20000014 	.word	0x20000014
 8002174:	20000004 	.word	0x20000004
 8002178:	0801179c 	.word	0x0801179c

0800217c <cli_dac>:

static void cli_dac(int argc, char**argv){
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: DAC <freq|0>\r\n"); return; }
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	dc03      	bgt.n	8002194 <cli_dac+0x18>
 800218c:	4823      	ldr	r0, [pc, #140]	@ (800221c <cli_dac+0xa0>)
 800218e:	f00d f969 	bl	800f464 <puts>
 8002192:	e040      	b.n	8002216 <cli_dac+0x9a>
  float f=strtof(argv[1],NULL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	3304      	adds	r3, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f00c fed7 	bl	800ef50 <strtof>
 80021a2:	ed87 0a03 	vstr	s0, [r7, #12]
  if (f>0.f){
 80021a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd2b      	ble.n	800220c <cli_dac+0x90>
    g_wave=WT_SINE; fill_lut(g_wave);
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <cli_dac+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <cli_dac+0xa4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa36 	bl	8001630 <fill_lut>
    float fmax=fmax_from_fs(DAC_FS_MAX_HZ, LUT_N); if (f>fmax) f=fmax;
 80021c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002224 <cli_dac+0xa8>
 80021c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	f7ff f8a0 	bl	8001314 <fmax_from_fs>
 80021d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80021d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80021e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	dd01      	ble.n	80021ee <cli_dac+0x72>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	60fb      	str	r3, [r7, #12]
    if (dac_start(f)) printf("OK\r\n"); else printf("ERROR: DAC start\r\n");
 80021ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80021f2:	f7ff fb3d 	bl	8001870 <dac_start>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <cli_dac+0x88>
 80021fc:	480a      	ldr	r0, [pc, #40]	@ (8002228 <cli_dac+0xac>)
 80021fe:	f00d f931 	bl	800f464 <puts>
 8002202:	e008      	b.n	8002216 <cli_dac+0x9a>
 8002204:	4809      	ldr	r0, [pc, #36]	@ (800222c <cli_dac+0xb0>)
 8002206:	f00d f92d 	bl	800f464 <puts>
 800220a:	e004      	b.n	8002216 <cli_dac+0x9a>
  } else { dac_stop(); printf("OK\r\n"); }
 800220c:	f7ff fbc8 	bl	80019a0 <dac_stop>
 8002210:	4805      	ldr	r0, [pc, #20]	@ (8002228 <cli_dac+0xac>)
 8002212:	f00d f927 	bl	800f464 <puts>
}
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08011800 	.word	0x08011800
 8002220:	20000760 	.word	0x20000760
 8002224:	49742400 	.word	0x49742400
 8002228:	0801179c 	.word	0x0801179c
 800222c:	08011818 	.word	0x08011818

08002230 <cli_wave>:

static void cli_wave(int argc, char**argv){
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: WAVE <SINE|SQUARE|TRI|SAWUP|SAWDN> <freq>\r\n"); return; }
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b02      	cmp	r3, #2
 800223e:	dc03      	bgt.n	8002248 <cli_wave+0x18>
 8002240:	4847      	ldr	r0, [pc, #284]	@ (8002360 <cli_wave+0x130>)
 8002242:	f00d f90f 	bl	800f464 <puts>
 8002246:	e087      	b.n	8002358 <cli_wave+0x128>
  float f=strtof(argv[2],NULL); if (f<=0){ printf("ERROR: freq invalida\r\n"); return; }
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3308      	adds	r3, #8
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00c fe7d 	bl	800ef50 <strtof>
 8002256:	ed87 0a03 	vstr	s0, [r7, #12]
 800225a:	edd7 7a03 	vldr	s15, [r7, #12]
 800225e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	d803      	bhi.n	8002270 <cli_wave+0x40>
 8002268:	483e      	ldr	r0, [pc, #248]	@ (8002364 <cli_wave+0x134>)
 800226a:	f00d f8fb 	bl	800f464 <puts>
 800226e:	e073      	b.n	8002358 <cli_wave+0x128>
  if      (!strcmp(argv[1],"SINE"))   g_wave=WT_SINE;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	3304      	adds	r3, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	493c      	ldr	r1, [pc, #240]	@ (8002368 <cli_wave+0x138>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7fd ffa9 	bl	80001d0 <strcmp>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <cli_wave+0x5c>
 8002284:	4b39      	ldr	r3, [pc, #228]	@ (800236c <cli_wave+0x13c>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e03b      	b.n	8002304 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SQUARE")) g_wave=WT_SQUARE;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4937      	ldr	r1, [pc, #220]	@ (8002370 <cli_wave+0x140>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7fd ff9b 	bl	80001d0 <strcmp>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <cli_wave+0x78>
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <cli_wave+0x13c>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e02d      	b.n	8002304 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"TRI"))    g_wave=WT_TRI;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3304      	adds	r3, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4931      	ldr	r1, [pc, #196]	@ (8002374 <cli_wave+0x144>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ff8d 	bl	80001d0 <strcmp>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <cli_wave+0x94>
 80022bc:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <cli_wave+0x13c>)
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e01f      	b.n	8002304 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SAWUP"))  g_wave=WT_SAWUP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3304      	adds	r3, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	492b      	ldr	r1, [pc, #172]	@ (8002378 <cli_wave+0x148>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ff7f 	bl	80001d0 <strcmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <cli_wave+0xb0>
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <cli_wave+0x13c>)
 80022da:	2203      	movs	r2, #3
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e011      	b.n	8002304 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SAWDN"))  g_wave=WT_SAWDN;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4925      	ldr	r1, [pc, #148]	@ (800237c <cli_wave+0x14c>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fd ff71 	bl	80001d0 <strcmp>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <cli_wave+0xcc>
 80022f4:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <cli_wave+0x13c>)
 80022f6:	2204      	movs	r2, #4
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e003      	b.n	8002304 <cli_wave+0xd4>
  else { printf("ERROR: tipo invalido\r\n"); return; }
 80022fc:	4820      	ldr	r0, [pc, #128]	@ (8002380 <cli_wave+0x150>)
 80022fe:	f00d f8b1 	bl	800f464 <puts>
 8002302:	e029      	b.n	8002358 <cli_wave+0x128>
  fill_lut(g_wave); dac_stop();
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <cli_wave+0x13c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f991 	bl	8001630 <fill_lut>
 800230e:	f7ff fb47 	bl	80019a0 <dac_stop>
  float fmax=fmax_from_fs(DAC_FS_MAX_HZ, LUT_N); if (f>fmax) f=fmax;
 8002312:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002384 <cli_wave+0x154>
 8002316:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800231a:	eeb0 0a67 	vmov.f32	s0, s15
 800231e:	f7fe fff9 	bl	8001314 <fmax_from_fs>
 8002322:	ed87 0a02 	vstr	s0, [r7, #8]
 8002326:	ed97 7a03 	vldr	s14, [r7, #12]
 800232a:	edd7 7a02 	vldr	s15, [r7, #8]
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	dd01      	ble.n	800233c <cli_wave+0x10c>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60fb      	str	r3, [r7, #12]
  if (dac_start(f)) printf("OK\r\n"); else printf("ERROR: DAC start\r\n");
 800233c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002340:	f7ff fa96 	bl	8001870 <dac_start>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <cli_wave+0x122>
 800234a:	480f      	ldr	r0, [pc, #60]	@ (8002388 <cli_wave+0x158>)
 800234c:	f00d f88a 	bl	800f464 <puts>
 8002350:	e002      	b.n	8002358 <cli_wave+0x128>
 8002352:	480e      	ldr	r0, [pc, #56]	@ (800238c <cli_wave+0x15c>)
 8002354:	f00d f886 	bl	800f464 <puts>
}
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0801182c 	.word	0x0801182c
 8002364:	08011860 	.word	0x08011860
 8002368:	08011878 	.word	0x08011878
 800236c:	20000760 	.word	0x20000760
 8002370:	08011880 	.word	0x08011880
 8002374:	08011888 	.word	0x08011888
 8002378:	0801188c 	.word	0x0801188c
 800237c:	08011894 	.word	0x08011894
 8002380:	0801189c 	.word	0x0801189c
 8002384:	49742400 	.word	0x49742400
 8002388:	0801179c 	.word	0x0801179c
 800238c:	08011818 	.word	0x08011818

08002390 <cli_wavewin>:

static void cli_wavewin(int argc, char**argv){
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: WAVEWIN <NONE|HANN|BLACKMAN|NUTTALL> <taper%%>\r\n"); return; }
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	dc03      	bgt.n	80023a8 <cli_wavewin+0x18>
 80023a0:	4833      	ldr	r0, [pc, #204]	@ (8002470 <cli_wavewin+0xe0>)
 80023a2:	f00c fff7 	bl	800f394 <iprintf>
 80023a6:	e05f      	b.n	8002468 <cli_wavewin+0xd8>
  if      (!strcmp(argv[1],"NONE"))     g_win=WIN_NONE;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3304      	adds	r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4931      	ldr	r1, [pc, #196]	@ (8002474 <cli_wavewin+0xe4>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fd ff0d 	bl	80001d0 <strcmp>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <cli_wavewin+0x34>
 80023bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002478 <cli_wavewin+0xe8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e02d      	b.n	8002420 <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"HANN"))     g_win=WIN_HANN;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	492c      	ldr	r1, [pc, #176]	@ (800247c <cli_wavewin+0xec>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fd feff 	bl	80001d0 <strcmp>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <cli_wavewin+0x50>
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <cli_wavewin+0xe8>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e01f      	b.n	8002420 <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"BLACKMAN")) g_win=WIN_BLACKMAN;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4926      	ldr	r1, [pc, #152]	@ (8002480 <cli_wavewin+0xf0>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fd fef1 	bl	80001d0 <strcmp>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <cli_wavewin+0x6c>
 80023f4:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <cli_wavewin+0xe8>)
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e011      	b.n	8002420 <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"NUTTALL"))  g_win=WIN_NUTTALL;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	3304      	adds	r3, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4920      	ldr	r1, [pc, #128]	@ (8002484 <cli_wavewin+0xf4>)
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd fee3 	bl	80001d0 <strcmp>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <cli_wavewin+0x88>
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <cli_wavewin+0xe8>)
 8002412:	2203      	movs	r2, #3
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e003      	b.n	8002420 <cli_wavewin+0x90>
  else { printf("ERROR: janela invalida\r\n"); return; }
 8002418:	481b      	ldr	r0, [pc, #108]	@ (8002488 <cli_wavewin+0xf8>)
 800241a:	f00d f823 	bl	800f464 <puts>
 800241e:	e023      	b.n	8002468 <cli_wavewin+0xd8>
  float t=strtof(argv[2],NULL); if(t<0) t=0; if(t>100) t=100; g_taper_percent=t;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3308      	adds	r3, #8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f00c fd91 	bl	800ef50 <strtof>
 800242e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002432:	edd7 7a03 	vldr	s15, [r7, #12]
 8002436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d502      	bpl.n	8002446 <cli_wavewin+0xb6>
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	edd7 7a03 	vldr	s15, [r7, #12]
 800244a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800248c <cli_wavewin+0xfc>
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	dd01      	ble.n	800245c <cli_wavewin+0xcc>
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <cli_wavewin+0x100>)
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <cli_wavewin+0x104>)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6013      	str	r3, [r2, #0]
  printf("OK\r\n");
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <cli_wavewin+0x108>)
 8002464:	f00c fffe 	bl	800f464 <puts>
}
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	080118b4 	.word	0x080118b4
 8002474:	080118ec 	.word	0x080118ec
 8002478:	20000761 	.word	0x20000761
 800247c:	080118f4 	.word	0x080118f4
 8002480:	080118fc 	.word	0x080118fc
 8002484:	08011908 	.word	0x08011908
 8002488:	08011910 	.word	0x08011910
 800248c:	42c80000 	.word	0x42c80000
 8002490:	42c80000 	.word	0x42c80000
 8002494:	20000038 	.word	0x20000038
 8002498:	0801179c 	.word	0x0801179c

0800249c <cli_sys>:

static void cli_sys(int argc, char**argv){
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
  if (argc>=2){
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	dd36      	ble.n	800251a <cli_sys+0x7e>
    if (!strcmp(argv[1],"RESET")){ printf("RESETTING...\r\n"); HAL_Delay(20); NVIC_SystemReset(); return; }
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3304      	adds	r3, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4930      	ldr	r1, [pc, #192]	@ (8002574 <cli_sys+0xd8>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fd fe8b 	bl	80001d0 <strcmp>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <cli_sys+0x34>
 80024c0:	482d      	ldr	r0, [pc, #180]	@ (8002578 <cli_sys+0xdc>)
 80024c2:	f00c ffcf 	bl	800f464 <puts>
 80024c6:	2014      	movs	r0, #20
 80024c8:	f001 fbe6 	bl	8003c98 <HAL_Delay>
 80024cc:	f7fe fec0 	bl	8001250 <__NVIC_SystemReset>
    if (!strcmp(argv[1],"HB") && argc>=3){
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4929      	ldr	r1, [pc, #164]	@ (800257c <cli_sys+0xe0>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fe79 	bl	80001d0 <strcmp>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11a      	bne.n	800251a <cli_sys+0x7e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	dd17      	ble.n	800251a <cli_sys+0x7e>
      g_hb_enable=(uint8_t)atoi(argv[2]); if (!g_hb_enable) HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3308      	adds	r3, #8
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f00b ff27 	bl	800e344 <atoi>
 80024f6:	4603      	mov	r3, r0
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <cli_sys+0xe4>)
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <cli_sys+0xe4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <cli_sys+0x76>
 8002508:	2200      	movs	r2, #0
 800250a:	2110      	movs	r1, #16
 800250c:	481d      	ldr	r0, [pc, #116]	@ (8002584 <cli_sys+0xe8>)
 800250e:	f002 fffb 	bl	8005508 <HAL_GPIO_WritePin>
      printf("OK\r\n"); return;
 8002512:	481d      	ldr	r0, [pc, #116]	@ (8002588 <cli_sys+0xec>)
 8002514:	f00c ffa6 	bl	800f464 <puts>
 8002518:	e028      	b.n	800256c <cli_sys+0xd0>
    }
  }
  printf("SYS: SYSCLK=%lu, PCLK1=%lu, PCLK2=%lu, HB=%u, fmax=%.1fHz\r\n",
 800251a:	f005 ff4f 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 800251e:	4604      	mov	r4, r0
 8002520:	f006 f81e 	bl	8008560 <HAL_RCC_GetPCLK1Freq>
 8002524:	4605      	mov	r5, r0
 8002526:	f006 f82f 	bl	8008588 <HAL_RCC_GetPCLK2Freq>
 800252a:	4606      	mov	r6, r0
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <cli_sys+0xe4>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	607b      	str	r3, [r7, #4]
    HAL_RCC_GetSysClockFreq(), HAL_RCC_GetPCLK1Freq(), HAL_RCC_GetPCLK2Freq(),
    (unsigned)g_hb_enable, fmax_from_fs(DAC_FS_MAX_HZ,LUT_N));
 8002534:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800258c <cli_sys+0xf0>
 8002538:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	f7fe fee8 	bl	8001314 <fmax_from_fs>
 8002544:	ee10 3a10 	vmov	r3, s0
  printf("SYS: SYSCLK=%lu, PCLK1=%lu, PCLK2=%lu, HB=%u, fmax=%.1fHz\r\n",
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f805 	bl	8000558 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	4633      	mov	r3, r6
 800255c:	462a      	mov	r2, r5
 800255e:	4621      	mov	r1, r4
 8002560:	480b      	ldr	r0, [pc, #44]	@ (8002590 <cli_sys+0xf4>)
 8002562:	f00c ff17 	bl	800f394 <iprintf>
  printf("OK\r\n");
 8002566:	4808      	ldr	r0, [pc, #32]	@ (8002588 <cli_sys+0xec>)
 8002568:	f00c ff7c 	bl	800f464 <puts>
}
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002572:	bf00      	nop
 8002574:	08011928 	.word	0x08011928
 8002578:	08011930 	.word	0x08011930
 800257c:	08011940 	.word	0x08011940
 8002580:	20000000 	.word	0x20000000
 8002584:	40020400 	.word	0x40020400
 8002588:	0801179c 	.word	0x0801179c
 800258c:	49742400 	.word	0x49742400
 8002590:	08011944 	.word	0x08011944

08002594 <cli_adc_start>:

/* ADC: streaming DMA (ADC1) */
static void cli_adc_start(int argc, char**argv){ adc1_start_stream(); printf("OK\r\n"); }
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	f7ff faa5 	bl	8001aec <adc1_start_stream>
 80025a2:	4803      	ldr	r0, [pc, #12]	@ (80025b0 <cli_adc_start+0x1c>)
 80025a4:	f00c ff5e 	bl	800f464 <puts>
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	0801179c 	.word	0x0801179c

080025b4 <cli_adc_stop>:
static void cli_adc_stop(int argc, char**argv){ adc1_stop_stream();  printf("OK\r\n"); }
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	f7ff faad 	bl	8001b1c <adc1_stop_stream>
 80025c2:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <cli_adc_stop+0x1c>)
 80025c4:	f00c ff4e 	bl	800f464 <puts>
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	0801179c 	.word	0x0801179c

080025d4 <samp_to_hal>:

/* ADC: configurar ADC2/ADC3 (canal e sample time) */
static uint32_t samp_to_hal(unsigned s){
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  switch(s){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80025e2:	d036      	beq.n	8002652 <samp_to_hal+0x7e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80025ea:	d834      	bhi.n	8002656 <samp_to_hal+0x82>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b90      	cmp	r3, #144	@ 0x90
 80025f0:	d02d      	beq.n	800264e <samp_to_hal+0x7a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b90      	cmp	r3, #144	@ 0x90
 80025f6:	d82e      	bhi.n	8002656 <samp_to_hal+0x82>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b70      	cmp	r3, #112	@ 0x70
 80025fc:	d025      	beq.n	800264a <samp_to_hal+0x76>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b70      	cmp	r3, #112	@ 0x70
 8002602:	d828      	bhi.n	8002656 <samp_to_hal+0x82>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b54      	cmp	r3, #84	@ 0x54
 8002608:	d01d      	beq.n	8002646 <samp_to_hal+0x72>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b54      	cmp	r3, #84	@ 0x54
 800260e:	d822      	bhi.n	8002656 <samp_to_hal+0x82>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b38      	cmp	r3, #56	@ 0x38
 8002614:	d015      	beq.n	8002642 <samp_to_hal+0x6e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b38      	cmp	r3, #56	@ 0x38
 800261a:	d81c      	bhi.n	8002656 <samp_to_hal+0x82>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b1c      	cmp	r3, #28
 8002620:	d00d      	beq.n	800263e <samp_to_hal+0x6a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b1c      	cmp	r3, #28
 8002626:	d816      	bhi.n	8002656 <samp_to_hal+0x82>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d003      	beq.n	8002636 <samp_to_hal+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d002      	beq.n	800263a <samp_to_hal+0x66>
 8002634:	e00f      	b.n	8002656 <samp_to_hal+0x82>
    case 3: return ADC_SAMPLETIME_3CYCLES;
 8002636:	2300      	movs	r3, #0
 8002638:	e00e      	b.n	8002658 <samp_to_hal+0x84>
    case 15: return ADC_SAMPLETIME_15CYCLES;
 800263a:	2301      	movs	r3, #1
 800263c:	e00c      	b.n	8002658 <samp_to_hal+0x84>
    case 28: return ADC_SAMPLETIME_28CYCLES;
 800263e:	2302      	movs	r3, #2
 8002640:	e00a      	b.n	8002658 <samp_to_hal+0x84>
    case 56: return ADC_SAMPLETIME_56CYCLES;
 8002642:	2303      	movs	r3, #3
 8002644:	e008      	b.n	8002658 <samp_to_hal+0x84>
    case 84: return ADC_SAMPLETIME_84CYCLES;
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <samp_to_hal+0x84>
    case 112: return ADC_SAMPLETIME_112CYCLES;
 800264a:	2305      	movs	r3, #5
 800264c:	e004      	b.n	8002658 <samp_to_hal+0x84>
    case 144: return ADC_SAMPLETIME_144CYCLES;
 800264e:	2306      	movs	r3, #6
 8002650:	e002      	b.n	8002658 <samp_to_hal+0x84>
    case 480: return ADC_SAMPLETIME_480CYCLES;
 8002652:	2307      	movs	r3, #7
 8002654:	e000      	b.n	8002658 <samp_to_hal+0x84>
    default: return ADC_SAMPLETIME_15CYCLES;
 8002656:	2301      	movs	r3, #1
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <cli_adc_cfg>:
static void cli_adc_cfg(int argc, char**argv){
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  if (argc<4){ printf("ERROR: ADC_CFG <2|3> <channel#> <samp>\r\n"); return; }
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	dc03      	bgt.n	800267c <cli_adc_cfg+0x18>
 8002674:	4820      	ldr	r0, [pc, #128]	@ (80026f8 <cli_adc_cfg+0x94>)
 8002676:	f00c fef5 	bl	800f464 <puts>
 800267a:	e039      	b.n	80026f0 <cli_adc_cfg+0x8c>
  int which=atoi(argv[1]); unsigned ch=(unsigned)strtoul(argv[2],NULL,0); unsigned smp=(unsigned)strtoul(argv[3],NULL,0);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3304      	adds	r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f00b fe5e 	bl	800e344 <atoi>
 8002688:	6178      	str	r0, [r7, #20]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3308      	adds	r3, #8
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f00c fdb1 	bl	800f1fc <strtoul>
 800269a:	6138      	str	r0, [r7, #16]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00c fda8 	bl	800f1fc <strtoul>
 80026ac:	60f8      	str	r0, [r7, #12]
  uint32_t smphal=samp_to_hal(smp);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff ff90 	bl	80025d4 <samp_to_hal>
 80026b4:	60b8      	str	r0, [r7, #8]
  if (which==2){ g_adc2_cfg.channel=ch; g_adc2_cfg.sample=smphal; printf("OK\r\n"); }
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d109      	bne.n	80026d0 <cli_adc_cfg+0x6c>
 80026bc:	4a0f      	ldr	r2, [pc, #60]	@ (80026fc <cli_adc_cfg+0x98>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4a0e      	ldr	r2, [pc, #56]	@ (80026fc <cli_adc_cfg+0x98>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6053      	str	r3, [r2, #4]
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <cli_adc_cfg+0x9c>)
 80026ca:	f00c fecb 	bl	800f464 <puts>
 80026ce:	e00f      	b.n	80026f0 <cli_adc_cfg+0x8c>
  else if (which==3){ g_adc3_cfg.channel=ch; g_adc3_cfg.sample=smphal; printf("OK\r\n"); }
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d109      	bne.n	80026ea <cli_adc_cfg+0x86>
 80026d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <cli_adc_cfg+0xa0>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <cli_adc_cfg+0xa0>)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6053      	str	r3, [r2, #4]
 80026e2:	4807      	ldr	r0, [pc, #28]	@ (8002700 <cli_adc_cfg+0x9c>)
 80026e4:	f00c febe 	bl	800f464 <puts>
 80026e8:	e002      	b.n	80026f0 <cli_adc_cfg+0x8c>
  else printf("ERROR: ADC invalido\r\n");
 80026ea:	4807      	ldr	r0, [pc, #28]	@ (8002708 <cli_adc_cfg+0xa4>)
 80026ec:	f00c feba 	bl	800f464 <puts>
}
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08011980 	.word	0x08011980
 80026fc:	2000003c 	.word	0x2000003c
 8002700:	0801179c 	.word	0x0801179c
 8002704:	20000044 	.word	0x20000044
 8002708:	080119a8 	.word	0x080119a8

0800270c <cli_adc_read>:

/* ADC: leitura single-shot (ADC2/ADC3) */
static void cli_adc_read(int argc, char**argv){
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: ADC_READ <2|3> [N]\r\n"); return; }
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b01      	cmp	r3, #1
 800271a:	dc03      	bgt.n	8002724 <cli_adc_read+0x18>
 800271c:	483e      	ldr	r0, [pc, #248]	@ (8002818 <cli_adc_read+0x10c>)
 800271e:	f00c fea1 	bl	800f464 <puts>
 8002722:	e076      	b.n	8002812 <cli_adc_read+0x106>
  int which=atoi(argv[1]); int N=(argc>=3)?atoi(argv[2]):1; if (N<1) N=1; if (N>1024) N=1024;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	3304      	adds	r3, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f00b fe0a 	bl	800e344 <atoi>
 8002730:	6138      	str	r0, [r7, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	dd07      	ble.n	8002748 <cli_adc_read+0x3c>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3308      	adds	r3, #8
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f00b fe00 	bl	800e344 <atoi>
 8002744:	4603      	mov	r3, r0
 8002746:	e000      	b.n	800274a <cli_adc_read+0x3e>
 8002748:	2301      	movs	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	dc01      	bgt.n	8002756 <cli_adc_read+0x4a>
 8002752:	2301      	movs	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275c:	dd02      	ble.n	8002764 <cli_adc_read+0x58>
 800275e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002762:	61fb      	str	r3, [r7, #28]
  uint16_t v=0;
 8002764:	2300      	movs	r3, #0
 8002766:	81fb      	strh	r3, [r7, #14]
  if (which==2){
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d125      	bne.n	80027ba <cli_adc_read+0xae>
    for (int i=0;i<N;i++){
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e01a      	b.n	80027aa <cli_adc_read+0x9e>
      if (!adc_poll_one(&hadc2, g_adc2_cfg.channel, g_adc2_cfg.sample, &v)){ printf("ERROR: ADC2\r\n"); return; }
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <cli_adc_read+0x110>)
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <cli_adc_read+0x110>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	f107 030e 	add.w	r3, r7, #14
 8002780:	4827      	ldr	r0, [pc, #156]	@ (8002820 <cli_adc_read+0x114>)
 8002782:	f7ff f9df 	bl	8001b44 <adc_poll_one>
 8002786:	4603      	mov	r3, r0
 8002788:	f083 0301 	eor.w	r3, r3, #1
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <cli_adc_read+0x8e>
 8002792:	4824      	ldr	r0, [pc, #144]	@ (8002824 <cli_adc_read+0x118>)
 8002794:	f00c fe66 	bl	800f464 <puts>
 8002798:	e03b      	b.n	8002812 <cli_adc_read+0x106>
      printf("ADC2:%u\r\n",(unsigned)v);
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	4619      	mov	r1, r3
 800279e:	4822      	ldr	r0, [pc, #136]	@ (8002828 <cli_adc_read+0x11c>)
 80027a0:	f00c fdf8 	bl	800f394 <iprintf>
    for (int i=0;i<N;i++){
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dbe0      	blt.n	8002774 <cli_adc_read+0x68>
    }
    printf("OK\r\n");
 80027b2:	481e      	ldr	r0, [pc, #120]	@ (800282c <cli_adc_read+0x120>)
 80027b4:	f00c fe56 	bl	800f464 <puts>
 80027b8:	e02b      	b.n	8002812 <cli_adc_read+0x106>
  } else if (which==3){
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d125      	bne.n	800280c <cli_adc_read+0x100>
    for (int i=0;i<N;i++){
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e01a      	b.n	80027fc <cli_adc_read+0xf0>
      if (!adc_poll_one(&hadc3, g_adc3_cfg.channel, g_adc3_cfg.sample, &v)){ printf("ERROR: ADC3\r\n"); return; }
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <cli_adc_read+0x124>)
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <cli_adc_read+0x124>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	f107 030e 	add.w	r3, r7, #14
 80027d2:	4818      	ldr	r0, [pc, #96]	@ (8002834 <cli_adc_read+0x128>)
 80027d4:	f7ff f9b6 	bl	8001b44 <adc_poll_one>
 80027d8:	4603      	mov	r3, r0
 80027da:	f083 0301 	eor.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <cli_adc_read+0xe0>
 80027e4:	4814      	ldr	r0, [pc, #80]	@ (8002838 <cli_adc_read+0x12c>)
 80027e6:	f00c fe3d 	bl	800f464 <puts>
 80027ea:	e012      	b.n	8002812 <cli_adc_read+0x106>
      printf("ADC3:%u\r\n",(unsigned)v);
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4812      	ldr	r0, [pc, #72]	@ (800283c <cli_adc_read+0x130>)
 80027f2:	f00c fdcf 	bl	800f394 <iprintf>
    for (int i=0;i<N;i++){
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbe0      	blt.n	80027c6 <cli_adc_read+0xba>
    }
    printf("OK\r\n");
 8002804:	4809      	ldr	r0, [pc, #36]	@ (800282c <cli_adc_read+0x120>)
 8002806:	f00c fe2d 	bl	800f464 <puts>
 800280a:	e002      	b.n	8002812 <cli_adc_read+0x106>
  } else printf("ERROR: ADC invalido\r\n");
 800280c:	480c      	ldr	r0, [pc, #48]	@ (8002840 <cli_adc_read+0x134>)
 800280e:	f00c fe29 	bl	800f464 <puts>
}
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	080119c0 	.word	0x080119c0
 800281c:	2000003c 	.word	0x2000003c
 8002820:	20000374 	.word	0x20000374
 8002824:	080119dc 	.word	0x080119dc
 8002828:	080119ec 	.word	0x080119ec
 800282c:	0801179c 	.word	0x0801179c
 8002830:	20000044 	.word	0x20000044
 8002834:	200003bc 	.word	0x200003bc
 8002838:	080119f8 	.word	0x080119f8
 800283c:	08011a08 	.word	0x08011a08
 8002840:	080119a8 	.word	0x080119a8

08002844 <cli_spi_speed>:

/* SPI/FPGA */
static void cli_spi_speed(int argc, char**argv){
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: SPI_SPEED <2|4|8|16|32|64|128|256>\r\n"); return; }
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b01      	cmp	r3, #1
 8002852:	dc03      	bgt.n	800285c <cli_spi_speed+0x18>
 8002854:	4847      	ldr	r0, [pc, #284]	@ (8002974 <cli_spi_speed+0x130>)
 8002856:	f00c fe05 	bl	800f464 <puts>
 800285a:	e087      	b.n	800296c <cli_spi_speed+0x128>
  int d=atoi(argv[1]); uint32_t p=SPI_BAUDRATEPRESCALER_8;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f00b fd6e 	bl	800e344 <atoi>
 8002868:	60b8      	str	r0, [r7, #8]
 800286a:	2310      	movs	r3, #16
 800286c:	60fb      	str	r3, [r7, #12]
  switch(d){
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002874:	d06d      	beq.n	8002952 <cli_spi_speed+0x10e>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800287c:	dc6c      	bgt.n	8002958 <cli_spi_speed+0x114>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b80      	cmp	r3, #128	@ 0x80
 8002882:	d063      	beq.n	800294c <cli_spi_speed+0x108>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b80      	cmp	r3, #128	@ 0x80
 8002888:	dc66      	bgt.n	8002958 <cli_spi_speed+0x114>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b20      	cmp	r3, #32
 800288e:	dc47      	bgt.n	8002920 <cli_spi_speed+0xdc>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b02      	cmp	r3, #2
 8002894:	db60      	blt.n	8002958 <cli_spi_speed+0x114>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	3b02      	subs	r3, #2
 800289a:	2b1e      	cmp	r3, #30
 800289c:	d85c      	bhi.n	8002958 <cli_spi_speed+0x114>
 800289e:	a201      	add	r2, pc, #4	@ (adr r2, 80028a4 <cli_spi_speed+0x60>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	08002929 	.word	0x08002929
 80028a8:	08002959 	.word	0x08002959
 80028ac:	0800292f 	.word	0x0800292f
 80028b0:	08002959 	.word	0x08002959
 80028b4:	08002959 	.word	0x08002959
 80028b8:	08002959 	.word	0x08002959
 80028bc:	08002935 	.word	0x08002935
 80028c0:	08002959 	.word	0x08002959
 80028c4:	08002959 	.word	0x08002959
 80028c8:	08002959 	.word	0x08002959
 80028cc:	08002959 	.word	0x08002959
 80028d0:	08002959 	.word	0x08002959
 80028d4:	08002959 	.word	0x08002959
 80028d8:	08002959 	.word	0x08002959
 80028dc:	0800293b 	.word	0x0800293b
 80028e0:	08002959 	.word	0x08002959
 80028e4:	08002959 	.word	0x08002959
 80028e8:	08002959 	.word	0x08002959
 80028ec:	08002959 	.word	0x08002959
 80028f0:	08002959 	.word	0x08002959
 80028f4:	08002959 	.word	0x08002959
 80028f8:	08002959 	.word	0x08002959
 80028fc:	08002959 	.word	0x08002959
 8002900:	08002959 	.word	0x08002959
 8002904:	08002959 	.word	0x08002959
 8002908:	08002959 	.word	0x08002959
 800290c:	08002959 	.word	0x08002959
 8002910:	08002959 	.word	0x08002959
 8002914:	08002959 	.word	0x08002959
 8002918:	08002959 	.word	0x08002959
 800291c:	08002941 	.word	0x08002941
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b40      	cmp	r3, #64	@ 0x40
 8002924:	d00f      	beq.n	8002946 <cli_spi_speed+0x102>
 8002926:	e017      	b.n	8002958 <cli_spi_speed+0x114>
    case 2: p=SPI_BAUDRATEPRESCALER_2; break; case 4: p=SPI_BAUDRATEPRESCALER_4; break;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e018      	b.n	8002960 <cli_spi_speed+0x11c>
 800292e:	2308      	movs	r3, #8
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e015      	b.n	8002960 <cli_spi_speed+0x11c>
    case 8: p=SPI_BAUDRATEPRESCALER_8; break; case 16:p=SPI_BAUDRATEPRESCALER_16; break;
 8002934:	2310      	movs	r3, #16
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e012      	b.n	8002960 <cli_spi_speed+0x11c>
 800293a:	2318      	movs	r3, #24
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e00f      	b.n	8002960 <cli_spi_speed+0x11c>
    case 32:p=SPI_BAUDRATEPRESCALER_32; break; case 64:p=SPI_BAUDRATEPRESCALER_64; break;
 8002940:	2320      	movs	r3, #32
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e00c      	b.n	8002960 <cli_spi_speed+0x11c>
 8002946:	2328      	movs	r3, #40	@ 0x28
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e009      	b.n	8002960 <cli_spi_speed+0x11c>
    case 128:p=SPI_BAUDRATEPRESCALER_128; break; case 256:p=SPI_BAUDRATEPRESCALER_256; break;
 800294c:	2330      	movs	r3, #48	@ 0x30
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e006      	b.n	8002960 <cli_spi_speed+0x11c>
 8002952:	2338      	movs	r3, #56	@ 0x38
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e003      	b.n	8002960 <cli_spi_speed+0x11c>
    default: printf("ERROR: divisor invalido\r\n"); return;
 8002958:	4807      	ldr	r0, [pc, #28]	@ (8002978 <cli_spi_speed+0x134>)
 800295a:	f00c fd83 	bl	800f464 <puts>
 800295e:	e005      	b.n	800296c <cli_spi_speed+0x128>
  }
  spi_set_prescaler(p); printf("OK\r\n");
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff f947 	bl	8001bf4 <spi_set_prescaler>
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <cli_spi_speed+0x138>)
 8002968:	f00c fd7c 	bl	800f464 <puts>
}
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	08011a14 	.word	0x08011a14
 8002978:	08011a40 	.word	0x08011a40
 800297c:	0801179c 	.word	0x0801179c

08002980 <cli_fpga_cs>:
static void cli_fpga_cs(int argc, char**argv){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: FPGA_CS <0|1>\r\n"); return; }
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b01      	cmp	r3, #1
 800298e:	dc03      	bgt.n	8002998 <cli_fpga_cs+0x18>
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <cli_fpga_cs+0x44>)
 8002992:	f00c fd67 	bl	800f464 <puts>
 8002996:	e011      	b.n	80029bc <cli_fpga_cs+0x3c>
  int v=atoi(argv[1]); if (v) fpga_cs_low(); else fpga_cs_high(); printf("OK\r\n");
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f00b fcd0 	bl	800e344 <atoi>
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <cli_fpga_cs+0x32>
 80029ac:	f7ff f90a 	bl	8001bc4 <fpga_cs_low>
 80029b0:	e001      	b.n	80029b6 <cli_fpga_cs+0x36>
 80029b2:	f7ff f913 	bl	8001bdc <fpga_cs_high>
 80029b6:	4804      	ldr	r0, [pc, #16]	@ (80029c8 <cli_fpga_cs+0x48>)
 80029b8:	f00c fd54 	bl	800f464 <puts>
}
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08011a5c 	.word	0x08011a5c
 80029c8:	0801179c 	.word	0x0801179c

080029cc <cli_fpga_upload>:
static void cli_fpga_upload(int argc, char**argv){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: FPGA_UPLOAD <bytes> <crc32>\r\n"); return; }
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	dc03      	bgt.n	80029e4 <cli_fpga_upload+0x18>
 80029dc:	481f      	ldr	r0, [pc, #124]	@ (8002a5c <cli_fpga_upload+0x90>)
 80029de:	f00c fd41 	bl	800f464 <puts>
 80029e2:	e037      	b.n	8002a54 <cli_fpga_upload+0x88>
  uint32_t n=(uint32_t)strtoul(argv[1],NULL,0), c=(uint32_t)strtoul(argv[2],NULL,0);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3304      	adds	r3, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f00c fc04 	bl	800f1fc <strtoul>
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	3308      	adds	r3, #8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00c fbfb 	bl	800f1fc <strtoul>
 8002a06:	60b8      	str	r0, [r7, #8]
  if (!n || n>FPGA_MAX_BYTES){ printf("ERROR: tamanho invalido\r\n"); return; }
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <cli_fpga_upload+0x4a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a14:	d903      	bls.n	8002a1e <cli_fpga_upload+0x52>
 8002a16:	4812      	ldr	r0, [pc, #72]	@ (8002a60 <cli_fpga_upload+0x94>)
 8002a18:	f00c fd24 	bl	800f464 <puts>
 8002a1c:	e01a      	b.n	8002a54 <cli_fpga_upload+0x88>
  __HAL_CRC_DR_RESET(&hcrc);
 8002a1e:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <cli_fpga_upload+0x98>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <cli_fpga_upload+0x98>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	609a      	str	r2, [r3, #8]
  fpga_cs_low(); bin_reset_ring();
 8002a2e:	f7ff f8c9 	bl	8001bc4 <fpga_cs_low>
 8002a32:	f7ff f8f5 	bl	8001c20 <bin_reset_ring>
  g_bin_bytes_total=n; g_bin_bytes_left=n; g_bin_crc_expect=c; g_bin_mode=1;
 8002a36:	4a0c      	ldr	r2, [pc, #48]	@ (8002a68 <cli_fpga_upload+0x9c>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a6c <cli_fpga_upload+0xa0>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <cli_fpga_upload+0xa4>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <cli_fpga_upload+0xa8>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
  printf("FPGA_UPLOAD_READY\r\n");
 8002a4e:	480a      	ldr	r0, [pc, #40]	@ (8002a78 <cli_fpga_upload+0xac>)
 8002a50:	f00c fd08 	bl	800f464 <puts>
}
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	08011a74 	.word	0x08011a74
 8002a60:	08011a98 	.word	0x08011a98
 8002a64:	20000404 	.word	0x20000404
 8002a68:	20000f68 	.word	0x20000f68
 8002a6c:	20000f6c 	.word	0x20000f6c
 8002a70:	20000f70 	.word	0x20000f70
 8002a74:	20000f65 	.word	0x20000f65
 8002a78:	08011ab4 	.word	0x08011ab4

08002a7c <cli_fpga_abort>:
static void cli_fpga_abort(int argc, char**argv){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  if (g_bin_mode){ g_bin_mode=0; fpga_cs_high(); } printf("OK\r\n");
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <cli_fpga_abort+0x2c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <cli_fpga_abort+0x1e>
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <cli_fpga_abort+0x2c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	f7ff f8a1 	bl	8001bdc <fpga_cs_high>
 8002a9a:	4804      	ldr	r0, [pc, #16]	@ (8002aac <cli_fpga_abort+0x30>)
 8002a9c:	f00c fce2 	bl	800f464 <puts>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000f65 	.word	0x20000f65
 8002aac:	0801179c 	.word	0x0801179c

08002ab0 <cli_fpga_peek>:
static void cli_fpga_peek(int argc, char**argv){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002abc:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8002ac0:	6018      	str	r0, [r3, #0]
 8002ac2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002ac6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8002aca:	6019      	str	r1, [r3, #0]
  if (argc<2){ printf("ERROR: FPGA_PEEK <nbytes>\r\n"); return; }
 8002acc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002ad0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	dc03      	bgt.n	8002ae2 <cli_fpga_peek+0x32>
 8002ada:	482e      	ldr	r0, [pc, #184]	@ (8002b94 <cli_fpga_peek+0xe4>)
 8002adc:	f00c fcc2 	bl	800f464 <puts>
 8002ae0:	e054      	b.n	8002b8c <cli_fpga_peek+0xdc>
  uint32_t n=(uint32_t)strtoul(argv[1],NULL,0); if (!n||n>1024){ printf("ERROR: limite 1024\r\n"); return; }
 8002ae2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002ae6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00c fb81 	bl	800f1fc <strtoul>
 8002afa:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
 8002afe:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <cli_fpga_peek+0x60>
 8002b06:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d903      	bls.n	8002b18 <cli_fpga_peek+0x68>
 8002b10:	4821      	ldr	r0, [pc, #132]	@ (8002b98 <cli_fpga_peek+0xe8>)
 8002b12:	f00c fca7 	bl	800f464 <puts>
 8002b16:	e039      	b.n	8002b8c <cli_fpga_peek+0xdc>
  uint8_t tmp[1024]; memset(tmp,0xFF,n);
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8002b20:	21ff      	movs	r1, #255	@ 0xff
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00c fd7e 	bl	800f624 <memset>
  if (HAL_SPI_TransmitReceive(&hspi1,tmp,tmp,n,HAL_MAX_DELAY)!=HAL_OK){ printf("ERROR: SPI TR\r\n"); return; }
 8002b28:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f107 0208 	add.w	r2, r7, #8
 8002b32:	f107 0108 	add.w	r1, r7, #8
 8002b36:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3a:	9000      	str	r0, [sp, #0]
 8002b3c:	4817      	ldr	r0, [pc, #92]	@ (8002b9c <cli_fpga_peek+0xec>)
 8002b3e:	f005 ff04 	bl	800894a <HAL_SPI_TransmitReceive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <cli_fpga_peek+0xa0>
 8002b48:	4815      	ldr	r0, [pc, #84]	@ (8002ba0 <cli_fpga_peek+0xf0>)
 8002b4a:	f00c fc8b 	bl	800f464 <puts>
 8002b4e:	e01d      	b.n	8002b8c <cli_fpga_peek+0xdc>
  for (uint32_t i=0; i<n; i++) { printf("%02X", tmp[i]); }
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8002b56:	e010      	b.n	8002b7a <cli_fpga_peek+0xca>
 8002b58:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002b5c:	f5a3 6281 	sub.w	r2, r3, #1032	@ 0x408
 8002b60:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	480e      	ldr	r0, [pc, #56]	@ (8002ba4 <cli_fpga_peek+0xf4>)
 8002b6c:	f00c fc12 	bl	800f394 <iprintf>
 8002b70:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8002b74:	3301      	adds	r3, #1
 8002b76:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8002b7a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8002b7e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d3e8      	bcc.n	8002b58 <cli_fpga_peek+0xa8>
  printf("\r\nOK\r\n");
 8002b86:	4808      	ldr	r0, [pc, #32]	@ (8002ba8 <cli_fpga_peek+0xf8>)
 8002b88:	f00c fc6c 	bl	800f464 <puts>
}
 8002b8c:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08011ac8 	.word	0x08011ac8
 8002b98:	08011ae4 	.word	0x08011ae4
 8002b9c:	20000474 	.word	0x20000474
 8002ba0:	08011af8 	.word	0x08011af8
 8002ba4:	08011b08 	.word	0x08011b08
 8002ba8:	08011b10 	.word	0x08011b10

08002bac <cli_noop>:

static void cli_noop(int argc, char**argv){ printf("OK\r\n"); }
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	4803      	ldr	r0, [pc, #12]	@ (8002bc4 <cli_noop+0x18>)
 8002bb8:	f00c fc54 	bl	800f464 <puts>
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	0801179c 	.word	0x0801179c

08002bc8 <CLI_ProcessLine>:

/* Parser e dispatch */
static void CLI_ProcessLine(const char* line){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b0b2      	sub	sp, #200	@ 0xc8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  char buf[128]; strncpy(buf,line,sizeof(buf)-1); buf[sizeof(buf)-1]='\0';
 8002bd0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bd4:	227f      	movs	r2, #127	@ 0x7f
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00c fd3d 	bl	800f658 <strncpy>
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
  char *argv[12]; int argc=0; char *tok=strtok(buf," \t\r\n");
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bee:	492d      	ldr	r1, [pc, #180]	@ (8002ca4 <CLI_ProcessLine+0xdc>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00c fd45 	bl	800f680 <strtok>
 8002bf6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
  while (tok && argc<12){ argv[argc++]=tok; tok=strtok(NULL," \t\r\n"); }
 8002bfa:	e011      	b.n	8002c20 <CLI_ProcessLine+0x58>
 8002bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	33c8      	adds	r3, #200	@ 0xc8
 8002c0a:	443b      	add	r3, r7
 8002c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c10:	f843 2cbc 	str.w	r2, [r3, #-188]
 8002c14:	4923      	ldr	r1, [pc, #140]	@ (8002ca4 <CLI_ProcessLine+0xdc>)
 8002c16:	2000      	movs	r0, #0
 8002c18:	f00c fd32 	bl	800f680 <strtok>
 8002c1c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8002c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <CLI_ProcessLine+0x68>
 8002c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c2c:	2b0b      	cmp	r3, #11
 8002c2e:	dde5      	ble.n	8002bfc <CLI_ProcessLine+0x34>
  if (argc==0) return;
 8002c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d031      	beq.n	8002c9c <CLI_ProcessLine+0xd4>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c3e:	e025      	b.n	8002c8c <CLI_ProcessLine+0xc4>
    if (strcmp(argv[0],cmds[i].name)==0){ cmds[i].fn(argc,argv); return; }
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	4919      	ldr	r1, [pc, #100]	@ (8002ca8 <CLI_ProcessLine+0xe0>)
 8002c44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd fabb 	bl	80001d0 <strcmp>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d110      	bne.n	8002c82 <CLI_ProcessLine+0xba>
 8002c60:	4911      	ldr	r1, [pc, #68]	@ (8002ca8 <CLI_ProcessLine+0xe0>)
 8002c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f107 020c 	add.w	r2, r7, #12
 8002c78:	4611      	mov	r1, r2
 8002c7a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8002c7e:	4798      	blx	r3
 8002c80:	e00d      	b.n	8002c9e <CLI_ProcessLine+0xd6>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){
 8002c82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c86:	3301      	adds	r3, #1
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c90:	2b13      	cmp	r3, #19
 8002c92:	d9d5      	bls.n	8002c40 <CLI_ProcessLine+0x78>
  }
  printf("ERROR: comando desconhecido. Use HELP\r\n");
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <CLI_ProcessLine+0xe4>)
 8002c96:	f00c fbe5 	bl	800f464 <puts>
 8002c9a:	e000      	b.n	8002c9e <CLI_ProcessLine+0xd6>
  if (argc==0) return;
 8002c9c:	bf00      	nop
}
 8002c9e:	37c8      	adds	r7, #200	@ 0xc8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	08011b18 	.word	0x08011b18
 8002ca8:	08011bf8 	.word	0x08011bf8
 8002cac:	08011b20 	.word	0x08011b20

08002cb0 <SystemClock_Config>:
static void MX_TIM3_Init(void);   // trigger do ADC1
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);

void SystemClock_Config(void){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b094      	sub	sp, #80	@ 0x50
 8002cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_Osc={0};
 8002cb6:	f107 0320 	add.w	r3, r7, #32
 8002cba:	2230      	movs	r2, #48	@ 0x30
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00c fcb0 	bl	800f624 <memset>
  RCC_ClkInitTypeDef RCC_Clk={0};
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <SystemClock_Config+0xcc>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <SystemClock_Config+0xcc>)
 8002cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <SystemClock_Config+0xcc>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <SystemClock_Config+0xd0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <SystemClock_Config+0xd0>)
 8002cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <SystemClock_Config+0xd0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
  RCC_Osc.OscillatorType=RCC_OSCILLATORTYPE_HSE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
  RCC_Osc.HSEState=RCC_HSE_ON;
 8002d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_Osc.PLL.PLLState=RCC_PLL_ON;
 8002d16:	2302      	movs	r3, #2
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_Osc.PLL.PLLSource=RCC_PLLSOURCE_HSE;
 8002d1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_Osc.PLL.PLLM=12; RCC_Osc.PLL.PLLN=336; RCC_Osc.PLL.PLLP=RCC_PLLP_DIV2; RCC_Osc.PLL.PLLQ=7;
 8002d20:	230c      	movs	r3, #12
 8002d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d2e:	2307      	movs	r3, #7
 8002d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_Osc)!=HAL_OK) Error_Handler();
 8002d32:	f107 0320 	add.w	r3, r7, #32
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 ffe2 	bl	8007d00 <HAL_RCC_OscConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <SystemClock_Config+0x96>
 8002d42:	f7fe fa63 	bl	800120c <Error_Handler>
  RCC_Clk.ClockType=RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8002d46:	230f      	movs	r3, #15
 8002d48:	60fb      	str	r3, [r7, #12]
  RCC_Clk.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
  RCC_Clk.AHBCLKDivider=RCC_SYSCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  RCC_Clk.APB1CLKDivider=RCC_HCLK_DIV4;   // TIM2 clock = 2*PCLK1
 8002d52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d56:	61bb      	str	r3, [r7, #24]
  RCC_Clk.APB2CLKDivider=RCC_HCLK_DIV2;
 8002d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_Clk, FLASH_LATENCY_5)!=HAL_OK) Error_Handler();
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2105      	movs	r1, #5
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fa43 	bl	80081f0 <HAL_RCC_ClockConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <SystemClock_Config+0xc4>
 8002d70:	f7fe fa4c 	bl	800120c <Error_Handler>
}
 8002d74:	bf00      	nop
 8002d76:	3750      	adds	r7, #80	@ 0x50
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000

08002d84 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GI={0};
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b32      	ldr	r3, [pc, #200]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <MX_GPIO_Init+0xf0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]

  /* Saídas em nível baixo ao iniciar */
  HAL_GPIO_WritePin(GPIOB, FPGA_CS_Pin|LED_BLUE_Pin|MMA_AVDD_Pin, GPIO_PIN_RESET);  // *** incl. MMA_AVDD ***
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8002df4:	4820      	ldr	r0, [pc, #128]	@ (8002e78 <MX_GPIO_Init+0xf4>)
 8002df6:	f002 fb87 	bl	8005508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002e00:	481e      	ldr	r0, [pc, #120]	@ (8002e7c <MX_GPIO_Init+0xf8>)
 8002e02:	f002 fb81 	bl	8005508 <HAL_GPIO_WritePin>

  /* PB: FPGA_CS, LED_BLUE, MMA_AVDD */
  GI.Pin = FPGA_CS_Pin|LED_BLUE_Pin|MMA_AVDD_Pin;
 8002e06:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8002e0a:	60fb      	str	r3, [r7, #12]
  GI.Mode=GPIO_MODE_OUTPUT_PP; GI.Pull=GPIO_NOPULL; GI.Speed=GPIO_SPEED_FREQ_LOW;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB,&GI);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4816      	ldr	r0, [pc, #88]	@ (8002e78 <MX_GPIO_Init+0xf4>)
 8002e20:	f002 f9d6 	bl	80051d0 <HAL_GPIO_Init>

  /* PA: LEDs */
  GI.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin;
 8002e24:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002e28:	60fb      	str	r3, [r7, #12]
  GI.Mode=GPIO_MODE_OUTPUT_PP; GI.Pull=GPIO_NOPULL; GI.Speed=GPIO_SPEED_FREQ_LOW;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA,&GI);
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480f      	ldr	r0, [pc, #60]	@ (8002e7c <MX_GPIO_Init+0xf8>)
 8002e3e:	f002 f9c7 	bl	80051d0 <HAL_GPIO_Init>

  /* Botão usuário (EXTI3) */
  GI.Pin = USER_Btn_Pin; GI.Mode=GPIO_MODE_IT_RISING; GI.Pull=GPIO_NOPULL;
 8002e42:	2308      	movs	r3, #8
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Btn_GPIO_Port,&GI);
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	4619      	mov	r1, r3
 8002e56:	4808      	ldr	r0, [pc, #32]	@ (8002e78 <MX_GPIO_Init+0xf4>)
 8002e58:	f002 f9ba 	bl	80051d0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2009      	movs	r0, #9
 8002e62:	f001 fe12 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002e66:	2009      	movs	r0, #9
 8002e68:	f001 fe2b 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
}
 8002e6c:	bf00      	nop
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020000 	.word	0x40020000

08002e80 <MX_DMA_Init>:

static void MX_DMA_Init(void){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();   // DAC (DMA1_Stream5)
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2105      	movs	r1, #5
 8002ea6:	2010      	movs	r0, #16
 8002ea8:	f001 fdef 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002eac:	2010      	movs	r0, #16
 8002eae:	f001 fe08 	bl	8004ac2 <HAL_NVIC_EnableIRQ>

  __HAL_RCC_DMA2_CLK_ENABLE();   // ADC1 (DMA2_Stream0)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002ebc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <MX_DMA_Init+0x68>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	2038      	movs	r0, #56	@ 0x38
 8002ed4:	f001 fdd9 	bl	8004a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ed8:	2038      	movs	r0, #56	@ 0x38
 8002eda:	f001 fdf2 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800

08002eec <MX_DAC_Init>:

static void MX_DAC_Init(void){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef s={0};
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
  hdac.Instance = DAC;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <MX_DAC_Init+0x4c>)
 8002efc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f3c <MX_DAC_Init+0x50>)
 8002efe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac)!=HAL_OK) Error_Handler();
 8002f00:	480d      	ldr	r0, [pc, #52]	@ (8002f38 <MX_DAC_Init+0x4c>)
 8002f02:	f001 fe3f 	bl	8004b84 <HAL_DAC_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_DAC_Init+0x24>
 8002f0c:	f7fe f97e 	bl	800120c <Error_Handler>
  s.DAC_Trigger = DAC_TRIGGER_T2_TRGO;          // *** importante para AWG ***
 8002f10:	2324      	movs	r3, #36	@ 0x24
 8002f12:	603b      	str	r3, [r7, #0]
  s.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac,&s,DAC_CHANNEL_1)!=HAL_OK) Error_Handler();
 8002f18:	463b      	mov	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	@ (8002f38 <MX_DAC_Init+0x4c>)
 8002f20:	f001 ff7d 	bl	8004e1e <HAL_DAC_ConfigChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_DAC_Init+0x42>
 8002f2a:	f7fe f96f 	bl	800120c <Error_Handler>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000040c 	.word	0x2000040c
 8002f3c:	40007400 	.word	0x40007400

08002f40 <MX_I2C1_Init>:

static void MX_I2C1_Init(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  hi2c1.Instance=I2C1;
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <MX_I2C1_Init+0x54>)
 8002f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed=100000;
 8002f4a:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f4c:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <MX_I2C1_Init+0x58>)
 8002f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle=I2C_DUTYCYCLE_2;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1=0;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode=I2C_ADDRESSINGMODE_7BIT;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode=I2C_DUALADDRESS_DISABLE;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2=0;
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode=I2C_GENERALCALL_DISABLE;
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode=I2C_NOSTRETCH_DISABLE;
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1)!=HAL_OK) Error_Handler();
 8002f7c:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f7e:	f002 fb1b 	bl	80055b8 <HAL_I2C_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_I2C1_Init+0x4c>
 8002f88:	f7fe f940 	bl	800120c <Error_Handler>
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000420 	.word	0x20000420
 8002f94:	40005400 	.word	0x40005400
 8002f98:	000186a0 	.word	0x000186a0

08002f9c <MX_SPI1_Init>:

static void MX_SPI1_Init(void){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  hspi1.Instance=SPI1;
 8002fa0:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fa2:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <MX_SPI1_Init+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode=SPI_MODE_MASTER;
 8002fa6:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction=SPI_DIRECTION_2LINES;
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize=SPI_DATASIZE_8BIT;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity=SPI_POLARITY_LOW;
 8002fba:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase=SPI_PHASE_1EDGE;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS=SPI_NSS_SOFT;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_8; // ~10.5 MHz @84MHz/8
 8002fce:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit=SPI_FIRSTBIT_MSB;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode=SPI_TIMODE_DISABLE;
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial=10;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fe8:	220a      	movs	r2, #10
 8002fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1)!=HAL_OK) Error_Handler();
 8002fec:	4804      	ldr	r0, [pc, #16]	@ (8003000 <MX_SPI1_Init+0x64>)
 8002fee:	f005 fadf 	bl	80085b0 <HAL_SPI_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_SPI1_Init+0x60>
 8002ff8:	f7fe f908 	bl	800120c <Error_Handler>
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000474 	.word	0x20000474
 8003004:	40013000 	.word	0x40013000

08003008 <MX_CRC_Init>:

static void MX_CRC_Init(void){
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  hcrc.Instance=CRC; if (HAL_CRC_Init(&hcrc)!=HAL_OK) Error_Handler();
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <MX_CRC_Init+0x20>)
 800300e:	4a07      	ldr	r2, [pc, #28]	@ (800302c <MX_CRC_Init+0x24>)
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_CRC_Init+0x20>)
 8003014:	f001 fd6f 	bl	8004af6 <HAL_CRC_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_CRC_Init+0x1a>
 800301e:	f7fe f8f5 	bl	800120c <Error_Handler>
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000404 	.word	0x20000404
 800302c:	40023000 	.word	0x40023000

08003030 <MX_TIM2_Init>:

static void MX_TIM2_Init(void){
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClk={0};
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sM={0};
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
  htim2.Instance=TIM2;
 800304c:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <MX_TIM2_Init+0x94>)
 800304e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler=0;
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <MX_TIM2_Init+0x94>)
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode=TIM_COUNTERMODE_UP;
 800305a:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <MX_TIM2_Init+0x94>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period=4294967295;              // recalculado dinamicamente no dac_start()
 8003060:	4b18      	ldr	r3, [pc, #96]	@ (80030c4 <MX_TIM2_Init+0x94>)
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
 8003068:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <MX_TIM2_Init+0x94>)
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload=TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <MX_TIM2_Init+0x94>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2)!=HAL_OK) Error_Handler();
 8003074:	4813      	ldr	r0, [pc, #76]	@ (80030c4 <MX_TIM2_Init+0x94>)
 8003076:	f005 feed 	bl	8008e54 <HAL_TIM_Base_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM2_Init+0x54>
 8003080:	f7fe f8c4 	bl	800120c <Error_Handler>
  sClk.ClockSource=TIM_CLOCKSOURCE_INTERNAL;
 8003084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2,&sClk)!=HAL_OK) Error_Handler();
 800308a:	f107 0308 	add.w	r3, r7, #8
 800308e:	4619      	mov	r1, r3
 8003090:	480c      	ldr	r0, [pc, #48]	@ (80030c4 <MX_TIM2_Init+0x94>)
 8003092:	f006 f8ae 	bl	80091f2 <HAL_TIM_ConfigClockSource>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM2_Init+0x70>
 800309c:	f7fe f8b6 	bl	800120c <Error_Handler>
  sM.MasterOutputTrigger=TIM_TRGO_UPDATE;    // *** TRGO UPDATE para DAC ***
 80030a0:	2320      	movs	r3, #32
 80030a2:	603b      	str	r3, [r7, #0]
  sM.MasterSlaveMode=TIM_MASTERSLAVEMODE_ENABLE;
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2,&sM)!=HAL_OK) Error_Handler();
 80030a8:	463b      	mov	r3, r7
 80030aa:	4619      	mov	r1, r3
 80030ac:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <MX_TIM2_Init+0x94>)
 80030ae:	f006 fad9 	bl	8009664 <HAL_TIMEx_MasterConfigSynchronization>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM2_Init+0x8c>
 80030b8:	f7fe f8a8 	bl	800120c <Error_Handler>
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200004cc 	.word	0x200004cc

080030c8 <MX_TIM3_Init>:

static void MX_TIM3_Init(void){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sM={0};
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
  __HAL_RCC_TIM3_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <MX_TIM3_Init+0x88>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <MX_TIM3_Init+0x88>)
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e8:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <MX_TIM3_Init+0x88>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
  htim3.Instance=TIM3;
 80030f4:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <MX_TIM3_Init+0x8c>)
 80030f6:	4a18      	ldr	r2, [pc, #96]	@ (8003158 <MX_TIM3_Init+0x90>)
 80030f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler=8400-1;          // 84MHz/8400 = 10kHz
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <MX_TIM3_Init+0x8c>)
 80030fc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003100:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode=TIM_COUNTERMODE_UP;
 8003102:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <MX_TIM3_Init+0x8c>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  htim3.Init.Period=100-1;              // 10kHz/100 = 100 Hz (exemplo)
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <MX_TIM3_Init+0x8c>)
 800310a:	2263      	movs	r2, #99	@ 0x63
 800310c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <MX_TIM3_Init+0x8c>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload=TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003114:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <MX_TIM3_Init+0x8c>)
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3)!=HAL_OK) Error_Handler();
 800311a:	480e      	ldr	r0, [pc, #56]	@ (8003154 <MX_TIM3_Init+0x8c>)
 800311c:	f005 fe9a 	bl	8008e54 <HAL_TIM_Base_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM3_Init+0x62>
 8003126:	f7fe f871 	bl	800120c <Error_Handler>
  sM.MasterOutputTrigger=TIM_TRGO_UPDATE;  // *** TRGO p/ ADC1 ***
 800312a:	2320      	movs	r3, #32
 800312c:	60bb      	str	r3, [r7, #8]
  sM.MasterSlaveMode=TIM_MASTERSLAVEMODE_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3,&sM)!=HAL_OK) Error_Handler();
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	4619      	mov	r1, r3
 8003138:	4806      	ldr	r0, [pc, #24]	@ (8003154 <MX_TIM3_Init+0x8c>)
 800313a:	f006 fa93 	bl	8009664 <HAL_TIMEx_MasterConfigSynchronization>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM3_Init+0x80>
 8003144:	f7fe f862 	bl	800120c <Error_Handler>
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	20000514 	.word	0x20000514
 8003158:	40000400 	.word	0x40000400

0800315c <MX_ADC1_Init>:

static void MX_ADC1_Init(void){
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef s={0};
 8003162:	463b      	mov	r3, r7
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
  hadc1.Instance=ADC1;
 800316e:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 8003170:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <MX_ADC1_Init+0xa0>)
 8003172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler=ADC_CLOCK_SYNC_PCLK_DIV4;
 8003174:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 8003176:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800317a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution=ADC_RESOLUTION_12B;
 800317c:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode=DISABLE;                 // *** (evita erro do macro) ***
 8003182:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode=DISABLE;
 8003188:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 800318a:	2200      	movs	r2, #0
 800318c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode=DISABLE;
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge=ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 8003198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv=ADC_EXTERNALTRIGCONV_T3_TRGO;   // *** TIM3 ***
 800319e:	4b16      	ldr	r3, [pc, #88]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign=ADC_DATAALIGN_RIGHT;
 80031a6:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion=1;
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests=ENABLE;
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection=ADC_EOC_SINGLE_CONV;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031bc:	2201      	movs	r2, #1
 80031be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1)!=HAL_OK) Error_Handler();
 80031c0:	480d      	ldr	r0, [pc, #52]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031c2:	f000 fd8d 	bl	8003ce0 <HAL_ADC_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_ADC1_Init+0x74>
 80031cc:	f7fe f81e 	bl	800120c <Error_Handler>

  // Canal: ajuste conforme seu hardware (ex.: PA1 -> ADC_CHANNEL_1)
  s.Channel=ADC_CHANNEL_1; s.Rank=1; s.SamplingTime=ADC_SAMPLETIME_56CYCLES;
 80031d0:	2301      	movs	r3, #1
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	2301      	movs	r3, #1
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	2303      	movs	r3, #3
 80031da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1,&s)!=HAL_OK) Error_Handler();
 80031dc:	463b      	mov	r3, r7
 80031de:	4619      	mov	r1, r3
 80031e0:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <MX_ADC1_Init+0x9c>)
 80031e2:	f001 f8d7 	bl	8004394 <HAL_ADC_ConfigChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_ADC1_Init+0x94>
 80031ec:	f7fe f80e 	bl	800120c <Error_Handler>
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000032c 	.word	0x2000032c
 80031fc:	40012000 	.word	0x40012000

08003200 <MX_ADC2_Init>:

static void MX_ADC2_Init(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef s={0};
 8003206:	463b      	mov	r3, r7
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
  hadc2.Instance=ADC2;
 8003212:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003214:	4a21      	ldr	r2, [pc, #132]	@ (800329c <MX_ADC2_Init+0x9c>)
 8003216:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler=ADC_CLOCK_SYNC_PCLK_DIV4;
 8003218:	4b1f      	ldr	r3, [pc, #124]	@ (8003298 <MX_ADC2_Init+0x98>)
 800321a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800321e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution=ADC_RESOLUTION_12B;
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode=DISABLE;
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode=DISABLE;
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <MX_ADC2_Init+0x98>)
 800322e:	2200      	movs	r2, #0
 8003230:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode=DISABLE;
 8003232:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge=ADC_EXTERNALTRIGCONVEDGE_NONE;
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <MX_ADC2_Init+0x98>)
 800323c:	2200      	movs	r2, #0
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv=ADC_SOFTWARE_START;
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <MX_ADC2_Init+0xa0>)
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign=ADC_DATAALIGN_RIGHT;
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion=1;
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <MX_ADC2_Init+0x98>)
 800324e:	2201      	movs	r2, #1
 8003250:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests=DISABLE;
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection=ADC_EOC_SINGLE_CONV;
 800325a:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <MX_ADC2_Init+0x98>)
 800325c:	2201      	movs	r2, #1
 800325e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2)!=HAL_OK) Error_Handler();
 8003260:	480d      	ldr	r0, [pc, #52]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003262:	f000 fd3d 	bl	8003ce0 <HAL_ADC_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_ADC2_Init+0x70>
 800326c:	f7fd ffce 	bl	800120c <Error_Handler>

  s.Channel=ADC_CHANNEL_1; s.Rank=1; s.SamplingTime=ADC_SAMPLETIME_15CYCLES;
 8003270:	2301      	movs	r3, #1
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	2301      	movs	r3, #1
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	2301      	movs	r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2,&s)!=HAL_OK) Error_Handler();
 800327c:	463b      	mov	r3, r7
 800327e:	4619      	mov	r1, r3
 8003280:	4805      	ldr	r0, [pc, #20]	@ (8003298 <MX_ADC2_Init+0x98>)
 8003282:	f001 f887 	bl	8004394 <HAL_ADC_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_ADC2_Init+0x90>
 800328c:	f7fd ffbe 	bl	800120c <Error_Handler>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000374 	.word	0x20000374
 800329c:	40012100 	.word	0x40012100
 80032a0:	0f000001 	.word	0x0f000001

080032a4 <MX_ADC3_Init>:

static void MX_ADC3_Init(void){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef s={0};
 80032aa:	463b      	mov	r3, r7
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
  hadc3.Instance=ADC3;
 80032b6:	4b21      	ldr	r3, [pc, #132]	@ (800333c <MX_ADC3_Init+0x98>)
 80032b8:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <MX_ADC3_Init+0x9c>)
 80032ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler=ADC_CLOCK_SYNC_PCLK_DIV4;
 80032bc:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <MX_ADC3_Init+0x98>)
 80032be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution=ADC_RESOLUTION_12B;
 80032c4:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <MX_ADC3_Init+0x98>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode=DISABLE;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <MX_ADC3_Init+0x98>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode=DISABLE;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	@ (800333c <MX_ADC3_Init+0x98>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode=DISABLE;
 80032d6:	4b19      	ldr	r3, [pc, #100]	@ (800333c <MX_ADC3_Init+0x98>)
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge=ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032de:	4b17      	ldr	r3, [pc, #92]	@ (800333c <MX_ADC3_Init+0x98>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv=ADC_SOFTWARE_START;
 80032e4:	4b15      	ldr	r3, [pc, #84]	@ (800333c <MX_ADC3_Init+0x98>)
 80032e6:	4a17      	ldr	r2, [pc, #92]	@ (8003344 <MX_ADC3_Init+0xa0>)
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign=ADC_DATAALIGN_RIGHT;
 80032ea:	4b14      	ldr	r3, [pc, #80]	@ (800333c <MX_ADC3_Init+0x98>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion=1;
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <MX_ADC3_Init+0x98>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests=DISABLE;
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <MX_ADC3_Init+0x98>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection=ADC_EOC_SINGLE_CONV;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <MX_ADC3_Init+0x98>)
 8003300:	2201      	movs	r2, #1
 8003302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3)!=HAL_OK) Error_Handler();
 8003304:	480d      	ldr	r0, [pc, #52]	@ (800333c <MX_ADC3_Init+0x98>)
 8003306:	f000 fceb 	bl	8003ce0 <HAL_ADC_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_ADC3_Init+0x70>
 8003310:	f7fd ff7c 	bl	800120c <Error_Handler>

  s.Channel=ADC_CHANNEL_3; s.Rank=1; s.SamplingTime=ADC_SAMPLETIME_15CYCLES;
 8003314:	2303      	movs	r3, #3
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	2301      	movs	r3, #1
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	2301      	movs	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3,&s)!=HAL_OK) Error_Handler();
 8003320:	463b      	mov	r3, r7
 8003322:	4619      	mov	r1, r3
 8003324:	4805      	ldr	r0, [pc, #20]	@ (800333c <MX_ADC3_Init+0x98>)
 8003326:	f001 f835 	bl	8004394 <HAL_ADC_ConfigChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_ADC3_Init+0x90>
 8003330:	f7fd ff6c 	bl	800120c <Error_Handler>
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	200003bc 	.word	0x200003bc
 8003340:	40012200 	.word	0x40012200
 8003344:	0f000001 	.word	0x0f000001

08003348 <main>:

/* ============================ MAIN ============================ */
int main(void){
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b0a8      	sub	sp, #160	@ 0xa0
 800334c:	af00      	add	r7, sp, #0
  HAL_Init();
 800334e:	f000 fc31 	bl	8003bb4 <HAL_Init>
  SystemClock_Config();
 8003352:	f7ff fcad 	bl	8002cb0 <SystemClock_Config>

  MX_GPIO_Init();
 8003356:	f7ff fd15 	bl	8002d84 <MX_GPIO_Init>
  MX_DMA_Init();
 800335a:	f7ff fd91 	bl	8002e80 <MX_DMA_Init>
  MX_DAC_Init();
 800335e:	f7ff fdc5 	bl	8002eec <MX_DAC_Init>
  MX_I2C1_Init();
 8003362:	f7ff fded 	bl	8002f40 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003366:	f7ff fe19 	bl	8002f9c <MX_SPI1_Init>
  MX_CRC_Init();
 800336a:	f7ff fe4d 	bl	8003008 <MX_CRC_Init>
  MX_TIM2_Init();
 800336e:	f7ff fe5f 	bl	8003030 <MX_TIM2_Init>
  MX_TIM3_Init();    // trigger do ADC1
 8003372:	f7ff fea9 	bl	80030c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003376:	f7ff fef1 	bl	800315c <MX_ADC1_Init>
  MX_ADC2_Init();
 800337a:	f7ff ff41 	bl	8003200 <MX_ADC2_Init>
  MX_ADC3_Init();
 800337e:	f7ff ff91 	bl	80032a4 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8003382:	f009 fcfb 	bl	800cd7c <MX_USB_DEVICE_Init>

  printf("\r\nPyboard v1.1 — AWG/ADC/FPGA CLI pronto. fmax(sine,N=256)=%.1f Hz\r\n",
         fmax_from_fs(DAC_FS_MAX_HZ, LUT_N));
 8003386:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8003508 <main+0x1c0>
 800338a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800338e:	eeb0 0a67 	vmov.f32	s0, s15
 8003392:	f7fd ffbf 	bl	8001314 <fmax_from_fs>
 8003396:	ee10 3a10 	vmov	r3, s0
  printf("\r\nPyboard v1.1 — AWG/ADC/FPGA CLI pronto. fmax(sine,N=256)=%.1f Hz\r\n",
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f8dc 	bl	8000558 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4859      	ldr	r0, [pc, #356]	@ (800350c <main+0x1c4>)
 80033a6:	f00b fff5 	bl	800f394 <iprintf>
  printf("Digite HELP\r\n");
 80033aa:	4859      	ldr	r0, [pc, #356]	@ (8003510 <main+0x1c8>)
 80033ac:	f00c f85a 	bl	800f464 <puts>
  put_prompt();
 80033b0:	f7fe fb06 	bl	80019c0 <put_prompt>

  uint32_t t_acc = HAL_GetTick();
 80033b4:	f000 fc64 	bl	8003c80 <HAL_GetTick>
 80033b8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

  for(;;){
    /* 1) Comandos (texto) do USB CDC */
    if (cdc_cmd_ready){
 80033bc:	4b55      	ldr	r3, [pc, #340]	@ (8003514 <main+0x1cc>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d033      	beq.n	800342e <main+0xe6>
      uint8_t local[128];
      uint32_t n=(cdc_cmd_length>sizeof(local)-1)?(sizeof(local)-1):cdc_cmd_length;
 80033c6:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <main+0x1d0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80033cc:	d802      	bhi.n	80033d4 <main+0x8c>
 80033ce:	4b52      	ldr	r3, [pc, #328]	@ (8003518 <main+0x1d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <main+0x8e>
 80033d4:	237f      	movs	r3, #127	@ 0x7f
 80033d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      for (uint32_t i=0;i<n;i++) local[i]=cdc_cmd_buffer[i];
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033e0:	e010      	b.n	8003404 <main+0xbc>
 80033e2:	4a4e      	ldr	r2, [pc, #312]	@ (800351c <main+0x1d4>)
 80033e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b2d9      	uxtb	r1, r3
 80033ee:	1d3a      	adds	r2, r7, #4
 80033f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f4:	4413      	add	r3, r2
 80033f6:	460a      	mov	r2, r1
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033fe:	3301      	adds	r3, #1
 8003400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003404:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800340c:	429a      	cmp	r2, r3
 800340e:	d3e8      	bcc.n	80033e2 <main+0x9a>
      local[n]=0;
 8003410:	1d3a      	adds	r2, r7, #4
 8003412:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003416:	4413      	add	r3, r2
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
      cdc_cmd_ready=0;
 800341c:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <main+0x1cc>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]

      CLI_ProcessLine((const char*)local);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fbcf 	bl	8002bc8 <CLI_ProcessLine>
      put_prompt();
 800342a:	f7fe fac9 	bl	80019c0 <put_prompt>
    }

    /* 2) Heartbeat */
    hb_tick();
 800342e:	f7fe fad1 	bl	80019d4 <hb_tick>

    /* 3) Streaming do acelerômetro (~10 Hz) */
    if (g_app_state==STATE_STREAMING_ACCEL && HAL_GetTick()-t_acc>100){
 8003432:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <main+0x1d8>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d15c      	bne.n	80034f6 <main+0x1ae>
 800343c:	f000 fc20 	bl	8003c80 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	@ 0x64
 800344a:	d954      	bls.n	80034f6 <main+0x1ae>
      t_acc=HAL_GetTick();
 800344c:	f000 fc18 	bl	8003c80 <HAL_GetTick>
 8003450:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      int8_t x,y,z;
      if (MMA7660_ReadXYZ(&hi2c1,&x,&y,&z)){
 8003454:	f107 0385 	add.w	r3, r7, #133	@ 0x85
 8003458:	f107 0286 	add.w	r2, r7, #134	@ 0x86
 800345c:	f107 0187 	add.w	r1, r7, #135	@ 0x87
 8003460:	4830      	ldr	r0, [pc, #192]	@ (8003524 <main+0x1dc>)
 8003462:	f7fd fe59 	bl	8001118 <MMA7660_ReadXYZ>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d044      	beq.n	80034f6 <main+0x1ae>
        float fx=x,fy=y,fz=z;
 800346c:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003478:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 800347c:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003488:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 800348c:	f997 3085 	ldrsb.w	r3, [r7, #133]	@ 0x85
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003498:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        if (g_kalman_on){ fx=kalman_step(&kx,fx); fy=kalman_step(&ky,fy); fz=kalman_step(&kz,fz); }
 800349c:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <main+0x1e0>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d014      	beq.n	80034ce <main+0x186>
 80034a4:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 80034a8:	4820      	ldr	r0, [pc, #128]	@ (800352c <main+0x1e4>)
 80034aa:	f7fd fee7 	bl	800127c <kalman_step>
 80034ae:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
 80034b2:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 80034b6:	481e      	ldr	r0, [pc, #120]	@ (8003530 <main+0x1e8>)
 80034b8:	f7fd fee0 	bl	800127c <kalman_step>
 80034bc:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
 80034c0:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 80034c4:	481b      	ldr	r0, [pc, #108]	@ (8003534 <main+0x1ec>)
 80034c6:	f7fd fed9 	bl	800127c <kalman_step>
 80034ca:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
        printf("A:%d,%d,%d\r\n",(int)lrintf(fx),(int)lrintf(fy),(int)lrintf(fz));
 80034ce:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 80034d2:	f00a fa03 	bl	800d8dc <lrintf>
 80034d6:	4604      	mov	r4, r0
 80034d8:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 80034dc:	f00a f9fe 	bl	800d8dc <lrintf>
 80034e0:	4605      	mov	r5, r0
 80034e2:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 80034e6:	f00a f9f9 	bl	800d8dc <lrintf>
 80034ea:	4603      	mov	r3, r0
 80034ec:	462a      	mov	r2, r5
 80034ee:	4621      	mov	r1, r4
 80034f0:	4811      	ldr	r0, [pc, #68]	@ (8003538 <main+0x1f0>)
 80034f2:	f00b ff4f 	bl	800f394 <iprintf>
      }
    }

    /* 4) Upload binário para FPGA */
    if (g_bin_mode) process_fpga_upload();
 80034f6:	4b11      	ldr	r3, [pc, #68]	@ (800353c <main+0x1f4>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f43f af5d 	beq.w	80033bc <main+0x74>
 8003502:	f7fe fc47 	bl	8001d94 <process_fpga_upload>
    if (cdc_cmd_ready){
 8003506:	e759      	b.n	80033bc <main+0x74>
 8003508:	49742400 	.word	0x49742400
 800350c:	08011b48 	.word	0x08011b48
 8003510:	08011b90 	.word	0x08011b90
 8003514:	20001ef0 	.word	0x20001ef0
 8003518:	20001eec 	.word	0x20001eec
 800351c:	20001e6c 	.word	0x20001e6c
 8003520:	2000055c 	.word	0x2000055c
 8003524:	20000420 	.word	0x20000420
 8003528:	20000034 	.word	0x20000034
 800352c:	20000004 	.word	0x20000004
 8003530:	20000014 	.word	0x20000014
 8003534:	20000024 	.word	0x20000024
 8003538:	08011ba0 	.word	0x08011ba0
 800353c:	20000f65 	.word	0x20000f65

08003540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_MspInit+0x4c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a0f      	ldr	r2, [pc, #60]	@ (800358c <HAL_MspInit+0x4c>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <HAL_MspInit+0x4c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_MspInit+0x4c>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <HAL_MspInit+0x4c>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_MspInit+0x4c>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a38      	ldr	r2, [pc, #224]	@ (8003690 <HAL_ADC_MspInit+0x100>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10e      	bne.n	80035d0 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	4a36      	ldr	r2, [pc, #216]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035c2:	4b34      	ldr	r3, [pc, #208]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035ce:	e05a      	b.n	8003686 <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_ADC_MspInit+0x108>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d128      	bne.n	800362c <HAL_ADC_MspInit+0x9c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003612:	2302      	movs	r3, #2
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003616:	2303      	movs	r3, #3
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4619      	mov	r1, r3
 8003624:	481d      	ldr	r0, [pc, #116]	@ (800369c <HAL_ADC_MspInit+0x10c>)
 8003626:	f001 fdd3 	bl	80051d0 <HAL_GPIO_Init>
}
 800362a:	e02c      	b.n	8003686 <HAL_ADC_MspInit+0xf6>
  else if(hadc->Instance==ADC3)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <HAL_ADC_MspInit+0x110>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d127      	bne.n	8003686 <HAL_ADC_MspInit+0xf6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003644:	6453      	str	r3, [r2, #68]	@ 0x44
 8003646:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a0e      	ldr	r2, [pc, #56]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <HAL_ADC_MspInit+0x104>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800366e:	2308      	movs	r3, #8
 8003670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003672:	2303      	movs	r3, #3
 8003674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	4619      	mov	r1, r3
 8003680:	4806      	ldr	r0, [pc, #24]	@ (800369c <HAL_ADC_MspInit+0x10c>)
 8003682:	f001 fda5 	bl	80051d0 <HAL_GPIO_Init>
}
 8003686:	bf00      	nop
 8003688:	3730      	adds	r7, #48	@ 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40012000 	.word	0x40012000
 8003694:	40023800 	.word	0x40023800
 8003698:	40012100 	.word	0x40012100
 800369c:	40020000 	.word	0x40020000
 80036a0:	40012200 	.word	0x40012200

080036a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	@ (80036e0 <HAL_CRC_MspInit+0x3c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10d      	bne.n	80036d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <HAL_CRC_MspInit+0x40>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_CRC_MspInit+0x40>)
 80036c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <HAL_CRC_MspInit+0x40>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023000 	.word	0x40023000
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <HAL_DAC_MspInit+0x7c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d127      	bne.n	800375a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b16      	ldr	r3, [pc, #88]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 8003714:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003718:	6413      	str	r3, [r2, #64]	@ 0x40
 800371a:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a0e      	ldr	r2, [pc, #56]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <HAL_DAC_MspInit+0x80>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003742:	2310      	movs	r3, #16
 8003744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003746:	2303      	movs	r3, #3
 8003748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	4619      	mov	r1, r3
 8003754:	4805      	ldr	r0, [pc, #20]	@ (800376c <HAL_DAC_MspInit+0x84>)
 8003756:	f001 fd3b 	bl	80051d0 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800375a:	bf00      	nop
 800375c:	3728      	adds	r7, #40	@ 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40007400 	.word	0x40007400
 8003768:	40023800 	.word	0x40023800
 800376c:	40020000 	.word	0x40020000

08003770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <HAL_I2C_MspInit+0x84>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d12b      	bne.n	80037ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ae:	23c0      	movs	r3, #192	@ 0xc0
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b2:	2312      	movs	r3, #18
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037be:	2304      	movs	r3, #4
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	480c      	ldr	r0, [pc, #48]	@ (80037fc <HAL_I2C_MspInit+0x8c>)
 80037ca:	f001 fd01 	bl	80051d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a08      	ldr	r2, [pc, #32]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	@ 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40005400 	.word	0x40005400
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020400 	.word	0x40020400

08003800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <HAL_SPI_MspInit+0xc0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d149      	bne.n	80038b6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b27      	ldr	r3, [pc, #156]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 800382c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b20      	ldr	r3, [pc, #128]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6313      	str	r3, [r2, #48]	@ 0x30
 800384e:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6313      	str	r3, [r2, #48]	@ 0x30
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <HAL_SPI_MspInit+0xc4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003876:	2360      	movs	r3, #96	@ 0x60
 8003878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003886:	2305      	movs	r3, #5
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <HAL_SPI_MspInit+0xc8>)
 8003892:	f001 fc9d 	bl	80051d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003896:	2320      	movs	r3, #32
 8003898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	2303      	movs	r3, #3
 80038a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038a6:	2305      	movs	r3, #5
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	4806      	ldr	r0, [pc, #24]	@ (80038cc <HAL_SPI_MspInit+0xcc>)
 80038b2:	f001 fc8d 	bl	80051d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80038b6:	bf00      	nop
 80038b8:	3728      	adds	r7, #40	@ 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40013000 	.word	0x40013000
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400

080038d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e0:	d115      	bne.n	800390e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_TIM_Base_MspInit+0x48>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <HAL_TIM_Base_MspInit+0x48>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_TIM_Base_MspInit+0x48>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	201c      	movs	r0, #28
 8003904:	f001 f8c1 	bl	8004a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003908:	201c      	movs	r0, #28
 800390a:	f001 f8da 	bl	8004ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) { }
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <NMI_Handler+0x4>

08003924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <HardFault_Handler+0x4>

0800392c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <MemManage_Handler+0x4>

08003934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <BusFault_Handler+0x4>

0800393c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <UsageFault_Handler+0x4>

08003944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003972:	f000 f971 	bl	8003c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}

0800397a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800397e:	2008      	movs	r0, #8
 8003980:	f001 fdf6 	bl	8005570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800398c:	4802      	ldr	r0, [pc, #8]	@ (8003998 <TIM2_IRQHandler+0x10>)
 800398e:	f005 fb40 	bl	8009012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200004cc 	.word	0x200004cc

0800399c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80039a0:	4802      	ldr	r0, [pc, #8]	@ (80039ac <OTG_FS_IRQHandler+0x10>)
 80039a2:	f003 f89f 	bl	8006ae4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2000317c 	.word	0x2000317c

080039b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return 1;
 80039b4:	2301      	movs	r3, #1
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_kill>:

int _kill(int pid, int sig)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039ca:	f00b fefb 	bl	800f7c4 <__errno>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2216      	movs	r2, #22
 80039d2:	601a      	str	r2, [r3, #0]
  return -1;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_exit>:

void _exit (int status)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ffe7 	bl	80039c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039f2:	bf00      	nop
 80039f4:	e7fd      	b.n	80039f2 <_exit+0x12>

080039f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e00a      	b.n	8003a1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a08:	f3af 8000 	nop.w
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	60ba      	str	r2, [r7, #8]
 8003a14:	b2ca      	uxtb	r2, r1
 8003a16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	dbf0      	blt.n	8003a08 <_read+0x12>
  }

  return len;
 8003a26:	687b      	ldr	r3, [r7, #4]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e009      	b.n	8003a56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	60ba      	str	r2, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	dbf1      	blt.n	8003a42 <_write+0x12>
  }
  return len;
 8003a5e:	687b      	ldr	r3, [r7, #4]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_close>:

int _close(int file)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a90:	605a      	str	r2, [r3, #4]
  return 0;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_isatty>:

int _isatty(int file)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003aa8:	2301      	movs	r3, #1
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad8:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <_sbrk+0x5c>)
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <_sbrk+0x60>)
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <_sbrk+0x64>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <_sbrk+0x64>)
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <_sbrk+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <_sbrk+0x64>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d207      	bcs.n	8003b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b00:	f00b fe60 	bl	800f7c4 <__errno>
 8003b04:	4603      	mov	r3, r0
 8003b06:	220c      	movs	r2, #12
 8003b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	e009      	b.n	8003b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b10:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <_sbrk+0x64>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <_sbrk+0x64>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <_sbrk+0x64>)
 8003b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20020000 	.word	0x20020000
 8003b30:	00000400 	.word	0x00000400
 8003b34:	20001b84 	.word	0x20001b84
 8003b38:	200039d0 	.word	0x200039d0

08003b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <SystemInit+0x20>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	4a05      	ldr	r2, [pc, #20]	@ (8003b5c <SystemInit+0x20>)
 8003b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b64:	f7ff ffea 	bl	8003b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b68:	480c      	ldr	r0, [pc, #48]	@ (8003b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b6a:	490d      	ldr	r1, [pc, #52]	@ (8003ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b70:	e002      	b.n	8003b78 <LoopCopyDataInit>

08003b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b76:	3304      	adds	r3, #4

08003b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b7c:	d3f9      	bcc.n	8003b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b80:	4c0a      	ldr	r4, [pc, #40]	@ (8003bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b84:	e001      	b.n	8003b8a <LoopFillZerobss>

08003b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b88:	3204      	adds	r2, #4

08003b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b8c:	d3fb      	bcc.n	8003b86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f00b fe1f 	bl	800f7d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b92:	f7ff fbd9 	bl	8003348 <main>
  bx  lr    
 8003b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba0:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8003ba4:	080124fc 	.word	0x080124fc
  ldr r2, =_sbss
 8003ba8:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8003bac:	200039cc 	.word	0x200039cc

08003bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC_IRQHandler>
	...

08003bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_Init+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_Init+0x40>)
 8003bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <HAL_Init+0x40>)
 8003bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_Init+0x40>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	@ (8003bf4 <HAL_Init+0x40>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bdc:	2003      	movs	r0, #3
 8003bde:	f000 ff49 	bl	8004a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003be2:	200f      	movs	r0, #15
 8003be4:	f000 f808 	bl	8003bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be8:	f7ff fcaa 	bl	8003540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00

08003bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_InitTick+0x54>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_InitTick+0x58>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff61 	bl	8004ade <HAL_SYSTICK_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00e      	b.n	8003c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d80a      	bhi.n	8003c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f000 ff29 	bl	8004a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c38:	4a06      	ldr	r2, [pc, #24]	@ (8003c54 <HAL_InitTick+0x5c>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	2000004c 	.word	0x2000004c
 8003c50:	20000054 	.word	0x20000054
 8003c54:	20000050 	.word	0x20000050

08003c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_IncTick+0x20>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_IncTick+0x24>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <HAL_IncTick+0x24>)
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000054 	.word	0x20000054
 8003c7c:	20001b88 	.word	0x20001b88

08003c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return uwTick;
 8003c84:	4b03      	ldr	r3, [pc, #12]	@ (8003c94 <HAL_GetTick+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20001b88 	.word	0x20001b88

08003c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7ff ffee 	bl	8003c80 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d005      	beq.n	8003cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <HAL_Delay+0x44>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cbe:	bf00      	nop
 8003cc0:	f7ff ffde 	bl	8003c80 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8f7      	bhi.n	8003cc0 <HAL_Delay+0x28>
  {
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000054 	.word	0x20000054

08003ce0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e033      	b.n	8003d5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fc46 	bl	8003590 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d26:	f023 0302 	bic.w	r3, r3, #2
 8003d2a:	f043 0202 	orr.w	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fc50 	bl	80045d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d4e:	e001      	b.n	8003d54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_Start+0x1a>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0b2      	b.n	8003ee8 <HAL_ADC_Start+0x180>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d018      	beq.n	8003dca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003da8:	4b52      	ldr	r3, [pc, #328]	@ (8003ef4 <HAL_ADC_Start+0x18c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a52      	ldr	r2, [pc, #328]	@ (8003ef8 <HAL_ADC_Start+0x190>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0c9a      	lsrs	r2, r3, #18
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003dbc:	e002      	b.n	8003dc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f9      	bne.n	8003dbe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d17a      	bne.n	8003ece <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e16:	d106      	bne.n	8003e26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f023 0206 	bic.w	r2, r3, #6
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e24:	e002      	b.n	8003e2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e34:	4b31      	ldr	r3, [pc, #196]	@ (8003efc <HAL_ADC_Start+0x194>)
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e40:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12a      	bne.n	8003ea4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_ADC_Start+0x198>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d015      	beq.n	8003e84 <HAL_ADC_Start+0x11c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a29      	ldr	r2, [pc, #164]	@ (8003f04 <HAL_ADC_Start+0x19c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d105      	bne.n	8003e6e <HAL_ADC_Start+0x106>
 8003e62:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <HAL_ADC_Start+0x194>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a25      	ldr	r2, [pc, #148]	@ (8003f08 <HAL_ADC_Start+0x1a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d136      	bne.n	8003ee6 <HAL_ADC_Start+0x17e>
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_ADC_Start+0x194>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d130      	bne.n	8003ee6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d129      	bne.n	8003ee6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	e020      	b.n	8003ee6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_ADC_Start+0x198>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d11b      	bne.n	8003ee6 <HAL_ADC_Start+0x17e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d114      	bne.n	8003ee6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e00b      	b.n	8003ee6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f043 0210 	orr.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	2000004c 	.word	0x2000004c
 8003ef8:	431bde83 	.word	0x431bde83
 8003efc:	40012300 	.word	0x40012300
 8003f00:	40012000 	.word	0x40012000
 8003f04:	40012100 	.word	0x40012100
 8003f08:	40012200 	.word	0x40012200

08003f0c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_Stop+0x16>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e021      	b.n	8003f66 <HAL_ADC_Stop+0x5a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d113      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e063      	b.n	8004080 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7ff fe62 	bl	8003c80 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fbe:	e021      	b.n	8004004 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d01d      	beq.n	8004004 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_ADC_PollForConversion+0x6c>
 8003fce:	f7ff fe57 	bl	8003c80 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d212      	bcs.n	8004004 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d00b      	beq.n	8004004 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e03d      	b.n	8004080 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d1d6      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0212 	mvn.w	r2, #18
 800401a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d123      	bne.n	800407e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11f      	bne.n	800407e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d111      	bne.n	800407e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_Start_DMA+0x22>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0eb      	b.n	8004282 <HAL_ADC_Start_DMA+0x1fa>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d018      	beq.n	80040f2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040d0:	4b6e      	ldr	r3, [pc, #440]	@ (800428c <HAL_ADC_Start_DMA+0x204>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004290 <HAL_ADC_Start_DMA+0x208>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0c9a      	lsrs	r2, r3, #18
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80040e4:	e002      	b.n	80040ec <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f9      	bne.n	80040e6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004100:	d107      	bne.n	8004112 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 80a3 	bne.w	8004268 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800414c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004160:	d106      	bne.n	8004170 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f023 0206 	bic.w	r2, r3, #6
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
 800416e:	e002      	b.n	8004176 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800417e:	4b45      	ldr	r3, [pc, #276]	@ (8004294 <HAL_ADC_Start_DMA+0x20c>)
 8004180:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	4a44      	ldr	r2, [pc, #272]	@ (8004298 <HAL_ADC_Start_DMA+0x210>)
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	4a43      	ldr	r2, [pc, #268]	@ (800429c <HAL_ADC_Start_DMA+0x214>)
 8004190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	4a42      	ldr	r2, [pc, #264]	@ (80042a0 <HAL_ADC_Start_DMA+0x218>)
 8004198:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80041a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80041b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	334c      	adds	r3, #76	@ 0x4c
 80041ce:	4619      	mov	r1, r3
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f000 ff06 	bl	8004fe4 <HAL_DMA_Start_IT>
 80041d8:	4603      	mov	r3, r0
 80041da:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d12a      	bne.n	800423e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2d      	ldr	r2, [pc, #180]	@ (80042a4 <HAL_ADC_Start_DMA+0x21c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d015      	beq.n	800421e <HAL_ADC_Start_DMA+0x196>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2c      	ldr	r2, [pc, #176]	@ (80042a8 <HAL_ADC_Start_DMA+0x220>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d105      	bne.n	8004208 <HAL_ADC_Start_DMA+0x180>
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_ADC_Start_DMA+0x20c>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <HAL_ADC_Start_DMA+0x224>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d136      	bne.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
 8004212:	4b20      	ldr	r3, [pc, #128]	@ (8004294 <HAL_ADC_Start_DMA+0x20c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	d130      	bne.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d129      	bne.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e020      	b.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <HAL_ADC_Start_DMA+0x21c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d11b      	bne.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d114      	bne.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	e00b      	b.n	8004280 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	f043 0210 	orr.w	r2, r3, #16
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004278:	f043 0201 	orr.w	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8004280:	7ffb      	ldrb	r3, [r7, #31]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000004c 	.word	0x2000004c
 8004290:	431bde83 	.word	0x431bde83
 8004294:	40012300 	.word	0x40012300
 8004298:	080047d1 	.word	0x080047d1
 800429c:	0800488b 	.word	0x0800488b
 80042a0:	080048a7 	.word	0x080048a7
 80042a4:	40012000 	.word	0x40012000
 80042a8:	40012100 	.word	0x40012100
 80042ac:	40012200 	.word	0x40012200

080042b0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_Stop_DMA+0x1a>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e048      	b.n	800435c <HAL_ADC_Stop_DMA+0xac>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d130      	bne.n	8004352 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042fe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d10f      	bne.n	800432e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	4618      	mov	r0, r3
 8004314:	f000 febe 	bl	8005094 <HAL_DMA_Abort>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800433c:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e105      	b.n	80045bc <HAL_ADC_ConfigChannel+0x228>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d925      	bls.n	800440c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	3b1e      	subs	r3, #30
 80043d6:	2207      	movs	r2, #7
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43da      	mvns	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	400a      	ands	r2, r1
 80043e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4618      	mov	r0, r3
 80043f8:	4603      	mov	r3, r0
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4403      	add	r3, r0
 80043fe:	3b1e      	subs	r3, #30
 8004400:	409a      	lsls	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e022      	b.n	8004452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	2207      	movs	r2, #7
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	4618      	mov	r0, r3
 8004442:	4603      	mov	r3, r0
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4403      	add	r3, r0
 8004448:	409a      	lsls	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d824      	bhi.n	80044a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b05      	subs	r3, #5
 800446c:	221f      	movs	r2, #31
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	3b05      	subs	r3, #5
 8004496:	fa00 f203 	lsl.w	r2, r0, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80044a2:	e04c      	b.n	800453e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d824      	bhi.n	80044f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	3b23      	subs	r3, #35	@ 0x23
 80044be:	221f      	movs	r2, #31
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	400a      	ands	r2, r1
 80044cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4618      	mov	r0, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	3b23      	subs	r3, #35	@ 0x23
 80044e8:	fa00 f203 	lsl.w	r2, r0, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80044f4:	e023      	b.n	800453e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3b41      	subs	r3, #65	@ 0x41
 8004508:	221f      	movs	r2, #31
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	400a      	ands	r2, r1
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	4618      	mov	r0, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	3b41      	subs	r3, #65	@ 0x41
 8004532:	fa00 f203 	lsl.w	r2, r0, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800453e:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <HAL_ADC_ConfigChannel+0x234>)
 8004540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	@ (80045cc <HAL_ADC_ConfigChannel+0x238>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1cc>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b12      	cmp	r3, #18
 8004552:	d105      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_ADC_ConfigChannel+0x238>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d123      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d003      	beq.n	800457a <HAL_ADC_ConfigChannel+0x1e6>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b11      	cmp	r3, #17
 8004578:	d11b      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d111      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <HAL_ADC_ConfigChannel+0x240>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0c9a      	lsrs	r2, r3, #18
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045a4:	e002      	b.n	80045ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f9      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012300 	.word	0x40012300
 80045cc:	40012000 	.word	0x40012000
 80045d0:	2000004c 	.word	0x2000004c
 80045d4:	431bde83 	.word	0x431bde83

080045d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e0:	4b79      	ldr	r3, [pc, #484]	@ (80047c8 <ADC_Init+0x1f0>)
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800460c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <ADC_Init+0x1f4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800467e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6899      	ldr	r1, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	e00f      	b.n	80046d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0202 	bic.w	r2, r2, #2
 80046e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6899      	ldr	r1, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7e1b      	ldrb	r3, [r3, #24]
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01b      	beq.n	800473c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	3b01      	subs	r3, #1
 8004730:	035a      	lsls	r2, r3, #13
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	e007      	b.n	800474c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	3b01      	subs	r3, #1
 8004768:	051a      	lsls	r2, r3, #20
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800478e:	025a      	lsls	r2, r3, #9
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	029a      	lsls	r2, r3, #10
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40012300 	.word	0x40012300
 80047cc:	0f000001 	.word	0x0f000001

080047d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d13c      	bne.n	8004864 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d12b      	bne.n	800485c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004808:	2b00      	cmp	r3, #0
 800480a:	d127      	bne.n	800485c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004824:	2b00      	cmp	r3, #0
 8004826:	d119      	bne.n	800485c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0220 	bic.w	r2, r2, #32
 8004836:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7fd f90f 	bl	8001a80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004862:	e00e      	b.n	8004882 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff fd84 	bl	800437e <HAL_ADC_ErrorCallback>
}
 8004876:	e004      	b.n	8004882 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7fd f8bd 	bl	8001a18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2240      	movs	r2, #64	@ 0x40
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0204 	orr.w	r2, r3, #4
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fd59 	bl	800437e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <__NVIC_SetPriorityGrouping>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <__NVIC_SetPriorityGrouping+0x44>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004906:	4a04      	ldr	r2, [pc, #16]	@ (8004918 <__NVIC_SetPriorityGrouping+0x44>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	60d3      	str	r3, [r2, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <__NVIC_GetPriorityGrouping>:
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004920:	4b04      	ldr	r3, [pc, #16]	@ (8004934 <__NVIC_GetPriorityGrouping+0x18>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	f003 0307 	and.w	r3, r3, #7
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <__NVIC_EnableIRQ>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db0b      	blt.n	8004962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	4907      	ldr	r1, [pc, #28]	@ (8004970 <__NVIC_EnableIRQ+0x38>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	e000e100 	.word	0xe000e100

08004974 <__NVIC_SetPriority>:
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004984:	2b00      	cmp	r3, #0
 8004986:	db0a      	blt.n	800499e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	490c      	ldr	r1, [pc, #48]	@ (80049c0 <__NVIC_SetPriority+0x4c>)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	0112      	lsls	r2, r2, #4
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	440b      	add	r3, r1
 8004998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800499c:	e00a      	b.n	80049b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	4908      	ldr	r1, [pc, #32]	@ (80049c4 <__NVIC_SetPriority+0x50>)
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3b04      	subs	r3, #4
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	440b      	add	r3, r1
 80049b2:	761a      	strb	r2, [r3, #24]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000e100 	.word	0xe000e100
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <NVIC_EncodePriority>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	@ 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f1c3 0307 	rsb	r3, r3, #7
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf28      	it	cs
 80049e6:	2304      	movcs	r3, #4
 80049e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d902      	bls.n	80049f8 <NVIC_EncodePriority+0x30>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3b03      	subs	r3, #3
 80049f6:	e000      	b.n	80049fa <NVIC_EncodePriority+0x32>
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a10:	f04f 31ff 	mov.w	r1, #4294967295
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	43d9      	mvns	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a20:	4313      	orrs	r3, r2
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	@ 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a40:	d301      	bcc.n	8004a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a46:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <SysTick_Config+0x40>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4e:	210f      	movs	r1, #15
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	f7ff ff8e 	bl	8004974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <SysTick_Config+0x40>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <SysTick_Config+0x40>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010

08004a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff29 	bl	80048d4 <__NVIC_SetPriorityGrouping>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9c:	f7ff ff3e 	bl	800491c <__NVIC_GetPriorityGrouping>
 8004aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff8e 	bl	80049c8 <NVIC_EncodePriority>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff5d 	bl	8004974 <__NVIC_SetPriority>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff31 	bl	8004938 <__NVIC_EnableIRQ>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ffa2 	bl	8004a30 <SysTick_Config>
 8004aec:	4603      	mov	r3, r0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e00e      	b.n	8004b26 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	795b      	ldrb	r3, [r3, #5]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fe fdc3 	bl	80036a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2202      	movs	r2, #2
 8004b42:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e00a      	b.n	8004b60 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3f0      	bcc.n	8004b4a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004b76:	693b      	ldr	r3, [r7, #16]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e014      	b.n	8004bc0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	791b      	ldrb	r3, [r3, #4]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fd9e 	bl	80036e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0a2      	b.n	8004d26 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	795b      	ldrb	r3, [r3, #5]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_DAC_Start_DMA+0x24>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e09c      	b.n	8004d26 <HAL_DAC_Start_DMA+0x15e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d129      	bne.n	8004c52 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4a4b      	ldr	r2, [pc, #300]	@ (8004d30 <HAL_DAC_Start_DMA+0x168>)
 8004c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d34 <HAL_DAC_Start_DMA+0x16c>)
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a49      	ldr	r2, [pc, #292]	@ (8004d38 <HAL_DAC_Start_DMA+0x170>)
 8004c14:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c24:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_DAC_Start_DMA+0x6c>
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d005      	beq.n	8004c3e <HAL_DAC_Start_DMA+0x76>
 8004c32:	e009      	b.n	8004c48 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	613b      	str	r3, [r7, #16]
        break;
 8004c3c:	e033      	b.n	8004ca6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	613b      	str	r3, [r7, #16]
        break;
 8004c46:	e02e      	b.n	8004ca6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	613b      	str	r3, [r7, #16]
        break;
 8004c50:	e029      	b.n	8004ca6 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4a39      	ldr	r2, [pc, #228]	@ (8004d3c <HAL_DAC_Start_DMA+0x174>)
 8004c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a38      	ldr	r2, [pc, #224]	@ (8004d40 <HAL_DAC_Start_DMA+0x178>)
 8004c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <HAL_DAC_Start_DMA+0x17c>)
 8004c68:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_DAC_Start_DMA+0xc0>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d005      	beq.n	8004c92 <HAL_DAC_Start_DMA+0xca>
 8004c86:	e009      	b.n	8004c9c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	613b      	str	r3, [r7, #16]
        break;
 8004c90:	e009      	b.n	8004ca6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3318      	adds	r3, #24
 8004c98:	613b      	str	r3, [r7, #16]
        break;
 8004c9a:	e004      	b.n	8004ca6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	331c      	adds	r3, #28
 8004ca2:	613b      	str	r3, [r7, #16]
        break;
 8004ca4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d111      	bne.n	8004cd0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6898      	ldr	r0, [r3, #8]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	f000 f98d 	bl	8004fe4 <HAL_DMA_Start_IT>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]
 8004cce:	e010      	b.n	8004cf2 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004cde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68d8      	ldr	r0, [r3, #12]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	f000 f97b 	bl	8004fe4 <HAL_DMA_Start_IT>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10c      	bne.n	8004d18 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e005      	b.n	8004d24 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	08004ed1 	.word	0x08004ed1
 8004d34:	08004ef3 	.word	0x08004ef3
 8004d38:	08004f0f 	.word	0x08004f0f
 8004d3c:	08004f79 	.word	0x08004f79
 8004d40:	08004f9b 	.word	0x08004f9b
 8004d44:	08004fb7 	.word	0x08004fb7

08004d48 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e03e      	b.n	8004dda <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43da      	mvns	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	400a      	ands	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2201      	movs	r2, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	400a      	ands	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f977 	bl	8005094 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e00c      	b.n	8004dd2 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f969 	bl	8005094 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004dd0:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b089      	sub	sp, #36	@ 0x24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_DAC_ConfigChannel+0x1c>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e042      	b.n	8004ec4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	795b      	ldrb	r3, [r3, #5]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_DAC_ConfigChannel+0x2c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e03c      	b.n	8004ec4 <HAL_DAC_ConfigChannel+0xa6>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2202      	movs	r2, #2
 8004e54:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	22c0      	movs	r2, #192	@ 0xc0
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43da      	mvns	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3724      	adds	r7, #36	@ 0x24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff7f 	bl	8004de2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	711a      	strb	r2, [r3, #4]
}
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff ff78 	bl	8004df6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ff6e 	bl	8004e0a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	711a      	strb	r2, [r3, #4]
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff ffd8 	bl	8004f3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	711a      	strb	r2, [r3, #4]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff ffd1 	bl	8004f50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f043 0204 	orr.w	r2, r3, #4
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ffc7 	bl	8004f64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	711a      	strb	r2, [r3, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_DMA_Start_IT+0x26>
 8005006:	2302      	movs	r3, #2
 8005008:	e040      	b.n	800508c <HAL_DMA_Start_IT+0xa8>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d12f      	bne.n	800507e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f89e 	bl	8005174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	223f      	movs	r2, #63	@ 0x3f
 800503e:	409a      	lsls	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0216 	orr.w	r2, r2, #22
 8005052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e005      	b.n	800508a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005086:	2302      	movs	r3, #2
 8005088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050a2:	f7fe fded 	bl	8003c80 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d008      	beq.n	80050c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2280      	movs	r2, #128	@ 0x80
 80050b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e052      	b.n	800516c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0216 	bic.w	r2, r2, #22
 80050d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_DMA_Abort+0x62>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0208 	bic.w	r2, r2, #8
 8005104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005116:	e013      	b.n	8005140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005118:	f7fe fdb2 	bl	8003c80 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b05      	cmp	r3, #5
 8005124:	d90c      	bls.n	8005140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e015      	b.n	800516c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e4      	bne.n	8005118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	223f      	movs	r2, #63	@ 0x3f
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d108      	bne.n	80051b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051b2:	e007      	b.n	80051c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b089      	sub	sp, #36	@ 0x24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e16b      	b.n	80054c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051ec:	2201      	movs	r2, #1
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	429a      	cmp	r2, r3
 8005206:	f040 815a 	bne.w	80054be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d005      	beq.n	8005222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800521e:	2b02      	cmp	r3, #2
 8005220:	d130      	bne.n	8005284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	2203      	movs	r2, #3
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005258:	2201      	movs	r2, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 0201 	and.w	r2, r3, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4313      	orrs	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	2b03      	cmp	r3, #3
 800528e:	d017      	beq.n	80052c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	2203      	movs	r2, #3
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d123      	bne.n	8005314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	08da      	lsrs	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3208      	adds	r2, #8
 80052d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	220f      	movs	r2, #15
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	08da      	lsrs	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3208      	adds	r2, #8
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	2203      	movs	r2, #3
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 0203 	and.w	r2, r3, #3
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80b4 	beq.w	80054be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	4b60      	ldr	r3, [pc, #384]	@ (80054dc <HAL_GPIO_Init+0x30c>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	4a5f      	ldr	r2, [pc, #380]	@ (80054dc <HAL_GPIO_Init+0x30c>)
 8005360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005364:	6453      	str	r3, [r2, #68]	@ 0x44
 8005366:	4b5d      	ldr	r3, [pc, #372]	@ (80054dc <HAL_GPIO_Init+0x30c>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005372:	4a5b      	ldr	r2, [pc, #364]	@ (80054e0 <HAL_GPIO_Init+0x310>)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a52      	ldr	r2, [pc, #328]	@ (80054e4 <HAL_GPIO_Init+0x314>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <HAL_GPIO_Init+0x226>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a51      	ldr	r2, [pc, #324]	@ (80054e8 <HAL_GPIO_Init+0x318>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d025      	beq.n	80053f2 <HAL_GPIO_Init+0x222>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a50      	ldr	r2, [pc, #320]	@ (80054ec <HAL_GPIO_Init+0x31c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <HAL_GPIO_Init+0x21e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a4f      	ldr	r2, [pc, #316]	@ (80054f0 <HAL_GPIO_Init+0x320>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d019      	beq.n	80053ea <HAL_GPIO_Init+0x21a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a4e      	ldr	r2, [pc, #312]	@ (80054f4 <HAL_GPIO_Init+0x324>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_GPIO_Init+0x216>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a4d      	ldr	r2, [pc, #308]	@ (80054f8 <HAL_GPIO_Init+0x328>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00d      	beq.n	80053e2 <HAL_GPIO_Init+0x212>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4c      	ldr	r2, [pc, #304]	@ (80054fc <HAL_GPIO_Init+0x32c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <HAL_GPIO_Init+0x20e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005500 <HAL_GPIO_Init+0x330>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_GPIO_Init+0x20a>
 80053d6:	2307      	movs	r3, #7
 80053d8:	e00e      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053da:	2308      	movs	r3, #8
 80053dc:	e00c      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053de:	2306      	movs	r3, #6
 80053e0:	e00a      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053e2:	2305      	movs	r3, #5
 80053e4:	e008      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053e6:	2304      	movs	r3, #4
 80053e8:	e006      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053ea:	2303      	movs	r3, #3
 80053ec:	e004      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e002      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_GPIO_Init+0x228>
 80053f6:	2300      	movs	r3, #0
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	f002 0203 	and.w	r2, r2, #3
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	4093      	lsls	r3, r2
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005408:	4935      	ldr	r1, [pc, #212]	@ (80054e0 <HAL_GPIO_Init+0x310>)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	3302      	adds	r3, #2
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005416:	4b3b      	ldr	r3, [pc, #236]	@ (8005504 <HAL_GPIO_Init+0x334>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800543a:	4a32      	ldr	r2, [pc, #200]	@ (8005504 <HAL_GPIO_Init+0x334>)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005440:	4b30      	ldr	r3, [pc, #192]	@ (8005504 <HAL_GPIO_Init+0x334>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005464:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_GPIO_Init+0x334>)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800546a:	4b26      	ldr	r3, [pc, #152]	@ (8005504 <HAL_GPIO_Init+0x334>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	43db      	mvns	r3, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4013      	ands	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800548e:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <HAL_GPIO_Init+0x334>)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_GPIO_Init+0x334>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054b8:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <HAL_GPIO_Init+0x334>)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3301      	adds	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	f67f ae90 	bls.w	80051ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3724      	adds	r7, #36	@ 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40020400 	.word	0x40020400
 80054ec:	40020800 	.word	0x40020800
 80054f0:	40020c00 	.word	0x40020c00
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40021400 	.word	0x40021400
 80054fc:	40021800 	.word	0x40021800
 8005500:	40021c00 	.word	0x40021c00
 8005504:	40013c00 	.word	0x40013c00

08005508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	807b      	strh	r3, [r7, #2]
 8005514:	4613      	mov	r3, r2
 8005516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005518:	787b      	ldrb	r3, [r7, #1]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005524:	e003      	b.n	800552e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005526:	887b      	ldrh	r3, [r7, #2]
 8005528:	041a      	lsls	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	619a      	str	r2, [r3, #24]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	041a      	lsls	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43d9      	mvns	r1, r3
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	400b      	ands	r3, r1
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f806 	bl	80055a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40013c00 	.word	0x40013c00

080055a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e12b      	b.n	8005822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fe f8c6 	bl	8003770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800560a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800561a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800561c:	f002 ffa0 	bl	8008560 <HAL_RCC_GetPCLK1Freq>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4a81      	ldr	r2, [pc, #516]	@ (800582c <HAL_I2C_Init+0x274>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d807      	bhi.n	800563c <HAL_I2C_Init+0x84>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a80      	ldr	r2, [pc, #512]	@ (8005830 <HAL_I2C_Init+0x278>)
 8005630:	4293      	cmp	r3, r2
 8005632:	bf94      	ite	ls
 8005634:	2301      	movls	r3, #1
 8005636:	2300      	movhi	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e006      	b.n	800564a <HAL_I2C_Init+0x92>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a7d      	ldr	r2, [pc, #500]	@ (8005834 <HAL_I2C_Init+0x27c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	bf94      	ite	ls
 8005644:	2301      	movls	r3, #1
 8005646:	2300      	movhi	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0e7      	b.n	8005822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a78      	ldr	r2, [pc, #480]	@ (8005838 <HAL_I2C_Init+0x280>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	0c9b      	lsrs	r3, r3, #18
 800565c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a6a      	ldr	r2, [pc, #424]	@ (800582c <HAL_I2C_Init+0x274>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d802      	bhi.n	800568c <HAL_I2C_Init+0xd4>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3301      	adds	r3, #1
 800568a:	e009      	b.n	80056a0 <HAL_I2C_Init+0xe8>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	4a69      	ldr	r2, [pc, #420]	@ (800583c <HAL_I2C_Init+0x284>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	3301      	adds	r3, #1
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80056b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	495c      	ldr	r1, [pc, #368]	@ (800582c <HAL_I2C_Init+0x274>)
 80056bc:	428b      	cmp	r3, r1
 80056be:	d819      	bhi.n	80056f4 <HAL_I2C_Init+0x13c>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1e59      	subs	r1, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056d4:	400b      	ands	r3, r1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_I2C_Init+0x138>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1e59      	subs	r1, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	e051      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 80056f0:	2304      	movs	r3, #4
 80056f2:	e04f      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d111      	bne.n	8005720 <HAL_I2C_Init+0x168>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	440b      	add	r3, r1
 800570a:	fbb0 f3f3 	udiv	r3, r0, r3
 800570e:	3301      	adds	r3, #1
 8005710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e012      	b.n	8005746 <HAL_I2C_Init+0x18e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1e58      	subs	r0, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	0099      	lsls	r1, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	fbb0 f3f3 	udiv	r3, r0, r3
 8005736:	3301      	adds	r3, #1
 8005738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Init+0x196>
 800574a:	2301      	movs	r3, #1
 800574c:	e022      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10e      	bne.n	8005774 <HAL_I2C_Init+0x1bc>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1e58      	subs	r0, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6859      	ldr	r1, [r3, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	440b      	add	r3, r1
 8005764:	fbb0 f3f3 	udiv	r3, r0, r3
 8005768:	3301      	adds	r3, #1
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005772:	e00f      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1e58      	subs	r0, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	0099      	lsls	r1, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	fbb0 f3f3 	udiv	r3, r0, r3
 800578a:	3301      	adds	r3, #1
 800578c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	6809      	ldr	r1, [r1, #0]
 8005798:	4313      	orrs	r3, r2
 800579a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80057c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6911      	ldr	r1, [r2, #16]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68d2      	ldr	r2, [r2, #12]
 80057ce:	4311      	orrs	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	000186a0 	.word	0x000186a0
 8005830:	001e847f 	.word	0x001e847f
 8005834:	003d08ff 	.word	0x003d08ff
 8005838:	431bde83 	.word	0x431bde83
 800583c:	10624dd3 	.word	0x10624dd3

08005840 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	461a      	mov	r2, r3
 800584e:	4603      	mov	r3, r0
 8005850:	817b      	strh	r3, [r7, #10]
 8005852:	460b      	mov	r3, r1
 8005854:	813b      	strh	r3, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800585a:	f7fe fa11 	bl	8003c80 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b20      	cmp	r3, #32
 800586a:	f040 80d9 	bne.w	8005a20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	2319      	movs	r3, #25
 8005874:	2201      	movs	r2, #1
 8005876:	496d      	ldr	r1, [pc, #436]	@ (8005a2c <HAL_I2C_Mem_Write+0x1ec>)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fdb9 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	e0cc      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_I2C_Mem_Write+0x56>
 8005892:	2302      	movs	r3, #2
 8005894:	e0c5      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d007      	beq.n	80058bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2221      	movs	r2, #33	@ 0x21
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2240      	movs	r2, #64	@ 0x40
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80058ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005a30 <HAL_I2C_Mem_Write+0x1f0>)
 80058fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058fe:	88f8      	ldrh	r0, [r7, #6]
 8005900:	893a      	ldrh	r2, [r7, #8]
 8005902:	8979      	ldrh	r1, [r7, #10]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4603      	mov	r3, r0
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fbf0 	bl	80060f4 <I2C_RequestMemoryWrite>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d052      	beq.n	80059c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e081      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fe7e 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	2b04      	cmp	r3, #4
 8005934:	d107      	bne.n	8005946 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e06b      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d11b      	bne.n	80059c0 <HAL_I2C_Mem_Write+0x180>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d017      	beq.n	80059c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1aa      	bne.n	800591e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fe71 	bl	80066b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e016      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	00100002 	.word	0x00100002
 8005a30:	ffff0000 	.word	0xffff0000

08005a34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	460b      	mov	r3, r1
 8005a48:	813b      	strh	r3, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a4e:	f7fe f917 	bl	8003c80 <HAL_GetTick>
 8005a52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f040 8214 	bne.w	8005e8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2319      	movs	r3, #25
 8005a68:	2201      	movs	r2, #1
 8005a6a:	497b      	ldr	r1, [pc, #492]	@ (8005c58 <HAL_I2C_Mem_Read+0x224>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fcbf 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e207      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_I2C_Mem_Read+0x56>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e200      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d007      	beq.n	8005ab0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2222      	movs	r2, #34	@ 0x22
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2240      	movs	r2, #64	@ 0x40
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ada:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a5b      	ldr	r2, [pc, #364]	@ (8005c5c <HAL_I2C_Mem_Read+0x228>)
 8005af0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af2:	88f8      	ldrh	r0, [r7, #6]
 8005af4:	893a      	ldrh	r2, [r7, #8]
 8005af6:	8979      	ldrh	r1, [r7, #10]
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4603      	mov	r3, r0
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fb8c 	bl	8006220 <I2C_RequestMemoryRead>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e1bc      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d113      	bne.n	8005b42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e190      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d11b      	bne.n	8005b82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e170      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d11b      	bne.n	8005bc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	e150      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bd8:	e144      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	f200 80f1 	bhi.w	8005dc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d123      	bne.n	8005c34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fda7 	bl	8006744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e145      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c32:	e117      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d14e      	bne.n	8005cda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	2200      	movs	r2, #0
 8005c44:	4906      	ldr	r1, [pc, #24]	@ (8005c60 <HAL_I2C_Mem_Read+0x22c>)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fbd2 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e11a      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
 8005c56:	bf00      	nop
 8005c58:	00100002 	.word	0x00100002
 8005c5c:	ffff0000 	.word	0xffff0000
 8005c60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cd8:	e0c4      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	496c      	ldr	r1, [pc, #432]	@ (8005e94 <HAL_I2C_Mem_Read+0x460>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fb83 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0cb      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4955      	ldr	r1, [pc, #340]	@ (8005e94 <HAL_I2C_Mem_Read+0x460>)
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fb55 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e09d      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dc4:	e04e      	b.n	8005e64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fcba 	bl	8006744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e058      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d124      	bne.n	8005e64 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d107      	bne.n	8005e32 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e30:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f aeb6 	bne.w	8005bda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	@ 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	00010004 	.word	0x00010004

08005e98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005ea8:	f7fd feea 	bl	8003c80 <HAL_GetTick>
 8005eac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	f040 8111 	bne.w	80060e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2319      	movs	r3, #25
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4988      	ldr	r1, [pc, #544]	@ (80060ec <HAL_I2C_IsDeviceReady+0x254>)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fa90 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e104      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_I2C_IsDeviceReady+0x50>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0fd      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d007      	beq.n	8005f0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0201 	orr.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2224      	movs	r2, #36	@ 0x24
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a70      	ldr	r2, [pc, #448]	@ (80060f0 <HAL_I2C_IsDeviceReady+0x258>)
 8005f30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fa4e 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f68:	d103      	bne.n	8005f72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0b6      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f76:	897b      	ldrh	r3, [r7, #10]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fd fe7b 	bl	8003c80 <HAL_GetTick>
 8005f8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fba:	e025      	b.n	8006008 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fd fe60 	bl	8003c80 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <HAL_I2C_IsDeviceReady+0x13a>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22a0      	movs	r2, #160	@ 0xa0
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2ba0      	cmp	r3, #160	@ 0xa0
 8006012:	d005      	beq.n	8006020 <HAL_I2C_IsDeviceReady+0x188>
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_I2C_IsDeviceReady+0x188>
 800601a:	7dbb      	ldrb	r3, [r7, #22]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0cd      	beq.n	8005fbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d129      	bne.n	800608a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006044:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2319      	movs	r3, #25
 8006062:	2201      	movs	r2, #1
 8006064:	4921      	ldr	r1, [pc, #132]	@ (80060ec <HAL_I2C_IsDeviceReady+0x254>)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f9c2 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e036      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e02c      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006098:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2319      	movs	r3, #25
 80060aa:	2201      	movs	r2, #1
 80060ac:	490f      	ldr	r1, [pc, #60]	@ (80060ec <HAL_I2C_IsDeviceReady+0x254>)
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f99e 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e012      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	3301      	adds	r3, #1
 80060c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	f4ff af32 	bcc.w	8005f32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	00100002 	.word	0x00100002
 80060f0:	ffff0000 	.word	0xffff0000

080060f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	4603      	mov	r3, r0
 8006104:	817b      	strh	r3, [r7, #10]
 8006106:	460b      	mov	r3, r1
 8006108:	813b      	strh	r3, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800611c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	2200      	movs	r2, #0
 8006126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f960 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006144:	d103      	bne.n	800614e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e05f      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	492d      	ldr	r1, [pc, #180]	@ (800621c <I2C_RequestMemoryWrite+0x128>)
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f9bb 	bl	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e04c      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fa46 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e02b      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d105      	bne.n	80061cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c0:	893b      	ldrh	r3, [r7, #8]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	e021      	b.n	8006210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061cc:	893b      	ldrh	r3, [r7, #8]
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061dc:	6a39      	ldr	r1, [r7, #32]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa20 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d107      	bne.n	8006202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e005      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	00010002 	.word	0x00010002

08006220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	4608      	mov	r0, r1
 800622a:	4611      	mov	r1, r2
 800622c:	461a      	mov	r2, r3
 800622e:	4603      	mov	r3, r0
 8006230:	817b      	strh	r3, [r7, #10]
 8006232:	460b      	mov	r3, r1
 8006234:	813b      	strh	r3, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2200      	movs	r2, #0
 8006262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f8c2 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006280:	d103      	bne.n	800628a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0aa      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800629c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	4952      	ldr	r1, [pc, #328]	@ (80063ec <I2C_RequestMemoryRead+0x1cc>)
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f91d 	bl	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e097      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	6a39      	ldr	r1, [r7, #32]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f9a8 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d107      	bne.n	80062f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e076      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
 8006306:	e021      	b.n	800634c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f982 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	2b04      	cmp	r3, #4
 800632c:	d107      	bne.n	800633e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e050      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006342:	893b      	ldrh	r3, [r7, #8]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f967 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e035      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2200      	movs	r2, #0
 8006390:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f82b 	bl	80063f0 <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d103      	bne.n	80063b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e013      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063bc:	897b      	ldrh	r3, [r7, #10]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	4906      	ldr	r1, [pc, #24]	@ (80063ec <I2C_RequestMemoryRead+0x1cc>)
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f886 	bl	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	00010002 	.word	0x00010002

080063f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006400:	e048      	b.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d044      	beq.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640a:	f7fd fc39 	bl	8003c80 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d139      	bne.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d10d      	bne.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	43da      	mvns	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4013      	ands	r3, r2
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	e00c      	b.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	43da      	mvns	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	429a      	cmp	r2, r3
 8006464:	d116      	bne.n	8006494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	f043 0220 	orr.w	r2, r3, #32
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e023      	b.n	80064dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10d      	bne.n	80064ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	43da      	mvns	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4013      	ands	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	e00c      	b.n	80064d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d093      	beq.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064f2:	e071      	b.n	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	d123      	bne.n	800654c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800651c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e067      	b.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	d041      	beq.n	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006554:	f7fd fb94 	bl	8003c80 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d302      	bcc.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d136      	bne.n	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10c      	bne.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	43da      	mvns	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e00b      	b.n	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	43da      	mvns	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4013      	ands	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e021      	b.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10c      	bne.n	80065fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	43da      	mvns	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4013      	ands	r3, r2
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e00b      	b.n	8006614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	43da      	mvns	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f47f af6d 	bne.w	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006630:	e034      	b.n	800669c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f8e3 	bl	80067fe <I2C_IsAcknowledgeFailed>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e034      	b.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d028      	beq.n	800669c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fd fb19 	bl	8003c80 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d11d      	bne.n	800669c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666a:	2b80      	cmp	r3, #128	@ 0x80
 800666c:	d016      	beq.n	800669c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e007      	b.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a6:	2b80      	cmp	r3, #128	@ 0x80
 80066a8:	d1c3      	bne.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c0:	e034      	b.n	800672c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f89b 	bl	80067fe <I2C_IsAcknowledgeFailed>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e034      	b.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d028      	beq.n	800672c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fd fad1 	bl	8003c80 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11d      	bne.n	800672c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d016      	beq.n	800672c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e007      	b.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b04      	cmp	r3, #4
 8006738:	d1c3      	bne.n	80066c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006750:	e049      	b.n	80067e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b10      	cmp	r3, #16
 800675e:	d119      	bne.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0210 	mvn.w	r2, #16
 8006768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e030      	b.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006794:	f7fd fa74 	bl	8003c80 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11d      	bne.n	80067e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b4:	2b40      	cmp	r3, #64	@ 0x40
 80067b6:	d016      	beq.n	80067e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e007      	b.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f0:	2b40      	cmp	r3, #64	@ 0x40
 80067f2:	d1ae      	bne.n	8006752 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006814:	d11b      	bne.n	800684e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800681e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	f043 0204 	orr.w	r2, r3, #4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e101      	b.n	8006a72 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f006 fc89 	bl	800d1a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2203      	movs	r2, #3
 8006892:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800689c:	d102      	bne.n	80068a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f003 f882 	bl	80099b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c1a      	ldrb	r2, [r3, #16]
 80068b6:	f88d 2000 	strb.w	r2, [sp]
 80068ba:	3304      	adds	r3, #4
 80068bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068be:	f002 ff61 	bl	8009784 <USB_CoreInit>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0ce      	b.n	8006a72 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f003 f87a 	bl	80099d4 <USB_SetCurrentMode>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e0bf      	b.n	8006a72 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
 80068f6:	e04a      	b.n	800698e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	3315      	adds	r3, #21
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800690c:	7bfa      	ldrb	r2, [r7, #15]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	3314      	adds	r3, #20
 800691c:	7bfa      	ldrb	r2, [r7, #15]
 800691e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006920:	7bfa      	ldrb	r2, [r7, #15]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	b298      	uxth	r0, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	332e      	adds	r3, #46	@ 0x2e
 8006934:	4602      	mov	r2, r0
 8006936:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006938:	7bfa      	ldrb	r2, [r7, #15]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	3318      	adds	r3, #24
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800694c:	7bfa      	ldrb	r2, [r7, #15]
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	331c      	adds	r3, #28
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	3320      	adds	r3, #32
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006974:	7bfa      	ldrb	r2, [r7, #15]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3324      	adds	r3, #36	@ 0x24
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	3301      	adds	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3af      	bcc.n	80068f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	e044      	b.n	8006a28 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80069b4:	7bfa      	ldrb	r2, [r7, #15]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	3301      	adds	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	7bfa      	ldrb	r2, [r7, #15]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3b5      	bcc.n	800699e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	7c1a      	ldrb	r2, [r3, #16]
 8006a3a:	f88d 2000 	strb.w	r2, [sp]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a42:	f003 f813 	bl	8009a6c <USB_DevInit>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e00c      	b.n	8006a72 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f004 f85d 	bl	800ab2a <USB_DevDisconnect>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_PCD_Start+0x1c>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e022      	b.n	8006adc <HAL_PCD_Start+0x62>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d105      	bne.n	8006abe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 ff64 	bl	8009990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f004 f80b 	bl	800aae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b08d      	sub	sp, #52	@ 0x34
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f004 f8c9 	bl	800ac92 <USB_GetMode>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 848c 	bne.w	8007420 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f004 f82d 	bl	800ab6c <USB_ReadInterrupts>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8482 	beq.w	800741e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f004 f81a 	bl	800ab6c <USB_ReadInterrupts>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d107      	bne.n	8006b52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695a      	ldr	r2, [r3, #20]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f002 0202 	and.w	r2, r2, #2
 8006b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f004 f808 	bl	800ab6c <USB_ReadInterrupts>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d161      	bne.n	8006c2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0210 	bic.w	r2, r2, #16
 8006b74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4413      	add	r3, r2
 8006b92:	3304      	adds	r3, #4
 8006b94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	0c5b      	lsrs	r3, r3, #17
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d124      	bne.n	8006bec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d035      	beq.n	8006c1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6a38      	ldr	r0, [r7, #32]
 8006bc2:	f003 fe3f 	bl	800a844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bd2:	441a      	add	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006be4:	441a      	add	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	615a      	str	r2, [r3, #20]
 8006bea:	e016      	b.n	8006c1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	0c5b      	lsrs	r3, r3, #17
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d110      	bne.n	8006c1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006bfe:	2208      	movs	r2, #8
 8006c00:	4619      	mov	r1, r3
 8006c02:	6a38      	ldr	r0, [r7, #32]
 8006c04:	f003 fe1e 	bl	800a844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c14:	441a      	add	r2, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0210 	orr.w	r2, r2, #16
 8006c28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f003 ff9c 	bl	800ab6c <USB_ReadInterrupts>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c3e:	f040 80a7 	bne.w	8006d90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f003 ffa1 	bl	800ab92 <USB_ReadDevAllOutEpInterrupt>
 8006c50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006c52:	e099      	b.n	8006d88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 808e 	beq.w	8006d7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f003 ffc5 	bl	800abfa <USB_ReadDevOutEPInterrupt>
 8006c70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fea3 	bl	80079dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00c      	beq.n	8006cba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	461a      	mov	r2, r3
 8006cae:	2308      	movs	r3, #8
 8006cb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 ff79 	bl	8007bac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2310      	movs	r3, #16
 8006cd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d030      	beq.n	8006d42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b80      	cmp	r3, #128	@ 0x80
 8006cea:	d109      	bne.n	8006d00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cfe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	3304      	adds	r3, #4
 8006d14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	78db      	ldrb	r3, [r3, #3]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d108      	bne.n	8006d30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f006 fb3e 	bl	800d3ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2302      	movs	r3, #2
 8006d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2320      	movs	r3, #32
 8006d5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	3301      	adds	r3, #1
 8006d80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f47f af62 	bne.w	8006c54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f003 fee9 	bl	800ab6c <USB_ReadInterrupts>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006da4:	f040 80db 	bne.w	8006f5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f003 ff0a 	bl	800abc6 <USB_ReadDevAllInEpInterrupt>
 8006db2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006db8:	e0cd      	b.n	8006f56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80c2 	beq.w	8006f4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f003 ff30 	bl	800ac36 <USB_ReadDevInEPInterrupt>
 8006dd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d057      	beq.n	8006e92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	2201      	movs	r2, #1
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e02:	4013      	ands	r3, r2
 8006e04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e12:	461a      	mov	r2, r3
 8006e14:	2301      	movs	r3, #1
 8006e16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	799b      	ldrb	r3, [r3, #6]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d132      	bne.n	8006e86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e24:	4613      	mov	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3320      	adds	r3, #32
 8006e30:	6819      	ldr	r1, [r3, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4403      	add	r3, r0
 8006e40:	331c      	adds	r3, #28
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4419      	add	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4403      	add	r3, r0
 8006e54:	3320      	adds	r3, #32
 8006e56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d113      	bne.n	8006e86 <HAL_PCD_IRQHandler+0x3a2>
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3324      	adds	r3, #36	@ 0x24
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2101      	movs	r1, #1
 8006e82:	f003 ff37 	bl	800acf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f006 fa08 	bl	800d2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2308      	movs	r3, #8
 8006eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2340      	movs	r3, #64	@ 0x40
 8006ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d023      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ef2:	6a38      	ldr	r0, [r7, #32]
 8006ef4:	f002 ff1e 	bl	8009d34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	3310      	adds	r3, #16
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	3304      	adds	r3, #4
 8006f0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d108      	bne.n	8006f26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2200      	movs	r2, #0
 8006f18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f006 fa55 	bl	800d3d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f32:	461a      	mov	r2, r3
 8006f34:	2302      	movs	r3, #2
 8006f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fcbd 	bl	80078c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f47f af2e 	bne.w	8006dba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f003 fe02 	bl	800ab6c <USB_ReadInterrupts>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f72:	d122      	bne.n	8006fba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f82:	f023 0301 	bic.w	r3, r3, #1
 8006f86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d108      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fea3 	bl	8007ce8 <HAL_PCDEx_LPM_Callback>
 8006fa2:	e002      	b.n	8006faa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f006 f9f3 	bl	800d390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f003 fdd4 	bl	800ab6c <USB_ReadInterrupts>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fce:	d112      	bne.n	8006ff6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d102      	bne.n	8006fe6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f006 f9af 	bl	800d344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006ff4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f003 fdb6 	bl	800ab6c <USB_ReadInterrupts>
 8007000:	4603      	mov	r3, r0
 8007002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700a:	f040 80b7 	bne.w	800717c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2110      	movs	r1, #16
 8007028:	4618      	mov	r0, r3
 800702a:	f002 fe83 	bl	8009d34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007032:	e046      	b.n	80070c2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	461a      	mov	r2, r3
 8007042:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007046:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007062:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007066:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	461a      	mov	r2, r3
 8007076:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800707a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007096:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800709a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800709c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	3301      	adds	r3, #1
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	461a      	mov	r2, r3
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d3b2      	bcc.n	8007034 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070dc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80070e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7bdb      	ldrb	r3, [r3, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070fa:	f043 030b 	orr.w	r3, r3, #11
 80070fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007110:	f043 030b 	orr.w	r3, r3, #11
 8007114:	6453      	str	r3, [r2, #68]	@ 0x44
 8007116:	e015      	b.n	8007144 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007126:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800712a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800712e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800713e:	f043 030b 	orr.w	r3, r3, #11
 8007142:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007152:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007156:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007166:	461a      	mov	r2, r3
 8007168:	f003 fdc4 	bl	800acf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800717a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f003 fcf3 	bl	800ab6c <USB_ReadInterrupts>
 8007186:	4603      	mov	r3, r0
 8007188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800718c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007190:	d123      	bne.n	80071da <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f003 fd89 	bl	800acae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f002 fe40 	bl	8009e26 <USB_GetDevSpeed>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681c      	ldr	r4, [r3, #0]
 80071b2:	f001 f9c9 	bl	8008548 <HAL_RCC_GetHCLKFreq>
 80071b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071bc:	461a      	mov	r2, r3
 80071be:	4620      	mov	r0, r4
 80071c0:	f002 fb44 	bl	800984c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f006 f894 	bl	800d2f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80071d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f003 fcc4 	bl	800ab6c <USB_ReadInterrupts>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d10a      	bne.n	8007204 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f006 f871 	bl	800d2d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 0208 	and.w	r2, r2, #8
 8007202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f003 fcaf 	bl	800ab6c <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007214:	2b80      	cmp	r3, #128	@ 0x80
 8007216:	d123      	bne.n	8007260 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
 8007228:	e014      	b.n	8007254 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722e:	4613      	mov	r3, r2
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d105      	bne.n	800724e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	b2db      	uxtb	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb0a 	bl	8007862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	3301      	adds	r3, #1
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	461a      	mov	r2, r3
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	4293      	cmp	r3, r2
 800725e:	d3e4      	bcc.n	800722a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f003 fc81 	bl	800ab6c <USB_ReadInterrupts>
 800726a:	4603      	mov	r3, r0
 800726c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007274:	d13c      	bne.n	80072f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007276:	2301      	movs	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
 800727a:	e02b      	b.n	80072d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3318      	adds	r3, #24
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d115      	bne.n	80072ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80072a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da12      	bge.n	80072ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ac:	4613      	mov	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	3317      	adds	r3, #23
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 faca 	bl	8007862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	3301      	adds	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	791b      	ldrb	r3, [r3, #4]
 80072d8:	461a      	mov	r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	4293      	cmp	r3, r2
 80072de:	d3cd      	bcc.n	800727c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80072ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f003 fc39 	bl	800ab6c <USB_ReadInterrupts>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007304:	d156      	bne.n	80073b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007306:	2301      	movs	r3, #1
 8007308:	627b      	str	r3, [r7, #36]	@ 0x24
 800730a:	e045      	b.n	8007398 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d12e      	bne.n	8007392 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007334:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	da2b      	bge.n	8007392 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	0c1a      	lsrs	r2, r3, #16
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007344:	4053      	eors	r3, r2
 8007346:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800734a:	2b00      	cmp	r3, #0
 800734c:	d121      	bne.n	8007392 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007352:	4613      	mov	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800738a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800738e:	6053      	str	r3, [r2, #4]
            break;
 8007390:	e008      	b.n	80073a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	3301      	adds	r3, #1
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	791b      	ldrb	r3, [r3, #4]
 800739c:	461a      	mov	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d3b3      	bcc.n	800730c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80073b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f003 fbd7 	bl	800ab6c <USB_ReadInterrupts>
 80073be:	4603      	mov	r3, r0
 80073c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c8:	d10a      	bne.n	80073e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f006 f812 	bl	800d3f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80073de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f003 fbc1 	bl	800ab6c <USB_ReadInterrupts>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d115      	bne.n	8007420 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f006 f802 	bl	800d410 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	e000      	b.n	8007420 <HAL_PCD_IRQHandler+0x93c>
      return;
 800741e:	bf00      	nop
    }
  }
}
 8007420:	3734      	adds	r7, #52	@ 0x34
 8007422:	46bd      	mov	sp, r7
 8007424:	bd90      	pop	{r4, r7, pc}

08007426 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_PCD_SetAddress+0x1a>
 800743c:	2302      	movs	r3, #2
 800743e:	e012      	b.n	8007466 <HAL_PCD_SetAddress+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f003 fb20 	bl	800aa9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	4608      	mov	r0, r1
 8007478:	4611      	mov	r1, r2
 800747a:	461a      	mov	r2, r3
 800747c:	4603      	mov	r3, r0
 800747e:	70fb      	strb	r3, [r7, #3]
 8007480:	460b      	mov	r3, r1
 8007482:	803b      	strh	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800748c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007490:	2b00      	cmp	r3, #0
 8007492:	da0f      	bge.n	80074b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	4613      	mov	r3, r2
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	3310      	adds	r3, #16
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	705a      	strb	r2, [r3, #1]
 80074b2:	e00f      	b.n	80074d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	4613      	mov	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	3304      	adds	r3, #4
 80074cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80074e0:	883b      	ldrh	r3, [r7, #0]
 80074e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	78ba      	ldrb	r2, [r7, #2]
 80074ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007502:	78bb      	ldrb	r3, [r7, #2]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d102      	bne.n	800750e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_PCD_EP_Open+0xae>
 8007518:	2302      	movs	r3, #2
 800751a:	e00e      	b.n	800753a <HAL_PCD_EP_Open+0xcc>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	4618      	mov	r0, r3
 800752c:	f002 fca0 	bl	8009e70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007538:	7afb      	ldrb	r3, [r7, #11]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800754e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	da0f      	bge.n	8007576 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	f003 020f 	and.w	r2, r3, #15
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3310      	adds	r3, #16
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	705a      	strb	r2, [r3, #1]
 8007574:	e00f      	b.n	8007596 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4413      	add	r3, r2
 800758c:	3304      	adds	r3, #4
 800758e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	b2da      	uxtb	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_PCD_EP_Close+0x6e>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e00e      	b.n	80075ce <HAL_PCD_EP_Close+0x8c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68f9      	ldr	r1, [r7, #12]
 80075be:	4618      	mov	r0, r3
 80075c0:	f002 fcde 	bl	8009f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	460b      	mov	r3, r1
 80075e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	4613      	mov	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	3304      	adds	r3, #4
 80075fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	b2da      	uxtb	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	799b      	ldrb	r3, [r3, #6]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d102      	bne.n	8007632 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	799b      	ldrb	r3, [r3, #6]
 800763a:	461a      	mov	r2, r3
 800763c:	6979      	ldr	r1, [r7, #20]
 800763e:	f002 fd7b 	bl	800a138 <USB_EPStartXfer>

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800766e:	681b      	ldr	r3, [r3, #0]
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	460b      	mov	r3, r1
 800768a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	4613      	mov	r3, r2
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	3310      	adds	r3, #16
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	3304      	adds	r3, #4
 80076a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2200      	movs	r2, #0
 80076b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2201      	movs	r2, #1
 80076ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	799b      	ldrb	r3, [r3, #6]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d102      	bne.n	80076d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	799b      	ldrb	r3, [r3, #6]
 80076de:	461a      	mov	r2, r3
 80076e0:	6979      	ldr	r1, [r7, #20]
 80076e2:	f002 fd29 	bl	800a138 <USB_EPStartXfer>

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	7912      	ldrb	r2, [r2, #4]
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e04f      	b.n	80077ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800770e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da0f      	bge.n	8007736 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	4613      	mov	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	3310      	adds	r3, #16
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	3304      	adds	r3, #4
 800772c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	705a      	strb	r2, [r3, #1]
 8007734:	e00d      	b.n	8007752 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	3304      	adds	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_PCD_EP_SetStall+0x82>
 800776e:	2302      	movs	r3, #2
 8007770:	e01d      	b.n	80077ae <HAL_PCD_EP_SetStall+0xbe>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4618      	mov	r0, r3
 8007782:	f003 f8b7 	bl	800a8f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7999      	ldrb	r1, [r3, #6]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800779e:	461a      	mov	r2, r3
 80077a0:	f003 faa8 	bl	800acf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	7912      	ldrb	r2, [r2, #4]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d901      	bls.n	80077d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e042      	b.n	800785a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da0f      	bge.n	80077fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	f003 020f 	and.w	r2, r3, #15
 80077e2:	4613      	mov	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	3310      	adds	r3, #16
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4413      	add	r3, r2
 80077f0:	3304      	adds	r3, #4
 80077f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	705a      	strb	r2, [r3, #1]
 80077fa:	e00f      	b.n	800781c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	b2da      	uxtb	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_PCD_EP_ClrStall+0x86>
 8007838:	2302      	movs	r3, #2
 800783a:	e00e      	b.n	800785a <HAL_PCD_EP_ClrStall+0xa4>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	f003 f8c0 	bl	800a9d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800786e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da0c      	bge.n	8007890 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e00c      	b.n	80078aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	4613      	mov	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	4413      	add	r3, r2
 80078a6:	3304      	adds	r3, #4
 80078a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f002 fedf 	bl	800a674 <USB_EPStopXfer>
 80078b6:	4603      	mov	r3, r0
 80078b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80078ba:	7afb      	ldrb	r3, [r7, #11]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	@ 0x28
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	4613      	mov	r3, r2
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	3310      	adds	r3, #16
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d901      	bls.n	80078fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e06b      	b.n	80079d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	429a      	cmp	r2, r3
 8007910:	d902      	bls.n	8007918 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3303      	adds	r3, #3
 800791c:	089b      	lsrs	r3, r3, #2
 800791e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007920:	e02a      	b.n	8007978 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	429a      	cmp	r2, r3
 8007936:	d902      	bls.n	800793e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3303      	adds	r3, #3
 8007942:	089b      	lsrs	r3, r3, #2
 8007944:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68d9      	ldr	r1, [r3, #12]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4603      	mov	r3, r0
 800795a:	6978      	ldr	r0, [r7, #20]
 800795c:	f002 ff34 	bl	800a7c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	441a      	add	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	441a      	add	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	429a      	cmp	r2, r3
 800798c:	d809      	bhi.n	80079a2 <PCD_WriteEmptyTxFifo+0xde>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	695a      	ldr	r2, [r3, #20]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007996:	429a      	cmp	r2, r3
 8007998:	d203      	bcs.n	80079a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1bf      	bne.n	8007922 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d811      	bhi.n	80079d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	2201      	movs	r2, #1
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	43db      	mvns	r3, r3
 80079c8:	6939      	ldr	r1, [r7, #16]
 80079ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079ce:	4013      	ands	r3, r2
 80079d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	333c      	adds	r3, #60	@ 0x3c
 80079f4:	3304      	adds	r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	799b      	ldrb	r3, [r3, #6]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d17b      	bne.n	8007b0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d015      	beq.n	8007a48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4a61      	ldr	r2, [pc, #388]	@ (8007ba4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	f240 80b9 	bls.w	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80b3 	beq.w	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a44:	6093      	str	r3, [r2, #8]
 8007a46:	e0a7      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2320      	movs	r3, #32
 8007a62:	6093      	str	r3, [r2, #8]
 8007a64:	e098      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8093 	bne.w	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4a4b      	ldr	r2, [pc, #300]	@ (8007ba4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d90f      	bls.n	8007a9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a90:	461a      	mov	r2, r3
 8007a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a96:	6093      	str	r3, [r2, #8]
 8007a98:	e07e      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	0159      	lsls	r1, r3, #5
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	440b      	add	r3, r1
 8007abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d114      	bne.n	8007afc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	f003 f904 	bl	800acf4 <USB_EP0_OutStart>
 8007aec:	e006      	b.n	8007afc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f005 fbb2 	bl	800d26c <HAL_PCD_DataOutStageCallback>
 8007b08:	e046      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4a26      	ldr	r2, [pc, #152]	@ (8007ba8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d124      	bne.n	8007b5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2e:	6093      	str	r3, [r2, #8]
 8007b30:	e032      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2320      	movs	r3, #32
 8007b4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f005 fb89 	bl	800d26c <HAL_PCD_DataOutStageCallback>
 8007b5a:	e01d      	b.n	8007b98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d114      	bne.n	8007b8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	4613      	mov	r3, r2
 8007b68:	00db      	lsls	r3, r3, #3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d108      	bne.n	8007b8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b84:	461a      	mov	r2, r3
 8007b86:	2100      	movs	r1, #0
 8007b88:	f003 f8b4 	bl	800acf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f005 fb6a 	bl	800d26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	4f54300a 	.word	0x4f54300a
 8007ba8:	4f54310a 	.word	0x4f54310a

08007bac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	333c      	adds	r3, #60	@ 0x3c
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a15      	ldr	r2, [pc, #84]	@ (8007c34 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d90e      	bls.n	8007c00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f005 fb21 	bl	800d248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a0a      	ldr	r2, [pc, #40]	@ (8007c34 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d90c      	bls.n	8007c28 <PCD_EP_OutSetupPacket_int+0x7c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	799b      	ldrb	r3, [r3, #6]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d108      	bne.n	8007c28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c20:	461a      	mov	r2, r3
 8007c22:	2101      	movs	r1, #1
 8007c24:	f003 f866 	bl	800acf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	4f54300a 	.word	0x4f54300a

08007c38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
 8007c44:	4613      	mov	r3, r2
 8007c46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d107      	bne.n	8007c66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c56:	883b      	ldrh	r3, [r7, #0]
 8007c58:	0419      	lsls	r1, r3, #16
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c64:	e028      	b.n	8007cb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e00d      	b.n	8007c96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	3340      	adds	r3, #64	@ 0x40
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	0c1b      	lsrs	r3, r3, #16
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	3301      	adds	r3, #1
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	7bfa      	ldrb	r2, [r7, #15]
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d3ec      	bcc.n	8007c7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ca0:	883b      	ldrh	r3, [r7, #0]
 8007ca2:	0418      	lsls	r0, r3, #16
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6819      	ldr	r1, [r3, #0]
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	4302      	orrs	r2, r0
 8007cb0:	3340      	adds	r3, #64	@ 0x40
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e267      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d075      	beq.n	8007e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007d1e:	4b88      	ldr	r3, [pc, #544]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d00c      	beq.n	8007d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d2a:	4b85      	ldr	r3, [pc, #532]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007d32:	2b08      	cmp	r3, #8
 8007d34:	d112      	bne.n	8007d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d36:	4b82      	ldr	r3, [pc, #520]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d42:	d10b      	bne.n	8007d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d44:	4b7e      	ldr	r3, [pc, #504]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d05b      	beq.n	8007e08 <HAL_RCC_OscConfig+0x108>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d157      	bne.n	8007e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e242      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d64:	d106      	bne.n	8007d74 <HAL_RCC_OscConfig+0x74>
 8007d66:	4b76      	ldr	r3, [pc, #472]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a75      	ldr	r2, [pc, #468]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	e01d      	b.n	8007db0 <HAL_RCC_OscConfig+0xb0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x98>
 8007d7e:	4b70      	ldr	r3, [pc, #448]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6f      	ldr	r2, [pc, #444]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e00b      	b.n	8007db0 <HAL_RCC_OscConfig+0xb0>
 8007d98:	4b69      	ldr	r3, [pc, #420]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a68      	ldr	r2, [pc, #416]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	4b66      	ldr	r3, [pc, #408]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a65      	ldr	r2, [pc, #404]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d013      	beq.n	8007de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db8:	f7fb ff62 	bl	8003c80 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc0:	f7fb ff5e 	bl	8003c80 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b64      	cmp	r3, #100	@ 0x64
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e207      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0xc0>
 8007dde:	e014      	b.n	8007e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7fb ff4e 	bl	8003c80 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007de8:	f7fb ff4a 	bl	8003c80 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	@ 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e1f3      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dfa:	4b51      	ldr	r3, [pc, #324]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f0      	bne.n	8007de8 <HAL_RCC_OscConfig+0xe8>
 8007e06:	e000      	b.n	8007e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d063      	beq.n	8007ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007e16:	4b4a      	ldr	r3, [pc, #296]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 030c 	and.w	r3, r3, #12
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e22:	4b47      	ldr	r3, [pc, #284]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d11c      	bne.n	8007e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e2e:	4b44      	ldr	r3, [pc, #272]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d116      	bne.n	8007e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e3a:	4b41      	ldr	r3, [pc, #260]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_RCC_OscConfig+0x152>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d001      	beq.n	8007e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1c7      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e52:	4b3b      	ldr	r3, [pc, #236]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4937      	ldr	r1, [pc, #220]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e66:	e03a      	b.n	8007ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d020      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e70:	4b34      	ldr	r3, [pc, #208]	@ (8007f44 <HAL_RCC_OscConfig+0x244>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e76:	f7fb ff03 	bl	8003c80 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e7e:	f7fb feff 	bl	8003c80 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e1a8      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e90:	4b2b      	ldr	r3, [pc, #172]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	4925      	ldr	r1, [pc, #148]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	e015      	b.n	8007ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eb2:	4b24      	ldr	r3, [pc, #144]	@ (8007f44 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fb fee2 	bl	8003c80 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ec0:	f7fb fede 	bl	8003c80 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e187      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d036      	beq.n	8007f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef2:	4b15      	ldr	r3, [pc, #84]	@ (8007f48 <HAL_RCC_OscConfig+0x248>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef8:	f7fb fec2 	bl	8003c80 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f00:	f7fb febe 	bl	8003c80 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e167      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f12:	4b0b      	ldr	r3, [pc, #44]	@ (8007f40 <HAL_RCC_OscConfig+0x240>)
 8007f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x200>
 8007f1e:	e01b      	b.n	8007f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f20:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <HAL_RCC_OscConfig+0x248>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f26:	f7fb feab 	bl	8003c80 <HAL_GetTick>
 8007f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f2c:	e00e      	b.n	8007f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f2e:	f7fb fea7 	bl	8003c80 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d907      	bls.n	8007f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e150      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
 8007f40:	40023800 	.word	0x40023800
 8007f44:	42470000 	.word	0x42470000
 8007f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f4c:	4b88      	ldr	r3, [pc, #544]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1ea      	bne.n	8007f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8097 	beq.w	8008094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f6a:	4b81      	ldr	r3, [pc, #516]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10f      	bne.n	8007f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f76:	2300      	movs	r3, #0
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f86:	4b7a      	ldr	r3, [pc, #488]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f8e:	60bb      	str	r3, [r7, #8]
 8007f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f92:	2301      	movs	r3, #1
 8007f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f96:	4b77      	ldr	r3, [pc, #476]	@ (8008174 <HAL_RCC_OscConfig+0x474>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d118      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fa2:	4b74      	ldr	r3, [pc, #464]	@ (8008174 <HAL_RCC_OscConfig+0x474>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a73      	ldr	r2, [pc, #460]	@ (8008174 <HAL_RCC_OscConfig+0x474>)
 8007fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fae:	f7fb fe67 	bl	8003c80 <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb6:	f7fb fe63 	bl	8003c80 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e10c      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8008174 <HAL_RCC_OscConfig+0x474>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0f0      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d106      	bne.n	8007fea <HAL_RCC_OscConfig+0x2ea>
 8007fdc:	4b64      	ldr	r3, [pc, #400]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe0:	4a63      	ldr	r2, [pc, #396]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fe8:	e01c      	b.n	8008024 <HAL_RCC_OscConfig+0x324>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	d10c      	bne.n	800800c <HAL_RCC_OscConfig+0x30c>
 8007ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8007ff8:	f043 0304 	orr.w	r3, r3, #4
 8007ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008002:	4a5b      	ldr	r2, [pc, #364]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	6713      	str	r3, [r2, #112]	@ 0x70
 800800a:	e00b      	b.n	8008024 <HAL_RCC_OscConfig+0x324>
 800800c:	4b58      	ldr	r3, [pc, #352]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008010:	4a57      	ldr	r2, [pc, #348]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	6713      	str	r3, [r2, #112]	@ 0x70
 8008018:	4b55      	ldr	r3, [pc, #340]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801c:	4a54      	ldr	r2, [pc, #336]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800801e:	f023 0304 	bic.w	r3, r3, #4
 8008022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d015      	beq.n	8008058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800802c:	f7fb fe28 	bl	8003c80 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008032:	e00a      	b.n	800804a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008034:	f7fb fe24 	bl	8003c80 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008042:	4293      	cmp	r3, r2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e0cb      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800804a:	4b49      	ldr	r3, [pc, #292]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0ee      	beq.n	8008034 <HAL_RCC_OscConfig+0x334>
 8008056:	e014      	b.n	8008082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008058:	f7fb fe12 	bl	8003c80 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800805e:	e00a      	b.n	8008076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008060:	f7fb fe0e 	bl	8003c80 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800806e:	4293      	cmp	r3, r2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e0b5      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008076:	4b3e      	ldr	r3, [pc, #248]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1ee      	bne.n	8008060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d105      	bne.n	8008094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008088:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	4a38      	ldr	r2, [pc, #224]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800808e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80a1 	beq.w	80081e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800809e:	4b34      	ldr	r3, [pc, #208]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 030c 	and.w	r3, r3, #12
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	d05c      	beq.n	8008164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d141      	bne.n	8008136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b2:	4b31      	ldr	r3, [pc, #196]	@ (8008178 <HAL_RCC_OscConfig+0x478>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b8:	f7fb fde2 	bl	8003c80 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fb fdde 	bl	8003c80 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e087      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d2:	4b27      	ldr	r3, [pc, #156]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69da      	ldr	r2, [r3, #28]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	019b      	lsls	r3, r3, #6
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	085b      	lsrs	r3, r3, #1
 80080f6:	3b01      	subs	r3, #1
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	491b      	ldr	r1, [pc, #108]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008104:	4313      	orrs	r3, r2
 8008106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008108:	4b1b      	ldr	r3, [pc, #108]	@ (8008178 <HAL_RCC_OscConfig+0x478>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800810e:	f7fb fdb7 	bl	8003c80 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008116:	f7fb fdb3 	bl	8003c80 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e05c      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008128:	4b11      	ldr	r3, [pc, #68]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x416>
 8008134:	e054      	b.n	80081e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008136:	4b10      	ldr	r3, [pc, #64]	@ (8008178 <HAL_RCC_OscConfig+0x478>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fb fda0 	bl	8003c80 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008144:	f7fb fd9c 	bl	8003c80 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e045      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <HAL_RCC_OscConfig+0x470>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x444>
 8008162:	e03d      	b.n	80081e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d107      	bne.n	800817c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e038      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
 8008170:	40023800 	.word	0x40023800
 8008174:	40007000 	.word	0x40007000
 8008178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800817c:	4b1b      	ldr	r3, [pc, #108]	@ (80081ec <HAL_RCC_OscConfig+0x4ec>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d028      	beq.n	80081dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008194:	429a      	cmp	r2, r3
 8008196:	d121      	bne.n	80081dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d11a      	bne.n	80081dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d111      	bne.n	80081dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	3b01      	subs	r3, #1
 80081c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d107      	bne.n	80081dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081d8:	429a      	cmp	r2, r3
 80081da:	d001      	beq.n	80081e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40023800 	.word	0x40023800

080081f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e0cc      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008204:	4b68      	ldr	r3, [pc, #416]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d90c      	bls.n	800822c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008212:	4b65      	ldr	r3, [pc, #404]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800821a:	4b63      	ldr	r3, [pc, #396]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d001      	beq.n	800822c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0b8      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d020      	beq.n	800827a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008244:	4b59      	ldr	r3, [pc, #356]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	4a58      	ldr	r2, [pc, #352]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800824e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800825c:	4b53      	ldr	r3, [pc, #332]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	4a52      	ldr	r2, [pc, #328]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008268:	4b50      	ldr	r3, [pc, #320]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	494d      	ldr	r1, [pc, #308]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008276:	4313      	orrs	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d044      	beq.n	8008310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d107      	bne.n	800829e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828e:	4b47      	ldr	r3, [pc, #284]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d119      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e07f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d003      	beq.n	80082ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d107      	bne.n	80082be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ae:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e06f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082be:	4b3b      	ldr	r3, [pc, #236]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e067      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082ce:	4b37      	ldr	r3, [pc, #220]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 0203 	bic.w	r2, r3, #3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	4934      	ldr	r1, [pc, #208]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082e0:	f7fb fcce 	bl	8003c80 <HAL_GetTick>
 80082e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e6:	e00a      	b.n	80082fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082e8:	f7fb fcca 	bl	8003c80 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e04f      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082fe:	4b2b      	ldr	r3, [pc, #172]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 020c 	and.w	r2, r3, #12
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	429a      	cmp	r2, r3
 800830e:	d1eb      	bne.n	80082e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008310:	4b25      	ldr	r3, [pc, #148]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0307 	and.w	r3, r3, #7
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d20c      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831e:	4b22      	ldr	r3, [pc, #136]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008326:	4b20      	ldr	r3, [pc, #128]	@ (80083a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d001      	beq.n	8008338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e032      	b.n	800839e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008344:	4b19      	ldr	r3, [pc, #100]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4916      	ldr	r1, [pc, #88]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	4313      	orrs	r3, r2
 8008354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	490e      	ldr	r1, [pc, #56]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 8008372:	4313      	orrs	r3, r2
 8008374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008376:	f000 f821 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 800837a:	4602      	mov	r2, r0
 800837c:	4b0b      	ldr	r3, [pc, #44]	@ (80083ac <HAL_RCC_ClockConfig+0x1bc>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	091b      	lsrs	r3, r3, #4
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	490a      	ldr	r1, [pc, #40]	@ (80083b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008388:	5ccb      	ldrb	r3, [r1, r3]
 800838a:	fa22 f303 	lsr.w	r3, r2, r3
 800838e:	4a09      	ldr	r2, [pc, #36]	@ (80083b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008392:	4b09      	ldr	r3, [pc, #36]	@ (80083b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7fb fc2e 	bl	8003bf8 <HAL_InitTick>

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40023c00 	.word	0x40023c00
 80083ac:	40023800 	.word	0x40023800
 80083b0:	08011ce8 	.word	0x08011ce8
 80083b4:	2000004c 	.word	0x2000004c
 80083b8:	20000050 	.word	0x20000050

080083bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083c0:	b090      	sub	sp, #64	@ 0x40
 80083c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083d4:	4b59      	ldr	r3, [pc, #356]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 030c 	and.w	r3, r3, #12
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d00d      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x40>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	f200 80a1 	bhi.w	8008528 <HAL_RCC_GetSysClockFreq+0x16c>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_RCC_GetSysClockFreq+0x34>
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d003      	beq.n	80083f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083ee:	e09b      	b.n	8008528 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083f0:	4b53      	ldr	r3, [pc, #332]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x184>)
 80083f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80083f4:	e09b      	b.n	800852e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083f6:	4b53      	ldr	r3, [pc, #332]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x188>)
 80083f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80083fa:	e098      	b.n	800852e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083fc:	4b4f      	ldr	r3, [pc, #316]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008406:	4b4d      	ldr	r3, [pc, #308]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d028      	beq.n	8008464 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008412:	4b4a      	ldr	r3, [pc, #296]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	2200      	movs	r2, #0
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	627a      	str	r2, [r7, #36]	@ 0x24
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008424:	2100      	movs	r1, #0
 8008426:	4b47      	ldr	r3, [pc, #284]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x188>)
 8008428:	fb03 f201 	mul.w	r2, r3, r1
 800842c:	2300      	movs	r3, #0
 800842e:	fb00 f303 	mul.w	r3, r0, r3
 8008432:	4413      	add	r3, r2
 8008434:	4a43      	ldr	r2, [pc, #268]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x188>)
 8008436:	fba0 1202 	umull	r1, r2, r0, r2
 800843a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800843c:	460a      	mov	r2, r1
 800843e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008442:	4413      	add	r3, r2
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	2200      	movs	r2, #0
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	61fa      	str	r2, [r7, #28]
 800844e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008456:	f7f8 fbf7 	bl	8000c48 <__aeabi_uldivmod>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4613      	mov	r3, r2
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008462:	e053      	b.n	800850c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008464:	4b35      	ldr	r3, [pc, #212]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	099b      	lsrs	r3, r3, #6
 800846a:	2200      	movs	r2, #0
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	617a      	str	r2, [r7, #20]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008476:	f04f 0b00 	mov.w	fp, #0
 800847a:	4652      	mov	r2, sl
 800847c:	465b      	mov	r3, fp
 800847e:	f04f 0000 	mov.w	r0, #0
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	0159      	lsls	r1, r3, #5
 8008488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800848c:	0150      	lsls	r0, r2, #5
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	ebb2 080a 	subs.w	r8, r2, sl
 8008496:	eb63 090b 	sbc.w	r9, r3, fp
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084ae:	ebb2 0408 	subs.w	r4, r2, r8
 80084b2:	eb63 0509 	sbc.w	r5, r3, r9
 80084b6:	f04f 0200 	mov.w	r2, #0
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	00eb      	lsls	r3, r5, #3
 80084c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084c4:	00e2      	lsls	r2, r4, #3
 80084c6:	4614      	mov	r4, r2
 80084c8:	461d      	mov	r5, r3
 80084ca:	eb14 030a 	adds.w	r3, r4, sl
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	eb45 030b 	adc.w	r3, r5, fp
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084e2:	4629      	mov	r1, r5
 80084e4:	028b      	lsls	r3, r1, #10
 80084e6:	4621      	mov	r1, r4
 80084e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084ec:	4621      	mov	r1, r4
 80084ee:	028a      	lsls	r2, r1, #10
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	2200      	movs	r2, #0
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	60fa      	str	r2, [r7, #12]
 80084fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008500:	f7f8 fba2 	bl	8000c48 <__aeabi_uldivmod>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4613      	mov	r3, r2
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800850c:	4b0b      	ldr	r3, [pc, #44]	@ (800853c <HAL_RCC_GetSysClockFreq+0x180>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	3301      	adds	r3, #1
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800851c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	fbb2 f3f3 	udiv	r3, r2, r3
 8008524:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008526:	e002      	b.n	800852e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008528:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x184>)
 800852a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800852c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008530:	4618      	mov	r0, r3
 8008532:	3740      	adds	r7, #64	@ 0x40
 8008534:	46bd      	mov	sp, r7
 8008536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853a:	bf00      	nop
 800853c:	40023800 	.word	0x40023800
 8008540:	00f42400 	.word	0x00f42400
 8008544:	00b71b00 	.word	0x00b71b00

08008548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800854c:	4b03      	ldr	r3, [pc, #12]	@ (800855c <HAL_RCC_GetHCLKFreq+0x14>)
 800854e:	681b      	ldr	r3, [r3, #0]
}
 8008550:	4618      	mov	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	2000004c 	.word	0x2000004c

08008560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008564:	f7ff fff0 	bl	8008548 <HAL_RCC_GetHCLKFreq>
 8008568:	4602      	mov	r2, r0
 800856a:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	0a9b      	lsrs	r3, r3, #10
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	4903      	ldr	r1, [pc, #12]	@ (8008584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008576:	5ccb      	ldrb	r3, [r1, r3]
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800857c:	4618      	mov	r0, r3
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40023800 	.word	0x40023800
 8008584:	08011cf8 	.word	0x08011cf8

08008588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800858c:	f7ff ffdc 	bl	8008548 <HAL_RCC_GetHCLKFreq>
 8008590:	4602      	mov	r2, r0
 8008592:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	0b5b      	lsrs	r3, r3, #13
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	4903      	ldr	r1, [pc, #12]	@ (80085ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800859e:	5ccb      	ldrb	r3, [r1, r3]
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40023800 	.word	0x40023800
 80085ac:	08011cf8 	.word	0x08011cf8

080085b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e07b      	b.n	80086ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d108      	bne.n	80085dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085d2:	d009      	beq.n	80085e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	61da      	str	r2, [r3, #28]
 80085da:	e005      	b.n	80085e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fb f8fc 	bl	8003800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800861e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866c:	ea42 0103 	orr.w	r1, r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008674:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	f003 0104 	and.w	r1, r3, #4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	f003 0210 	and.w	r2, r3, #16
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b088      	sub	sp, #32
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086d2:	f7fb fad5 	bl	8003c80 <HAL_GetTick>
 80086d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80086d8:	88fb      	ldrh	r3, [r7, #6]
 80086da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d001      	beq.n	80086ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
 80086ea:	e12a      	b.n	8008942 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <HAL_SPI_Transmit+0x36>
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e122      	b.n	8008942 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_SPI_Transmit+0x48>
 8008706:	2302      	movs	r3, #2
 8008708:	e11b      	b.n	8008942 <HAL_SPI_Transmit+0x280>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2203      	movs	r2, #3
 8008716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008758:	d10f      	bne.n	800877a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008768:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008778:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d007      	beq.n	8008798 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087a0:	d152      	bne.n	8008848 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_SPI_Transmit+0xee>
 80087aa:	8b7b      	ldrh	r3, [r7, #26]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d145      	bne.n	800883c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c0:	1c9a      	adds	r2, r3, #2
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087d4:	e032      	b.n	800883c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d112      	bne.n	800880a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e8:	881a      	ldrh	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008808:	e018      	b.n	800883c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880a:	f7fb fa39 	bl	8003c80 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d803      	bhi.n	8008822 <HAL_SPI_Transmit+0x160>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d102      	bne.n	8008828 <HAL_SPI_Transmit+0x166>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e082      	b.n	8008942 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1c7      	bne.n	80087d6 <HAL_SPI_Transmit+0x114>
 8008846:	e053      	b.n	80088f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_SPI_Transmit+0x194>
 8008850:	8b7b      	ldrh	r3, [r7, #26]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d147      	bne.n	80088e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800887c:	e033      	b.n	80088e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b02      	cmp	r3, #2
 800888a:	d113      	bne.n	80088b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80088b2:	e018      	b.n	80088e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b4:	f7fb f9e4 	bl	8003c80 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d803      	bhi.n	80088cc <HAL_SPI_Transmit+0x20a>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Transmit+0x210>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e02d      	b.n	8008942 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1c6      	bne.n	800887e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fa59 	bl	8008dac <SPI_EndRxTxTransaction>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e000      	b.n	8008942 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008940:	2300      	movs	r3, #0
  }
}
 8008942:	4618      	mov	r0, r3
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b08a      	sub	sp, #40	@ 0x28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008958:	2301      	movs	r3, #1
 800895a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800895c:	f7fb f990 	bl	8003c80 <HAL_GetTick>
 8008960:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008968:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008970:	887b      	ldrh	r3, [r7, #2]
 8008972:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008974:	7ffb      	ldrb	r3, [r7, #31]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d00c      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x4a>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008980:	d106      	bne.n	8008990 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <HAL_SPI_TransmitReceive+0x46>
 800898a:	7ffb      	ldrb	r3, [r7, #31]
 800898c:	2b04      	cmp	r3, #4
 800898e:	d001      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
 8008992:	e17f      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x5c>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <HAL_SPI_TransmitReceive+0x5c>
 80089a0:	887b      	ldrh	r3, [r7, #2]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e174      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_SPI_TransmitReceive+0x6e>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e16d      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d003      	beq.n	80089d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2205      	movs	r2, #5
 80089d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	887a      	ldrh	r2, [r7, #2]
 80089e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	887a      	ldrh	r2, [r7, #2]
 80089ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	887a      	ldrh	r2, [r7, #2]
 80089f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	887a      	ldrh	r2, [r7, #2]
 80089fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a14:	2b40      	cmp	r3, #64	@ 0x40
 8008a16:	d007      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a30:	d17e      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <HAL_SPI_TransmitReceive+0xf6>
 8008a3a:	8afb      	ldrh	r3, [r7, #22]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d16c      	bne.n	8008b1a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a44:	881a      	ldrh	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a50:	1c9a      	adds	r2, r3, #2
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a64:	e059      	b.n	8008b1a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d11b      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x162>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d016      	beq.n	8008aac <HAL_SPI_TransmitReceive+0x162>
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d113      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a88:	881a      	ldrh	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a94:	1c9a      	adds	r2, r3, #2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d119      	bne.n	8008aee <HAL_SPI_TransmitReceive+0x1a4>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d014      	beq.n	8008aee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ace:	b292      	uxth	r2, r2
 8008ad0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad6:	1c9a      	adds	r2, r3, #2
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aea:	2301      	movs	r3, #1
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008aee:	f7fb f8c7 	bl	8003c80 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d80d      	bhi.n	8008b1a <HAL_SPI_TransmitReceive+0x1d0>
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d009      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e0bc      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1a0      	bne.n	8008a66 <HAL_SPI_TransmitReceive+0x11c>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d19b      	bne.n	8008a66 <HAL_SPI_TransmitReceive+0x11c>
 8008b2e:	e082      	b.n	8008c36 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x1f4>
 8008b38:	8afb      	ldrh	r3, [r7, #22]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d171      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	7812      	ldrb	r2, [r2, #0]
 8008b4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b64:	e05d      	b.n	8008c22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d11c      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x264>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d017      	beq.n	8008bae <HAL_SPI_TransmitReceive+0x264>
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d114      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d119      	bne.n	8008bf0 <HAL_SPI_TransmitReceive+0x2a6>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d014      	beq.n	8008bf0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bec:	2301      	movs	r3, #1
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bf0:	f7fb f846 	bl	8003c80 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d803      	bhi.n	8008c08 <HAL_SPI_TransmitReceive+0x2be>
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d102      	bne.n	8008c0e <HAL_SPI_TransmitReceive+0x2c4>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e038      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d19c      	bne.n	8008b66 <HAL_SPI_TransmitReceive+0x21c>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d197      	bne.n	8008b66 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f8b6 	bl	8008dac <SPI_EndRxTxTransaction>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e01d      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008c92:	2300      	movs	r3, #0
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3728      	adds	r7, #40	@ 0x28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cac:	f7fa ffe8 	bl	8003c80 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4413      	add	r3, r2
 8008cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cbc:	f7fa ffe0 	bl	8003c80 <HAL_GetTick>
 8008cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cc2:	4b39      	ldr	r3, [pc, #228]	@ (8008da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	015b      	lsls	r3, r3, #5
 8008cc8:	0d1b      	lsrs	r3, r3, #20
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	fb02 f303 	mul.w	r3, r2, r3
 8008cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cd2:	e055      	b.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d051      	beq.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cdc:	f7fa ffd0 	bl	8003c80 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d902      	bls.n	8008cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d13d      	bne.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d0a:	d111      	bne.n	8008d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d14:	d004      	beq.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d1e:	d107      	bne.n	8008d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d38:	d10f      	bne.n	8008d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e018      	b.n	8008da0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	e002      	b.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d19a      	bne.n	8008cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	2000004c 	.word	0x2000004c

08008dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff ff6a 	bl	8008c9c <SPI_WaitFlagStateUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d007      	beq.n	8008dde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd2:	f043 0220 	orr.w	r2, r3, #32
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e032      	b.n	8008e44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dde:	4b1b      	ldr	r3, [pc, #108]	@ (8008e4c <SPI_EndRxTxTransaction+0xa0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e50 <SPI_EndRxTxTransaction+0xa4>)
 8008de4:	fba2 2303 	umull	r2, r3, r2, r3
 8008de8:	0d5b      	lsrs	r3, r3, #21
 8008dea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008dee:	fb02 f303 	mul.w	r3, r2, r3
 8008df2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dfc:	d112      	bne.n	8008e24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	2180      	movs	r1, #128	@ 0x80
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff ff47 	bl	8008c9c <SPI_WaitFlagStateUntilTimeout>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e18:	f043 0220 	orr.w	r2, r3, #32
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e00f      	b.n	8008e44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e3a:	2b80      	cmp	r3, #128	@ 0x80
 8008e3c:	d0f2      	beq.n	8008e24 <SPI_EndRxTxTransaction+0x78>
 8008e3e:	e000      	b.n	8008e42 <SPI_EndRxTxTransaction+0x96>
        break;
 8008e40:	bf00      	nop
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	2000004c 	.word	0x2000004c
 8008e50:	165e9f81 	.word	0x165e9f81

08008e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e041      	b.n	8008eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7fa fd28 	bl	80038d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f000 faa6 	bl	80093e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d001      	beq.n	8008f0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e046      	b.n	8008f9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a23      	ldr	r2, [pc, #140]	@ (8008fa8 <HAL_TIM_Base_Start+0xb4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d022      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f26:	d01d      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008fac <HAL_TIM_Base_Start+0xb8>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d018      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb0 <HAL_TIM_Base_Start+0xbc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d013      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb4 <HAL_TIM_Base_Start+0xc0>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d00e      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb8 <HAL_TIM_Base_Start+0xc4>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a19      	ldr	r2, [pc, #100]	@ (8008fbc <HAL_TIM_Base_Start+0xc8>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIM_Base_Start+0x70>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a18      	ldr	r2, [pc, #96]	@ (8008fc0 <HAL_TIM_Base_Start+0xcc>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d111      	bne.n	8008f88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 0307 	and.w	r3, r3, #7
 8008f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b06      	cmp	r3, #6
 8008f74:	d010      	beq.n	8008f98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0201 	orr.w	r2, r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	e007      	b.n	8008f98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0201 	orr.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40010400 	.word	0x40010400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40001800 	.word	0x40001800

08008fc4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10f      	bne.n	8008ffc <HAL_TIM_Base_Stop+0x38>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a1a      	ldr	r2, [r3, #32]
 8008fe2:	f240 4344 	movw	r3, #1092	@ 0x444
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d107      	bne.n	8008ffc <HAL_TIM_Base_Stop+0x38>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d020      	beq.n	8009076 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01b      	beq.n	8009076 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0202 	mvn.w	r2, #2
 8009046:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9a3 	bl	80093a8 <HAL_TIM_IC_CaptureCallback>
 8009062:	e005      	b.n	8009070 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f995 	bl	8009394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9a6 	bl	80093bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d020      	beq.n	80090c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01b      	beq.n	80090c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f06f 0204 	mvn.w	r2, #4
 8009092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f97d 	bl	80093a8 <HAL_TIM_IC_CaptureCallback>
 80090ae:	e005      	b.n	80090bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f96f 	bl	8009394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f980 	bl	80093bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f003 0308 	and.w	r3, r3, #8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d020      	beq.n	800910e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d01b      	beq.n	800910e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f06f 0208 	mvn.w	r2, #8
 80090de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2204      	movs	r2, #4
 80090e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f957 	bl	80093a8 <HAL_TIM_IC_CaptureCallback>
 80090fa:	e005      	b.n	8009108 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f949 	bl	8009394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f95a 	bl	80093bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d020      	beq.n	800915a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f003 0310 	and.w	r3, r3, #16
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01b      	beq.n	800915a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f06f 0210 	mvn.w	r2, #16
 800912a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2208      	movs	r2, #8
 8009130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f931 	bl	80093a8 <HAL_TIM_IC_CaptureCallback>
 8009146:	e005      	b.n	8009154 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f923 	bl	8009394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f934 	bl	80093bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f06f 0201 	mvn.w	r2, #1
 8009176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f901 	bl	8009380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fae7 	bl	8009770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f905 	bl	80093d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f06f 0220 	mvn.w	r2, #32
 80091e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fab9 	bl	800975c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_TIM_ConfigClockSource+0x1c>
 800920a:	2302      	movs	r3, #2
 800920c:	e0b4      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x186>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2202      	movs	r2, #2
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800922c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009234:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009246:	d03e      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0xd4>
 8009248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800924c:	f200 8087 	bhi.w	800935e <HAL_TIM_ConfigClockSource+0x16c>
 8009250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009254:	f000 8086 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x172>
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925c:	d87f      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 800925e:	2b70      	cmp	r3, #112	@ 0x70
 8009260:	d01a      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0xa6>
 8009262:	2b70      	cmp	r3, #112	@ 0x70
 8009264:	d87b      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 8009266:	2b60      	cmp	r3, #96	@ 0x60
 8009268:	d050      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x11a>
 800926a:	2b60      	cmp	r3, #96	@ 0x60
 800926c:	d877      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 800926e:	2b50      	cmp	r3, #80	@ 0x50
 8009270:	d03c      	beq.n	80092ec <HAL_TIM_ConfigClockSource+0xfa>
 8009272:	2b50      	cmp	r3, #80	@ 0x50
 8009274:	d873      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d058      	beq.n	800932c <HAL_TIM_ConfigClockSource+0x13a>
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d86f      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 800927e:	2b30      	cmp	r3, #48	@ 0x30
 8009280:	d064      	beq.n	800934c <HAL_TIM_ConfigClockSource+0x15a>
 8009282:	2b30      	cmp	r3, #48	@ 0x30
 8009284:	d86b      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 8009286:	2b20      	cmp	r3, #32
 8009288:	d060      	beq.n	800934c <HAL_TIM_ConfigClockSource+0x15a>
 800928a:	2b20      	cmp	r3, #32
 800928c:	d867      	bhi.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d05c      	beq.n	800934c <HAL_TIM_ConfigClockSource+0x15a>
 8009292:	2b10      	cmp	r3, #16
 8009294:	d05a      	beq.n	800934c <HAL_TIM_ConfigClockSource+0x15a>
 8009296:	e062      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092a8:	f000 f9bc 	bl	8009624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	609a      	str	r2, [r3, #8]
      break;
 80092c4:	e04f      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092d6:	f000 f9a5 	bl	8009624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092e8:	609a      	str	r2, [r3, #8]
      break;
 80092ea:	e03c      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092f8:	461a      	mov	r2, r3
 80092fa:	f000 f919 	bl	8009530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2150      	movs	r1, #80	@ 0x50
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f972 	bl	80095ee <TIM_ITRx_SetConfig>
      break;
 800930a:	e02c      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009318:	461a      	mov	r2, r3
 800931a:	f000 f938 	bl	800958e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2160      	movs	r1, #96	@ 0x60
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f962 	bl	80095ee <TIM_ITRx_SetConfig>
      break;
 800932a:	e01c      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009338:	461a      	mov	r2, r3
 800933a:	f000 f8f9 	bl	8009530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2140      	movs	r1, #64	@ 0x40
 8009344:	4618      	mov	r0, r3
 8009346:	f000 f952 	bl	80095ee <TIM_ITRx_SetConfig>
      break;
 800934a:	e00c      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f000 f949 	bl	80095ee <TIM_ITRx_SetConfig>
      break;
 800935c:	e003      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
      break;
 8009362:	e000      	b.n	8009366 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009364:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a43      	ldr	r2, [pc, #268]	@ (8009504 <TIM_Base_SetConfig+0x120>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d013      	beq.n	8009424 <TIM_Base_SetConfig+0x40>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009402:	d00f      	beq.n	8009424 <TIM_Base_SetConfig+0x40>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a40      	ldr	r2, [pc, #256]	@ (8009508 <TIM_Base_SetConfig+0x124>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00b      	beq.n	8009424 <TIM_Base_SetConfig+0x40>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a3f      	ldr	r2, [pc, #252]	@ (800950c <TIM_Base_SetConfig+0x128>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d007      	beq.n	8009424 <TIM_Base_SetConfig+0x40>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a3e      	ldr	r2, [pc, #248]	@ (8009510 <TIM_Base_SetConfig+0x12c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d003      	beq.n	8009424 <TIM_Base_SetConfig+0x40>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a3d      	ldr	r2, [pc, #244]	@ (8009514 <TIM_Base_SetConfig+0x130>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d108      	bne.n	8009436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800942a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a32      	ldr	r2, [pc, #200]	@ (8009504 <TIM_Base_SetConfig+0x120>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d02b      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009444:	d027      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2f      	ldr	r2, [pc, #188]	@ (8009508 <TIM_Base_SetConfig+0x124>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d023      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a2e      	ldr	r2, [pc, #184]	@ (800950c <TIM_Base_SetConfig+0x128>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d01f      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2d      	ldr	r2, [pc, #180]	@ (8009510 <TIM_Base_SetConfig+0x12c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d01b      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a2c      	ldr	r2, [pc, #176]	@ (8009514 <TIM_Base_SetConfig+0x130>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d017      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2b      	ldr	r2, [pc, #172]	@ (8009518 <TIM_Base_SetConfig+0x134>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a2a      	ldr	r2, [pc, #168]	@ (800951c <TIM_Base_SetConfig+0x138>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00f      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a29      	ldr	r2, [pc, #164]	@ (8009520 <TIM_Base_SetConfig+0x13c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00b      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a28      	ldr	r2, [pc, #160]	@ (8009524 <TIM_Base_SetConfig+0x140>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d007      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a27      	ldr	r2, [pc, #156]	@ (8009528 <TIM_Base_SetConfig+0x144>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d003      	beq.n	8009496 <TIM_Base_SetConfig+0xb2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a26      	ldr	r2, [pc, #152]	@ (800952c <TIM_Base_SetConfig+0x148>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d108      	bne.n	80094a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800949c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009504 <TIM_Base_SetConfig+0x120>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d003      	beq.n	80094d6 <TIM_Base_SetConfig+0xf2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a10      	ldr	r2, [pc, #64]	@ (8009514 <TIM_Base_SetConfig+0x130>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d103      	bne.n	80094de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	691a      	ldr	r2, [r3, #16]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f043 0204 	orr.w	r2, r3, #4
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	601a      	str	r2, [r3, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	40010000 	.word	0x40010000
 8009508:	40000400 	.word	0x40000400
 800950c:	40000800 	.word	0x40000800
 8009510:	40000c00 	.word	0x40000c00
 8009514:	40010400 	.word	0x40010400
 8009518:	40014000 	.word	0x40014000
 800951c:	40014400 	.word	0x40014400
 8009520:	40014800 	.word	0x40014800
 8009524:	40001800 	.word	0x40001800
 8009528:	40001c00 	.word	0x40001c00
 800952c:	40002000 	.word	0x40002000

08009530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	f023 0201 	bic.w	r2, r3, #1
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800955a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f023 030a 	bic.w	r3, r3, #10
 800956c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800958e:	b480      	push	{r7}
 8009590:	b087      	sub	sp, #28
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	f023 0210 	bic.w	r2, r3, #16
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	031b      	lsls	r3, r3, #12
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80095ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	621a      	str	r2, [r3, #32]
}
 80095e2:	bf00      	nop
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	f043 0307 	orr.w	r3, r3, #7
 8009610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	609a      	str	r2, [r3, #8]
}
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800963e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	021a      	lsls	r2, r3, #8
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	431a      	orrs	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4313      	orrs	r3, r2
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	697a      	ldr	r2, [r7, #20]
 8009656:	609a      	str	r2, [r3, #8]
}
 8009658:	bf00      	nop
 800965a:	371c      	adds	r7, #28
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009678:	2302      	movs	r3, #2
 800967a:	e05a      	b.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a21      	ldr	r2, [pc, #132]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d022      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c8:	d01d      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d018      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1a      	ldr	r2, [pc, #104]	@ (800974c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00e      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a18      	ldr	r2, [pc, #96]	@ (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a17      	ldr	r2, [pc, #92]	@ (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d004      	beq.n	8009706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a15      	ldr	r2, [pc, #84]	@ (8009758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d10c      	bne.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800970c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	4313      	orrs	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40010000 	.word	0x40010000
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40000c00 	.word	0x40000c00
 8009750:	40010400 	.word	0x40010400
 8009754:	40014000 	.word	0x40014000
 8009758:	40001800 	.word	0x40001800

0800975c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009784:	b084      	sub	sp, #16
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	f107 001c 	add.w	r0, r7, #28
 8009792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009796:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800979a:	2b01      	cmp	r3, #1
 800979c:	d123      	bne.n	80097e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80097b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d105      	bne.n	80097da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 fae8 	bl	800adb0 <USB_CoreReset>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
 80097e4:	e01b      	b.n	800981e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 fadc 	bl	800adb0 <USB_CoreReset>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009808:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009810:	e005      	b.n	800981e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009816:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800981e:	7fbb      	ldrb	r3, [r7, #30]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d10b      	bne.n	800983c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f043 0206 	orr.w	r2, r3, #6
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f043 0220 	orr.w	r2, r3, #32
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009848:	b004      	add	sp, #16
 800984a:	4770      	bx	lr

0800984c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d165      	bne.n	800992c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a41      	ldr	r2, [pc, #260]	@ (8009968 <USB_SetTurnaroundTime+0x11c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d906      	bls.n	8009876 <USB_SetTurnaroundTime+0x2a>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a40      	ldr	r2, [pc, #256]	@ (800996c <USB_SetTurnaroundTime+0x120>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d202      	bcs.n	8009876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009870:	230f      	movs	r3, #15
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e062      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4a3c      	ldr	r2, [pc, #240]	@ (800996c <USB_SetTurnaroundTime+0x120>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d306      	bcc.n	800988c <USB_SetTurnaroundTime+0x40>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4a3b      	ldr	r2, [pc, #236]	@ (8009970 <USB_SetTurnaroundTime+0x124>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d202      	bcs.n	800988c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009886:	230e      	movs	r3, #14
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e057      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4a38      	ldr	r2, [pc, #224]	@ (8009970 <USB_SetTurnaroundTime+0x124>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d306      	bcc.n	80098a2 <USB_SetTurnaroundTime+0x56>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4a37      	ldr	r2, [pc, #220]	@ (8009974 <USB_SetTurnaroundTime+0x128>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d202      	bcs.n	80098a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800989c:	230d      	movs	r3, #13
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	e04c      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	4a33      	ldr	r2, [pc, #204]	@ (8009974 <USB_SetTurnaroundTime+0x128>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d306      	bcc.n	80098b8 <USB_SetTurnaroundTime+0x6c>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a32      	ldr	r2, [pc, #200]	@ (8009978 <USB_SetTurnaroundTime+0x12c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d802      	bhi.n	80098b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80098b2:	230c      	movs	r3, #12
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e041      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009978 <USB_SetTurnaroundTime+0x12c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d906      	bls.n	80098ce <USB_SetTurnaroundTime+0x82>
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4a2e      	ldr	r2, [pc, #184]	@ (800997c <USB_SetTurnaroundTime+0x130>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d802      	bhi.n	80098ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098c8:	230b      	movs	r3, #11
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	e036      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a2a      	ldr	r2, [pc, #168]	@ (800997c <USB_SetTurnaroundTime+0x130>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d906      	bls.n	80098e4 <USB_SetTurnaroundTime+0x98>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4a29      	ldr	r2, [pc, #164]	@ (8009980 <USB_SetTurnaroundTime+0x134>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d802      	bhi.n	80098e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098de:	230a      	movs	r3, #10
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	e02b      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4a26      	ldr	r2, [pc, #152]	@ (8009980 <USB_SetTurnaroundTime+0x134>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d906      	bls.n	80098fa <USB_SetTurnaroundTime+0xae>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4a25      	ldr	r2, [pc, #148]	@ (8009984 <USB_SetTurnaroundTime+0x138>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d202      	bcs.n	80098fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80098f4:	2309      	movs	r3, #9
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	e020      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	4a21      	ldr	r2, [pc, #132]	@ (8009984 <USB_SetTurnaroundTime+0x138>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d306      	bcc.n	8009910 <USB_SetTurnaroundTime+0xc4>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4a20      	ldr	r2, [pc, #128]	@ (8009988 <USB_SetTurnaroundTime+0x13c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d802      	bhi.n	8009910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800990a:	2308      	movs	r3, #8
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e015      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4a1d      	ldr	r2, [pc, #116]	@ (8009988 <USB_SetTurnaroundTime+0x13c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d906      	bls.n	8009926 <USB_SetTurnaroundTime+0xda>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	4a1c      	ldr	r2, [pc, #112]	@ (800998c <USB_SetTurnaroundTime+0x140>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d202      	bcs.n	8009926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009920:	2307      	movs	r3, #7
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e00a      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009926:	2306      	movs	r3, #6
 8009928:	617b      	str	r3, [r7, #20]
 800992a:	e007      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009932:	2309      	movs	r3, #9
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	e001      	b.n	800993c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009938:	2309      	movs	r3, #9
 800993a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	029b      	lsls	r3, r3, #10
 8009950:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009954:	431a      	orrs	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	00d8acbf 	.word	0x00d8acbf
 800996c:	00e4e1c0 	.word	0x00e4e1c0
 8009970:	00f42400 	.word	0x00f42400
 8009974:	01067380 	.word	0x01067380
 8009978:	011a499f 	.word	0x011a499f
 800997c:	01312cff 	.word	0x01312cff
 8009980:	014ca43f 	.word	0x014ca43f
 8009984:	016e3600 	.word	0x016e3600
 8009988:	01a6ab1f 	.word	0x01a6ab1f
 800998c:	01e84800 	.word	0x01e84800

08009990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f043 0201 	orr.w	r2, r3, #1
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f023 0201 	bic.w	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d115      	bne.n	8009a22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a02:	200a      	movs	r0, #10
 8009a04:	f7fa f948 	bl	8003c98 <HAL_Delay>
      ms += 10U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	330a      	adds	r3, #10
 8009a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f93f 	bl	800ac92 <USB_GetMode>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d01e      	beq.n	8009a58 <USB_SetCurrentMode+0x84>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a1e:	d9f0      	bls.n	8009a02 <USB_SetCurrentMode+0x2e>
 8009a20:	e01a      	b.n	8009a58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d115      	bne.n	8009a54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a34:	200a      	movs	r0, #10
 8009a36:	f7fa f92f 	bl	8003c98 <HAL_Delay>
      ms += 10U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	330a      	adds	r3, #10
 8009a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 f926 	bl	800ac92 <USB_GetMode>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <USB_SetCurrentMode+0x84>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a50:	d9f0      	bls.n	8009a34 <USB_SetCurrentMode+0x60>
 8009a52:	e001      	b.n	8009a58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e005      	b.n	8009a64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8009a5c:	d101      	bne.n	8009a62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b086      	sub	sp, #24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	e009      	b.n	8009aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3340      	adds	r3, #64	@ 0x40
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b0e      	cmp	r3, #14
 8009aa4:	d9f2      	bls.n	8009a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11c      	bne.n	8009ae8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009abc:	f043 0302 	orr.w	r3, r3, #2
 8009ac0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ae6:	e00b      	b.n	8009b00 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b06:	461a      	mov	r2, r3
 8009b08:	2300      	movs	r3, #0
 8009b0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d10d      	bne.n	8009b30 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d104      	bne.n	8009b26 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f968 	bl	8009df4 <USB_SetDevSpeed>
 8009b24:	e008      	b.n	8009b38 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b26:	2101      	movs	r1, #1
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f963 	bl	8009df4 <USB_SetDevSpeed>
 8009b2e:	e003      	b.n	8009b38 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b30:	2103      	movs	r1, #3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f95e 	bl	8009df4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b38:	2110      	movs	r1, #16
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f8fa 	bl	8009d34 <USB_FlushTxFifo>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f924 	bl	8009d98 <USB_FlushRxFifo>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b60:	461a      	mov	r2, r3
 8009b62:	2300      	movs	r3, #0
 8009b64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	e043      	b.n	8009c0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b9a:	d118      	bne.n	8009bce <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	e013      	b.n	8009be0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e008      	b.n	8009be0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bda:	461a      	mov	r2, r3
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bec:	461a      	mov	r2, r3
 8009bee:	2300      	movs	r3, #0
 8009bf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	613b      	str	r3, [r7, #16]
 8009c0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c10:	461a      	mov	r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d3b5      	bcc.n	8009b84 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	613b      	str	r3, [r7, #16]
 8009c1c:	e043      	b.n	8009ca6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c34:	d118      	bne.n	8009c68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e013      	b.n	8009c7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	e008      	b.n	8009c7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c74:	461a      	mov	r2, r3
 8009c76:	2300      	movs	r3, #0
 8009c78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	461a      	mov	r2, r3
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
 8009ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009caa:	461a      	mov	r2, r3
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d3b5      	bcc.n	8009c1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009cd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	f043 0210 	orr.w	r2, r3, #16
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	4b10      	ldr	r3, [pc, #64]	@ (8009d30 <USB_DevInit+0x2c4>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f043 0208 	orr.w	r2, r3, #8
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d107      	bne.n	8009d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d18:	f043 0304 	orr.w	r3, r3, #4
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d2c:	b004      	add	sp, #16
 8009d2e:	4770      	bx	lr
 8009d30:	803c3800 	.word	0x803c3800

08009d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d4e:	d901      	bls.n	8009d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e01b      	b.n	8009d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	daf2      	bge.n	8009d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	019b      	lsls	r3, r3, #6
 8009d64:	f043 0220 	orr.w	r2, r3, #32
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d78:	d901      	bls.n	8009d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e006      	b.n	8009d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	d0f0      	beq.n	8009d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009db0:	d901      	bls.n	8009db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e018      	b.n	8009de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	daf2      	bge.n	8009da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2210      	movs	r2, #16
 8009dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dd4:	d901      	bls.n	8009dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e006      	b.n	8009de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0310 	and.w	r3, r3, #16
 8009de2:	2b10      	cmp	r3, #16
 8009de4:	d0f0      	beq.n	8009dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e14:	4313      	orrs	r3, r2
 8009e16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0306 	and.w	r3, r3, #6
 8009e3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
 8009e4a:	e00a      	b.n	8009e62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d002      	beq.n	8009e58 <USB_GetDevSpeed+0x32>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b06      	cmp	r3, #6
 8009e56:	d102      	bne.n	8009e5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	75fb      	strb	r3, [r7, #23]
 8009e5c:	e001      	b.n	8009e62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e5e:	230f      	movs	r3, #15
 8009e60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d13a      	bne.n	8009f02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	68f9      	ldr	r1, [r7, #12]
 8009ea6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d155      	bne.n	8009f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ee0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	059b      	lsls	r3, r3, #22
 8009ee6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	e036      	b.n	8009f70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f08:	69da      	ldr	r2, [r3, #28]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 030f 	and.w	r3, r3, #15
 8009f12:	2101      	movs	r1, #1
 8009f14:	fa01 f303 	lsl.w	r3, r1, r3
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f20:	4313      	orrs	r3, r2
 8009f22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d11a      	bne.n	8009f70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	791b      	ldrb	r3, [r3, #4]
 8009f54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f56:	430b      	orrs	r3, r1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d161      	bne.n	800a060 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb2:	d11f      	bne.n	8009ff4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	0151      	lsls	r1, r2, #5
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	440a      	add	r2, r1
 8009fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	43db      	mvns	r3, r3
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a014:	4013      	ands	r3, r2
 800a016:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01e:	69da      	ldr	r2, [r3, #28]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	2101      	movs	r1, #1
 800a02a:	fa01 f303 	lsl.w	r3, r1, r3
 800a02e:	b29b      	uxth	r3, r3
 800a030:	43db      	mvns	r3, r3
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a038:	4013      	ands	r3, r2
 800a03a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	0159      	lsls	r1, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	440b      	add	r3, r1
 800a052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a056:	4619      	mov	r1, r3
 800a058:	4b35      	ldr	r3, [pc, #212]	@ (800a130 <USB_DeactivateEndpoint+0x1b0>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	600b      	str	r3, [r1, #0]
 800a05e:	e060      	b.n	800a122 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a076:	d11f      	bne.n	800a0b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a092:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a096:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	0151      	lsls	r1, r2, #5
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	440a      	add	r2, r1
 800a0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f003 030f 	and.w	r3, r3, #15
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	68f9      	ldr	r1, [r7, #12]
 800a0d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0d8:	4013      	ands	r3, r2
 800a0da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0e2:	69da      	ldr	r2, [r3, #28]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f003 030f 	and.w	r3, r3, #15
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f2:	041b      	lsls	r3, r3, #16
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	0159      	lsls	r1, r3, #5
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	440b      	add	r3, r1
 800a116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11a:	4619      	mov	r1, r3
 800a11c:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <USB_DeactivateEndpoint+0x1b4>)
 800a11e:	4013      	ands	r3, r2
 800a120:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	ec337800 	.word	0xec337800
 800a134:	eff37800 	.word	0xeff37800

0800a138 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08a      	sub	sp, #40	@ 0x28
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4613      	mov	r3, r2
 800a144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	2b01      	cmp	r3, #1
 800a156:	f040 817f 	bne.w	800a458 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d132      	bne.n	800a1c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a17c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a180:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	0151      	lsls	r1, r2, #5
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	440a      	add	r2, r1
 800a19c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	0151      	lsls	r1, r2, #5
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	440a      	add	r2, r1
 800a1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c0:	0cdb      	lsrs	r3, r3, #19
 800a1c2:	04db      	lsls	r3, r3, #19
 800a1c4:	6113      	str	r3, [r2, #16]
 800a1c6:	e097      	b.n	800a2f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	0151      	lsls	r1, r2, #5
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	440a      	add	r2, r1
 800a1de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1e2:	0cdb      	lsrs	r3, r3, #19
 800a1e4:	04db      	lsls	r3, r3, #19
 800a1e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	0151      	lsls	r1, r2, #5
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a202:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a206:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a20a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d11a      	bne.n	800a248 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d903      	bls.n	800a226 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	0151      	lsls	r1, r2, #5
 800a238:	69fa      	ldr	r2, [r7, #28]
 800a23a:	440a      	add	r2, r1
 800a23c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a244:	6113      	str	r3, [r2, #16]
 800a246:	e044      	b.n	800a2d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	4413      	add	r3, r2
 800a252:	1e5a      	subs	r2, r3, #1
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	8afb      	ldrh	r3, [r7, #22]
 800a26e:	04d9      	lsls	r1, r3, #19
 800a270:	4ba4      	ldr	r3, [pc, #656]	@ (800a504 <USB_EPStartXfer+0x3cc>)
 800a272:	400b      	ands	r3, r1
 800a274:	69b9      	ldr	r1, [r7, #24]
 800a276:	0148      	lsls	r0, r1, #5
 800a278:	69f9      	ldr	r1, [r7, #28]
 800a27a:	4401      	add	r1, r0
 800a27c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a280:	4313      	orrs	r3, r2
 800a282:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d122      	bne.n	800a2d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a2aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	8afb      	ldrh	r3, [r7, #22]
 800a2bc:	075b      	lsls	r3, r3, #29
 800a2be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a2c2:	69b9      	ldr	r1, [r7, #24]
 800a2c4:	0148      	lsls	r0, r1, #5
 800a2c6:	69f9      	ldr	r1, [r7, #28]
 800a2c8:	4401      	add	r1, r0
 800a2ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2de:	691a      	ldr	r2, [r3, #16]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2e8:	69b9      	ldr	r1, [r7, #24]
 800a2ea:	0148      	lsls	r0, r1, #5
 800a2ec:	69f9      	ldr	r1, [r7, #28]
 800a2ee:	4401      	add	r1, r0
 800a2f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d14b      	bne.n	800a396 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a312:	461a      	mov	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d128      	bne.n	800a374 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d110      	bne.n	800a354 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a34c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e00f      	b.n	800a374 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	0151      	lsls	r1, r2, #5
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	440a      	add	r2, r1
 800a36a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a36e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a372:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	0151      	lsls	r1, r2, #5
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	440a      	add	r2, r1
 800a38a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a38e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	e166      	b.n	800a664 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	791b      	ldrb	r3, [r3, #4]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d015      	beq.n	800a3ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 814e 	beq.w	800a664 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 030f 	and.w	r3, r3, #15
 800a3d8:	2101      	movs	r1, #1
 800a3da:	fa01 f303 	lsl.w	r3, r1, r3
 800a3de:	69f9      	ldr	r1, [r7, #28]
 800a3e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a3e8:	e13c      	b.n	800a664 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d110      	bne.n	800a41c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	0151      	lsls	r1, r2, #5
 800a40c:	69fa      	ldr	r2, [r7, #28]
 800a40e:	440a      	add	r2, r1
 800a410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a414:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	e00f      	b.n	800a43c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a43a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	68d9      	ldr	r1, [r3, #12]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	781a      	ldrb	r2, [r3, #0]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	b298      	uxth	r0, r3
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	4603      	mov	r3, r0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f9b9 	bl	800a7c8 <USB_WritePacket>
 800a456:	e105      	b.n	800a664 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a472:	0cdb      	lsrs	r3, r3, #19
 800a474:	04db      	lsls	r3, r3, #19
 800a476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a492:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a496:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a49a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d132      	bne.n	800a508 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c6:	691a      	ldr	r2, [r3, #16]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4d0:	69b9      	ldr	r1, [r7, #24]
 800a4d2:	0148      	lsls	r0, r1, #5
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	4401      	add	r1, r0
 800a4d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4fe:	6113      	str	r3, [r2, #16]
 800a500:	e062      	b.n	800a5c8 <USB_EPStartXfer+0x490>
 800a502:	bf00      	nop
 800a504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d123      	bne.n	800a558 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a526:	69b9      	ldr	r1, [r7, #24]
 800a528:	0148      	lsls	r0, r1, #5
 800a52a:	69f9      	ldr	r1, [r7, #28]
 800a52c:	4401      	add	r1, r0
 800a52e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a532:	4313      	orrs	r3, r2
 800a534:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	0151      	lsls	r1, r2, #5
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	440a      	add	r2, r1
 800a54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a554:	6113      	str	r3, [r2, #16]
 800a556:	e037      	b.n	800a5c8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	4413      	add	r3, r2
 800a562:	1e5a      	subs	r2, r3, #1
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	fbb2 f3f3 	udiv	r3, r2, r3
 800a56c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	8afa      	ldrh	r2, [r7, #22]
 800a574:	fb03 f202 	mul.w	r2, r3, r2
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	8afb      	ldrh	r3, [r7, #22]
 800a58c:	04d9      	lsls	r1, r3, #19
 800a58e:	4b38      	ldr	r3, [pc, #224]	@ (800a670 <USB_EPStartXfer+0x538>)
 800a590:	400b      	ands	r3, r1
 800a592:	69b9      	ldr	r1, [r7, #24]
 800a594:	0148      	lsls	r0, r1, #5
 800a596:	69f9      	ldr	r1, [r7, #28]
 800a598:	4401      	add	r1, r0
 800a59a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5b8:	69b9      	ldr	r1, [r7, #24]
 800a5ba:	0148      	lsls	r0, r1, #5
 800a5bc:	69f9      	ldr	r1, [r7, #28]
 800a5be:	4401      	add	r1, r0
 800a5c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d10d      	bne.n	800a5ea <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	68d9      	ldr	r1, [r3, #12]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e6:	460a      	mov	r2, r1
 800a5e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	791b      	ldrb	r3, [r3, #4]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d128      	bne.n	800a644 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d110      	bne.n	800a624 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a61c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	e00f      	b.n	800a644 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	0151      	lsls	r1, r2, #5
 800a636:	69fa      	ldr	r2, [r7, #28]
 800a638:	440a      	add	r2, r1
 800a63a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a63e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a642:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a65e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3720      	adds	r7, #32
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	1ff80000 	.word	0x1ff80000

0800a674 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a674:	b480      	push	{r7}
 800a676:	b087      	sub	sp, #28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d14a      	bne.n	800a728 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6aa:	f040 8086 	bne.w	800a7ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	7812      	ldrb	r2, [r2, #0]
 800a6c2:	0151      	lsls	r1, r2, #5
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a702:	4293      	cmp	r3, r2
 800a704:	d902      	bls.n	800a70c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	75fb      	strb	r3, [r7, #23]
          break;
 800a70a:	e056      	b.n	800a7ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a724:	d0e7      	beq.n	800a6f6 <USB_EPStopXfer+0x82>
 800a726:	e048      	b.n	800a7ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a73c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a740:	d13b      	bne.n	800a7ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	0151      	lsls	r1, r2, #5
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	440a      	add	r2, r1
 800a75c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a760:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a764:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	0151      	lsls	r1, r2, #5
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	440a      	add	r2, r1
 800a780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a796:	4293      	cmp	r3, r2
 800a798:	d902      	bls.n	800a7a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	75fb      	strb	r3, [r7, #23]
          break;
 800a79e:	e00c      	b.n	800a7ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b8:	d0e7      	beq.n	800a78a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b089      	sub	sp, #36	@ 0x24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	71fb      	strb	r3, [r7, #7]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d123      	bne.n	800a836 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7ee:	88bb      	ldrh	r3, [r7, #4]
 800a7f0:	3303      	adds	r3, #3
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e018      	b.n	800a82e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	031a      	lsls	r2, r3, #12
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
 800a804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a808:	461a      	mov	r2, r3
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	3301      	adds	r3, #1
 800a81a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3301      	adds	r3, #1
 800a820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	3301      	adds	r3, #1
 800a826:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	3301      	adds	r3, #1
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	d3e2      	bcc.n	800a7fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3724      	adds	r7, #36	@ 0x24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a844:	b480      	push	{r7}
 800a846:	b08b      	sub	sp, #44	@ 0x2c
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	089b      	lsrs	r3, r3, #2
 800a85e:	b29b      	uxth	r3, r3
 800a860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a862:	88fb      	ldrh	r3, [r7, #6]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a86a:	2300      	movs	r3, #0
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	e014      	b.n	800a89a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87e:	3301      	adds	r3, #1
 800a880:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a884:	3301      	adds	r3, #1
 800a886:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	3301      	adds	r3, #1
 800a88c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a890:	3301      	adds	r3, #1
 800a892:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	3301      	adds	r3, #1
 800a898:	623b      	str	r3, [r7, #32]
 800a89a:	6a3a      	ldr	r2, [r7, #32]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d3e6      	bcc.n	800a870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8a2:	8bfb      	ldrh	r3, [r7, #30]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01e      	beq.n	800a8e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f107 0310 	add.w	r3, r7, #16
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	701a      	strb	r2, [r3, #0]
      i++;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a8da:	8bfb      	ldrh	r3, [r7, #30]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8e0:	8bfb      	ldrh	r3, [r7, #30]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1ea      	bne.n	800a8bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	372c      	adds	r7, #44	@ 0x2c
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	785b      	ldrb	r3, [r3, #1]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d12c      	bne.n	800a96a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4413      	add	r3, r2
 800a918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	db12      	blt.n	800a948 <USB_EPSetStall+0x54>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00f      	beq.n	800a948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	0151      	lsls	r1, r2, #5
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	440a      	add	r2, r1
 800a93e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	0151      	lsls	r1, r2, #5
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	440a      	add	r2, r1
 800a95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	e02b      	b.n	800a9c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	db12      	blt.n	800a9a2 <USB_EPSetStall+0xae>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00f      	beq.n	800a9a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	0151      	lsls	r1, r2, #5
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	440a      	add	r2, r1
 800a998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a99c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d128      	bne.n	800aa3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	791b      	ldrb	r3, [r3, #4]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d003      	beq.n	800aa1c <USB_EPClearStall+0x4c>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	791b      	ldrb	r3, [r3, #4]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d138      	bne.n	800aa8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	e027      	b.n	800aa8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d003      	beq.n	800aa6e <USB_EPClearStall+0x9e>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d10f      	bne.n	800aa8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aaba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aabe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aad0:	68f9      	ldr	r1, [r7, #12]
 800aad2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aad6:	4313      	orrs	r3, r2
 800aad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab16:	f023 0302 	bic.w	r3, r3, #2
 800ab1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab44:	f023 0303 	bic.w	r3, r3, #3
 800ab48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4013      	ands	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab84:	68fb      	ldr	r3, [r7, #12]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	4013      	ands	r3, r2
 800abb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	0c1b      	lsrs	r3, r3, #16
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	4013      	ands	r3, r2
 800abe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	b29b      	uxth	r3, r3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	4013      	ands	r3, r2
 800ac26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac28:	68bb      	ldr	r3, [r7, #8]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b087      	sub	sp, #28
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	fa22 f303 	lsr.w	r3, r2, r3
 800ac66:	01db      	lsls	r3, r3, #7
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	4013      	ands	r3, r2
 800ac82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac84:	68bb      	ldr	r3, [r7, #8]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ace0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ace4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	460b      	mov	r3, r1
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	333c      	adds	r3, #60	@ 0x3c
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	4a26      	ldr	r2, [pc, #152]	@ (800adac <USB_EP0_OutStart+0xb8>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d90a      	bls.n	800ad2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad28:	d101      	bne.n	800ad2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e037      	b.n	800ad9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad34:	461a      	mov	r2, r3
 800ad36:	2300      	movs	r3, #0
 800ad38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad5c:	f043 0318 	orr.w	r3, r3, #24
 800ad60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ad74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad76:	7afb      	ldrb	r3, [r7, #11]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d10f      	bne.n	800ad9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ad9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	4f54300a 	.word	0x4f54300a

0800adb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adc8:	d901      	bls.n	800adce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e022      	b.n	800ae14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	daf2      	bge.n	800adbc <USB_CoreReset+0xc>

  count = 10U;
 800add6:	230a      	movs	r3, #10
 800add8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800adda:	e002      	b.n	800ade2 <USB_CoreReset+0x32>
  {
    count--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3b01      	subs	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f9      	bne.n	800addc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	f043 0201 	orr.w	r2, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae00:	d901      	bls.n	800ae06 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e006      	b.n	800ae14 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d0f0      	beq.n	800adf4 <USB_CoreReset+0x44>

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae30:	f002 fc86 	bl	800d740 <USBD_static_malloc>
 800ae34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d109      	bne.n	800ae50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32b0      	adds	r2, #176	@ 0xb0
 800ae46:	2100      	movs	r1, #0
 800ae48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e0d4      	b.n	800affa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae50:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ae54:	2100      	movs	r1, #0
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f004 fbe4 	bl	800f624 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32b0      	adds	r2, #176	@ 0xb0
 800ae66:	68f9      	ldr	r1, [r7, #12]
 800ae68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32b0      	adds	r2, #176	@ 0xb0
 800ae76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7c1b      	ldrb	r3, [r3, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d138      	bne.n	800aefa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae88:	4b5e      	ldr	r3, [pc, #376]	@ (800b004 <USBD_CDC_Init+0x1e4>)
 800ae8a:	7819      	ldrb	r1, [r3, #0]
 800ae8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae90:	2202      	movs	r2, #2
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f002 fb31 	bl	800d4fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae98:	4b5a      	ldr	r3, [pc, #360]	@ (800b004 <USBD_CDC_Init+0x1e4>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 020f 	and.w	r2, r3, #15
 800aea0:	6879      	ldr	r1, [r7, #4]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	3323      	adds	r3, #35	@ 0x23
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aeb2:	4b55      	ldr	r3, [pc, #340]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800aeb4:	7819      	ldrb	r1, [r3, #0]
 800aeb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeba:	2202      	movs	r2, #2
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 fb1c 	bl	800d4fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aec2:	4b51      	ldr	r3, [pc, #324]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aeda:	2201      	movs	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aede:	4b4b      	ldr	r3, [pc, #300]	@ (800b00c <USBD_CDC_Init+0x1ec>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	f003 020f 	and.w	r2, r3, #15
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	331c      	adds	r3, #28
 800aef4:	2210      	movs	r2, #16
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	e035      	b.n	800af66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aefa:	4b42      	ldr	r3, [pc, #264]	@ (800b004 <USBD_CDC_Init+0x1e4>)
 800aefc:	7819      	ldrb	r1, [r3, #0]
 800aefe:	2340      	movs	r3, #64	@ 0x40
 800af00:	2202      	movs	r2, #2
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f002 faf9 	bl	800d4fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af08:	4b3e      	ldr	r3, [pc, #248]	@ (800b004 <USBD_CDC_Init+0x1e4>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	f003 020f 	and.w	r2, r3, #15
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	440b      	add	r3, r1
 800af1c:	3323      	adds	r3, #35	@ 0x23
 800af1e:	2201      	movs	r2, #1
 800af20:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af22:	4b39      	ldr	r3, [pc, #228]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800af24:	7819      	ldrb	r1, [r3, #0]
 800af26:	2340      	movs	r3, #64	@ 0x40
 800af28:	2202      	movs	r2, #2
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f002 fae5 	bl	800d4fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af30:	4b35      	ldr	r3, [pc, #212]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 020f 	and.w	r2, r3, #15
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800af48:	2201      	movs	r2, #1
 800af4a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af4c:	4b2f      	ldr	r3, [pc, #188]	@ (800b00c <USBD_CDC_Init+0x1ec>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 020f 	and.w	r2, r3, #15
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	4613      	mov	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	440b      	add	r3, r1
 800af60:	331c      	adds	r3, #28
 800af62:	2210      	movs	r2, #16
 800af64:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af66:	4b29      	ldr	r3, [pc, #164]	@ (800b00c <USBD_CDC_Init+0x1ec>)
 800af68:	7819      	ldrb	r1, [r3, #0]
 800af6a:	2308      	movs	r3, #8
 800af6c:	2203      	movs	r2, #3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f002 fac3 	bl	800d4fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af74:	4b25      	ldr	r3, [pc, #148]	@ (800b00c <USBD_CDC_Init+0x1ec>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	f003 020f 	and.w	r2, r3, #15
 800af7c:	6879      	ldr	r1, [r7, #4]
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	440b      	add	r3, r1
 800af88:	3323      	adds	r3, #35	@ 0x23
 800af8a:	2201      	movs	r2, #1
 800af8c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	33b0      	adds	r3, #176	@ 0xb0
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afc4:	2302      	movs	r3, #2
 800afc6:	e018      	b.n	800affa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7c1b      	ldrb	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afd0:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800afd2:	7819      	ldrb	r1, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f002 fb7a 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800afe4:	e008      	b.n	800aff8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afe6:	4b08      	ldr	r3, [pc, #32]	@ (800b008 <USBD_CDC_Init+0x1e8>)
 800afe8:	7819      	ldrb	r1, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aff0:	2340      	movs	r3, #64	@ 0x40
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f002 fb70 	bl	800d6d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	200000df 	.word	0x200000df
 800b008:	200000e0 	.word	0x200000e0
 800b00c:	200000e1 	.word	0x200000e1

0800b010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b01c:	4b3a      	ldr	r3, [pc, #232]	@ (800b108 <USBD_CDC_DeInit+0xf8>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f002 fa8f 	bl	800d546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b028:	4b37      	ldr	r3, [pc, #220]	@ (800b108 <USBD_CDC_DeInit+0xf8>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	3323      	adds	r3, #35	@ 0x23
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b042:	4b32      	ldr	r3, [pc, #200]	@ (800b10c <USBD_CDC_DeInit+0xfc>)
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f002 fa7c 	bl	800d546 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b04e:	4b2f      	ldr	r3, [pc, #188]	@ (800b10c <USBD_CDC_DeInit+0xfc>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	f003 020f 	and.w	r2, r3, #15
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	440b      	add	r3, r1
 800b062:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b066:	2200      	movs	r2, #0
 800b068:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b06a:	4b29      	ldr	r3, [pc, #164]	@ (800b110 <USBD_CDC_DeInit+0x100>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f002 fa68 	bl	800d546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b076:	4b26      	ldr	r3, [pc, #152]	@ (800b110 <USBD_CDC_DeInit+0x100>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	f003 020f 	and.w	r2, r3, #15
 800b07e:	6879      	ldr	r1, [r7, #4]
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	440b      	add	r3, r1
 800b08a:	3323      	adds	r3, #35	@ 0x23
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b090:	4b1f      	ldr	r3, [pc, #124]	@ (800b110 <USBD_CDC_DeInit+0x100>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 020f 	and.w	r2, r3, #15
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	331c      	adds	r3, #28
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	32b0      	adds	r2, #176	@ 0xb0
 800b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01f      	beq.n	800b0fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	33b0      	adds	r3, #176	@ 0xb0
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	32b0      	adds	r2, #176	@ 0xb0
 800b0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f002 fb3c 	bl	800d75c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	32b0      	adds	r2, #176	@ 0xb0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	200000df 	.word	0x200000df
 800b10c:	200000e0 	.word	0x200000e0
 800b110:	200000e1 	.word	0x200000e1

0800b114 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	32b0      	adds	r2, #176	@ 0xb0
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	e0bf      	b.n	800b2c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d050      	beq.n	800b1f2 <USBD_CDC_Setup+0xde>
 800b150:	2b20      	cmp	r3, #32
 800b152:	f040 80af 	bne.w	800b2b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d03a      	beq.n	800b1d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b25b      	sxtb	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	da1b      	bge.n	800b1a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	33b0      	adds	r3, #176	@ 0xb0
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b17e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	88d2      	ldrh	r2, [r2, #6]
 800b184:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b07      	cmp	r3, #7
 800b18c:	bf28      	it	cs
 800b18e:	2307      	movcs	r3, #7
 800b190:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	89fa      	ldrh	r2, [r7, #14]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 fd67 	bl	800cc6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b19e:	e090      	b.n	800b2c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	785a      	ldrb	r2, [r3, #1]
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	88db      	ldrh	r3, [r3, #6]
 800b1ae:	2b3f      	cmp	r3, #63	@ 0x3f
 800b1b0:	d803      	bhi.n	800b1ba <USBD_CDC_Setup+0xa6>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	88db      	ldrh	r3, [r3, #6]
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	e000      	b.n	800b1bc <USBD_CDC_Setup+0xa8>
 800b1ba:	2240      	movs	r2, #64	@ 0x40
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1c2:	6939      	ldr	r1, [r7, #16]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 fd7c 	bl	800ccca <USBD_CtlPrepareRx>
      break;
 800b1d2:	e076      	b.n	800b2c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	33b0      	adds	r3, #176	@ 0xb0
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	7850      	ldrb	r0, [r2, #1]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	4798      	blx	r3
      break;
 800b1f0:	e067      	b.n	800b2c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	2b0b      	cmp	r3, #11
 800b1f8:	d851      	bhi.n	800b29e <USBD_CDC_Setup+0x18a>
 800b1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b200 <USBD_CDC_Setup+0xec>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b231 	.word	0x0800b231
 800b204:	0800b2ad 	.word	0x0800b2ad
 800b208:	0800b29f 	.word	0x0800b29f
 800b20c:	0800b29f 	.word	0x0800b29f
 800b210:	0800b29f 	.word	0x0800b29f
 800b214:	0800b29f 	.word	0x0800b29f
 800b218:	0800b29f 	.word	0x0800b29f
 800b21c:	0800b29f 	.word	0x0800b29f
 800b220:	0800b29f 	.word	0x0800b29f
 800b224:	0800b29f 	.word	0x0800b29f
 800b228:	0800b25b 	.word	0x0800b25b
 800b22c:	0800b285 	.word	0x0800b285
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d107      	bne.n	800b24c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b23c:	f107 030a 	add.w	r3, r7, #10
 800b240:	2202      	movs	r2, #2
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f001 fd11 	bl	800cc6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b24a:	e032      	b.n	800b2b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fc8f 	bl	800cb72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b254:	2303      	movs	r3, #3
 800b256:	75fb      	strb	r3, [r7, #23]
          break;
 800b258:	e02b      	b.n	800b2b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b03      	cmp	r3, #3
 800b264:	d107      	bne.n	800b276 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b266:	f107 030d 	add.w	r3, r7, #13
 800b26a:	2201      	movs	r2, #1
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 fcfc 	bl	800cc6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b274:	e01d      	b.n	800b2b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 fc7a 	bl	800cb72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b27e:	2303      	movs	r3, #3
 800b280:	75fb      	strb	r3, [r7, #23]
          break;
 800b282:	e016      	b.n	800b2b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d00f      	beq.n	800b2b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 fc6d 	bl	800cb72 <USBD_CtlError>
            ret = USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b29c:	e008      	b.n	800b2b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fc66 	bl	800cb72 <USBD_CtlError>
          ret = USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2aa:	e002      	b.n	800b2b2 <USBD_CDC_Setup+0x19e>
          break;
 800b2ac:	bf00      	nop
 800b2ae:	e008      	b.n	800b2c2 <USBD_CDC_Setup+0x1ae>
          break;
 800b2b0:	bf00      	nop
      }
      break;
 800b2b2:	e006      	b.n	800b2c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f001 fc5b 	bl	800cb72 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e065      	b.n	800b3c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	32b0      	adds	r2, #176	@ 0xb0
 800b300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b304:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	f003 020f 	and.w	r2, r3, #15
 800b30c:	6879      	ldr	r1, [r7, #4]
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	440b      	add	r3, r1
 800b318:	3314      	adds	r3, #20
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d02f      	beq.n	800b380 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	f003 020f 	and.w	r2, r3, #15
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	3314      	adds	r3, #20
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	f003 010f 	and.w	r1, r3, #15
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	460b      	mov	r3, r1
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	440b      	add	r3, r1
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4403      	add	r3, r0
 800b348:	331c      	adds	r3, #28
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b350:	fb01 f303 	mul.w	r3, r1, r3
 800b354:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b356:	2b00      	cmp	r3, #0
 800b358:	d112      	bne.n	800b380 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	f003 020f 	and.w	r2, r3, #15
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	3314      	adds	r3, #20
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b372:	78f9      	ldrb	r1, [r7, #3]
 800b374:	2300      	movs	r3, #0
 800b376:	2200      	movs	r2, #0
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f002 f98c 	bl	800d696 <USBD_LL_Transmit>
 800b37e:	e01f      	b.n	800b3c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	33b0      	adds	r3, #176	@ 0xb0
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	33b0      	adds	r3, #176	@ 0xb0
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32b0      	adds	r2, #176	@ 0xb0
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	32b0      	adds	r2, #176	@ 0xb0
 800b3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e01a      	b.n	800b432 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f002 f98a 	bl	800d71a <USBD_LL_GetRxDataSize>
 800b406:	4602      	mov	r2, r0
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	33b0      	adds	r3, #176	@ 0xb0
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b42c:	4611      	mov	r1, r2
 800b42e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	32b0      	adds	r2, #176	@ 0xb0
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b458:	2303      	movs	r3, #3
 800b45a:	e024      	b.n	800b4a6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	33b0      	adds	r3, #176	@ 0xb0
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d019      	beq.n	800b4a4 <USBD_CDC_EP0_RxReady+0x6a>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b476:	2bff      	cmp	r3, #255	@ 0xff
 800b478:	d014      	beq.n	800b4a4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	33b0      	adds	r3, #176	@ 0xb0
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b492:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b49a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	22ff      	movs	r2, #255	@ 0xff
 800b4a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4b8:	2182      	movs	r1, #130	@ 0x82
 800b4ba:	4818      	ldr	r0, [pc, #96]	@ (800b51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4bc:	f000 fd22 	bl	800bf04 <USBD_GetEpDesc>
 800b4c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	4815      	ldr	r0, [pc, #84]	@ (800b51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4c6:	f000 fd1d 	bl	800bf04 <USBD_GetEpDesc>
 800b4ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4cc:	2181      	movs	r1, #129	@ 0x81
 800b4ce:	4813      	ldr	r0, [pc, #76]	@ (800b51c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4d0:	f000 fd18 	bl	800bf04 <USBD_GetEpDesc>
 800b4d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2210      	movs	r2, #16
 800b4e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d006      	beq.n	800b4f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4f0:	711a      	strb	r2, [r3, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d006      	beq.n	800b50a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b504:	711a      	strb	r2, [r3, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2243      	movs	r2, #67	@ 0x43
 800b50e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b510:	4b02      	ldr	r3, [pc, #8]	@ (800b51c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b512:	4618      	mov	r0, r3
 800b514:	3718      	adds	r7, #24
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2000009c 	.word	0x2000009c

0800b520 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b528:	2182      	movs	r1, #130	@ 0x82
 800b52a:	4818      	ldr	r0, [pc, #96]	@ (800b58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b52c:	f000 fcea 	bl	800bf04 <USBD_GetEpDesc>
 800b530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b532:	2101      	movs	r1, #1
 800b534:	4815      	ldr	r0, [pc, #84]	@ (800b58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b536:	f000 fce5 	bl	800bf04 <USBD_GetEpDesc>
 800b53a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b53c:	2181      	movs	r1, #129	@ 0x81
 800b53e:	4813      	ldr	r0, [pc, #76]	@ (800b58c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b540:	f000 fce0 	bl	800bf04 <USBD_GetEpDesc>
 800b544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2210      	movs	r2, #16
 800b550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d006      	beq.n	800b566 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2200      	movs	r2, #0
 800b55c:	711a      	strb	r2, [r3, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f042 0202 	orr.w	r2, r2, #2
 800b564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d006      	beq.n	800b57a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	711a      	strb	r2, [r3, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f042 0202 	orr.w	r2, r2, #2
 800b578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2243      	movs	r2, #67	@ 0x43
 800b57e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b580:	4b02      	ldr	r3, [pc, #8]	@ (800b58c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	2000009c 	.word	0x2000009c

0800b590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b598:	2182      	movs	r1, #130	@ 0x82
 800b59a:	4818      	ldr	r0, [pc, #96]	@ (800b5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b59c:	f000 fcb2 	bl	800bf04 <USBD_GetEpDesc>
 800b5a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	4815      	ldr	r0, [pc, #84]	@ (800b5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5a6:	f000 fcad 	bl	800bf04 <USBD_GetEpDesc>
 800b5aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5ac:	2181      	movs	r1, #129	@ 0x81
 800b5ae:	4813      	ldr	r0, [pc, #76]	@ (800b5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5b0:	f000 fca8 	bl	800bf04 <USBD_GetEpDesc>
 800b5b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2210      	movs	r2, #16
 800b5c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5d0:	711a      	strb	r2, [r3, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d006      	beq.n	800b5ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5e4:	711a      	strb	r2, [r3, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2243      	movs	r2, #67	@ 0x43
 800b5ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5f0:	4b02      	ldr	r3, [pc, #8]	@ (800b5fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2000009c 	.word	0x2000009c

0800b600 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	220a      	movs	r2, #10
 800b60c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b60e:	4b03      	ldr	r3, [pc, #12]	@ (800b61c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	20000058 	.word	0x20000058

0800b620 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b630:	2303      	movs	r3, #3
 800b632:	e009      	b.n	800b648 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	33b0      	adds	r3, #176	@ 0xb0
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	32b0      	adds	r2, #176	@ 0xb0
 800b66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b676:	2303      	movs	r3, #3
 800b678:	e008      	b.n	800b68c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	371c      	adds	r7, #28
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	32b0      	adds	r2, #176	@ 0xb0
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e004      	b.n	800b6c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	32b0      	adds	r2, #176	@ 0xb0
 800b6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	32b0      	adds	r2, #176	@ 0xb0
 800b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e018      	b.n	800b734 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7c1b      	ldrb	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10a      	bne.n	800b720 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b70a:	4b0c      	ldr	r3, [pc, #48]	@ (800b73c <USBD_CDC_ReceivePacket+0x68>)
 800b70c:	7819      	ldrb	r1, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 ffdd 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800b71e:	e008      	b.n	800b732 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b720:	4b06      	ldr	r3, [pc, #24]	@ (800b73c <USBD_CDC_ReceivePacket+0x68>)
 800b722:	7819      	ldrb	r1, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b72a:	2340      	movs	r3, #64	@ 0x40
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 ffd3 	bl	800d6d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	200000e0 	.word	0x200000e0

0800b740 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4613      	mov	r3, r2
 800b74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	e01f      	b.n	800b798 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	79fa      	ldrb	r2, [r7, #7]
 800b78a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f001 fe4d 	bl	800d42c <USBD_LL_Init>
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7b4:	2303      	movs	r3, #3
 800b7b6:	e025      	b.n	800b804 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	32ae      	adds	r2, #174	@ 0xae
 800b7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00f      	beq.n	800b7f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	32ae      	adds	r2, #174	@ 0xae
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e4:	f107 020e 	add.w	r2, r7, #14
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	4798      	blx	r3
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f001 fe55 	bl	800d4c4 <USBD_LL_Start>
 800b81a:	4603      	mov	r3, r0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b82c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	460b      	mov	r3, r1
 800b844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	2b00      	cmp	r3, #0
 800b852:	d009      	beq.n	800b868 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	4611      	mov	r1, r2
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	460b      	mov	r3, r1
 800b87c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	4611      	mov	r1, r2
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	4798      	blx	r3
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 f920 	bl	800cafe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8da:	f003 031f 	and.w	r3, r3, #31
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d01a      	beq.n	800b918 <USBD_LL_SetupStage+0x72>
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d822      	bhi.n	800b92c <USBD_LL_SetupStage+0x86>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <USBD_LL_SetupStage+0x4a>
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d00a      	beq.n	800b904 <USBD_LL_SetupStage+0x5e>
 800b8ee:	e01d      	b.n	800b92c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fb75 	bl	800bfe8 <USBD_StdDevReq>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
      break;
 800b902:	e020      	b.n	800b946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fbdd 	bl	800c0cc <USBD_StdItfReq>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]
      break;
 800b916:	e016      	b.n	800b946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fc3f 	bl	800c1a4 <USBD_StdEPReq>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]
      break;
 800b92a:	e00c      	b.n	800b946 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b932:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b936:	b2db      	uxtb	r3, r3
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f001 fe22 	bl	800d584 <USBD_LL_StallEP>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
      break;
 800b944:	bf00      	nop
  }

  return ret;
 800b946:	7bfb      	ldrb	r3, [r7, #15]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	460b      	mov	r3, r1
 800b95a:	607a      	str	r2, [r7, #4]
 800b95c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b962:	7afb      	ldrb	r3, [r7, #11]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d177      	bne.n	800ba58 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b96e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b976:	2b03      	cmp	r3, #3
 800b978:	f040 80a1 	bne.w	800babe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	8992      	ldrh	r2, [r2, #12]
 800b984:	4293      	cmp	r3, r2
 800b986:	d91c      	bls.n	800b9c2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	8992      	ldrh	r2, [r2, #12]
 800b990:	1a9a      	subs	r2, r3, r2
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	8992      	ldrh	r2, [r2, #12]
 800b99e:	441a      	add	r2, r3
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6919      	ldr	r1, [r3, #16]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	899b      	ldrh	r3, [r3, #12]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	bf38      	it	cc
 800b9b6:	4613      	movcc	r3, r2
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f001 f9a6 	bl	800cd0c <USBD_CtlContinueRx>
 800b9c0:	e07d      	b.n	800babe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9c8:	f003 031f 	and.w	r3, r3, #31
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d014      	beq.n	800b9fa <USBD_LL_DataOutStage+0xaa>
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d81d      	bhi.n	800ba10 <USBD_LL_DataOutStage+0xc0>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <USBD_LL_DataOutStage+0x8e>
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d003      	beq.n	800b9e4 <USBD_LL_DataOutStage+0x94>
 800b9dc:	e018      	b.n	800ba10 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9e2:	e018      	b.n	800ba16 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fa6e 	bl	800bed0 <USBD_CoreFindIF>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b9f8:	e00d      	b.n	800ba16 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fa70 	bl	800beea <USBD_CoreFindEP>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75bb      	strb	r3, [r7, #22]
            break;
 800ba0e:	e002      	b.n	800ba16 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75bb      	strb	r3, [r7, #22]
            break;
 800ba14:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba16:	7dbb      	ldrb	r3, [r7, #22]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d119      	bne.n	800ba50 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d113      	bne.n	800ba50 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ba28:	7dba      	ldrb	r2, [r7, #22]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	32ae      	adds	r2, #174	@ 0xae
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800ba38:	7dba      	ldrb	r2, [r7, #22]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba40:	7dba      	ldrb	r2, [r7, #22]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	32ae      	adds	r2, #174	@ 0xae
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f001 f96c 	bl	800cd2e <USBD_CtlSendStatus>
 800ba56:	e032      	b.n	800babe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	4619      	mov	r1, r3
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fa41 	bl	800beea <USBD_CoreFindEP>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba6c:	7dbb      	ldrb	r3, [r7, #22]
 800ba6e:	2bff      	cmp	r3, #255	@ 0xff
 800ba70:	d025      	beq.n	800babe <USBD_LL_DataOutStage+0x16e>
 800ba72:	7dbb      	ldrb	r3, [r7, #22]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d122      	bne.n	800babe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d117      	bne.n	800bab4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba84:	7dba      	ldrb	r2, [r7, #22]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	32ae      	adds	r2, #174	@ 0xae
 800ba8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00f      	beq.n	800bab4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ba94:	7dba      	ldrb	r2, [r7, #22]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba9c:	7dba      	ldrb	r2, [r7, #22]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	32ae      	adds	r2, #174	@ 0xae
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	7afa      	ldrb	r2, [r7, #11]
 800baaa:	4611      	mov	r1, r2
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	4798      	blx	r3
 800bab0:	4603      	mov	r3, r0
 800bab2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	e000      	b.n	800bac0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	460b      	mov	r3, r1
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d178      	bne.n	800bbce <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3314      	adds	r3, #20
 800bae0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d163      	bne.n	800bbb4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	8992      	ldrh	r2, [r2, #12]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d91c      	bls.n	800bb32 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	8992      	ldrh	r2, [r2, #12]
 800bb00:	1a9a      	subs	r2, r3, r2
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	693a      	ldr	r2, [r7, #16]
 800bb0c:	8992      	ldrh	r2, [r2, #12]
 800bb0e:	441a      	add	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6919      	ldr	r1, [r3, #16]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f001 f8c2 	bl	800cca8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb24:	2300      	movs	r3, #0
 800bb26:	2200      	movs	r2, #0
 800bb28:	2100      	movs	r1, #0
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f001 fdd4 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800bb30:	e040      	b.n	800bbb4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	899b      	ldrh	r3, [r3, #12]
 800bb36:	461a      	mov	r2, r3
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d11c      	bne.n	800bb7a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d316      	bcc.n	800bb7a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d20f      	bcs.n	800bb7a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f001 f8a2 	bl	800cca8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2100      	movs	r1, #0
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f001 fdb0 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800bb78:	e01c      	b.n	800bbb4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d10f      	bne.n	800bba6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d009      	beq.n	800bba6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bba6:	2180      	movs	r1, #128	@ 0x80
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f001 fceb 	bl	800d584 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f001 f8d0 	bl	800cd54 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d03a      	beq.n	800bc34 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff fe30 	bl	800b824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bbcc:	e032      	b.n	800bc34 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bbce:	7afb      	ldrb	r3, [r7, #11]
 800bbd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f986 	bl	800beea <USBD_CoreFindEP>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	2bff      	cmp	r3, #255	@ 0xff
 800bbe6:	d025      	beq.n	800bc34 <USBD_LL_DataInStage+0x16c>
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d122      	bne.n	800bc34 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d11c      	bne.n	800bc34 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bbfa:	7dfa      	ldrb	r2, [r7, #23]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	32ae      	adds	r2, #174	@ 0xae
 800bc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d014      	beq.n	800bc34 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bc0a:	7dfa      	ldrb	r2, [r7, #23]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc12:	7dfa      	ldrb	r2, [r7, #23]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	32ae      	adds	r2, #174	@ 0xae
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	7afa      	ldrb	r2, [r7, #11]
 800bc20:	4611      	mov	r1, r2
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	4798      	blx	r3
 800bc26:	4603      	mov	r3, r0
 800bc28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc2a:	7dbb      	ldrb	r3, [r7, #22]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bc30:	7dbb      	ldrb	r3, [r7, #22]
 800bc32:	e000      	b.n	800bc36 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d014      	beq.n	800bca4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00e      	beq.n	800bca4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	6852      	ldr	r2, [r2, #4]
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	4611      	mov	r1, r2
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bca0:	2303      	movs	r3, #3
 800bca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bca4:	2340      	movs	r3, #64	@ 0x40
 800bca6:	2200      	movs	r2, #0
 800bca8:	2100      	movs	r1, #0
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f001 fc25 	bl	800d4fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2240      	movs	r2, #64	@ 0x40
 800bcbc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcc0:	2340      	movs	r3, #64	@ 0x40
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2180      	movs	r1, #128	@ 0x80
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 fc17 	bl	800d4fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2240      	movs	r2, #64	@ 0x40
 800bcd8:	841a      	strh	r2, [r3, #32]

  return ret;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	78fa      	ldrb	r2, [r7, #3]
 800bcf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d006      	beq.n	800bd26 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2204      	movs	r2, #4
 800bd2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d106      	bne.n	800bd5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d110      	bne.n	800bda2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	32ae      	adds	r2, #174	@ 0xae
 800bdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e01c      	b.n	800be08 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d115      	bne.n	800be06 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	32ae      	adds	r2, #174	@ 0xae
 800bde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	32ae      	adds	r2, #174	@ 0xae
 800bdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	78fa      	ldrb	r2, [r7, #3]
 800be00:	4611      	mov	r1, r2
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	32ae      	adds	r2, #174	@ 0xae
 800be26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be2e:	2303      	movs	r3, #3
 800be30:	e01c      	b.n	800be6c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d115      	bne.n	800be6a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	32ae      	adds	r2, #174	@ 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	32ae      	adds	r2, #174	@ 0xae
 800be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be62:	78fa      	ldrb	r2, [r7, #3]
 800be64:	4611      	mov	r1, r2
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00e      	beq.n	800bec6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	6852      	ldr	r2, [r2, #4]
 800beb4:	b2d2      	uxtb	r2, r2
 800beb6:	4611      	mov	r1, r2
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	4798      	blx	r3
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bec2:	2303      	movs	r3, #3
 800bec4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bedc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	460b      	mov	r3, r1
 800bef4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bef6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	885b      	ldrh	r3, [r3, #2]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	7812      	ldrb	r2, [r2, #0]
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d91f      	bls.n	800bf6a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf30:	e013      	b.n	800bf5a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bf32:	f107 030a 	add.w	r3, r7, #10
 800bf36:	4619      	mov	r1, r3
 800bf38:	6978      	ldr	r0, [r7, #20]
 800bf3a:	f000 f81b 	bl	800bf74 <USBD_GetNextDesc>
 800bf3e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b05      	cmp	r3, #5
 800bf46:	d108      	bne.n	800bf5a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	789b      	ldrb	r3, [r3, #2]
 800bf50:	78fa      	ldrb	r2, [r7, #3]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d008      	beq.n	800bf68 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	897b      	ldrh	r3, [r7, #10]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d8e5      	bhi.n	800bf32 <USBD_GetEpDesc+0x2e>
 800bf66:	e000      	b.n	800bf6a <USBD_GetEpDesc+0x66>
          break;
 800bf68:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bf6a:	693b      	ldr	r3, [r7, #16]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	7812      	ldrb	r2, [r2, #0]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfca:	8a3b      	ldrh	r3, [r7, #16]
 800bfcc:	021b      	lsls	r3, r3, #8
 800bfce:	b21a      	sxth	r2, r3
 800bfd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	b21b      	sxth	r3, r3
 800bfd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bfda:	89fb      	ldrh	r3, [r7, #14]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bffe:	2b40      	cmp	r3, #64	@ 0x40
 800c000:	d005      	beq.n	800c00e <USBD_StdDevReq+0x26>
 800c002:	2b40      	cmp	r3, #64	@ 0x40
 800c004:	d857      	bhi.n	800c0b6 <USBD_StdDevReq+0xce>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00f      	beq.n	800c02a <USBD_StdDevReq+0x42>
 800c00a:	2b20      	cmp	r3, #32
 800c00c:	d153      	bne.n	800c0b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	32ae      	adds	r2, #174	@ 0xae
 800c018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
      break;
 800c028:	e04a      	b.n	800c0c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	785b      	ldrb	r3, [r3, #1]
 800c02e:	2b09      	cmp	r3, #9
 800c030:	d83b      	bhi.n	800c0aa <USBD_StdDevReq+0xc2>
 800c032:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <USBD_StdDevReq+0x50>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c08d 	.word	0x0800c08d
 800c03c:	0800c0a1 	.word	0x0800c0a1
 800c040:	0800c0ab 	.word	0x0800c0ab
 800c044:	0800c097 	.word	0x0800c097
 800c048:	0800c0ab 	.word	0x0800c0ab
 800c04c:	0800c06b 	.word	0x0800c06b
 800c050:	0800c061 	.word	0x0800c061
 800c054:	0800c0ab 	.word	0x0800c0ab
 800c058:	0800c083 	.word	0x0800c083
 800c05c:	0800c075 	.word	0x0800c075
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa3e 	bl	800c4e4 <USBD_GetDescriptor>
          break;
 800c068:	e024      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fba3 	bl	800c7b8 <USBD_SetAddress>
          break;
 800c072:	e01f      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fbe2 	bl	800c840 <USBD_SetConfig>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
          break;
 800c080:	e018      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fc85 	bl	800c994 <USBD_GetConfig>
          break;
 800c08a:	e013      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fcb6 	bl	800ca00 <USBD_GetStatus>
          break;
 800c094:	e00e      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fce5 	bl	800ca68 <USBD_SetFeature>
          break;
 800c09e:	e009      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fd09 	bl	800caba <USBD_ClrFeature>
          break;
 800c0a8:	e004      	b.n	800c0b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fd60 	bl	800cb72 <USBD_CtlError>
          break;
 800c0b2:	bf00      	nop
      }
      break;
 800c0b4:	e004      	b.n	800c0c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fd5a 	bl	800cb72 <USBD_CtlError>
      break;
 800c0be:	bf00      	nop
  }

  return ret;
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop

0800c0cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0e2:	2b40      	cmp	r3, #64	@ 0x40
 800c0e4:	d005      	beq.n	800c0f2 <USBD_StdItfReq+0x26>
 800c0e6:	2b40      	cmp	r3, #64	@ 0x40
 800c0e8:	d852      	bhi.n	800c190 <USBD_StdItfReq+0xc4>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <USBD_StdItfReq+0x26>
 800c0ee:	2b20      	cmp	r3, #32
 800c0f0:	d14e      	bne.n	800c190 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d840      	bhi.n	800c182 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	889b      	ldrh	r3, [r3, #4]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b01      	cmp	r3, #1
 800c108:	d836      	bhi.n	800c178 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	889b      	ldrh	r3, [r3, #4]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff fedc 	bl	800bed0 <USBD_CoreFindIF>
 800c118:	4603      	mov	r3, r0
 800c11a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c11c:	7bbb      	ldrb	r3, [r7, #14]
 800c11e:	2bff      	cmp	r3, #255	@ 0xff
 800c120:	d01d      	beq.n	800c15e <USBD_StdItfReq+0x92>
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11a      	bne.n	800c15e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c128:	7bba      	ldrb	r2, [r7, #14]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	32ae      	adds	r2, #174	@ 0xae
 800c12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00f      	beq.n	800c158 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c138:	7bba      	ldrb	r2, [r7, #14]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c140:	7bba      	ldrb	r2, [r7, #14]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	32ae      	adds	r2, #174	@ 0xae
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	4798      	blx	r3
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c156:	e004      	b.n	800c162 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c158:	2303      	movs	r3, #3
 800c15a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c15c:	e001      	b.n	800c162 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	88db      	ldrh	r3, [r3, #6]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d110      	bne.n	800c18c <USBD_StdItfReq+0xc0>
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10d      	bne.n	800c18c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fddc 	bl	800cd2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c176:	e009      	b.n	800c18c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fcf9 	bl	800cb72 <USBD_CtlError>
          break;
 800c180:	e004      	b.n	800c18c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fcf4 	bl	800cb72 <USBD_CtlError>
          break;
 800c18a:	e000      	b.n	800c18e <USBD_StdItfReq+0xc2>
          break;
 800c18c:	bf00      	nop
      }
      break;
 800c18e:	e004      	b.n	800c19a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fced 	bl	800cb72 <USBD_CtlError>
      break;
 800c198:	bf00      	nop
  }

  return ret;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	889b      	ldrh	r3, [r3, #4]
 800c1b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1c0:	2b40      	cmp	r3, #64	@ 0x40
 800c1c2:	d007      	beq.n	800c1d4 <USBD_StdEPReq+0x30>
 800c1c4:	2b40      	cmp	r3, #64	@ 0x40
 800c1c6:	f200 8181 	bhi.w	800c4cc <USBD_StdEPReq+0x328>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d02a      	beq.n	800c224 <USBD_StdEPReq+0x80>
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	f040 817c 	bne.w	800c4cc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff fe86 	bl	800beea <USBD_CoreFindEP>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1e2:	7b7b      	ldrb	r3, [r7, #13]
 800c1e4:	2bff      	cmp	r3, #255	@ 0xff
 800c1e6:	f000 8176 	beq.w	800c4d6 <USBD_StdEPReq+0x332>
 800c1ea:	7b7b      	ldrb	r3, [r7, #13]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f040 8172 	bne.w	800c4d6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c1f2:	7b7a      	ldrb	r2, [r7, #13]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c1fa:	7b7a      	ldrb	r2, [r7, #13]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	32ae      	adds	r2, #174	@ 0xae
 800c200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f000 8165 	beq.w	800c4d6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c20c:	7b7a      	ldrb	r2, [r7, #13]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	32ae      	adds	r2, #174	@ 0xae
 800c212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	4798      	blx	r3
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c222:	e158      	b.n	800c4d6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	785b      	ldrb	r3, [r3, #1]
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d008      	beq.n	800c23e <USBD_StdEPReq+0x9a>
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	f300 8147 	bgt.w	800c4c0 <USBD_StdEPReq+0x31c>
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 809b 	beq.w	800c36e <USBD_StdEPReq+0x1ca>
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d03c      	beq.n	800c2b6 <USBD_StdEPReq+0x112>
 800c23c:	e140      	b.n	800c4c0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b02      	cmp	r3, #2
 800c248:	d002      	beq.n	800c250 <USBD_StdEPReq+0xac>
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d016      	beq.n	800c27c <USBD_StdEPReq+0xd8>
 800c24e:	e02c      	b.n	800c2aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00d      	beq.n	800c272 <USBD_StdEPReq+0xce>
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	2b80      	cmp	r3, #128	@ 0x80
 800c25a:	d00a      	beq.n	800c272 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 f98f 	bl	800d584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c266:	2180      	movs	r1, #128	@ 0x80
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 f98b 	bl	800d584 <USBD_LL_StallEP>
 800c26e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c270:	e020      	b.n	800c2b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fc7c 	bl	800cb72 <USBD_CtlError>
              break;
 800c27a:	e01b      	b.n	800c2b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	885b      	ldrh	r3, [r3, #2]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10e      	bne.n	800c2a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00b      	beq.n	800c2a2 <USBD_StdEPReq+0xfe>
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b80      	cmp	r3, #128	@ 0x80
 800c28e:	d008      	beq.n	800c2a2 <USBD_StdEPReq+0xfe>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	88db      	ldrh	r3, [r3, #6]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 f971 	bl	800d584 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fd43 	bl	800cd2e <USBD_CtlSendStatus>

              break;
 800c2a8:	e004      	b.n	800c2b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fc60 	bl	800cb72 <USBD_CtlError>
              break;
 800c2b2:	bf00      	nop
          }
          break;
 800c2b4:	e109      	b.n	800c4ca <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d002      	beq.n	800c2c8 <USBD_StdEPReq+0x124>
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d016      	beq.n	800c2f4 <USBD_StdEPReq+0x150>
 800c2c6:	e04b      	b.n	800c360 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2c8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00d      	beq.n	800c2ea <USBD_StdEPReq+0x146>
 800c2ce:	7bbb      	ldrb	r3, [r7, #14]
 800c2d0:	2b80      	cmp	r3, #128	@ 0x80
 800c2d2:	d00a      	beq.n	800c2ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f953 	bl	800d584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2de:	2180      	movs	r1, #128	@ 0x80
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 f94f 	bl	800d584 <USBD_LL_StallEP>
 800c2e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2e8:	e040      	b.n	800c36c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fc40 	bl	800cb72 <USBD_CtlError>
              break;
 800c2f2:	e03b      	b.n	800c36c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	885b      	ldrh	r3, [r3, #2]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d136      	bne.n	800c36a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c302:	2b00      	cmp	r3, #0
 800c304:	d004      	beq.n	800c310 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f001 f959 	bl	800d5c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fd0c 	bl	800cd2e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff fde5 	bl	800beea <USBD_CoreFindEP>
 800c320:	4603      	mov	r3, r0
 800c322:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c324:	7b7b      	ldrb	r3, [r7, #13]
 800c326:	2bff      	cmp	r3, #255	@ 0xff
 800c328:	d01f      	beq.n	800c36a <USBD_StdEPReq+0x1c6>
 800c32a:	7b7b      	ldrb	r3, [r7, #13]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d11c      	bne.n	800c36a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c330:	7b7a      	ldrb	r2, [r7, #13]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c338:	7b7a      	ldrb	r2, [r7, #13]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	32ae      	adds	r2, #174	@ 0xae
 800c33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d010      	beq.n	800c36a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c348:	7b7a      	ldrb	r2, [r7, #13]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	32ae      	adds	r2, #174	@ 0xae
 800c34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c35e:	e004      	b.n	800c36a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fc05 	bl	800cb72 <USBD_CtlError>
              break;
 800c368:	e000      	b.n	800c36c <USBD_StdEPReq+0x1c8>
              break;
 800c36a:	bf00      	nop
          }
          break;
 800c36c:	e0ad      	b.n	800c4ca <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d002      	beq.n	800c380 <USBD_StdEPReq+0x1dc>
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d033      	beq.n	800c3e6 <USBD_StdEPReq+0x242>
 800c37e:	e099      	b.n	800c4b4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d007      	beq.n	800c396 <USBD_StdEPReq+0x1f2>
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b80      	cmp	r3, #128	@ 0x80
 800c38a:	d004      	beq.n	800c396 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fbef 	bl	800cb72 <USBD_CtlError>
                break;
 800c394:	e093      	b.n	800c4be <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	da0b      	bge.n	800c3b6 <USBD_StdEPReq+0x212>
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	3310      	adds	r3, #16
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	e00b      	b.n	800c3ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
 800c3b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3bc:	4613      	mov	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	330e      	adds	r3, #14
 800c3da:	2202      	movs	r2, #2
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fc44 	bl	800cc6c <USBD_CtlSendData>
              break;
 800c3e4:	e06b      	b.n	800c4be <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c3e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da11      	bge.n	800c412 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	f003 020f 	and.w	r2, r3, #15
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	440b      	add	r3, r1
 800c400:	3323      	adds	r3, #35	@ 0x23
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d117      	bne.n	800c438 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fbb1 	bl	800cb72 <USBD_CtlError>
                  break;
 800c410:	e055      	b.n	800c4be <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	f003 020f 	and.w	r2, r3, #15
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	4613      	mov	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	440b      	add	r3, r1
 800c424:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d104      	bne.n	800c438 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fb9e 	bl	800cb72 <USBD_CtlError>
                  break;
 800c436:	e042      	b.n	800c4be <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	da0b      	bge.n	800c458 <USBD_StdEPReq+0x2b4>
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c446:	4613      	mov	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	3310      	adds	r3, #16
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4413      	add	r3, r2
 800c454:	3304      	adds	r3, #4
 800c456:	e00b      	b.n	800c470 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c458:	7bbb      	ldrb	r3, [r7, #14]
 800c45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c45e:	4613      	mov	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	4413      	add	r3, r2
 800c46e:	3304      	adds	r3, #4
 800c470:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c472:	7bbb      	ldrb	r3, [r7, #14]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <USBD_StdEPReq+0x2da>
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	2b80      	cmp	r3, #128	@ 0x80
 800c47c:	d103      	bne.n	800c486 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2200      	movs	r2, #0
 800c482:	739a      	strb	r2, [r3, #14]
 800c484:	e00e      	b.n	800c4a4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 f8b8 	bl	800d600 <USBD_LL_IsStallEP>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2201      	movs	r2, #1
 800c49a:	739a      	strb	r2, [r3, #14]
 800c49c:	e002      	b.n	800c4a4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	330e      	adds	r3, #14
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fbdd 	bl	800cc6c <USBD_CtlSendData>
              break;
 800c4b2:	e004      	b.n	800c4be <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fb5b 	bl	800cb72 <USBD_CtlError>
              break;
 800c4bc:	bf00      	nop
          }
          break;
 800c4be:	e004      	b.n	800c4ca <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fb55 	bl	800cb72 <USBD_CtlError>
          break;
 800c4c8:	bf00      	nop
      }
      break;
 800c4ca:	e005      	b.n	800c4d8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fb4f 	bl	800cb72 <USBD_CtlError>
      break;
 800c4d4:	e000      	b.n	800c4d8 <USBD_StdEPReq+0x334>
      break;
 800c4d6:	bf00      	nop
  }

  return ret;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	885b      	ldrh	r3, [r3, #2]
 800c4fe:	0a1b      	lsrs	r3, r3, #8
 800c500:	b29b      	uxth	r3, r3
 800c502:	3b01      	subs	r3, #1
 800c504:	2b06      	cmp	r3, #6
 800c506:	f200 8128 	bhi.w	800c75a <USBD_GetDescriptor+0x276>
 800c50a:	a201      	add	r2, pc, #4	@ (adr r2, 800c510 <USBD_GetDescriptor+0x2c>)
 800c50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	0800c545 	.word	0x0800c545
 800c518:	0800c585 	.word	0x0800c585
 800c51c:	0800c75b 	.word	0x0800c75b
 800c520:	0800c75b 	.word	0x0800c75b
 800c524:	0800c6fb 	.word	0x0800c6fb
 800c528:	0800c727 	.word	0x0800c727
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	7c12      	ldrb	r2, [r2, #16]
 800c538:	f107 0108 	add.w	r1, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
      break;
 800c542:	e112      	b.n	800c76a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7c1b      	ldrb	r3, [r3, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10d      	bne.n	800c568 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c554:	f107 0208 	add.w	r2, r7, #8
 800c558:	4610      	mov	r0, r2
 800c55a:	4798      	blx	r3
 800c55c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3301      	adds	r3, #1
 800c562:	2202      	movs	r2, #2
 800c564:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c566:	e100      	b.n	800c76a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c570:	f107 0208 	add.w	r2, r7, #8
 800c574:	4610      	mov	r0, r2
 800c576:	4798      	blx	r3
 800c578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	2202      	movs	r2, #2
 800c580:	701a      	strb	r2, [r3, #0]
      break;
 800c582:	e0f2      	b.n	800c76a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	885b      	ldrh	r3, [r3, #2]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b05      	cmp	r3, #5
 800c58c:	f200 80ac 	bhi.w	800c6e8 <USBD_GetDescriptor+0x204>
 800c590:	a201      	add	r2, pc, #4	@ (adr r2, 800c598 <USBD_GetDescriptor+0xb4>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5b1 	.word	0x0800c5b1
 800c59c:	0800c5e5 	.word	0x0800c5e5
 800c5a0:	0800c619 	.word	0x0800c619
 800c5a4:	0800c64d 	.word	0x0800c64d
 800c5a8:	0800c681 	.word	0x0800c681
 800c5ac:	0800c6b5 	.word	0x0800c6b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	7c12      	ldrb	r2, [r2, #16]
 800c5c8:	f107 0108 	add.w	r1, r7, #8
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	4798      	blx	r3
 800c5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5d2:	e091      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 facb 	bl	800cb72 <USBD_CtlError>
            err++;
 800c5dc:	7afb      	ldrb	r3, [r7, #11]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c5e2:	e089      	b.n	800c6f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	7c12      	ldrb	r2, [r2, #16]
 800c5fc:	f107 0108 	add.w	r1, r7, #8
 800c600:	4610      	mov	r0, r2
 800c602:	4798      	blx	r3
 800c604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c606:	e077      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fab1 	bl	800cb72 <USBD_CtlError>
            err++;
 800c610:	7afb      	ldrb	r3, [r7, #11]
 800c612:	3301      	adds	r3, #1
 800c614:	72fb      	strb	r3, [r7, #11]
          break;
 800c616:	e06f      	b.n	800c6f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	7c12      	ldrb	r2, [r2, #16]
 800c630:	f107 0108 	add.w	r1, r7, #8
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
 800c638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c63a:	e05d      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa97 	bl	800cb72 <USBD_CtlError>
            err++;
 800c644:	7afb      	ldrb	r3, [r7, #11]
 800c646:	3301      	adds	r3, #1
 800c648:	72fb      	strb	r3, [r7, #11]
          break;
 800c64a:	e055      	b.n	800c6f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00b      	beq.n	800c670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	7c12      	ldrb	r2, [r2, #16]
 800c664:	f107 0108 	add.w	r1, r7, #8
 800c668:	4610      	mov	r0, r2
 800c66a:	4798      	blx	r3
 800c66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c66e:	e043      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fa7d 	bl	800cb72 <USBD_CtlError>
            err++;
 800c678:	7afb      	ldrb	r3, [r7, #11]
 800c67a:	3301      	adds	r3, #1
 800c67c:	72fb      	strb	r3, [r7, #11]
          break;
 800c67e:	e03b      	b.n	800c6f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	7c12      	ldrb	r2, [r2, #16]
 800c698:	f107 0108 	add.w	r1, r7, #8
 800c69c:	4610      	mov	r0, r2
 800c69e:	4798      	blx	r3
 800c6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6a2:	e029      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa63 	bl	800cb72 <USBD_CtlError>
            err++;
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6b2:	e021      	b.n	800c6f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	7c12      	ldrb	r2, [r2, #16]
 800c6cc:	f107 0108 	add.w	r1, r7, #8
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4798      	blx	r3
 800c6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d6:	e00f      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa49 	bl	800cb72 <USBD_CtlError>
            err++;
 800c6e0:	7afb      	ldrb	r3, [r7, #11]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e6:	e007      	b.n	800c6f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fa41 	bl	800cb72 <USBD_CtlError>
          err++;
 800c6f0:	7afb      	ldrb	r3, [r7, #11]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c6f6:	bf00      	nop
      }
      break;
 800c6f8:	e037      	b.n	800c76a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	7c1b      	ldrb	r3, [r3, #16]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c70a:	f107 0208 	add.w	r2, r7, #8
 800c70e:	4610      	mov	r0, r2
 800c710:	4798      	blx	r3
 800c712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c714:	e029      	b.n	800c76a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fa2a 	bl	800cb72 <USBD_CtlError>
        err++;
 800c71e:	7afb      	ldrb	r3, [r7, #11]
 800c720:	3301      	adds	r3, #1
 800c722:	72fb      	strb	r3, [r7, #11]
      break;
 800c724:	e021      	b.n	800c76a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7c1b      	ldrb	r3, [r3, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10d      	bne.n	800c74a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c736:	f107 0208 	add.w	r2, r7, #8
 800c73a:	4610      	mov	r0, r2
 800c73c:	4798      	blx	r3
 800c73e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3301      	adds	r3, #1
 800c744:	2207      	movs	r2, #7
 800c746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c748:	e00f      	b.n	800c76a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fa10 	bl	800cb72 <USBD_CtlError>
        err++;
 800c752:	7afb      	ldrb	r3, [r7, #11]
 800c754:	3301      	adds	r3, #1
 800c756:	72fb      	strb	r3, [r7, #11]
      break;
 800c758:	e007      	b.n	800c76a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fa08 	bl	800cb72 <USBD_CtlError>
      err++;
 800c762:	7afb      	ldrb	r3, [r7, #11]
 800c764:	3301      	adds	r3, #1
 800c766:	72fb      	strb	r3, [r7, #11]
      break;
 800c768:	bf00      	nop
  }

  if (err != 0U)
 800c76a:	7afb      	ldrb	r3, [r7, #11]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d11e      	bne.n	800c7ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	88db      	ldrh	r3, [r3, #6]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d016      	beq.n	800c7a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c778:	893b      	ldrh	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00e      	beq.n	800c79c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	88da      	ldrh	r2, [r3, #6]
 800c782:	893b      	ldrh	r3, [r7, #8]
 800c784:	4293      	cmp	r3, r2
 800c786:	bf28      	it	cs
 800c788:	4613      	movcs	r3, r2
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c78e:	893b      	ldrh	r3, [r7, #8]
 800c790:	461a      	mov	r2, r3
 800c792:	68f9      	ldr	r1, [r7, #12]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fa69 	bl	800cc6c <USBD_CtlSendData>
 800c79a:	e009      	b.n	800c7b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9e7 	bl	800cb72 <USBD_CtlError>
 800c7a4:	e004      	b.n	800c7b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fac1 	bl	800cd2e <USBD_CtlSendStatus>
 800c7ac:	e000      	b.n	800c7b0 <USBD_GetDescriptor+0x2cc>
    return;
 800c7ae:	bf00      	nop
  }
}
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop

0800c7b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	889b      	ldrh	r3, [r3, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d131      	bne.n	800c82e <USBD_SetAddress+0x76>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	88db      	ldrh	r3, [r3, #6]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d12d      	bne.n	800c82e <USBD_SetAddress+0x76>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	885b      	ldrh	r3, [r3, #2]
 800c7d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7d8:	d829      	bhi.n	800c82e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	885b      	ldrh	r3, [r3, #2]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d104      	bne.n	800c7fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f9bc 	bl	800cb72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fa:	e01d      	b.n	800c838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7bfa      	ldrb	r2, [r7, #15]
 800c800:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 ff25 	bl	800d658 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fa8d 	bl	800cd2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2202      	movs	r2, #2
 800c81e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c822:	e009      	b.n	800c838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c82c:	e004      	b.n	800c838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f99e 	bl	800cb72 <USBD_CtlError>
  }
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	885b      	ldrh	r3, [r3, #2]
 800c852:	b2da      	uxtb	r2, r3
 800c854:	4b4e      	ldr	r3, [pc, #312]	@ (800c990 <USBD_SetConfig+0x150>)
 800c856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c858:	4b4d      	ldr	r3, [pc, #308]	@ (800c990 <USBD_SetConfig+0x150>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d905      	bls.n	800c86c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f985 	bl	800cb72 <USBD_CtlError>
    return USBD_FAIL;
 800c868:	2303      	movs	r3, #3
 800c86a:	e08c      	b.n	800c986 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b02      	cmp	r3, #2
 800c876:	d002      	beq.n	800c87e <USBD_SetConfig+0x3e>
 800c878:	2b03      	cmp	r3, #3
 800c87a:	d029      	beq.n	800c8d0 <USBD_SetConfig+0x90>
 800c87c:	e075      	b.n	800c96a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c87e:	4b44      	ldr	r3, [pc, #272]	@ (800c990 <USBD_SetConfig+0x150>)
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d020      	beq.n	800c8c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c886:	4b42      	ldr	r3, [pc, #264]	@ (800c990 <USBD_SetConfig+0x150>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c890:	4b3f      	ldr	r3, [pc, #252]	@ (800c990 <USBD_SetConfig+0x150>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f7fe ffcf 	bl	800b83a <USBD_SetClassConfig>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d008      	beq.n	800c8b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f962 	bl	800cb72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8b6:	e065      	b.n	800c984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fa38 	bl	800cd2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c8c6:	e05d      	b.n	800c984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fa30 	bl	800cd2e <USBD_CtlSendStatus>
      break;
 800c8ce:	e059      	b.n	800c984 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c8d0:	4b2f      	ldr	r3, [pc, #188]	@ (800c990 <USBD_SetConfig+0x150>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d112      	bne.n	800c8fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c8e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c990 <USBD_SetConfig+0x150>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8ea:	4b29      	ldr	r3, [pc, #164]	@ (800c990 <USBD_SetConfig+0x150>)
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fe ffbe 	bl	800b872 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fa19 	bl	800cd2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8fc:	e042      	b.n	800c984 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c8fe:	4b24      	ldr	r3, [pc, #144]	@ (800c990 <USBD_SetConfig+0x150>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d02a      	beq.n	800c962 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7fe ffac 	bl	800b872 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c91a:	4b1d      	ldr	r3, [pc, #116]	@ (800c990 <USBD_SetConfig+0x150>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c924:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <USBD_SetConfig+0x150>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7fe ff85 	bl	800b83a <USBD_SetClassConfig>
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00f      	beq.n	800c95a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f918 	bl	800cb72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7fe ff91 	bl	800b872 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2202      	movs	r2, #2
 800c954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c958:	e014      	b.n	800c984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f9e7 	bl	800cd2e <USBD_CtlSendStatus>
      break;
 800c960:	e010      	b.n	800c984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f9e3 	bl	800cd2e <USBD_CtlSendStatus>
      break;
 800c968:	e00c      	b.n	800c984 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f900 	bl	800cb72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c972:	4b07      	ldr	r3, [pc, #28]	@ (800c990 <USBD_SetConfig+0x150>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7fe ff7a 	bl	800b872 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c97e:	2303      	movs	r3, #3
 800c980:	73fb      	strb	r3, [r7, #15]
      break;
 800c982:	bf00      	nop
  }

  return ret;
 800c984:	7bfb      	ldrb	r3, [r7, #15]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	20001b8c 	.word	0x20001b8c

0800c994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	88db      	ldrh	r3, [r3, #6]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d004      	beq.n	800c9b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f8e2 	bl	800cb72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9ae:	e023      	b.n	800c9f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	dc02      	bgt.n	800c9c2 <USBD_GetConfig+0x2e>
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dc03      	bgt.n	800c9c8 <USBD_GetConfig+0x34>
 800c9c0:	e015      	b.n	800c9ee <USBD_GetConfig+0x5a>
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d00b      	beq.n	800c9de <USBD_GetConfig+0x4a>
 800c9c6:	e012      	b.n	800c9ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f948 	bl	800cc6c <USBD_CtlSendData>
        break;
 800c9dc:	e00c      	b.n	800c9f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f940 	bl	800cc6c <USBD_CtlSendData>
        break;
 800c9ec:	e004      	b.n	800c9f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f8be 	bl	800cb72 <USBD_CtlError>
        break;
 800c9f6:	bf00      	nop
}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	3b01      	subs	r3, #1
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d81e      	bhi.n	800ca56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88db      	ldrh	r3, [r3, #6]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d004      	beq.n	800ca2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f8a5 	bl	800cb72 <USBD_CtlError>
        break;
 800ca28:	e01a      	b.n	800ca60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d005      	beq.n	800ca46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	f043 0202 	orr.w	r2, r3, #2
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	330c      	adds	r3, #12
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f90c 	bl	800cc6c <USBD_CtlSendData>
      break;
 800ca54:	e004      	b.n	800ca60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f88a 	bl	800cb72 <USBD_CtlError>
      break;
 800ca5e:	bf00      	nop
  }
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	885b      	ldrh	r3, [r3, #2]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d107      	bne.n	800ca8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f953 	bl	800cd2e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca88:	e013      	b.n	800cab2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	885b      	ldrh	r3, [r3, #2]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d10b      	bne.n	800caaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	889b      	ldrh	r3, [r3, #4]
 800ca96:	0a1b      	lsrs	r3, r3, #8
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f943 	bl	800cd2e <USBD_CtlSendStatus>
}
 800caa8:	e003      	b.n	800cab2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f860 	bl	800cb72 <USBD_CtlError>
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	3b01      	subs	r3, #1
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d80b      	bhi.n	800caea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	885b      	ldrh	r3, [r3, #2]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d10c      	bne.n	800caf4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f923 	bl	800cd2e <USBD_CtlSendStatus>
      }
      break;
 800cae8:	e004      	b.n	800caf4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f840 	bl	800cb72 <USBD_CtlError>
      break;
 800caf2:	e000      	b.n	800caf6 <USBD_ClrFeature+0x3c>
      break;
 800caf4:	bf00      	nop
  }
}
 800caf6:	bf00      	nop
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	781a      	ldrb	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3301      	adds	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	781a      	ldrb	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3301      	adds	r3, #1
 800cb26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff fa3f 	bl	800bfac <SWAPBYTE>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff fa32 	bl	800bfac <SWAPBYTE>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3301      	adds	r3, #1
 800cb54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7ff fa25 	bl	800bfac <SWAPBYTE>
 800cb62:	4603      	mov	r3, r0
 800cb64:	461a      	mov	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	80da      	strh	r2, [r3, #6]
}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb7c:	2180      	movs	r1, #128	@ 0x80
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fd00 	bl	800d584 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb84:	2100      	movs	r1, #0
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fcfc 	bl	800d584 <USBD_LL_StallEP>
}
 800cb8c:	bf00      	nop
 800cb8e:	3708      	adds	r7, #8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cba0:	2300      	movs	r3, #0
 800cba2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d042      	beq.n	800cc30 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cbae:	6938      	ldr	r0, [r7, #16]
 800cbb0:	f000 f842 	bl	800cc38 <USBD_GetLen>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbbe:	d808      	bhi.n	800cbd2 <USBD_GetString+0x3e>
 800cbc0:	6938      	ldr	r0, [r7, #16]
 800cbc2:	f000 f839 	bl	800cc38 <USBD_GetLen>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	3301      	adds	r3, #1
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	e001      	b.n	800cbd6 <USBD_GetString+0x42>
 800cbd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cbda:	7dfb      	ldrb	r3, [r7, #23]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	4413      	add	r3, r2
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	7812      	ldrb	r2, [r2, #0]
 800cbe4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	2203      	movs	r2, #3
 800cbf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cbfc:	e013      	b.n	800cc26 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	4413      	add	r3, r2
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	7812      	ldrb	r2, [r2, #0]
 800cc08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	613b      	str	r3, [r7, #16]
    idx++;
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	3301      	adds	r3, #1
 800cc14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
 800cc22:	3301      	adds	r3, #1
 800cc24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e7      	bne.n	800cbfe <USBD_GetString+0x6a>
 800cc2e:	e000      	b.n	800cc32 <USBD_GetString+0x9e>
    return;
 800cc30:	bf00      	nop
  }
}
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc48:	e005      	b.n	800cc56 <USBD_GetLen+0x1e>
  {
    len++;
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	3301      	adds	r3, #1
 800cc54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1f5      	bne.n	800cc4a <USBD_GetLen+0x12>
  }

  return len;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	2100      	movs	r1, #0
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 fcfc 	bl	800d696 <USBD_LL_Transmit>

  return USBD_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	2100      	movs	r1, #0
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 fceb 	bl	800d696 <USBD_LL_Transmit>

  return USBD_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2203      	movs	r2, #3
 800ccda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f000 fceb 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 fcda 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b082      	sub	sp, #8
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2204      	movs	r2, #4
 800cd3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd3e:	2300      	movs	r3, #0
 800cd40:	2200      	movs	r2, #0
 800cd42:	2100      	movs	r1, #0
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fca6 	bl	800d696 <USBD_LL_Transmit>

  return USBD_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2205      	movs	r2, #5
 800cd60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd64:	2300      	movs	r3, #0
 800cd66:	2200      	movs	r2, #0
 800cd68:	2100      	movs	r1, #0
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fcb4 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd80:	2200      	movs	r2, #0
 800cd82:	4912      	ldr	r1, [pc, #72]	@ (800cdcc <MX_USB_DEVICE_Init+0x50>)
 800cd84:	4812      	ldr	r0, [pc, #72]	@ (800cdd0 <MX_USB_DEVICE_Init+0x54>)
 800cd86:	f7fe fcdb 	bl	800b740 <USBD_Init>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd90:	f7f4 fa3c 	bl	800120c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd94:	490f      	ldr	r1, [pc, #60]	@ (800cdd4 <MX_USB_DEVICE_Init+0x58>)
 800cd96:	480e      	ldr	r0, [pc, #56]	@ (800cdd0 <MX_USB_DEVICE_Init+0x54>)
 800cd98:	f7fe fd02 	bl	800b7a0 <USBD_RegisterClass>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cda2:	f7f4 fa33 	bl	800120c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cda6:	490c      	ldr	r1, [pc, #48]	@ (800cdd8 <MX_USB_DEVICE_Init+0x5c>)
 800cda8:	4809      	ldr	r0, [pc, #36]	@ (800cdd0 <MX_USB_DEVICE_Init+0x54>)
 800cdaa:	f7fe fc39 	bl	800b620 <USBD_CDC_RegisterInterface>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdb4:	f7f4 fa2a 	bl	800120c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cdb8:	4805      	ldr	r0, [pc, #20]	@ (800cdd0 <MX_USB_DEVICE_Init+0x54>)
 800cdba:	f7fe fd27 	bl	800b80c <USBD_Start>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cdc4:	f7f4 fa22 	bl	800120c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdc8:	bf00      	nop
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	200000f8 	.word	0x200000f8
 800cdd0:	20001b90 	.word	0x20001b90
 800cdd4:	20000064 	.word	0x20000064
 800cdd8:	200000e4 	.word	0x200000e4

0800cddc <CDC_Init_FS>:
};

/* =============================== Implementação =============================== */

static int8_t CDC_Init_FS(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cde0:	2200      	movs	r2, #0
 800cde2:	4909      	ldr	r1, [pc, #36]	@ (800ce08 <CDC_Init_FS+0x2c>)
 800cde4:	4809      	ldr	r0, [pc, #36]	@ (800ce0c <CDC_Init_FS+0x30>)
 800cde6:	f7fe fc35 	bl	800b654 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdea:	4909      	ldr	r1, [pc, #36]	@ (800ce10 <CDC_Init_FS+0x34>)
 800cdec:	4807      	ldr	r0, [pc, #28]	@ (800ce0c <CDC_Init_FS+0x30>)
 800cdee:	f7fe fc53 	bl	800b698 <USBD_CDC_SetRxBuffer>
  s_rx_line_len = 0;
 800cdf2:	4b08      	ldr	r3, [pc, #32]	@ (800ce14 <CDC_Init_FS+0x38>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]
  pCDC = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cdf8:	4b04      	ldr	r3, [pc, #16]	@ (800ce0c <CDC_Init_FS+0x30>)
 800cdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdfe:	4a06      	ldr	r2, [pc, #24]	@ (800ce18 <CDC_Init_FS+0x3c>)
 800ce00:	6013      	str	r3, [r2, #0]
  return USBD_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	200026f4 	.word	0x200026f4
 800ce0c:	20001b90 	.word	0x20001b90
 800ce10:	20001ef4 	.word	0x20001ef4
 800ce14:	20002f78 	.word	0x20002f78
 800ce18:	20002ef4 	.word	0x20002ef4

0800ce1c <CDC_DeInit_FS>:

static int8_t CDC_DeInit_FS(void)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
  pCDC = NULL;
 800ce20:	4b05      	ldr	r3, [pc, #20]	@ (800ce38 <CDC_DeInit_FS+0x1c>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]
  s_rx_line_len = 0;
 800ce26:	4b05      	ldr	r3, [pc, #20]	@ (800ce3c <CDC_DeInit_FS+0x20>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	20002ef4 	.word	0x20002ef4
 800ce3c:	20002f78 	.word	0x20002f78

0800ce40 <CDC_Control_FS>:

static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	6039      	str	r1, [r7, #0]
 800ce4a:	71fb      	strb	r3, [r7, #7]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	80bb      	strh	r3, [r7, #4]
  (void)pbuf; (void)length;
  /* Sem nada especial pra tratar (baud etc. não importam para CDC-ACM). */
  switch(cmd){
    default: break;
 800ce50:	bf00      	nop
  }
  return USBD_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <CDC_Receive_FS>:

/* ------------------------------------------------------------------------- */
/* RX – chamado em contexto de IRQ do USB                                    */
/* ------------------------------------------------------------------------- */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b088      	sub	sp, #32
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  uint32_t n = *Len;
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	617b      	str	r3, [r7, #20]

  if (n && App_IsBinaryMode()){
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d009      	beq.n	800ce8a <CDC_Receive_FS+0x2a>
 800ce76:	f7f4 ff81 	bl	8001d7c <App_IsBinaryMode>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <CDC_Receive_FS+0x2a>
    /* Modo binário (ex.: upload para a FPGA): encaminha bytes crus */
    CDC_OnRxData(Buf, n);
 800ce80:	6979      	ldr	r1, [r7, #20]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7f4 ff38 	bl	8001cf8 <CDC_OnRxData>
 800ce88:	e054      	b.n	800cf34 <CDC_Receive_FS+0xd4>
  } else if (n){
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d051      	beq.n	800cf34 <CDC_Receive_FS+0xd4>
    /* Modo texto (CLI): montar linhas até CR/LF e sinalizar ao loop principal */
    for (uint32_t i=0;i<n;i++){
 800ce90:	2300      	movs	r3, #0
 800ce92:	61fb      	str	r3, [r7, #28]
 800ce94:	e04a      	b.n	800cf2c <CDC_Receive_FS+0xcc>
      uint8_t c = Buf[i];
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	74fb      	strb	r3, [r7, #19]
      if (c=='\r' || c=='\n'){
 800cea0:	7cfb      	ldrb	r3, [r7, #19]
 800cea2:	2b0d      	cmp	r3, #13
 800cea4:	d002      	beq.n	800ceac <CDC_Receive_FS+0x4c>
 800cea6:	7cfb      	ldrb	r3, [r7, #19]
 800cea8:	2b0a      	cmp	r3, #10
 800ceaa:	d130      	bne.n	800cf0e <CDC_Receive_FS+0xae>
        if (s_rx_line_len>0){
 800ceac:	4b27      	ldr	r3, [pc, #156]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d038      	beq.n	800cf26 <CDC_Receive_FS+0xc6>
          /* só entrega se o superloop não estiver com um comando pendente */
          if (!cdc_cmd_ready){
 800ceb4:	4b26      	ldr	r3, [pc, #152]	@ (800cf50 <CDC_Receive_FS+0xf0>)
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d123      	bne.n	800cf06 <CDC_Receive_FS+0xa6>
            uint32_t m = (s_rx_line_len >= RX_LINE_BUF_SZ-1)? (RX_LINE_BUF_SZ-1) : s_rx_line_len;
 800cebe:	4b23      	ldr	r3, [pc, #140]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cec4:	bf28      	it	cs
 800cec6:	237f      	movcs	r3, #127	@ 0x7f
 800cec8:	60fb      	str	r3, [r7, #12]
            for (uint32_t k=0;k<m;k++) cdc_cmd_buffer[k] = s_rx_line[k];
 800ceca:	2300      	movs	r3, #0
 800cecc:	61bb      	str	r3, [r7, #24]
 800cece:	e00b      	b.n	800cee8 <CDC_Receive_FS+0x88>
 800ced0:	4a20      	ldr	r2, [pc, #128]	@ (800cf54 <CDC_Receive_FS+0xf4>)
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	4413      	add	r3, r2
 800ced6:	7819      	ldrb	r1, [r3, #0]
 800ced8:	4a1f      	ldr	r2, [pc, #124]	@ (800cf58 <CDC_Receive_FS+0xf8>)
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	4413      	add	r3, r2
 800cede:	460a      	mov	r2, r1
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	3301      	adds	r3, #1
 800cee6:	61bb      	str	r3, [r7, #24]
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d3ef      	bcc.n	800ced0 <CDC_Receive_FS+0x70>
            cdc_cmd_buffer[m] = 0;
 800cef0:	4a19      	ldr	r2, [pc, #100]	@ (800cf58 <CDC_Receive_FS+0xf8>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	4413      	add	r3, r2
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
            cdc_cmd_length = m;
 800cefa:	4a18      	ldr	r2, [pc, #96]	@ (800cf5c <CDC_Receive_FS+0xfc>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6013      	str	r3, [r2, #0]
            cdc_cmd_ready  = 1;
 800cf00:	4b13      	ldr	r3, [pc, #76]	@ (800cf50 <CDC_Receive_FS+0xf0>)
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
          }
          s_rx_line_len = 0; /* limpa para próxima linha */
 800cf06:	4b11      	ldr	r3, [pc, #68]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]
        if (s_rx_line_len>0){
 800cf0c:	e00b      	b.n	800cf26 <CDC_Receive_FS+0xc6>
        }
      } else {
        if (s_rx_line_len < RX_LINE_BUF_SZ-1){
 800cf0e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b7e      	cmp	r3, #126	@ 0x7e
 800cf14:	d807      	bhi.n	800cf26 <CDC_Receive_FS+0xc6>
          s_rx_line[s_rx_line_len++] = c;
 800cf16:	4b0d      	ldr	r3, [pc, #52]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	490b      	ldr	r1, [pc, #44]	@ (800cf4c <CDC_Receive_FS+0xec>)
 800cf1e:	600a      	str	r2, [r1, #0]
 800cf20:	490c      	ldr	r1, [pc, #48]	@ (800cf54 <CDC_Receive_FS+0xf4>)
 800cf22:	7cfa      	ldrb	r2, [r7, #19]
 800cf24:	54ca      	strb	r2, [r1, r3]
    for (uint32_t i=0;i<n;i++){
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	61fb      	str	r3, [r7, #28]
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d3b0      	bcc.n	800ce96 <CDC_Receive_FS+0x36>
      }
    }
  }

  /* Rearma sempre o EP OUT */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf34:	6879      	ldr	r1, [r7, #4]
 800cf36:	480a      	ldr	r0, [pc, #40]	@ (800cf60 <CDC_Receive_FS+0x100>)
 800cf38:	f7fe fbae 	bl	800b698 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf3c:	4808      	ldr	r0, [pc, #32]	@ (800cf60 <CDC_Receive_FS+0x100>)
 800cf3e:	f7fe fbc9 	bl	800b6d4 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3720      	adds	r7, #32
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20002f78 	.word	0x20002f78
 800cf50:	20001ef0 	.word	0x20001ef0
 800cf54:	20002ef8 	.word	0x20002ef8
 800cf58:	20001e6c 	.word	0x20001e6c
 800cf5c:	20001eec 	.word	0x20001eec
 800cf60:	20001b90 	.word	0x20001b90

0800cf64 <CDC_TransmitCplt_FS>:
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  return USBD_CDC_TransmitPacket(&hUsbDeviceFS);
}

static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
  (void)Buf; (void)Len; (void)epnum;
  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2212      	movs	r2, #18
 800cf90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf92:	4b03      	ldr	r3, [pc, #12]	@ (800cfa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20000114 	.word	0x20000114

0800cfa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfb6:	4b03      	ldr	r3, [pc, #12]	@ (800cfc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	20000128 	.word	0x20000128

0800cfc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d105      	bne.n	800cfe6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4907      	ldr	r1, [pc, #28]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfde:	4808      	ldr	r0, [pc, #32]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfe0:	f7ff fdd8 	bl	800cb94 <USBD_GetString>
 800cfe4:	e004      	b.n	800cff0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	4904      	ldr	r1, [pc, #16]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfea:	4805      	ldr	r0, [pc, #20]	@ (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfec:	f7ff fdd2 	bl	800cb94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff0:	4b02      	ldr	r3, [pc, #8]	@ (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20002f7c 	.word	0x20002f7c
 800d000:	08011bb0 	.word	0x08011bb0

0800d004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	6039      	str	r1, [r7, #0]
 800d00e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	4904      	ldr	r1, [pc, #16]	@ (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d014:	4804      	ldr	r0, [pc, #16]	@ (800d028 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d016:	f7ff fdbd 	bl	800cb94 <USBD_GetString>
  return USBD_StrDesc;
 800d01a:	4b02      	ldr	r3, [pc, #8]	@ (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20002f7c 	.word	0x20002f7c
 800d028:	08011bc8 	.word	0x08011bc8

0800d02c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	6039      	str	r1, [r7, #0]
 800d036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	221a      	movs	r2, #26
 800d03c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d03e:	f000 f843 	bl	800d0c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d042:	4b02      	ldr	r3, [pc, #8]	@ (800d04c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	2000012c 	.word	0x2000012c

0800d050 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	6039      	str	r1, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	4907      	ldr	r1, [pc, #28]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d066:	4808      	ldr	r0, [pc, #32]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d068:	f7ff fd94 	bl	800cb94 <USBD_GetString>
 800d06c:	e004      	b.n	800d078 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	4904      	ldr	r1, [pc, #16]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d072:	4805      	ldr	r0, [pc, #20]	@ (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d074:	f7ff fd8e 	bl	800cb94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d078:	4b02      	ldr	r3, [pc, #8]	@ (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20002f7c 	.word	0x20002f7c
 800d088:	08011bdc 	.word	0x08011bdc

0800d08c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	4907      	ldr	r1, [pc, #28]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0a2:	4808      	ldr	r0, [pc, #32]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0a4:	f7ff fd76 	bl	800cb94 <USBD_GetString>
 800d0a8:	e004      	b.n	800d0b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4904      	ldr	r1, [pc, #16]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ae:	4805      	ldr	r0, [pc, #20]	@ (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b0:	f7ff fd70 	bl	800cb94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b4:	4b02      	ldr	r3, [pc, #8]	@ (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20002f7c 	.word	0x20002f7c
 800d0c4:	08011be8 	.word	0x08011be8

0800d0c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <Get_SerialNum+0x44>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d110 <Get_SerialNum+0x48>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0da:	4b0e      	ldr	r3, [pc, #56]	@ (800d114 <Get_SerialNum+0x4c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0ee:	2208      	movs	r2, #8
 800d0f0:	4909      	ldr	r1, [pc, #36]	@ (800d118 <Get_SerialNum+0x50>)
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 f814 	bl	800d120 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0f8:	2204      	movs	r2, #4
 800d0fa:	4908      	ldr	r1, [pc, #32]	@ (800d11c <Get_SerialNum+0x54>)
 800d0fc:	68b8      	ldr	r0, [r7, #8]
 800d0fe:	f000 f80f 	bl	800d120 <IntToUnicode>
  }
}
 800d102:	bf00      	nop
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	1fff7a10 	.word	0x1fff7a10
 800d110:	1fff7a14 	.word	0x1fff7a14
 800d114:	1fff7a18 	.word	0x1fff7a18
 800d118:	2000012e 	.word	0x2000012e
 800d11c:	2000013e 	.word	0x2000013e

0800d120 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d132:	2300      	movs	r3, #0
 800d134:	75fb      	strb	r3, [r7, #23]
 800d136:	e027      	b.n	800d188 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	0f1b      	lsrs	r3, r3, #28
 800d13c:	2b09      	cmp	r3, #9
 800d13e:	d80b      	bhi.n	800d158 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	0f1b      	lsrs	r3, r3, #28
 800d144:	b2da      	uxtb	r2, r3
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4619      	mov	r1, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	440b      	add	r3, r1
 800d150:	3230      	adds	r2, #48	@ 0x30
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e00a      	b.n	800d16e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	0f1b      	lsrs	r3, r3, #28
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	4619      	mov	r1, r3
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	440b      	add	r3, r1
 800d168:	3237      	adds	r2, #55	@ 0x37
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	011b      	lsls	r3, r3, #4
 800d172:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d174:	7dfb      	ldrb	r3, [r7, #23]
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	3301      	adds	r3, #1
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	4413      	add	r3, r2
 800d17e:	2200      	movs	r2, #0
 800d180:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	3301      	adds	r3, #1
 800d186:	75fb      	strb	r3, [r7, #23]
 800d188:	7dfa      	ldrb	r2, [r7, #23]
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d3d3      	bcc.n	800d138 <IntToUnicode+0x18>
  }
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	371c      	adds	r7, #28
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
	...

0800d1a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08a      	sub	sp, #40	@ 0x28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1a8:	f107 0314 	add.w	r3, r7, #20
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]
 800d1b0:	605a      	str	r2, [r3, #4]
 800d1b2:	609a      	str	r2, [r3, #8]
 800d1b4:	60da      	str	r2, [r3, #12]
 800d1b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1c0:	d13a      	bne.n	800d238 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	613b      	str	r3, [r7, #16]
 800d1c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d1cc:	f043 0301 	orr.w	r3, r3, #1
 800d1d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d1de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d1e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1ec:	2303      	movs	r3, #3
 800d1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d1f0:	230a      	movs	r3, #10
 800d1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1f4:	f107 0314 	add.w	r3, r7, #20
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4812      	ldr	r0, [pc, #72]	@ (800d244 <HAL_PCD_MspInit+0xa4>)
 800d1fc:	f7f7 ffe8 	bl	80051d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d200:	4b0f      	ldr	r3, [pc, #60]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d204:	4a0e      	ldr	r2, [pc, #56]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d20a:	6353      	str	r3, [r2, #52]	@ 0x34
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	4b0b      	ldr	r3, [pc, #44]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d214:	4a0a      	ldr	r2, [pc, #40]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d21a:	6453      	str	r3, [r2, #68]	@ 0x44
 800d21c:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <HAL_PCD_MspInit+0xa0>)
 800d21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d228:	2200      	movs	r2, #0
 800d22a:	2100      	movs	r1, #0
 800d22c:	2043      	movs	r0, #67	@ 0x43
 800d22e:	f7f7 fc2c 	bl	8004a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d232:	2043      	movs	r0, #67	@ 0x43
 800d234:	f7f7 fc45 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d238:	bf00      	nop
 800d23a:	3728      	adds	r7, #40	@ 0x28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	40023800 	.word	0x40023800
 800d244:	40020000 	.word	0x40020000

0800d248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d25c:	4619      	mov	r1, r3
 800d25e:	4610      	mov	r0, r2
 800d260:	f7fe fb21 	bl	800b8a6 <USBD_LL_SetupStage>
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d27e:	78fa      	ldrb	r2, [r7, #3]
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	4613      	mov	r3, r2
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	78fb      	ldrb	r3, [r7, #3]
 800d294:	4619      	mov	r1, r3
 800d296:	f7fe fb5b 	bl	800b950 <USBD_LL_DataOutStage>
}
 800d29a:	bf00      	nop
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	00db      	lsls	r3, r3, #3
 800d2bc:	4413      	add	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	3320      	adds	r3, #32
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	78fb      	ldrb	r3, [r7, #3]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f7fe fbfd 	bl	800bac8 <USBD_LL_DataInStage>
}
 800d2ce:	bf00      	nop
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b082      	sub	sp, #8
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fd41 	bl	800bd6c <USBD_LL_SOF>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	79db      	ldrb	r3, [r3, #7]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]
 800d30a:	e008      	b.n	800d31e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	79db      	ldrb	r3, [r3, #7]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d102      	bne.n	800d31a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d314:	2301      	movs	r3, #1
 800d316:	73fb      	strb	r3, [r7, #15]
 800d318:	e001      	b.n	800d31e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d31a:	f7f3 ff77 	bl	800120c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d324:	7bfa      	ldrb	r2, [r7, #15]
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe fcdb 	bl	800bce4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fc82 	bl	800bc3e <USBD_LL_Reset>
}
 800d33a:	bf00      	nop
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fcd6 	bl	800bd04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	6812      	ldr	r2, [r2, #0]
 800d366:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d36a:	f043 0301 	orr.w	r3, r3, #1
 800d36e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7adb      	ldrb	r3, [r3, #11]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d005      	beq.n	800d384 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d378:	4b04      	ldr	r3, [pc, #16]	@ (800d38c <HAL_PCD_SuspendCallback+0x48>)
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	4a03      	ldr	r2, [pc, #12]	@ (800d38c <HAL_PCD_SuspendCallback+0x48>)
 800d37e:	f043 0306 	orr.w	r3, r3, #6
 800d382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	e000ed00 	.word	0xe000ed00

0800d390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fccc 	bl	800bd3c <USBD_LL_Resume>
}
 800d3a4:	bf00      	nop
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3be:	78fa      	ldrb	r2, [r7, #3]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fd24 	bl	800be10 <USBD_LL_IsoOUTIncomplete>
}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3e2:	78fa      	ldrb	r2, [r7, #3]
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fce0 	bl	800bdac <USBD_LL_IsoINIncomplete>
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe fd36 	bl	800be74 <USBD_LL_DevConnected>
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fe fd33 	bl	800be8a <USBD_LL_DevDisconnected>
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d13c      	bne.n	800d4b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d43c:	4a20      	ldr	r2, [pc, #128]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a1e      	ldr	r2, [pc, #120]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d448:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d44c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d44e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d452:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d454:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d456:	2204      	movs	r2, #4
 800d458:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d45a:	4b19      	ldr	r3, [pc, #100]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d45c:	2202      	movs	r2, #2
 800d45e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d460:	4b17      	ldr	r3, [pc, #92]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d462:	2200      	movs	r2, #0
 800d464:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d466:	4b16      	ldr	r3, [pc, #88]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d468:	2202      	movs	r2, #2
 800d46a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d46c:	4b14      	ldr	r3, [pc, #80]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d46e:	2200      	movs	r2, #0
 800d470:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d472:	4b13      	ldr	r3, [pc, #76]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d474:	2200      	movs	r2, #0
 800d476:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d478:	4b11      	ldr	r3, [pc, #68]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d47e:	4b10      	ldr	r3, [pc, #64]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d480:	2200      	movs	r2, #0
 800d482:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d484:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d486:	2200      	movs	r2, #0
 800d488:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d48a:	480d      	ldr	r0, [pc, #52]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d48c:	f7f9 f9e6 	bl	800685c <HAL_PCD_Init>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d496:	f7f3 feb9 	bl	800120c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d49a:	2180      	movs	r1, #128	@ 0x80
 800d49c:	4808      	ldr	r0, [pc, #32]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d49e:	f7fa fc12 	bl	8007cc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d4a2:	2240      	movs	r2, #64	@ 0x40
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4806      	ldr	r0, [pc, #24]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d4a8:	f7fa fbc6 	bl	8007c38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d4ac:	2280      	movs	r2, #128	@ 0x80
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	4803      	ldr	r0, [pc, #12]	@ (800d4c0 <USBD_LL_Init+0x94>)
 800d4b2:	f7fa fbc1 	bl	8007c38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	2000317c 	.word	0x2000317c

0800d4c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f9 facd 	bl	8006a7a <HAL_PCD_Start>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 f942 	bl	800d770 <USBD_Get_USB_Status>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	4608      	mov	r0, r1
 800d504:	4611      	mov	r1, r2
 800d506:	461a      	mov	r2, r3
 800d508:	4603      	mov	r3, r0
 800d50a:	70fb      	strb	r3, [r7, #3]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70bb      	strb	r3, [r7, #2]
 800d510:	4613      	mov	r3, r2
 800d512:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d522:	78bb      	ldrb	r3, [r7, #2]
 800d524:	883a      	ldrh	r2, [r7, #0]
 800d526:	78f9      	ldrb	r1, [r7, #3]
 800d528:	f7f9 ffa1 	bl	800746e <HAL_PCD_EP_Open>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 f91c 	bl	800d770 <USBD_Get_USB_Status>
 800d538:	4603      	mov	r3, r0
 800d53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	460b      	mov	r3, r1
 800d550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d560:	78fa      	ldrb	r2, [r7, #3]
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f7f9 ffec 	bl	8007542 <HAL_PCD_EP_Close>
 800d56a:	4603      	mov	r3, r0
 800d56c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	4618      	mov	r0, r3
 800d572:	f000 f8fd 	bl	800d770 <USBD_Get_USB_Status>
 800d576:	4603      	mov	r3, r0
 800d578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d590:	2300      	movs	r3, #0
 800d592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d59e:	78fa      	ldrb	r2, [r7, #3]
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fa f8a4 	bl	80076f0 <HAL_PCD_EP_SetStall>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f000 f8de 	bl	800d770 <USBD_Get_USB_Status>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5dc:	78fa      	ldrb	r2, [r7, #3]
 800d5de:	4611      	mov	r1, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fa f8e8 	bl	80077b6 <HAL_PCD_EP_ClrStall>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 f8bf 	bl	800d770 <USBD_Get_USB_Status>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d612:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	da0b      	bge.n	800d634 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d61c:	78fb      	ldrb	r3, [r7, #3]
 800d61e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d622:	68f9      	ldr	r1, [r7, #12]
 800d624:	4613      	mov	r3, r2
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	440b      	add	r3, r1
 800d62e:	3316      	adds	r3, #22
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	e00b      	b.n	800d64c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d63a:	68f9      	ldr	r1, [r7, #12]
 800d63c:	4613      	mov	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	440b      	add	r3, r1
 800d646:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d64a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d668:	2300      	movs	r3, #0
 800d66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d672:	78fa      	ldrb	r2, [r7, #3]
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7f9 fed5 	bl	8007426 <HAL_PCD_SetAddress>
 800d67c:	4603      	mov	r3, r0
 800d67e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	4618      	mov	r0, r3
 800d684:	f000 f874 	bl	800d770 <USBD_Get_USB_Status>
 800d688:	4603      	mov	r3, r0
 800d68a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b086      	sub	sp, #24
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	607a      	str	r2, [r7, #4]
 800d6a0:	603b      	str	r3, [r7, #0]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6b4:	7af9      	ldrb	r1, [r7, #11]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	f7f9 ffdf 	bl	800767c <HAL_PCD_EP_Transmit>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 f853 	bl	800d770 <USBD_Get_USB_Status>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d6ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	607a      	str	r2, [r7, #4]
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6f6:	7af9      	ldrb	r1, [r7, #11]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	f7f9 ff6b 	bl	80075d6 <HAL_PCD_EP_Receive>
 800d700:	4603      	mov	r3, r0
 800d702:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d704:	7dfb      	ldrb	r3, [r7, #23]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f832 	bl	800d770 <USBD_Get_USB_Status>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d710:	7dbb      	ldrb	r3, [r7, #22]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b082      	sub	sp, #8
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	460b      	mov	r3, r1
 800d724:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d72c:	78fa      	ldrb	r2, [r7, #3]
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f7f9 ff8b 	bl	800764c <HAL_PCD_EP_GetRxCount>
 800d736:	4603      	mov	r3, r0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d748:	4b03      	ldr	r3, [pc, #12]	@ (800d758 <USBD_static_malloc+0x18>)
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	20003660 	.word	0x20003660

0800d75c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]

}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d77e:	79fb      	ldrb	r3, [r7, #7]
 800d780:	2b03      	cmp	r3, #3
 800d782:	d817      	bhi.n	800d7b4 <USBD_Get_USB_Status+0x44>
 800d784:	a201      	add	r2, pc, #4	@ (adr r2, 800d78c <USBD_Get_USB_Status+0x1c>)
 800d786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78a:	bf00      	nop
 800d78c:	0800d79d 	.word	0x0800d79d
 800d790:	0800d7a3 	.word	0x0800d7a3
 800d794:	0800d7a9 	.word	0x0800d7a9
 800d798:	0800d7af 	.word	0x0800d7af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	e00b      	b.n	800d7ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a6:	e008      	b.n	800d7ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ac:	e005      	b.n	800d7ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b2:	e002      	b.n	800d7ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b8:	bf00      	nop
  }
  return usb_status;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <cosf>:
 800d7c8:	ee10 3a10 	vmov	r3, s0
 800d7cc:	b507      	push	{r0, r1, r2, lr}
 800d7ce:	4a1e      	ldr	r2, [pc, #120]	@ (800d848 <cosf+0x80>)
 800d7d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d806      	bhi.n	800d7e6 <cosf+0x1e>
 800d7d8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d84c <cosf+0x84>
 800d7dc:	b003      	add	sp, #12
 800d7de:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e2:	f000 b8bb 	b.w	800d95c <__kernel_cosf>
 800d7e6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d7ea:	d304      	bcc.n	800d7f6 <cosf+0x2e>
 800d7ec:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d7f0:	b003      	add	sp, #12
 800d7f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7f6:	4668      	mov	r0, sp
 800d7f8:	f000 f950 	bl	800da9c <__ieee754_rem_pio2f>
 800d7fc:	f000 0003 	and.w	r0, r0, #3
 800d800:	2801      	cmp	r0, #1
 800d802:	d009      	beq.n	800d818 <cosf+0x50>
 800d804:	2802      	cmp	r0, #2
 800d806:	d010      	beq.n	800d82a <cosf+0x62>
 800d808:	b9b0      	cbnz	r0, 800d838 <cosf+0x70>
 800d80a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d80e:	ed9d 0a00 	vldr	s0, [sp]
 800d812:	f000 f8a3 	bl	800d95c <__kernel_cosf>
 800d816:	e7eb      	b.n	800d7f0 <cosf+0x28>
 800d818:	eddd 0a01 	vldr	s1, [sp, #4]
 800d81c:	ed9d 0a00 	vldr	s0, [sp]
 800d820:	f000 f8f4 	bl	800da0c <__kernel_sinf>
 800d824:	eeb1 0a40 	vneg.f32	s0, s0
 800d828:	e7e2      	b.n	800d7f0 <cosf+0x28>
 800d82a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d82e:	ed9d 0a00 	vldr	s0, [sp]
 800d832:	f000 f893 	bl	800d95c <__kernel_cosf>
 800d836:	e7f5      	b.n	800d824 <cosf+0x5c>
 800d838:	eddd 0a01 	vldr	s1, [sp, #4]
 800d83c:	ed9d 0a00 	vldr	s0, [sp]
 800d840:	2001      	movs	r0, #1
 800d842:	f000 f8e3 	bl	800da0c <__kernel_sinf>
 800d846:	e7d3      	b.n	800d7f0 <cosf+0x28>
 800d848:	3f490fd8 	.word	0x3f490fd8
 800d84c:	00000000 	.word	0x00000000

0800d850 <sinf>:
 800d850:	ee10 3a10 	vmov	r3, s0
 800d854:	b507      	push	{r0, r1, r2, lr}
 800d856:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d4 <sinf+0x84>)
 800d858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d807      	bhi.n	800d870 <sinf+0x20>
 800d860:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d8d8 <sinf+0x88>
 800d864:	2000      	movs	r0, #0
 800d866:	b003      	add	sp, #12
 800d868:	f85d eb04 	ldr.w	lr, [sp], #4
 800d86c:	f000 b8ce 	b.w	800da0c <__kernel_sinf>
 800d870:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d874:	d304      	bcc.n	800d880 <sinf+0x30>
 800d876:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d87a:	b003      	add	sp, #12
 800d87c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d880:	4668      	mov	r0, sp
 800d882:	f000 f90b 	bl	800da9c <__ieee754_rem_pio2f>
 800d886:	f000 0003 	and.w	r0, r0, #3
 800d88a:	2801      	cmp	r0, #1
 800d88c:	d00a      	beq.n	800d8a4 <sinf+0x54>
 800d88e:	2802      	cmp	r0, #2
 800d890:	d00f      	beq.n	800d8b2 <sinf+0x62>
 800d892:	b9c0      	cbnz	r0, 800d8c6 <sinf+0x76>
 800d894:	eddd 0a01 	vldr	s1, [sp, #4]
 800d898:	ed9d 0a00 	vldr	s0, [sp]
 800d89c:	2001      	movs	r0, #1
 800d89e:	f000 f8b5 	bl	800da0c <__kernel_sinf>
 800d8a2:	e7ea      	b.n	800d87a <sinf+0x2a>
 800d8a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8a8:	ed9d 0a00 	vldr	s0, [sp]
 800d8ac:	f000 f856 	bl	800d95c <__kernel_cosf>
 800d8b0:	e7e3      	b.n	800d87a <sinf+0x2a>
 800d8b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8b6:	ed9d 0a00 	vldr	s0, [sp]
 800d8ba:	2001      	movs	r0, #1
 800d8bc:	f000 f8a6 	bl	800da0c <__kernel_sinf>
 800d8c0:	eeb1 0a40 	vneg.f32	s0, s0
 800d8c4:	e7d9      	b.n	800d87a <sinf+0x2a>
 800d8c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8ca:	ed9d 0a00 	vldr	s0, [sp]
 800d8ce:	f000 f845 	bl	800d95c <__kernel_cosf>
 800d8d2:	e7f5      	b.n	800d8c0 <sinf+0x70>
 800d8d4:	3f490fd8 	.word	0x3f490fd8
 800d8d8:	00000000 	.word	0x00000000

0800d8dc <lrintf>:
 800d8dc:	ee10 3a10 	vmov	r3, s0
 800d8e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d8e4:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800d8e8:	281e      	cmp	r0, #30
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	dc2f      	bgt.n	800d94e <lrintf+0x72>
 800d8ee:	1c41      	adds	r1, r0, #1
 800d8f0:	da02      	bge.n	800d8f8 <lrintf+0x1c>
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	b002      	add	sp, #8
 800d8f6:	4770      	bx	lr
 800d8f8:	2816      	cmp	r0, #22
 800d8fa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800d8fe:	dd0a      	ble.n	800d916 <lrintf+0x3a>
 800d900:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d904:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d908:	3a96      	subs	r2, #150	@ 0x96
 800d90a:	fa03 f002 	lsl.w	r0, r3, r2
 800d90e:	2900      	cmp	r1, #0
 800d910:	d0f0      	beq.n	800d8f4 <lrintf+0x18>
 800d912:	4240      	negs	r0, r0
 800d914:	e7ee      	b.n	800d8f4 <lrintf+0x18>
 800d916:	4b10      	ldr	r3, [pc, #64]	@ (800d958 <lrintf+0x7c>)
 800d918:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d91c:	ed93 7a00 	vldr	s14, [r3]
 800d920:	ee37 0a00 	vadd.f32	s0, s14, s0
 800d924:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d928:	eddd 7a01 	vldr	s15, [sp, #4]
 800d92c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d930:	ee17 3a90 	vmov	r3, s15
 800d934:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d938:	d0db      	beq.n	800d8f2 <lrintf+0x16>
 800d93a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d93e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800d942:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d946:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d94a:	40d8      	lsrs	r0, r3
 800d94c:	e7df      	b.n	800d90e <lrintf+0x32>
 800d94e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d952:	ee17 0a90 	vmov	r0, s15
 800d956:	e7cd      	b.n	800d8f4 <lrintf+0x18>
 800d958:	08011d00 	.word	0x08011d00

0800d95c <__kernel_cosf>:
 800d95c:	ee10 3a10 	vmov	r3, s0
 800d960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d964:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d968:	eef0 6a40 	vmov.f32	s13, s0
 800d96c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d970:	d204      	bcs.n	800d97c <__kernel_cosf+0x20>
 800d972:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d976:	ee17 2a90 	vmov	r2, s15
 800d97a:	b342      	cbz	r2, 800d9ce <__kernel_cosf+0x72>
 800d97c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d980:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d9ec <__kernel_cosf+0x90>
 800d984:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d9f0 <__kernel_cosf+0x94>
 800d988:	4a1a      	ldr	r2, [pc, #104]	@ (800d9f4 <__kernel_cosf+0x98>)
 800d98a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d98e:	4293      	cmp	r3, r2
 800d990:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d9f8 <__kernel_cosf+0x9c>
 800d994:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d998:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d9fc <__kernel_cosf+0xa0>
 800d99c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9a0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800da00 <__kernel_cosf+0xa4>
 800d9a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9a8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800da04 <__kernel_cosf+0xa8>
 800d9ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9b0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d9b4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d9b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d9bc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9c4:	d804      	bhi.n	800d9d0 <__kernel_cosf+0x74>
 800d9c6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d9ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d9ce:	4770      	bx	lr
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	@ (800da08 <__kernel_cosf+0xac>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	bf9a      	itte	ls
 800d9d6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d9da:	ee07 3a10 	vmovls	s14, r3
 800d9de:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d9e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d9e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9ea:	e7ec      	b.n	800d9c6 <__kernel_cosf+0x6a>
 800d9ec:	ad47d74e 	.word	0xad47d74e
 800d9f0:	310f74f6 	.word	0x310f74f6
 800d9f4:	3e999999 	.word	0x3e999999
 800d9f8:	b493f27c 	.word	0xb493f27c
 800d9fc:	37d00d01 	.word	0x37d00d01
 800da00:	bab60b61 	.word	0xbab60b61
 800da04:	3d2aaaab 	.word	0x3d2aaaab
 800da08:	3f480000 	.word	0x3f480000

0800da0c <__kernel_sinf>:
 800da0c:	ee10 3a10 	vmov	r3, s0
 800da10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800da18:	d204      	bcs.n	800da24 <__kernel_sinf+0x18>
 800da1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800da1e:	ee17 3a90 	vmov	r3, s15
 800da22:	b35b      	cbz	r3, 800da7c <__kernel_sinf+0x70>
 800da24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800da28:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800da80 <__kernel_sinf+0x74>
 800da2c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800da84 <__kernel_sinf+0x78>
 800da30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800da88 <__kernel_sinf+0x7c>
 800da38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800da3c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800da8c <__kernel_sinf+0x80>
 800da40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800da44:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800da90 <__kernel_sinf+0x84>
 800da48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800da4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800da50:	b930      	cbnz	r0, 800da60 <__kernel_sinf+0x54>
 800da52:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800da94 <__kernel_sinf+0x88>
 800da56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800da5e:	4770      	bx	lr
 800da60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800da64:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800da68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800da6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800da70:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800da98 <__kernel_sinf+0x8c>
 800da74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800da78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	2f2ec9d3 	.word	0x2f2ec9d3
 800da84:	b2d72f34 	.word	0xb2d72f34
 800da88:	3638ef1b 	.word	0x3638ef1b
 800da8c:	b9500d01 	.word	0xb9500d01
 800da90:	3c088889 	.word	0x3c088889
 800da94:	be2aaaab 	.word	0xbe2aaaab
 800da98:	3e2aaaab 	.word	0x3e2aaaab

0800da9c <__ieee754_rem_pio2f>:
 800da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9e:	ee10 6a10 	vmov	r6, s0
 800daa2:	4b88      	ldr	r3, [pc, #544]	@ (800dcc4 <__ieee754_rem_pio2f+0x228>)
 800daa4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800daa8:	429d      	cmp	r5, r3
 800daaa:	b087      	sub	sp, #28
 800daac:	4604      	mov	r4, r0
 800daae:	d805      	bhi.n	800dabc <__ieee754_rem_pio2f+0x20>
 800dab0:	2300      	movs	r3, #0
 800dab2:	ed80 0a00 	vstr	s0, [r0]
 800dab6:	6043      	str	r3, [r0, #4]
 800dab8:	2000      	movs	r0, #0
 800daba:	e022      	b.n	800db02 <__ieee754_rem_pio2f+0x66>
 800dabc:	4b82      	ldr	r3, [pc, #520]	@ (800dcc8 <__ieee754_rem_pio2f+0x22c>)
 800dabe:	429d      	cmp	r5, r3
 800dac0:	d83a      	bhi.n	800db38 <__ieee754_rem_pio2f+0x9c>
 800dac2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800dac6:	2e00      	cmp	r6, #0
 800dac8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800dccc <__ieee754_rem_pio2f+0x230>
 800dacc:	4a80      	ldr	r2, [pc, #512]	@ (800dcd0 <__ieee754_rem_pio2f+0x234>)
 800dace:	f023 030f 	bic.w	r3, r3, #15
 800dad2:	dd18      	ble.n	800db06 <__ieee754_rem_pio2f+0x6a>
 800dad4:	4293      	cmp	r3, r2
 800dad6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800dada:	bf09      	itett	eq
 800dadc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800dcd4 <__ieee754_rem_pio2f+0x238>
 800dae0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800dcd8 <__ieee754_rem_pio2f+0x23c>
 800dae4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800dcdc <__ieee754_rem_pio2f+0x240>
 800dae8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800daec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800daf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800daf4:	ed80 7a00 	vstr	s14, [r0]
 800daf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dafc:	edc0 7a01 	vstr	s15, [r0, #4]
 800db00:	2001      	movs	r0, #1
 800db02:	b007      	add	sp, #28
 800db04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db06:	4293      	cmp	r3, r2
 800db08:	ee70 7a07 	vadd.f32	s15, s0, s14
 800db0c:	bf09      	itett	eq
 800db0e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800dcd4 <__ieee754_rem_pio2f+0x238>
 800db12:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800dcd8 <__ieee754_rem_pio2f+0x23c>
 800db16:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800dcdc <__ieee754_rem_pio2f+0x240>
 800db1a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800db1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800db22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db26:	ed80 7a00 	vstr	s14, [r0]
 800db2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db2e:	edc0 7a01 	vstr	s15, [r0, #4]
 800db32:	f04f 30ff 	mov.w	r0, #4294967295
 800db36:	e7e4      	b.n	800db02 <__ieee754_rem_pio2f+0x66>
 800db38:	4b69      	ldr	r3, [pc, #420]	@ (800dce0 <__ieee754_rem_pio2f+0x244>)
 800db3a:	429d      	cmp	r5, r3
 800db3c:	d873      	bhi.n	800dc26 <__ieee754_rem_pio2f+0x18a>
 800db3e:	f000 f8dd 	bl	800dcfc <fabsf>
 800db42:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800dce4 <__ieee754_rem_pio2f+0x248>
 800db46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800db4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800db4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db56:	ee17 0a90 	vmov	r0, s15
 800db5a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dccc <__ieee754_rem_pio2f+0x230>
 800db5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800db62:	281f      	cmp	r0, #31
 800db64:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dcd8 <__ieee754_rem_pio2f+0x23c>
 800db68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db6c:	eeb1 6a47 	vneg.f32	s12, s14
 800db70:	ee70 6a67 	vsub.f32	s13, s0, s15
 800db74:	ee16 1a90 	vmov	r1, s13
 800db78:	dc09      	bgt.n	800db8e <__ieee754_rem_pio2f+0xf2>
 800db7a:	4a5b      	ldr	r2, [pc, #364]	@ (800dce8 <__ieee754_rem_pio2f+0x24c>)
 800db7c:	1e47      	subs	r7, r0, #1
 800db7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800db82:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800db86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d107      	bne.n	800db9e <__ieee754_rem_pio2f+0x102>
 800db8e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800db92:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800db96:	2a08      	cmp	r2, #8
 800db98:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800db9c:	dc14      	bgt.n	800dbc8 <__ieee754_rem_pio2f+0x12c>
 800db9e:	6021      	str	r1, [r4, #0]
 800dba0:	ed94 7a00 	vldr	s14, [r4]
 800dba4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dba8:	2e00      	cmp	r6, #0
 800dbaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dbae:	ed84 0a01 	vstr	s0, [r4, #4]
 800dbb2:	daa6      	bge.n	800db02 <__ieee754_rem_pio2f+0x66>
 800dbb4:	eeb1 7a47 	vneg.f32	s14, s14
 800dbb8:	eeb1 0a40 	vneg.f32	s0, s0
 800dbbc:	ed84 7a00 	vstr	s14, [r4]
 800dbc0:	ed84 0a01 	vstr	s0, [r4, #4]
 800dbc4:	4240      	negs	r0, r0
 800dbc6:	e79c      	b.n	800db02 <__ieee754_rem_pio2f+0x66>
 800dbc8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800dcd4 <__ieee754_rem_pio2f+0x238>
 800dbcc:	eef0 6a40 	vmov.f32	s13, s0
 800dbd0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800dbd4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800dbd8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dbdc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800dcdc <__ieee754_rem_pio2f+0x240>
 800dbe0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800dbe4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800dbe8:	ee15 2a90 	vmov	r2, s11
 800dbec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dbf0:	1a5b      	subs	r3, r3, r1
 800dbf2:	2b19      	cmp	r3, #25
 800dbf4:	dc04      	bgt.n	800dc00 <__ieee754_rem_pio2f+0x164>
 800dbf6:	edc4 5a00 	vstr	s11, [r4]
 800dbfa:	eeb0 0a66 	vmov.f32	s0, s13
 800dbfe:	e7cf      	b.n	800dba0 <__ieee754_rem_pio2f+0x104>
 800dc00:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800dcec <__ieee754_rem_pio2f+0x250>
 800dc04:	eeb0 0a66 	vmov.f32	s0, s13
 800dc08:	eea6 0a25 	vfma.f32	s0, s12, s11
 800dc0c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800dc10:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800dcf0 <__ieee754_rem_pio2f+0x254>
 800dc14:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dc18:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800dc1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dc20:	ed84 7a00 	vstr	s14, [r4]
 800dc24:	e7bc      	b.n	800dba0 <__ieee754_rem_pio2f+0x104>
 800dc26:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800dc2a:	d306      	bcc.n	800dc3a <__ieee754_rem_pio2f+0x19e>
 800dc2c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dc30:	edc0 7a01 	vstr	s15, [r0, #4]
 800dc34:	edc0 7a00 	vstr	s15, [r0]
 800dc38:	e73e      	b.n	800dab8 <__ieee754_rem_pio2f+0x1c>
 800dc3a:	15ea      	asrs	r2, r5, #23
 800dc3c:	3a86      	subs	r2, #134	@ 0x86
 800dc3e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800dc42:	ee07 3a90 	vmov	s15, r3
 800dc46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dc4a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800dcf4 <__ieee754_rem_pio2f+0x258>
 800dc4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc56:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dc5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dc62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dc66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc6a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dc6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc72:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc7a:	edcd 7a05 	vstr	s15, [sp, #20]
 800dc7e:	d11e      	bne.n	800dcbe <__ieee754_rem_pio2f+0x222>
 800dc80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc88:	bf0c      	ite	eq
 800dc8a:	2301      	moveq	r3, #1
 800dc8c:	2302      	movne	r3, #2
 800dc8e:	491a      	ldr	r1, [pc, #104]	@ (800dcf8 <__ieee754_rem_pio2f+0x25c>)
 800dc90:	9101      	str	r1, [sp, #4]
 800dc92:	2102      	movs	r1, #2
 800dc94:	9100      	str	r1, [sp, #0]
 800dc96:	a803      	add	r0, sp, #12
 800dc98:	4621      	mov	r1, r4
 800dc9a:	f000 f837 	bl	800dd0c <__kernel_rem_pio2f>
 800dc9e:	2e00      	cmp	r6, #0
 800dca0:	f6bf af2f 	bge.w	800db02 <__ieee754_rem_pio2f+0x66>
 800dca4:	edd4 7a00 	vldr	s15, [r4]
 800dca8:	eef1 7a67 	vneg.f32	s15, s15
 800dcac:	edc4 7a00 	vstr	s15, [r4]
 800dcb0:	edd4 7a01 	vldr	s15, [r4, #4]
 800dcb4:	eef1 7a67 	vneg.f32	s15, s15
 800dcb8:	edc4 7a01 	vstr	s15, [r4, #4]
 800dcbc:	e782      	b.n	800dbc4 <__ieee754_rem_pio2f+0x128>
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	e7e5      	b.n	800dc8e <__ieee754_rem_pio2f+0x1f2>
 800dcc2:	bf00      	nop
 800dcc4:	3f490fd8 	.word	0x3f490fd8
 800dcc8:	4016cbe3 	.word	0x4016cbe3
 800dccc:	3fc90f80 	.word	0x3fc90f80
 800dcd0:	3fc90fd0 	.word	0x3fc90fd0
 800dcd4:	37354400 	.word	0x37354400
 800dcd8:	37354443 	.word	0x37354443
 800dcdc:	2e85a308 	.word	0x2e85a308
 800dce0:	43490f80 	.word	0x43490f80
 800dce4:	3f22f984 	.word	0x3f22f984
 800dce8:	08011d08 	.word	0x08011d08
 800dcec:	2e85a300 	.word	0x2e85a300
 800dcf0:	248d3132 	.word	0x248d3132
 800dcf4:	43800000 	.word	0x43800000
 800dcf8:	08011d88 	.word	0x08011d88

0800dcfc <fabsf>:
 800dcfc:	ee10 3a10 	vmov	r3, s0
 800dd00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd04:	ee00 3a10 	vmov	s0, r3
 800dd08:	4770      	bx	lr
	...

0800dd0c <__kernel_rem_pio2f>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	ed2d 8b04 	vpush	{d8-d9}
 800dd14:	b0d9      	sub	sp, #356	@ 0x164
 800dd16:	4690      	mov	r8, r2
 800dd18:	9001      	str	r0, [sp, #4]
 800dd1a:	4ab9      	ldr	r2, [pc, #740]	@ (800e000 <__kernel_rem_pio2f+0x2f4>)
 800dd1c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800dd1e:	f118 0f04 	cmn.w	r8, #4
 800dd22:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800dd26:	460f      	mov	r7, r1
 800dd28:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd2c:	db27      	blt.n	800dd7e <__kernel_rem_pio2f+0x72>
 800dd2e:	f1b8 0203 	subs.w	r2, r8, #3
 800dd32:	bf48      	it	mi
 800dd34:	f108 0204 	addmi.w	r2, r8, #4
 800dd38:	10d2      	asrs	r2, r2, #3
 800dd3a:	1c55      	adds	r5, r2, #1
 800dd3c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dd3e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800dd42:	00e8      	lsls	r0, r5, #3
 800dd44:	eba2 060b 	sub.w	r6, r2, fp
 800dd48:	9002      	str	r0, [sp, #8]
 800dd4a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800dd4e:	eb0a 0c0b 	add.w	ip, sl, fp
 800dd52:	ac1c      	add	r4, sp, #112	@ 0x70
 800dd54:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800dd58:	2000      	movs	r0, #0
 800dd5a:	4560      	cmp	r0, ip
 800dd5c:	dd11      	ble.n	800dd82 <__kernel_rem_pio2f+0x76>
 800dd5e:	a91c      	add	r1, sp, #112	@ 0x70
 800dd60:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800dd64:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800dd68:	f04f 0c00 	mov.w	ip, #0
 800dd6c:	45d4      	cmp	ip, sl
 800dd6e:	dc27      	bgt.n	800ddc0 <__kernel_rem_pio2f+0xb4>
 800dd70:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dd74:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800dd78:	4606      	mov	r6, r0
 800dd7a:	2400      	movs	r4, #0
 800dd7c:	e016      	b.n	800ddac <__kernel_rem_pio2f+0xa0>
 800dd7e:	2200      	movs	r2, #0
 800dd80:	e7db      	b.n	800dd3a <__kernel_rem_pio2f+0x2e>
 800dd82:	42c6      	cmn	r6, r0
 800dd84:	bf5d      	ittte	pl
 800dd86:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dd8a:	ee07 1a90 	vmovpl	s15, r1
 800dd8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dd92:	eef0 7a47 	vmovmi.f32	s15, s14
 800dd96:	ece4 7a01 	vstmia	r4!, {s15}
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	e7dd      	b.n	800dd5a <__kernel_rem_pio2f+0x4e>
 800dd9e:	ecfe 6a01 	vldmia	lr!, {s13}
 800dda2:	ed96 7a00 	vldr	s14, [r6]
 800dda6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ddaa:	3401      	adds	r4, #1
 800ddac:	455c      	cmp	r4, fp
 800ddae:	f1a6 0604 	sub.w	r6, r6, #4
 800ddb2:	ddf4      	ble.n	800dd9e <__kernel_rem_pio2f+0x92>
 800ddb4:	ece9 7a01 	vstmia	r9!, {s15}
 800ddb8:	f10c 0c01 	add.w	ip, ip, #1
 800ddbc:	3004      	adds	r0, #4
 800ddbe:	e7d5      	b.n	800dd6c <__kernel_rem_pio2f+0x60>
 800ddc0:	a908      	add	r1, sp, #32
 800ddc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddc6:	9104      	str	r1, [sp, #16]
 800ddc8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ddca:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800e00c <__kernel_rem_pio2f+0x300>
 800ddce:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800e008 <__kernel_rem_pio2f+0x2fc>
 800ddd2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ddd6:	9203      	str	r2, [sp, #12]
 800ddd8:	4654      	mov	r4, sl
 800ddda:	00a2      	lsls	r2, r4, #2
 800dddc:	9205      	str	r2, [sp, #20]
 800ddde:	aa58      	add	r2, sp, #352	@ 0x160
 800dde0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800dde4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800dde8:	a944      	add	r1, sp, #272	@ 0x110
 800ddea:	aa08      	add	r2, sp, #32
 800ddec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ddf0:	4694      	mov	ip, r2
 800ddf2:	4626      	mov	r6, r4
 800ddf4:	2e00      	cmp	r6, #0
 800ddf6:	f1a0 0004 	sub.w	r0, r0, #4
 800ddfa:	dc4c      	bgt.n	800de96 <__kernel_rem_pio2f+0x18a>
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de02:	f000 f9f5 	bl	800e1f0 <scalbnf>
 800de06:	eeb0 8a40 	vmov.f32	s16, s0
 800de0a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800de0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800de12:	f000 fa53 	bl	800e2bc <floorf>
 800de16:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800de1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800de1e:	2d00      	cmp	r5, #0
 800de20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800de28:	ee17 9a90 	vmov	r9, s15
 800de2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de30:	ee38 8a67 	vsub.f32	s16, s16, s15
 800de34:	dd41      	ble.n	800deba <__kernel_rem_pio2f+0x1ae>
 800de36:	f104 3cff 	add.w	ip, r4, #4294967295
 800de3a:	a908      	add	r1, sp, #32
 800de3c:	f1c5 0e08 	rsb	lr, r5, #8
 800de40:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800de44:	fa46 f00e 	asr.w	r0, r6, lr
 800de48:	4481      	add	r9, r0
 800de4a:	fa00 f00e 	lsl.w	r0, r0, lr
 800de4e:	1a36      	subs	r6, r6, r0
 800de50:	f1c5 0007 	rsb	r0, r5, #7
 800de54:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800de58:	4106      	asrs	r6, r0
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	dd3c      	ble.n	800ded8 <__kernel_rem_pio2f+0x1cc>
 800de5e:	f04f 0e00 	mov.w	lr, #0
 800de62:	f109 0901 	add.w	r9, r9, #1
 800de66:	4670      	mov	r0, lr
 800de68:	4574      	cmp	r4, lr
 800de6a:	dc68      	bgt.n	800df3e <__kernel_rem_pio2f+0x232>
 800de6c:	2d00      	cmp	r5, #0
 800de6e:	dd03      	ble.n	800de78 <__kernel_rem_pio2f+0x16c>
 800de70:	2d01      	cmp	r5, #1
 800de72:	d074      	beq.n	800df5e <__kernel_rem_pio2f+0x252>
 800de74:	2d02      	cmp	r5, #2
 800de76:	d07d      	beq.n	800df74 <__kernel_rem_pio2f+0x268>
 800de78:	2e02      	cmp	r6, #2
 800de7a:	d12d      	bne.n	800ded8 <__kernel_rem_pio2f+0x1cc>
 800de7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800de80:	ee30 8a48 	vsub.f32	s16, s0, s16
 800de84:	b340      	cbz	r0, 800ded8 <__kernel_rem_pio2f+0x1cc>
 800de86:	4628      	mov	r0, r5
 800de88:	9306      	str	r3, [sp, #24]
 800de8a:	f000 f9b1 	bl	800e1f0 <scalbnf>
 800de8e:	9b06      	ldr	r3, [sp, #24]
 800de90:	ee38 8a40 	vsub.f32	s16, s16, s0
 800de94:	e020      	b.n	800ded8 <__kernel_rem_pio2f+0x1cc>
 800de96:	ee60 7a28 	vmul.f32	s15, s0, s17
 800de9a:	3e01      	subs	r6, #1
 800de9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dea4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800dea8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800deac:	ecac 0a01 	vstmia	ip!, {s0}
 800deb0:	ed90 0a00 	vldr	s0, [r0]
 800deb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800deb8:	e79c      	b.n	800ddf4 <__kernel_rem_pio2f+0xe8>
 800deba:	d105      	bne.n	800dec8 <__kernel_rem_pio2f+0x1bc>
 800debc:	1e60      	subs	r0, r4, #1
 800debe:	a908      	add	r1, sp, #32
 800dec0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800dec4:	11f6      	asrs	r6, r6, #7
 800dec6:	e7c8      	b.n	800de5a <__kernel_rem_pio2f+0x14e>
 800dec8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800decc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ded0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded4:	da31      	bge.n	800df3a <__kernel_rem_pio2f+0x22e>
 800ded6:	2600      	movs	r6, #0
 800ded8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee0:	f040 8098 	bne.w	800e014 <__kernel_rem_pio2f+0x308>
 800dee4:	1e60      	subs	r0, r4, #1
 800dee6:	2200      	movs	r2, #0
 800dee8:	4550      	cmp	r0, sl
 800deea:	da4b      	bge.n	800df84 <__kernel_rem_pio2f+0x278>
 800deec:	2a00      	cmp	r2, #0
 800deee:	d065      	beq.n	800dfbc <__kernel_rem_pio2f+0x2b0>
 800def0:	3c01      	subs	r4, #1
 800def2:	ab08      	add	r3, sp, #32
 800def4:	3d08      	subs	r5, #8
 800def6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0f8      	beq.n	800def0 <__kernel_rem_pio2f+0x1e4>
 800defe:	4628      	mov	r0, r5
 800df00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800df04:	f000 f974 	bl	800e1f0 <scalbnf>
 800df08:	1c63      	adds	r3, r4, #1
 800df0a:	aa44      	add	r2, sp, #272	@ 0x110
 800df0c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e00c <__kernel_rem_pio2f+0x300>
 800df10:	0099      	lsls	r1, r3, #2
 800df12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800df16:	4623      	mov	r3, r4
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f280 80a9 	bge.w	800e070 <__kernel_rem_pio2f+0x364>
 800df1e:	4623      	mov	r3, r4
 800df20:	2b00      	cmp	r3, #0
 800df22:	f2c0 80c7 	blt.w	800e0b4 <__kernel_rem_pio2f+0x3a8>
 800df26:	aa44      	add	r2, sp, #272	@ 0x110
 800df28:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800df2c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e004 <__kernel_rem_pio2f+0x2f8>
 800df30:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800df34:	2000      	movs	r0, #0
 800df36:	1ae2      	subs	r2, r4, r3
 800df38:	e0b1      	b.n	800e09e <__kernel_rem_pio2f+0x392>
 800df3a:	2602      	movs	r6, #2
 800df3c:	e78f      	b.n	800de5e <__kernel_rem_pio2f+0x152>
 800df3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800df42:	b948      	cbnz	r0, 800df58 <__kernel_rem_pio2f+0x24c>
 800df44:	b121      	cbz	r1, 800df50 <__kernel_rem_pio2f+0x244>
 800df46:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800df4a:	f842 1c04 	str.w	r1, [r2, #-4]
 800df4e:	2101      	movs	r1, #1
 800df50:	f10e 0e01 	add.w	lr, lr, #1
 800df54:	4608      	mov	r0, r1
 800df56:	e787      	b.n	800de68 <__kernel_rem_pio2f+0x15c>
 800df58:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800df5c:	e7f5      	b.n	800df4a <__kernel_rem_pio2f+0x23e>
 800df5e:	f104 3cff 	add.w	ip, r4, #4294967295
 800df62:	aa08      	add	r2, sp, #32
 800df64:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800df68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df6c:	a908      	add	r1, sp, #32
 800df6e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800df72:	e781      	b.n	800de78 <__kernel_rem_pio2f+0x16c>
 800df74:	f104 3cff 	add.w	ip, r4, #4294967295
 800df78:	aa08      	add	r2, sp, #32
 800df7a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800df7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800df82:	e7f3      	b.n	800df6c <__kernel_rem_pio2f+0x260>
 800df84:	a908      	add	r1, sp, #32
 800df86:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800df8a:	3801      	subs	r0, #1
 800df8c:	430a      	orrs	r2, r1
 800df8e:	e7ab      	b.n	800dee8 <__kernel_rem_pio2f+0x1dc>
 800df90:	3201      	adds	r2, #1
 800df92:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800df96:	2e00      	cmp	r6, #0
 800df98:	d0fa      	beq.n	800df90 <__kernel_rem_pio2f+0x284>
 800df9a:	9905      	ldr	r1, [sp, #20]
 800df9c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dfa0:	eb0d 0001 	add.w	r0, sp, r1
 800dfa4:	18e6      	adds	r6, r4, r3
 800dfa6:	a91c      	add	r1, sp, #112	@ 0x70
 800dfa8:	f104 0c01 	add.w	ip, r4, #1
 800dfac:	384c      	subs	r0, #76	@ 0x4c
 800dfae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800dfb2:	4422      	add	r2, r4
 800dfb4:	4562      	cmp	r2, ip
 800dfb6:	da04      	bge.n	800dfc2 <__kernel_rem_pio2f+0x2b6>
 800dfb8:	4614      	mov	r4, r2
 800dfba:	e70e      	b.n	800ddda <__kernel_rem_pio2f+0xce>
 800dfbc:	9804      	ldr	r0, [sp, #16]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	e7e7      	b.n	800df92 <__kernel_rem_pio2f+0x286>
 800dfc2:	9903      	ldr	r1, [sp, #12]
 800dfc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dfc8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800dfcc:	9105      	str	r1, [sp, #20]
 800dfce:	ee07 1a90 	vmov	s15, r1
 800dfd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd6:	2400      	movs	r4, #0
 800dfd8:	ece6 7a01 	vstmia	r6!, {s15}
 800dfdc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800dfe0:	46b1      	mov	r9, r6
 800dfe2:	455c      	cmp	r4, fp
 800dfe4:	dd04      	ble.n	800dff0 <__kernel_rem_pio2f+0x2e4>
 800dfe6:	ece0 7a01 	vstmia	r0!, {s15}
 800dfea:	f10c 0c01 	add.w	ip, ip, #1
 800dfee:	e7e1      	b.n	800dfb4 <__kernel_rem_pio2f+0x2a8>
 800dff0:	ecfe 6a01 	vldmia	lr!, {s13}
 800dff4:	ed39 7a01 	vldmdb	r9!, {s14}
 800dff8:	3401      	adds	r4, #1
 800dffa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dffe:	e7f0      	b.n	800dfe2 <__kernel_rem_pio2f+0x2d6>
 800e000:	080120cc 	.word	0x080120cc
 800e004:	080120a0 	.word	0x080120a0
 800e008:	43800000 	.word	0x43800000
 800e00c:	3b800000 	.word	0x3b800000
 800e010:	00000000 	.word	0x00000000
 800e014:	9b02      	ldr	r3, [sp, #8]
 800e016:	eeb0 0a48 	vmov.f32	s0, s16
 800e01a:	eba3 0008 	sub.w	r0, r3, r8
 800e01e:	f000 f8e7 	bl	800e1f0 <scalbnf>
 800e022:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e008 <__kernel_rem_pio2f+0x2fc>
 800e026:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e02e:	db19      	blt.n	800e064 <__kernel_rem_pio2f+0x358>
 800e030:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e00c <__kernel_rem_pio2f+0x300>
 800e034:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e038:	aa08      	add	r2, sp, #32
 800e03a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e03e:	3508      	adds	r5, #8
 800e040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e044:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e04c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e050:	ee10 3a10 	vmov	r3, s0
 800e054:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e058:	ee17 3a90 	vmov	r3, s15
 800e05c:	3401      	adds	r4, #1
 800e05e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e062:	e74c      	b.n	800defe <__kernel_rem_pio2f+0x1f2>
 800e064:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e068:	aa08      	add	r2, sp, #32
 800e06a:	ee10 3a10 	vmov	r3, s0
 800e06e:	e7f6      	b.n	800e05e <__kernel_rem_pio2f+0x352>
 800e070:	a808      	add	r0, sp, #32
 800e072:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e076:	9001      	str	r0, [sp, #4]
 800e078:	ee07 0a90 	vmov	s15, r0
 800e07c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e080:	3b01      	subs	r3, #1
 800e082:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e086:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e08a:	ed62 7a01 	vstmdb	r2!, {s15}
 800e08e:	e743      	b.n	800df18 <__kernel_rem_pio2f+0x20c>
 800e090:	ecfc 6a01 	vldmia	ip!, {s13}
 800e094:	ecb5 7a01 	vldmia	r5!, {s14}
 800e098:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e09c:	3001      	adds	r0, #1
 800e09e:	4550      	cmp	r0, sl
 800e0a0:	dc01      	bgt.n	800e0a6 <__kernel_rem_pio2f+0x39a>
 800e0a2:	4282      	cmp	r2, r0
 800e0a4:	daf4      	bge.n	800e090 <__kernel_rem_pio2f+0x384>
 800e0a6:	a858      	add	r0, sp, #352	@ 0x160
 800e0a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e0ac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	e735      	b.n	800df20 <__kernel_rem_pio2f+0x214>
 800e0b4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	dc09      	bgt.n	800e0ce <__kernel_rem_pio2f+0x3c2>
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	dc2b      	bgt.n	800e116 <__kernel_rem_pio2f+0x40a>
 800e0be:	d044      	beq.n	800e14a <__kernel_rem_pio2f+0x43e>
 800e0c0:	f009 0007 	and.w	r0, r9, #7
 800e0c4:	b059      	add	sp, #356	@ 0x164
 800e0c6:	ecbd 8b04 	vpop	{d8-d9}
 800e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ce:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d1f5      	bne.n	800e0c0 <__kernel_rem_pio2f+0x3b4>
 800e0d4:	aa30      	add	r2, sp, #192	@ 0xc0
 800e0d6:	1f0b      	subs	r3, r1, #4
 800e0d8:	4413      	add	r3, r2
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4620      	mov	r0, r4
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f1a2 0204 	sub.w	r2, r2, #4
 800e0e4:	dc52      	bgt.n	800e18c <__kernel_rem_pio2f+0x480>
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	2a01      	cmp	r2, #1
 800e0ea:	f1a3 0304 	sub.w	r3, r3, #4
 800e0ee:	dc5d      	bgt.n	800e1ac <__kernel_rem_pio2f+0x4a0>
 800e0f0:	ab30      	add	r3, sp, #192	@ 0xc0
 800e0f2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800e0f6:	440b      	add	r3, r1
 800e0f8:	2c01      	cmp	r4, #1
 800e0fa:	dc67      	bgt.n	800e1cc <__kernel_rem_pio2f+0x4c0>
 800e0fc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e100:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e104:	2e00      	cmp	r6, #0
 800e106:	d167      	bne.n	800e1d8 <__kernel_rem_pio2f+0x4cc>
 800e108:	edc7 6a00 	vstr	s13, [r7]
 800e10c:	ed87 7a01 	vstr	s14, [r7, #4]
 800e110:	edc7 7a02 	vstr	s15, [r7, #8]
 800e114:	e7d4      	b.n	800e0c0 <__kernel_rem_pio2f+0x3b4>
 800e116:	ab30      	add	r3, sp, #192	@ 0xc0
 800e118:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800e11c:	440b      	add	r3, r1
 800e11e:	4622      	mov	r2, r4
 800e120:	2a00      	cmp	r2, #0
 800e122:	da24      	bge.n	800e16e <__kernel_rem_pio2f+0x462>
 800e124:	b34e      	cbz	r6, 800e17a <__kernel_rem_pio2f+0x46e>
 800e126:	eef1 7a47 	vneg.f32	s15, s14
 800e12a:	edc7 7a00 	vstr	s15, [r7]
 800e12e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e136:	aa31      	add	r2, sp, #196	@ 0xc4
 800e138:	2301      	movs	r3, #1
 800e13a:	429c      	cmp	r4, r3
 800e13c:	da20      	bge.n	800e180 <__kernel_rem_pio2f+0x474>
 800e13e:	b10e      	cbz	r6, 800e144 <__kernel_rem_pio2f+0x438>
 800e140:	eef1 7a67 	vneg.f32	s15, s15
 800e144:	edc7 7a01 	vstr	s15, [r7, #4]
 800e148:	e7ba      	b.n	800e0c0 <__kernel_rem_pio2f+0x3b4>
 800e14a:	ab30      	add	r3, sp, #192	@ 0xc0
 800e14c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800e010 <__kernel_rem_pio2f+0x304>
 800e150:	440b      	add	r3, r1
 800e152:	2c00      	cmp	r4, #0
 800e154:	da05      	bge.n	800e162 <__kernel_rem_pio2f+0x456>
 800e156:	b10e      	cbz	r6, 800e15c <__kernel_rem_pio2f+0x450>
 800e158:	eef1 7a67 	vneg.f32	s15, s15
 800e15c:	edc7 7a00 	vstr	s15, [r7]
 800e160:	e7ae      	b.n	800e0c0 <__kernel_rem_pio2f+0x3b4>
 800e162:	ed33 7a01 	vldmdb	r3!, {s14}
 800e166:	3c01      	subs	r4, #1
 800e168:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e16c:	e7f1      	b.n	800e152 <__kernel_rem_pio2f+0x446>
 800e16e:	ed73 7a01 	vldmdb	r3!, {s15}
 800e172:	3a01      	subs	r2, #1
 800e174:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e178:	e7d2      	b.n	800e120 <__kernel_rem_pio2f+0x414>
 800e17a:	eef0 7a47 	vmov.f32	s15, s14
 800e17e:	e7d4      	b.n	800e12a <__kernel_rem_pio2f+0x41e>
 800e180:	ecb2 7a01 	vldmia	r2!, {s14}
 800e184:	3301      	adds	r3, #1
 800e186:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e18a:	e7d6      	b.n	800e13a <__kernel_rem_pio2f+0x42e>
 800e18c:	edd2 7a00 	vldr	s15, [r2]
 800e190:	edd2 6a01 	vldr	s13, [r2, #4]
 800e194:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e198:	3801      	subs	r0, #1
 800e19a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e19e:	ed82 7a00 	vstr	s14, [r2]
 800e1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1a6:	edc2 7a01 	vstr	s15, [r2, #4]
 800e1aa:	e798      	b.n	800e0de <__kernel_rem_pio2f+0x3d2>
 800e1ac:	edd3 7a00 	vldr	s15, [r3]
 800e1b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800e1b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e1b8:	3a01      	subs	r2, #1
 800e1ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1be:	ed83 7a00 	vstr	s14, [r3]
 800e1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1c6:	edc3 7a01 	vstr	s15, [r3, #4]
 800e1ca:	e78d      	b.n	800e0e8 <__kernel_rem_pio2f+0x3dc>
 800e1cc:	ed33 7a01 	vldmdb	r3!, {s14}
 800e1d0:	3c01      	subs	r4, #1
 800e1d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1d6:	e78f      	b.n	800e0f8 <__kernel_rem_pio2f+0x3ec>
 800e1d8:	eef1 6a66 	vneg.f32	s13, s13
 800e1dc:	eeb1 7a47 	vneg.f32	s14, s14
 800e1e0:	edc7 6a00 	vstr	s13, [r7]
 800e1e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800e1e8:	eef1 7a67 	vneg.f32	s15, s15
 800e1ec:	e790      	b.n	800e110 <__kernel_rem_pio2f+0x404>
 800e1ee:	bf00      	nop

0800e1f0 <scalbnf>:
 800e1f0:	ee10 3a10 	vmov	r3, s0
 800e1f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e1f8:	d02b      	beq.n	800e252 <scalbnf+0x62>
 800e1fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e1fe:	d302      	bcc.n	800e206 <scalbnf+0x16>
 800e200:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e204:	4770      	bx	lr
 800e206:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e20a:	d123      	bne.n	800e254 <scalbnf+0x64>
 800e20c:	4b24      	ldr	r3, [pc, #144]	@ (800e2a0 <scalbnf+0xb0>)
 800e20e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e2a4 <scalbnf+0xb4>
 800e212:	4298      	cmp	r0, r3
 800e214:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e218:	db17      	blt.n	800e24a <scalbnf+0x5a>
 800e21a:	ee10 3a10 	vmov	r3, s0
 800e21e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e222:	3a19      	subs	r2, #25
 800e224:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e228:	4288      	cmp	r0, r1
 800e22a:	dd15      	ble.n	800e258 <scalbnf+0x68>
 800e22c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e2a8 <scalbnf+0xb8>
 800e230:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e2ac <scalbnf+0xbc>
 800e234:	ee10 3a10 	vmov	r3, s0
 800e238:	eeb0 7a67 	vmov.f32	s14, s15
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bfb8      	it	lt
 800e240:	eef0 7a66 	vmovlt.f32	s15, s13
 800e244:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e248:	4770      	bx	lr
 800e24a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e2b0 <scalbnf+0xc0>
 800e24e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e252:	4770      	bx	lr
 800e254:	0dd2      	lsrs	r2, r2, #23
 800e256:	e7e5      	b.n	800e224 <scalbnf+0x34>
 800e258:	4410      	add	r0, r2
 800e25a:	28fe      	cmp	r0, #254	@ 0xfe
 800e25c:	dce6      	bgt.n	800e22c <scalbnf+0x3c>
 800e25e:	2800      	cmp	r0, #0
 800e260:	dd06      	ble.n	800e270 <scalbnf+0x80>
 800e262:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e266:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e26a:	ee00 3a10 	vmov	s0, r3
 800e26e:	4770      	bx	lr
 800e270:	f110 0f16 	cmn.w	r0, #22
 800e274:	da09      	bge.n	800e28a <scalbnf+0x9a>
 800e276:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e2b0 <scalbnf+0xc0>
 800e27a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e2b4 <scalbnf+0xc4>
 800e27e:	ee10 3a10 	vmov	r3, s0
 800e282:	eeb0 7a67 	vmov.f32	s14, s15
 800e286:	2b00      	cmp	r3, #0
 800e288:	e7d9      	b.n	800e23e <scalbnf+0x4e>
 800e28a:	3019      	adds	r0, #25
 800e28c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e290:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e294:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e2b8 <scalbnf+0xc8>
 800e298:	ee07 3a90 	vmov	s15, r3
 800e29c:	e7d7      	b.n	800e24e <scalbnf+0x5e>
 800e29e:	bf00      	nop
 800e2a0:	ffff3cb0 	.word	0xffff3cb0
 800e2a4:	4c000000 	.word	0x4c000000
 800e2a8:	7149f2ca 	.word	0x7149f2ca
 800e2ac:	f149f2ca 	.word	0xf149f2ca
 800e2b0:	0da24260 	.word	0x0da24260
 800e2b4:	8da24260 	.word	0x8da24260
 800e2b8:	33000000 	.word	0x33000000

0800e2bc <floorf>:
 800e2bc:	ee10 3a10 	vmov	r3, s0
 800e2c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e2c4:	3a7f      	subs	r2, #127	@ 0x7f
 800e2c6:	2a16      	cmp	r2, #22
 800e2c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e2cc:	dc2b      	bgt.n	800e326 <floorf+0x6a>
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	da12      	bge.n	800e2f8 <floorf+0x3c>
 800e2d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e338 <floorf+0x7c>
 800e2d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e2da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e2:	dd06      	ble.n	800e2f2 <floorf+0x36>
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	da24      	bge.n	800e332 <floorf+0x76>
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	4b14      	ldr	r3, [pc, #80]	@ (800e33c <floorf+0x80>)
 800e2ec:	bf08      	it	eq
 800e2ee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e2f2:	ee00 3a10 	vmov	s0, r3
 800e2f6:	4770      	bx	lr
 800e2f8:	4911      	ldr	r1, [pc, #68]	@ (800e340 <floorf+0x84>)
 800e2fa:	4111      	asrs	r1, r2
 800e2fc:	420b      	tst	r3, r1
 800e2fe:	d0fa      	beq.n	800e2f6 <floorf+0x3a>
 800e300:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e338 <floorf+0x7c>
 800e304:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e308:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e310:	ddef      	ble.n	800e2f2 <floorf+0x36>
 800e312:	2b00      	cmp	r3, #0
 800e314:	bfbe      	ittt	lt
 800e316:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e31a:	fa40 f202 	asrlt.w	r2, r0, r2
 800e31e:	189b      	addlt	r3, r3, r2
 800e320:	ea23 0301 	bic.w	r3, r3, r1
 800e324:	e7e5      	b.n	800e2f2 <floorf+0x36>
 800e326:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e32a:	d3e4      	bcc.n	800e2f6 <floorf+0x3a>
 800e32c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e330:	4770      	bx	lr
 800e332:	2300      	movs	r3, #0
 800e334:	e7dd      	b.n	800e2f2 <floorf+0x36>
 800e336:	bf00      	nop
 800e338:	7149f2ca 	.word	0x7149f2ca
 800e33c:	bf800000 	.word	0xbf800000
 800e340:	007fffff 	.word	0x007fffff

0800e344 <atoi>:
 800e344:	220a      	movs	r2, #10
 800e346:	2100      	movs	r1, #0
 800e348:	f000 bee0 	b.w	800f10c <strtol>

0800e34c <sulp>:
 800e34c:	b570      	push	{r4, r5, r6, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	460d      	mov	r5, r1
 800e352:	ec45 4b10 	vmov	d0, r4, r5
 800e356:	4616      	mov	r6, r2
 800e358:	f002 fa5e 	bl	8010818 <__ulp>
 800e35c:	ec51 0b10 	vmov	r0, r1, d0
 800e360:	b17e      	cbz	r6, 800e382 <sulp+0x36>
 800e362:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e366:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	dd09      	ble.n	800e382 <sulp+0x36>
 800e36e:	051b      	lsls	r3, r3, #20
 800e370:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e374:	2400      	movs	r4, #0
 800e376:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e37a:	4622      	mov	r2, r4
 800e37c:	462b      	mov	r3, r5
 800e37e:	f7f2 f943 	bl	8000608 <__aeabi_dmul>
 800e382:	ec41 0b10 	vmov	d0, r0, r1
 800e386:	bd70      	pop	{r4, r5, r6, pc}

0800e388 <_strtod_l>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	b09f      	sub	sp, #124	@ 0x7c
 800e38e:	460c      	mov	r4, r1
 800e390:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e392:	2200      	movs	r2, #0
 800e394:	921a      	str	r2, [sp, #104]	@ 0x68
 800e396:	9005      	str	r0, [sp, #20]
 800e398:	f04f 0a00 	mov.w	sl, #0
 800e39c:	f04f 0b00 	mov.w	fp, #0
 800e3a0:	460a      	mov	r2, r1
 800e3a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3a4:	7811      	ldrb	r1, [r2, #0]
 800e3a6:	292b      	cmp	r1, #43	@ 0x2b
 800e3a8:	d04a      	beq.n	800e440 <_strtod_l+0xb8>
 800e3aa:	d838      	bhi.n	800e41e <_strtod_l+0x96>
 800e3ac:	290d      	cmp	r1, #13
 800e3ae:	d832      	bhi.n	800e416 <_strtod_l+0x8e>
 800e3b0:	2908      	cmp	r1, #8
 800e3b2:	d832      	bhi.n	800e41a <_strtod_l+0x92>
 800e3b4:	2900      	cmp	r1, #0
 800e3b6:	d03b      	beq.n	800e430 <_strtod_l+0xa8>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e3bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e3be:	782a      	ldrb	r2, [r5, #0]
 800e3c0:	2a30      	cmp	r2, #48	@ 0x30
 800e3c2:	f040 80b3 	bne.w	800e52c <_strtod_l+0x1a4>
 800e3c6:	786a      	ldrb	r2, [r5, #1]
 800e3c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e3cc:	2a58      	cmp	r2, #88	@ 0x58
 800e3ce:	d16e      	bne.n	800e4ae <_strtod_l+0x126>
 800e3d0:	9302      	str	r3, [sp, #8]
 800e3d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	4a8e      	ldr	r2, [pc, #568]	@ (800e614 <_strtod_l+0x28c>)
 800e3dc:	9805      	ldr	r0, [sp, #20]
 800e3de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e3e0:	a919      	add	r1, sp, #100	@ 0x64
 800e3e2:	f001 fb0b 	bl	800f9fc <__gethex>
 800e3e6:	f010 060f 	ands.w	r6, r0, #15
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	d005      	beq.n	800e3fa <_strtod_l+0x72>
 800e3ee:	2e06      	cmp	r6, #6
 800e3f0:	d128      	bne.n	800e444 <_strtod_l+0xbc>
 800e3f2:	3501      	adds	r5, #1
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 858e 	bne.w	800ef1e <_strtod_l+0xb96>
 800e402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e404:	b1cb      	cbz	r3, 800e43a <_strtod_l+0xb2>
 800e406:	4652      	mov	r2, sl
 800e408:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e40c:	ec43 2b10 	vmov	d0, r2, r3
 800e410:	b01f      	add	sp, #124	@ 0x7c
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	2920      	cmp	r1, #32
 800e418:	d1ce      	bne.n	800e3b8 <_strtod_l+0x30>
 800e41a:	3201      	adds	r2, #1
 800e41c:	e7c1      	b.n	800e3a2 <_strtod_l+0x1a>
 800e41e:	292d      	cmp	r1, #45	@ 0x2d
 800e420:	d1ca      	bne.n	800e3b8 <_strtod_l+0x30>
 800e422:	2101      	movs	r1, #1
 800e424:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e426:	1c51      	adds	r1, r2, #1
 800e428:	9119      	str	r1, [sp, #100]	@ 0x64
 800e42a:	7852      	ldrb	r2, [r2, #1]
 800e42c:	2a00      	cmp	r2, #0
 800e42e:	d1c5      	bne.n	800e3bc <_strtod_l+0x34>
 800e430:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e432:	9419      	str	r4, [sp, #100]	@ 0x64
 800e434:	2b00      	cmp	r3, #0
 800e436:	f040 8570 	bne.w	800ef1a <_strtod_l+0xb92>
 800e43a:	4652      	mov	r2, sl
 800e43c:	465b      	mov	r3, fp
 800e43e:	e7e5      	b.n	800e40c <_strtod_l+0x84>
 800e440:	2100      	movs	r1, #0
 800e442:	e7ef      	b.n	800e424 <_strtod_l+0x9c>
 800e444:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e446:	b13a      	cbz	r2, 800e458 <_strtod_l+0xd0>
 800e448:	2135      	movs	r1, #53	@ 0x35
 800e44a:	a81c      	add	r0, sp, #112	@ 0x70
 800e44c:	f002 fade 	bl	8010a0c <__copybits>
 800e450:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e452:	9805      	ldr	r0, [sp, #20]
 800e454:	f001 feac 	bl	80101b0 <_Bfree>
 800e458:	3e01      	subs	r6, #1
 800e45a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e45c:	2e04      	cmp	r6, #4
 800e45e:	d806      	bhi.n	800e46e <_strtod_l+0xe6>
 800e460:	e8df f006 	tbb	[pc, r6]
 800e464:	201d0314 	.word	0x201d0314
 800e468:	14          	.byte	0x14
 800e469:	00          	.byte	0x00
 800e46a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e46e:	05e1      	lsls	r1, r4, #23
 800e470:	bf48      	it	mi
 800e472:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e476:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e47a:	0d1b      	lsrs	r3, r3, #20
 800e47c:	051b      	lsls	r3, r3, #20
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1bb      	bne.n	800e3fa <_strtod_l+0x72>
 800e482:	f001 f99f 	bl	800f7c4 <__errno>
 800e486:	2322      	movs	r3, #34	@ 0x22
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	e7b6      	b.n	800e3fa <_strtod_l+0x72>
 800e48c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e490:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e494:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e498:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e49c:	e7e7      	b.n	800e46e <_strtod_l+0xe6>
 800e49e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e61c <_strtod_l+0x294>
 800e4a2:	e7e4      	b.n	800e46e <_strtod_l+0xe6>
 800e4a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e4a8:	f04f 3aff 	mov.w	sl, #4294967295
 800e4ac:	e7df      	b.n	800e46e <_strtod_l+0xe6>
 800e4ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e4b4:	785b      	ldrb	r3, [r3, #1]
 800e4b6:	2b30      	cmp	r3, #48	@ 0x30
 800e4b8:	d0f9      	beq.n	800e4ae <_strtod_l+0x126>
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d09d      	beq.n	800e3fa <_strtod_l+0x72>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	9308      	str	r3, [sp, #32]
 800e4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4cc:	461f      	mov	r7, r3
 800e4ce:	220a      	movs	r2, #10
 800e4d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e4d2:	7805      	ldrb	r5, [r0, #0]
 800e4d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e4d8:	b2d9      	uxtb	r1, r3
 800e4da:	2909      	cmp	r1, #9
 800e4dc:	d928      	bls.n	800e530 <_strtod_l+0x1a8>
 800e4de:	494e      	ldr	r1, [pc, #312]	@ (800e618 <_strtod_l+0x290>)
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	f001 f8a7 	bl	800f634 <strncmp>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d032      	beq.n	800e550 <_strtod_l+0x1c8>
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	462a      	mov	r2, r5
 800e4ee:	4681      	mov	r9, r0
 800e4f0:	463d      	mov	r5, r7
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2a65      	cmp	r2, #101	@ 0x65
 800e4f6:	d001      	beq.n	800e4fc <_strtod_l+0x174>
 800e4f8:	2a45      	cmp	r2, #69	@ 0x45
 800e4fa:	d114      	bne.n	800e526 <_strtod_l+0x19e>
 800e4fc:	b91d      	cbnz	r5, 800e506 <_strtod_l+0x17e>
 800e4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e500:	4302      	orrs	r2, r0
 800e502:	d095      	beq.n	800e430 <_strtod_l+0xa8>
 800e504:	2500      	movs	r5, #0
 800e506:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e508:	1c62      	adds	r2, r4, #1
 800e50a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e50c:	7862      	ldrb	r2, [r4, #1]
 800e50e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e510:	d077      	beq.n	800e602 <_strtod_l+0x27a>
 800e512:	2a2d      	cmp	r2, #45	@ 0x2d
 800e514:	d07b      	beq.n	800e60e <_strtod_l+0x286>
 800e516:	f04f 0c00 	mov.w	ip, #0
 800e51a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e51e:	2909      	cmp	r1, #9
 800e520:	f240 8082 	bls.w	800e628 <_strtod_l+0x2a0>
 800e524:	9419      	str	r4, [sp, #100]	@ 0x64
 800e526:	f04f 0800 	mov.w	r8, #0
 800e52a:	e0a2      	b.n	800e672 <_strtod_l+0x2ea>
 800e52c:	2300      	movs	r3, #0
 800e52e:	e7c7      	b.n	800e4c0 <_strtod_l+0x138>
 800e530:	2f08      	cmp	r7, #8
 800e532:	bfd5      	itete	le
 800e534:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e536:	9908      	ldrgt	r1, [sp, #32]
 800e538:	fb02 3301 	mlale	r3, r2, r1, r3
 800e53c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e540:	f100 0001 	add.w	r0, r0, #1
 800e544:	bfd4      	ite	le
 800e546:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e548:	9308      	strgt	r3, [sp, #32]
 800e54a:	3701      	adds	r7, #1
 800e54c:	9019      	str	r0, [sp, #100]	@ 0x64
 800e54e:	e7bf      	b.n	800e4d0 <_strtod_l+0x148>
 800e550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	9219      	str	r2, [sp, #100]	@ 0x64
 800e556:	785a      	ldrb	r2, [r3, #1]
 800e558:	b37f      	cbz	r7, 800e5ba <_strtod_l+0x232>
 800e55a:	4681      	mov	r9, r0
 800e55c:	463d      	mov	r5, r7
 800e55e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e562:	2b09      	cmp	r3, #9
 800e564:	d912      	bls.n	800e58c <_strtod_l+0x204>
 800e566:	2301      	movs	r3, #1
 800e568:	e7c4      	b.n	800e4f4 <_strtod_l+0x16c>
 800e56a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e570:	785a      	ldrb	r2, [r3, #1]
 800e572:	3001      	adds	r0, #1
 800e574:	2a30      	cmp	r2, #48	@ 0x30
 800e576:	d0f8      	beq.n	800e56a <_strtod_l+0x1e2>
 800e578:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e57c:	2b08      	cmp	r3, #8
 800e57e:	f200 84d3 	bhi.w	800ef28 <_strtod_l+0xba0>
 800e582:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e584:	930c      	str	r3, [sp, #48]	@ 0x30
 800e586:	4681      	mov	r9, r0
 800e588:	2000      	movs	r0, #0
 800e58a:	4605      	mov	r5, r0
 800e58c:	3a30      	subs	r2, #48	@ 0x30
 800e58e:	f100 0301 	add.w	r3, r0, #1
 800e592:	d02a      	beq.n	800e5ea <_strtod_l+0x262>
 800e594:	4499      	add	r9, r3
 800e596:	eb00 0c05 	add.w	ip, r0, r5
 800e59a:	462b      	mov	r3, r5
 800e59c:	210a      	movs	r1, #10
 800e59e:	4563      	cmp	r3, ip
 800e5a0:	d10d      	bne.n	800e5be <_strtod_l+0x236>
 800e5a2:	1c69      	adds	r1, r5, #1
 800e5a4:	4401      	add	r1, r0
 800e5a6:	4428      	add	r0, r5
 800e5a8:	2808      	cmp	r0, #8
 800e5aa:	dc16      	bgt.n	800e5da <_strtod_l+0x252>
 800e5ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e5ae:	230a      	movs	r3, #10
 800e5b0:	fb03 2300 	mla	r3, r3, r0, r2
 800e5b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e018      	b.n	800e5ec <_strtod_l+0x264>
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	e7da      	b.n	800e574 <_strtod_l+0x1ec>
 800e5be:	2b08      	cmp	r3, #8
 800e5c0:	f103 0301 	add.w	r3, r3, #1
 800e5c4:	dc03      	bgt.n	800e5ce <_strtod_l+0x246>
 800e5c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e5c8:	434e      	muls	r6, r1
 800e5ca:	960a      	str	r6, [sp, #40]	@ 0x28
 800e5cc:	e7e7      	b.n	800e59e <_strtod_l+0x216>
 800e5ce:	2b10      	cmp	r3, #16
 800e5d0:	bfde      	ittt	le
 800e5d2:	9e08      	ldrle	r6, [sp, #32]
 800e5d4:	434e      	mulle	r6, r1
 800e5d6:	9608      	strle	r6, [sp, #32]
 800e5d8:	e7e1      	b.n	800e59e <_strtod_l+0x216>
 800e5da:	280f      	cmp	r0, #15
 800e5dc:	dceb      	bgt.n	800e5b6 <_strtod_l+0x22e>
 800e5de:	9808      	ldr	r0, [sp, #32]
 800e5e0:	230a      	movs	r3, #10
 800e5e2:	fb03 2300 	mla	r3, r3, r0, r2
 800e5e6:	9308      	str	r3, [sp, #32]
 800e5e8:	e7e5      	b.n	800e5b6 <_strtod_l+0x22e>
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e5ee:	1c50      	adds	r0, r2, #1
 800e5f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e5f2:	7852      	ldrb	r2, [r2, #1]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	460d      	mov	r5, r1
 800e5f8:	e7b1      	b.n	800e55e <_strtod_l+0x1d6>
 800e5fa:	f04f 0900 	mov.w	r9, #0
 800e5fe:	2301      	movs	r3, #1
 800e600:	e77d      	b.n	800e4fe <_strtod_l+0x176>
 800e602:	f04f 0c00 	mov.w	ip, #0
 800e606:	1ca2      	adds	r2, r4, #2
 800e608:	9219      	str	r2, [sp, #100]	@ 0x64
 800e60a:	78a2      	ldrb	r2, [r4, #2]
 800e60c:	e785      	b.n	800e51a <_strtod_l+0x192>
 800e60e:	f04f 0c01 	mov.w	ip, #1
 800e612:	e7f8      	b.n	800e606 <_strtod_l+0x27e>
 800e614:	080120fc 	.word	0x080120fc
 800e618:	080120d8 	.word	0x080120d8
 800e61c:	7ff00000 	.word	0x7ff00000
 800e620:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e622:	1c51      	adds	r1, r2, #1
 800e624:	9119      	str	r1, [sp, #100]	@ 0x64
 800e626:	7852      	ldrb	r2, [r2, #1]
 800e628:	2a30      	cmp	r2, #48	@ 0x30
 800e62a:	d0f9      	beq.n	800e620 <_strtod_l+0x298>
 800e62c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e630:	2908      	cmp	r1, #8
 800e632:	f63f af78 	bhi.w	800e526 <_strtod_l+0x19e>
 800e636:	3a30      	subs	r2, #48	@ 0x30
 800e638:	920e      	str	r2, [sp, #56]	@ 0x38
 800e63a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e63c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e63e:	f04f 080a 	mov.w	r8, #10
 800e642:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e644:	1c56      	adds	r6, r2, #1
 800e646:	9619      	str	r6, [sp, #100]	@ 0x64
 800e648:	7852      	ldrb	r2, [r2, #1]
 800e64a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e64e:	f1be 0f09 	cmp.w	lr, #9
 800e652:	d939      	bls.n	800e6c8 <_strtod_l+0x340>
 800e654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e656:	1a76      	subs	r6, r6, r1
 800e658:	2e08      	cmp	r6, #8
 800e65a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e65e:	dc03      	bgt.n	800e668 <_strtod_l+0x2e0>
 800e660:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e662:	4588      	cmp	r8, r1
 800e664:	bfa8      	it	ge
 800e666:	4688      	movge	r8, r1
 800e668:	f1bc 0f00 	cmp.w	ip, #0
 800e66c:	d001      	beq.n	800e672 <_strtod_l+0x2ea>
 800e66e:	f1c8 0800 	rsb	r8, r8, #0
 800e672:	2d00      	cmp	r5, #0
 800e674:	d14e      	bne.n	800e714 <_strtod_l+0x38c>
 800e676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e678:	4308      	orrs	r0, r1
 800e67a:	f47f aebe 	bne.w	800e3fa <_strtod_l+0x72>
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f47f aed6 	bne.w	800e430 <_strtod_l+0xa8>
 800e684:	2a69      	cmp	r2, #105	@ 0x69
 800e686:	d028      	beq.n	800e6da <_strtod_l+0x352>
 800e688:	dc25      	bgt.n	800e6d6 <_strtod_l+0x34e>
 800e68a:	2a49      	cmp	r2, #73	@ 0x49
 800e68c:	d025      	beq.n	800e6da <_strtod_l+0x352>
 800e68e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e690:	f47f aece 	bne.w	800e430 <_strtod_l+0xa8>
 800e694:	499b      	ldr	r1, [pc, #620]	@ (800e904 <_strtod_l+0x57c>)
 800e696:	a819      	add	r0, sp, #100	@ 0x64
 800e698:	f001 fbd2 	bl	800fe40 <__match>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f43f aec7 	beq.w	800e430 <_strtod_l+0xa8>
 800e6a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	2b28      	cmp	r3, #40	@ 0x28
 800e6a8:	d12e      	bne.n	800e708 <_strtod_l+0x380>
 800e6aa:	4997      	ldr	r1, [pc, #604]	@ (800e908 <_strtod_l+0x580>)
 800e6ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800e6ae:	a819      	add	r0, sp, #100	@ 0x64
 800e6b0:	f001 fbda 	bl	800fe68 <__hexnan>
 800e6b4:	2805      	cmp	r0, #5
 800e6b6:	d127      	bne.n	800e708 <_strtod_l+0x380>
 800e6b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e6be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e6c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e6c6:	e698      	b.n	800e3fa <_strtod_l+0x72>
 800e6c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e6ca:	fb08 2101 	mla	r1, r8, r1, r2
 800e6ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e6d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6d4:	e7b5      	b.n	800e642 <_strtod_l+0x2ba>
 800e6d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800e6d8:	e7da      	b.n	800e690 <_strtod_l+0x308>
 800e6da:	498c      	ldr	r1, [pc, #560]	@ (800e90c <_strtod_l+0x584>)
 800e6dc:	a819      	add	r0, sp, #100	@ 0x64
 800e6de:	f001 fbaf 	bl	800fe40 <__match>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	f43f aea4 	beq.w	800e430 <_strtod_l+0xa8>
 800e6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6ea:	4989      	ldr	r1, [pc, #548]	@ (800e910 <_strtod_l+0x588>)
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	a819      	add	r0, sp, #100	@ 0x64
 800e6f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e6f2:	f001 fba5 	bl	800fe40 <__match>
 800e6f6:	b910      	cbnz	r0, 800e6fe <_strtod_l+0x376>
 800e6f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800e6fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e920 <_strtod_l+0x598>
 800e702:	f04f 0a00 	mov.w	sl, #0
 800e706:	e678      	b.n	800e3fa <_strtod_l+0x72>
 800e708:	4882      	ldr	r0, [pc, #520]	@ (800e914 <_strtod_l+0x58c>)
 800e70a:	f001 f899 	bl	800f840 <nan>
 800e70e:	ec5b ab10 	vmov	sl, fp, d0
 800e712:	e672      	b.n	800e3fa <_strtod_l+0x72>
 800e714:	eba8 0309 	sub.w	r3, r8, r9
 800e718:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e71a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71c:	2f00      	cmp	r7, #0
 800e71e:	bf08      	it	eq
 800e720:	462f      	moveq	r7, r5
 800e722:	2d10      	cmp	r5, #16
 800e724:	462c      	mov	r4, r5
 800e726:	bfa8      	it	ge
 800e728:	2410      	movge	r4, #16
 800e72a:	f7f1 fef3 	bl	8000514 <__aeabi_ui2d>
 800e72e:	2d09      	cmp	r5, #9
 800e730:	4682      	mov	sl, r0
 800e732:	468b      	mov	fp, r1
 800e734:	dc13      	bgt.n	800e75e <_strtod_l+0x3d6>
 800e736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f43f ae5e 	beq.w	800e3fa <_strtod_l+0x72>
 800e73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e740:	dd78      	ble.n	800e834 <_strtod_l+0x4ac>
 800e742:	2b16      	cmp	r3, #22
 800e744:	dc5f      	bgt.n	800e806 <_strtod_l+0x47e>
 800e746:	4974      	ldr	r1, [pc, #464]	@ (800e918 <_strtod_l+0x590>)
 800e748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e750:	4652      	mov	r2, sl
 800e752:	465b      	mov	r3, fp
 800e754:	f7f1 ff58 	bl	8000608 <__aeabi_dmul>
 800e758:	4682      	mov	sl, r0
 800e75a:	468b      	mov	fp, r1
 800e75c:	e64d      	b.n	800e3fa <_strtod_l+0x72>
 800e75e:	4b6e      	ldr	r3, [pc, #440]	@ (800e918 <_strtod_l+0x590>)
 800e760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e764:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e768:	f7f1 ff4e 	bl	8000608 <__aeabi_dmul>
 800e76c:	4682      	mov	sl, r0
 800e76e:	9808      	ldr	r0, [sp, #32]
 800e770:	468b      	mov	fp, r1
 800e772:	f7f1 fecf 	bl	8000514 <__aeabi_ui2d>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4650      	mov	r0, sl
 800e77c:	4659      	mov	r1, fp
 800e77e:	f7f1 fd8d 	bl	800029c <__adddf3>
 800e782:	2d0f      	cmp	r5, #15
 800e784:	4682      	mov	sl, r0
 800e786:	468b      	mov	fp, r1
 800e788:	ddd5      	ble.n	800e736 <_strtod_l+0x3ae>
 800e78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e78c:	1b2c      	subs	r4, r5, r4
 800e78e:	441c      	add	r4, r3
 800e790:	2c00      	cmp	r4, #0
 800e792:	f340 8096 	ble.w	800e8c2 <_strtod_l+0x53a>
 800e796:	f014 030f 	ands.w	r3, r4, #15
 800e79a:	d00a      	beq.n	800e7b2 <_strtod_l+0x42a>
 800e79c:	495e      	ldr	r1, [pc, #376]	@ (800e918 <_strtod_l+0x590>)
 800e79e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7a2:	4652      	mov	r2, sl
 800e7a4:	465b      	mov	r3, fp
 800e7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7aa:	f7f1 ff2d 	bl	8000608 <__aeabi_dmul>
 800e7ae:	4682      	mov	sl, r0
 800e7b0:	468b      	mov	fp, r1
 800e7b2:	f034 040f 	bics.w	r4, r4, #15
 800e7b6:	d073      	beq.n	800e8a0 <_strtod_l+0x518>
 800e7b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e7bc:	dd48      	ble.n	800e850 <_strtod_l+0x4c8>
 800e7be:	2400      	movs	r4, #0
 800e7c0:	46a0      	mov	r8, r4
 800e7c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e7c4:	46a1      	mov	r9, r4
 800e7c6:	9a05      	ldr	r2, [sp, #20]
 800e7c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e920 <_strtod_l+0x598>
 800e7cc:	2322      	movs	r3, #34	@ 0x22
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	f04f 0a00 	mov.w	sl, #0
 800e7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f43f ae0f 	beq.w	800e3fa <_strtod_l+0x72>
 800e7dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7de:	9805      	ldr	r0, [sp, #20]
 800e7e0:	f001 fce6 	bl	80101b0 <_Bfree>
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	f001 fce2 	bl	80101b0 <_Bfree>
 800e7ec:	9805      	ldr	r0, [sp, #20]
 800e7ee:	4641      	mov	r1, r8
 800e7f0:	f001 fcde 	bl	80101b0 <_Bfree>
 800e7f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e7f6:	9805      	ldr	r0, [sp, #20]
 800e7f8:	f001 fcda 	bl	80101b0 <_Bfree>
 800e7fc:	9805      	ldr	r0, [sp, #20]
 800e7fe:	4621      	mov	r1, r4
 800e800:	f001 fcd6 	bl	80101b0 <_Bfree>
 800e804:	e5f9      	b.n	800e3fa <_strtod_l+0x72>
 800e806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e808:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e80c:	4293      	cmp	r3, r2
 800e80e:	dbbc      	blt.n	800e78a <_strtod_l+0x402>
 800e810:	4c41      	ldr	r4, [pc, #260]	@ (800e918 <_strtod_l+0x590>)
 800e812:	f1c5 050f 	rsb	r5, r5, #15
 800e816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e81a:	4652      	mov	r2, sl
 800e81c:	465b      	mov	r3, fp
 800e81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e822:	f7f1 fef1 	bl	8000608 <__aeabi_dmul>
 800e826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e828:	1b5d      	subs	r5, r3, r5
 800e82a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e82e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e832:	e78f      	b.n	800e754 <_strtod_l+0x3cc>
 800e834:	3316      	adds	r3, #22
 800e836:	dba8      	blt.n	800e78a <_strtod_l+0x402>
 800e838:	4b37      	ldr	r3, [pc, #220]	@ (800e918 <_strtod_l+0x590>)
 800e83a:	eba9 0808 	sub.w	r8, r9, r8
 800e83e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e842:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e846:	4650      	mov	r0, sl
 800e848:	4659      	mov	r1, fp
 800e84a:	f7f2 f807 	bl	800085c <__aeabi_ddiv>
 800e84e:	e783      	b.n	800e758 <_strtod_l+0x3d0>
 800e850:	4b32      	ldr	r3, [pc, #200]	@ (800e91c <_strtod_l+0x594>)
 800e852:	9308      	str	r3, [sp, #32]
 800e854:	2300      	movs	r3, #0
 800e856:	1124      	asrs	r4, r4, #4
 800e858:	4650      	mov	r0, sl
 800e85a:	4659      	mov	r1, fp
 800e85c:	461e      	mov	r6, r3
 800e85e:	2c01      	cmp	r4, #1
 800e860:	dc21      	bgt.n	800e8a6 <_strtod_l+0x51e>
 800e862:	b10b      	cbz	r3, 800e868 <_strtod_l+0x4e0>
 800e864:	4682      	mov	sl, r0
 800e866:	468b      	mov	fp, r1
 800e868:	492c      	ldr	r1, [pc, #176]	@ (800e91c <_strtod_l+0x594>)
 800e86a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e86e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e872:	4652      	mov	r2, sl
 800e874:	465b      	mov	r3, fp
 800e876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e87a:	f7f1 fec5 	bl	8000608 <__aeabi_dmul>
 800e87e:	4b28      	ldr	r3, [pc, #160]	@ (800e920 <_strtod_l+0x598>)
 800e880:	460a      	mov	r2, r1
 800e882:	400b      	ands	r3, r1
 800e884:	4927      	ldr	r1, [pc, #156]	@ (800e924 <_strtod_l+0x59c>)
 800e886:	428b      	cmp	r3, r1
 800e888:	4682      	mov	sl, r0
 800e88a:	d898      	bhi.n	800e7be <_strtod_l+0x436>
 800e88c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e890:	428b      	cmp	r3, r1
 800e892:	bf86      	itte	hi
 800e894:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e928 <_strtod_l+0x5a0>
 800e898:	f04f 3aff 	movhi.w	sl, #4294967295
 800e89c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	9308      	str	r3, [sp, #32]
 800e8a4:	e07a      	b.n	800e99c <_strtod_l+0x614>
 800e8a6:	07e2      	lsls	r2, r4, #31
 800e8a8:	d505      	bpl.n	800e8b6 <_strtod_l+0x52e>
 800e8aa:	9b08      	ldr	r3, [sp, #32]
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 feaa 	bl	8000608 <__aeabi_dmul>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	9a08      	ldr	r2, [sp, #32]
 800e8b8:	3208      	adds	r2, #8
 800e8ba:	3601      	adds	r6, #1
 800e8bc:	1064      	asrs	r4, r4, #1
 800e8be:	9208      	str	r2, [sp, #32]
 800e8c0:	e7cd      	b.n	800e85e <_strtod_l+0x4d6>
 800e8c2:	d0ed      	beq.n	800e8a0 <_strtod_l+0x518>
 800e8c4:	4264      	negs	r4, r4
 800e8c6:	f014 020f 	ands.w	r2, r4, #15
 800e8ca:	d00a      	beq.n	800e8e2 <_strtod_l+0x55a>
 800e8cc:	4b12      	ldr	r3, [pc, #72]	@ (800e918 <_strtod_l+0x590>)
 800e8ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	4659      	mov	r1, fp
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	f7f1 ffbf 	bl	800085c <__aeabi_ddiv>
 800e8de:	4682      	mov	sl, r0
 800e8e0:	468b      	mov	fp, r1
 800e8e2:	1124      	asrs	r4, r4, #4
 800e8e4:	d0dc      	beq.n	800e8a0 <_strtod_l+0x518>
 800e8e6:	2c1f      	cmp	r4, #31
 800e8e8:	dd20      	ble.n	800e92c <_strtod_l+0x5a4>
 800e8ea:	2400      	movs	r4, #0
 800e8ec:	46a0      	mov	r8, r4
 800e8ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800e8f0:	46a1      	mov	r9, r4
 800e8f2:	9a05      	ldr	r2, [sp, #20]
 800e8f4:	2322      	movs	r3, #34	@ 0x22
 800e8f6:	f04f 0a00 	mov.w	sl, #0
 800e8fa:	f04f 0b00 	mov.w	fp, #0
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	e768      	b.n	800e7d4 <_strtod_l+0x44c>
 800e902:	bf00      	nop
 800e904:	080120e3 	.word	0x080120e3
 800e908:	080120e8 	.word	0x080120e8
 800e90c:	080120da 	.word	0x080120da
 800e910:	080120dd 	.word	0x080120dd
 800e914:	080122ed 	.word	0x080122ed
 800e918:	080123f0 	.word	0x080123f0
 800e91c:	080123c8 	.word	0x080123c8
 800e920:	7ff00000 	.word	0x7ff00000
 800e924:	7ca00000 	.word	0x7ca00000
 800e928:	7fefffff 	.word	0x7fefffff
 800e92c:	f014 0310 	ands.w	r3, r4, #16
 800e930:	bf18      	it	ne
 800e932:	236a      	movne	r3, #106	@ 0x6a
 800e934:	4ea9      	ldr	r6, [pc, #676]	@ (800ebdc <_strtod_l+0x854>)
 800e936:	9308      	str	r3, [sp, #32]
 800e938:	4650      	mov	r0, sl
 800e93a:	4659      	mov	r1, fp
 800e93c:	2300      	movs	r3, #0
 800e93e:	07e2      	lsls	r2, r4, #31
 800e940:	d504      	bpl.n	800e94c <_strtod_l+0x5c4>
 800e942:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e946:	f7f1 fe5f 	bl	8000608 <__aeabi_dmul>
 800e94a:	2301      	movs	r3, #1
 800e94c:	1064      	asrs	r4, r4, #1
 800e94e:	f106 0608 	add.w	r6, r6, #8
 800e952:	d1f4      	bne.n	800e93e <_strtod_l+0x5b6>
 800e954:	b10b      	cbz	r3, 800e95a <_strtod_l+0x5d2>
 800e956:	4682      	mov	sl, r0
 800e958:	468b      	mov	fp, r1
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	b1b3      	cbz	r3, 800e98c <_strtod_l+0x604>
 800e95e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e962:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e966:	2b00      	cmp	r3, #0
 800e968:	4659      	mov	r1, fp
 800e96a:	dd0f      	ble.n	800e98c <_strtod_l+0x604>
 800e96c:	2b1f      	cmp	r3, #31
 800e96e:	dd55      	ble.n	800ea1c <_strtod_l+0x694>
 800e970:	2b34      	cmp	r3, #52	@ 0x34
 800e972:	bfde      	ittt	le
 800e974:	f04f 33ff 	movle.w	r3, #4294967295
 800e978:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e97c:	4093      	lslle	r3, r2
 800e97e:	f04f 0a00 	mov.w	sl, #0
 800e982:	bfcc      	ite	gt
 800e984:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e988:	ea03 0b01 	andle.w	fp, r3, r1
 800e98c:	2200      	movs	r2, #0
 800e98e:	2300      	movs	r3, #0
 800e990:	4650      	mov	r0, sl
 800e992:	4659      	mov	r1, fp
 800e994:	f7f2 f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d1a6      	bne.n	800e8ea <_strtod_l+0x562>
 800e99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e9a2:	9805      	ldr	r0, [sp, #20]
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	463a      	mov	r2, r7
 800e9a8:	f001 fc6a 	bl	8010280 <__s2b>
 800e9ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	f43f af05 	beq.w	800e7be <_strtod_l+0x436>
 800e9b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	eba9 0308 	sub.w	r3, r9, r8
 800e9bc:	bfa8      	it	ge
 800e9be:	2300      	movge	r3, #0
 800e9c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800e9c2:	2400      	movs	r4, #0
 800e9c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e9c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800e9ca:	46a0      	mov	r8, r4
 800e9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ce:	9805      	ldr	r0, [sp, #20]
 800e9d0:	6859      	ldr	r1, [r3, #4]
 800e9d2:	f001 fbad 	bl	8010130 <_Balloc>
 800e9d6:	4681      	mov	r9, r0
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f43f aef4 	beq.w	800e7c6 <_strtod_l+0x43e>
 800e9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e0:	691a      	ldr	r2, [r3, #16]
 800e9e2:	3202      	adds	r2, #2
 800e9e4:	f103 010c 	add.w	r1, r3, #12
 800e9e8:	0092      	lsls	r2, r2, #2
 800e9ea:	300c      	adds	r0, #12
 800e9ec:	f000 ff17 	bl	800f81e <memcpy>
 800e9f0:	ec4b ab10 	vmov	d0, sl, fp
 800e9f4:	9805      	ldr	r0, [sp, #20]
 800e9f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800e9f8:	a91b      	add	r1, sp, #108	@ 0x6c
 800e9fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e9fe:	f001 ff7b 	bl	80108f8 <__d2b>
 800ea02:	901a      	str	r0, [sp, #104]	@ 0x68
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f43f aede 	beq.w	800e7c6 <_strtod_l+0x43e>
 800ea0a:	9805      	ldr	r0, [sp, #20]
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	f001 fccd 	bl	80103ac <__i2b>
 800ea12:	4680      	mov	r8, r0
 800ea14:	b948      	cbnz	r0, 800ea2a <_strtod_l+0x6a2>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	e6d4      	b.n	800e7c6 <_strtod_l+0x43e>
 800ea1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea20:	fa02 f303 	lsl.w	r3, r2, r3
 800ea24:	ea03 0a0a 	and.w	sl, r3, sl
 800ea28:	e7b0      	b.n	800e98c <_strtod_l+0x604>
 800ea2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ea2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	bfab      	itete	ge
 800ea32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ea34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ea36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ea38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ea3a:	bfac      	ite	ge
 800ea3c:	18ef      	addge	r7, r5, r3
 800ea3e:	1b5e      	sublt	r6, r3, r5
 800ea40:	9b08      	ldr	r3, [sp, #32]
 800ea42:	1aed      	subs	r5, r5, r3
 800ea44:	4415      	add	r5, r2
 800ea46:	4b66      	ldr	r3, [pc, #408]	@ (800ebe0 <_strtod_l+0x858>)
 800ea48:	3d01      	subs	r5, #1
 800ea4a:	429d      	cmp	r5, r3
 800ea4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ea50:	da50      	bge.n	800eaf4 <_strtod_l+0x76c>
 800ea52:	1b5b      	subs	r3, r3, r5
 800ea54:	2b1f      	cmp	r3, #31
 800ea56:	eba2 0203 	sub.w	r2, r2, r3
 800ea5a:	f04f 0101 	mov.w	r1, #1
 800ea5e:	dc3d      	bgt.n	800eadc <_strtod_l+0x754>
 800ea60:	fa01 f303 	lsl.w	r3, r1, r3
 800ea64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea66:	2300      	movs	r3, #0
 800ea68:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea6a:	18bd      	adds	r5, r7, r2
 800ea6c:	9b08      	ldr	r3, [sp, #32]
 800ea6e:	42af      	cmp	r7, r5
 800ea70:	4416      	add	r6, r2
 800ea72:	441e      	add	r6, r3
 800ea74:	463b      	mov	r3, r7
 800ea76:	bfa8      	it	ge
 800ea78:	462b      	movge	r3, r5
 800ea7a:	42b3      	cmp	r3, r6
 800ea7c:	bfa8      	it	ge
 800ea7e:	4633      	movge	r3, r6
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bfc2      	ittt	gt
 800ea84:	1aed      	subgt	r5, r5, r3
 800ea86:	1af6      	subgt	r6, r6, r3
 800ea88:	1aff      	subgt	r7, r7, r3
 800ea8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	dd16      	ble.n	800eabe <_strtod_l+0x736>
 800ea90:	4641      	mov	r1, r8
 800ea92:	9805      	ldr	r0, [sp, #20]
 800ea94:	461a      	mov	r2, r3
 800ea96:	f001 fd49 	bl	801052c <__pow5mult>
 800ea9a:	4680      	mov	r8, r0
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d0ba      	beq.n	800ea16 <_strtod_l+0x68e>
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	f001 fc97 	bl	80103d8 <__multiply>
 800eaaa:	900e      	str	r0, [sp, #56]	@ 0x38
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f ae8a 	beq.w	800e7c6 <_strtod_l+0x43e>
 800eab2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eab4:	9805      	ldr	r0, [sp, #20]
 800eab6:	f001 fb7b 	bl	80101b0 <_Bfree>
 800eaba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eabc:	931a      	str	r3, [sp, #104]	@ 0x68
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	dc1d      	bgt.n	800eafe <_strtod_l+0x776>
 800eac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dd23      	ble.n	800eb10 <_strtod_l+0x788>
 800eac8:	4649      	mov	r1, r9
 800eaca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eacc:	9805      	ldr	r0, [sp, #20]
 800eace:	f001 fd2d 	bl	801052c <__pow5mult>
 800ead2:	4681      	mov	r9, r0
 800ead4:	b9e0      	cbnz	r0, 800eb10 <_strtod_l+0x788>
 800ead6:	f04f 0900 	mov.w	r9, #0
 800eada:	e674      	b.n	800e7c6 <_strtod_l+0x43e>
 800eadc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eae0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eae4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eae8:	35e2      	adds	r5, #226	@ 0xe2
 800eaea:	fa01 f305 	lsl.w	r3, r1, r5
 800eaee:	9310      	str	r3, [sp, #64]	@ 0x40
 800eaf0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eaf2:	e7ba      	b.n	800ea6a <_strtod_l+0x6e2>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eaf8:	2301      	movs	r3, #1
 800eafa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eafc:	e7b5      	b.n	800ea6a <_strtod_l+0x6e2>
 800eafe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb00:	9805      	ldr	r0, [sp, #20]
 800eb02:	462a      	mov	r2, r5
 800eb04:	f001 fd6c 	bl	80105e0 <__lshift>
 800eb08:	901a      	str	r0, [sp, #104]	@ 0x68
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d1d9      	bne.n	800eac2 <_strtod_l+0x73a>
 800eb0e:	e65a      	b.n	800e7c6 <_strtod_l+0x43e>
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	dd07      	ble.n	800eb24 <_strtod_l+0x79c>
 800eb14:	4649      	mov	r1, r9
 800eb16:	9805      	ldr	r0, [sp, #20]
 800eb18:	4632      	mov	r2, r6
 800eb1a:	f001 fd61 	bl	80105e0 <__lshift>
 800eb1e:	4681      	mov	r9, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d0d8      	beq.n	800ead6 <_strtod_l+0x74e>
 800eb24:	2f00      	cmp	r7, #0
 800eb26:	dd08      	ble.n	800eb3a <_strtod_l+0x7b2>
 800eb28:	4641      	mov	r1, r8
 800eb2a:	9805      	ldr	r0, [sp, #20]
 800eb2c:	463a      	mov	r2, r7
 800eb2e:	f001 fd57 	bl	80105e0 <__lshift>
 800eb32:	4680      	mov	r8, r0
 800eb34:	2800      	cmp	r0, #0
 800eb36:	f43f ae46 	beq.w	800e7c6 <_strtod_l+0x43e>
 800eb3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb3c:	9805      	ldr	r0, [sp, #20]
 800eb3e:	464a      	mov	r2, r9
 800eb40:	f001 fdd6 	bl	80106f0 <__mdiff>
 800eb44:	4604      	mov	r4, r0
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f43f ae3d 	beq.w	800e7c6 <_strtod_l+0x43e>
 800eb4c:	68c3      	ldr	r3, [r0, #12]
 800eb4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb50:	2300      	movs	r3, #0
 800eb52:	60c3      	str	r3, [r0, #12]
 800eb54:	4641      	mov	r1, r8
 800eb56:	f001 fdaf 	bl	80106b8 <__mcmp>
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	da46      	bge.n	800ebec <_strtod_l+0x864>
 800eb5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb60:	ea53 030a 	orrs.w	r3, r3, sl
 800eb64:	d16c      	bne.n	800ec40 <_strtod_l+0x8b8>
 800eb66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d168      	bne.n	800ec40 <_strtod_l+0x8b8>
 800eb6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb72:	0d1b      	lsrs	r3, r3, #20
 800eb74:	051b      	lsls	r3, r3, #20
 800eb76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eb7a:	d961      	bls.n	800ec40 <_strtod_l+0x8b8>
 800eb7c:	6963      	ldr	r3, [r4, #20]
 800eb7e:	b913      	cbnz	r3, 800eb86 <_strtod_l+0x7fe>
 800eb80:	6923      	ldr	r3, [r4, #16]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	dd5c      	ble.n	800ec40 <_strtod_l+0x8b8>
 800eb86:	4621      	mov	r1, r4
 800eb88:	2201      	movs	r2, #1
 800eb8a:	9805      	ldr	r0, [sp, #20]
 800eb8c:	f001 fd28 	bl	80105e0 <__lshift>
 800eb90:	4641      	mov	r1, r8
 800eb92:	4604      	mov	r4, r0
 800eb94:	f001 fd90 	bl	80106b8 <__mcmp>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	dd51      	ble.n	800ec40 <_strtod_l+0x8b8>
 800eb9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eba0:	9a08      	ldr	r2, [sp, #32]
 800eba2:	0d1b      	lsrs	r3, r3, #20
 800eba4:	051b      	lsls	r3, r3, #20
 800eba6:	2a00      	cmp	r2, #0
 800eba8:	d06b      	beq.n	800ec82 <_strtod_l+0x8fa>
 800ebaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ebae:	d868      	bhi.n	800ec82 <_strtod_l+0x8fa>
 800ebb0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ebb4:	f67f ae9d 	bls.w	800e8f2 <_strtod_l+0x56a>
 800ebb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe4 <_strtod_l+0x85c>)
 800ebba:	4650      	mov	r0, sl
 800ebbc:	4659      	mov	r1, fp
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f7f1 fd22 	bl	8000608 <__aeabi_dmul>
 800ebc4:	4b08      	ldr	r3, [pc, #32]	@ (800ebe8 <_strtod_l+0x860>)
 800ebc6:	400b      	ands	r3, r1
 800ebc8:	4682      	mov	sl, r0
 800ebca:	468b      	mov	fp, r1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f47f ae05 	bne.w	800e7dc <_strtod_l+0x454>
 800ebd2:	9a05      	ldr	r2, [sp, #20]
 800ebd4:	2322      	movs	r3, #34	@ 0x22
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	e600      	b.n	800e7dc <_strtod_l+0x454>
 800ebda:	bf00      	nop
 800ebdc:	08012110 	.word	0x08012110
 800ebe0:	fffffc02 	.word	0xfffffc02
 800ebe4:	39500000 	.word	0x39500000
 800ebe8:	7ff00000 	.word	0x7ff00000
 800ebec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ebf0:	d165      	bne.n	800ecbe <_strtod_l+0x936>
 800ebf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ebf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebf8:	b35a      	cbz	r2, 800ec52 <_strtod_l+0x8ca>
 800ebfa:	4a9f      	ldr	r2, [pc, #636]	@ (800ee78 <_strtod_l+0xaf0>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d12b      	bne.n	800ec58 <_strtod_l+0x8d0>
 800ec00:	9b08      	ldr	r3, [sp, #32]
 800ec02:	4651      	mov	r1, sl
 800ec04:	b303      	cbz	r3, 800ec48 <_strtod_l+0x8c0>
 800ec06:	4b9d      	ldr	r3, [pc, #628]	@ (800ee7c <_strtod_l+0xaf4>)
 800ec08:	465a      	mov	r2, fp
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ec10:	f04f 32ff 	mov.w	r2, #4294967295
 800ec14:	d81b      	bhi.n	800ec4e <_strtod_l+0x8c6>
 800ec16:	0d1b      	lsrs	r3, r3, #20
 800ec18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec20:	4299      	cmp	r1, r3
 800ec22:	d119      	bne.n	800ec58 <_strtod_l+0x8d0>
 800ec24:	4b96      	ldr	r3, [pc, #600]	@ (800ee80 <_strtod_l+0xaf8>)
 800ec26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d102      	bne.n	800ec32 <_strtod_l+0x8aa>
 800ec2c:	3101      	adds	r1, #1
 800ec2e:	f43f adca 	beq.w	800e7c6 <_strtod_l+0x43e>
 800ec32:	4b92      	ldr	r3, [pc, #584]	@ (800ee7c <_strtod_l+0xaf4>)
 800ec34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec36:	401a      	ands	r2, r3
 800ec38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ec3c:	f04f 0a00 	mov.w	sl, #0
 800ec40:	9b08      	ldr	r3, [sp, #32]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1b8      	bne.n	800ebb8 <_strtod_l+0x830>
 800ec46:	e5c9      	b.n	800e7dc <_strtod_l+0x454>
 800ec48:	f04f 33ff 	mov.w	r3, #4294967295
 800ec4c:	e7e8      	b.n	800ec20 <_strtod_l+0x898>
 800ec4e:	4613      	mov	r3, r2
 800ec50:	e7e6      	b.n	800ec20 <_strtod_l+0x898>
 800ec52:	ea53 030a 	orrs.w	r3, r3, sl
 800ec56:	d0a1      	beq.n	800eb9c <_strtod_l+0x814>
 800ec58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec5a:	b1db      	cbz	r3, 800ec94 <_strtod_l+0x90c>
 800ec5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec5e:	4213      	tst	r3, r2
 800ec60:	d0ee      	beq.n	800ec40 <_strtod_l+0x8b8>
 800ec62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec64:	9a08      	ldr	r2, [sp, #32]
 800ec66:	4650      	mov	r0, sl
 800ec68:	4659      	mov	r1, fp
 800ec6a:	b1bb      	cbz	r3, 800ec9c <_strtod_l+0x914>
 800ec6c:	f7ff fb6e 	bl	800e34c <sulp>
 800ec70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec74:	ec53 2b10 	vmov	r2, r3, d0
 800ec78:	f7f1 fb10 	bl	800029c <__adddf3>
 800ec7c:	4682      	mov	sl, r0
 800ec7e:	468b      	mov	fp, r1
 800ec80:	e7de      	b.n	800ec40 <_strtod_l+0x8b8>
 800ec82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ec86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ec8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ec8e:	f04f 3aff 	mov.w	sl, #4294967295
 800ec92:	e7d5      	b.n	800ec40 <_strtod_l+0x8b8>
 800ec94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec96:	ea13 0f0a 	tst.w	r3, sl
 800ec9a:	e7e1      	b.n	800ec60 <_strtod_l+0x8d8>
 800ec9c:	f7ff fb56 	bl	800e34c <sulp>
 800eca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eca4:	ec53 2b10 	vmov	r2, r3, d0
 800eca8:	f7f1 faf6 	bl	8000298 <__aeabi_dsub>
 800ecac:	2200      	movs	r2, #0
 800ecae:	2300      	movs	r3, #0
 800ecb0:	4682      	mov	sl, r0
 800ecb2:	468b      	mov	fp, r1
 800ecb4:	f7f1 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d0c1      	beq.n	800ec40 <_strtod_l+0x8b8>
 800ecbc:	e619      	b.n	800e8f2 <_strtod_l+0x56a>
 800ecbe:	4641      	mov	r1, r8
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f001 fe71 	bl	80109a8 <__ratio>
 800ecc6:	ec57 6b10 	vmov	r6, r7, d0
 800ecca:	2200      	movs	r2, #0
 800eccc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	f7f1 ff14 	bl	8000b00 <__aeabi_dcmple>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d06f      	beq.n	800edbc <_strtod_l+0xa34>
 800ecdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d17a      	bne.n	800edd8 <_strtod_l+0xa50>
 800ece2:	f1ba 0f00 	cmp.w	sl, #0
 800ece6:	d158      	bne.n	800ed9a <_strtod_l+0xa12>
 800ece8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d15a      	bne.n	800eda8 <_strtod_l+0xa20>
 800ecf2:	4b64      	ldr	r3, [pc, #400]	@ (800ee84 <_strtod_l+0xafc>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	4639      	mov	r1, r7
 800ecfa:	f7f1 fef7 	bl	8000aec <__aeabi_dcmplt>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d159      	bne.n	800edb6 <_strtod_l+0xa2e>
 800ed02:	4630      	mov	r0, r6
 800ed04:	4639      	mov	r1, r7
 800ed06:	4b60      	ldr	r3, [pc, #384]	@ (800ee88 <_strtod_l+0xb00>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f7f1 fc7d 	bl	8000608 <__aeabi_dmul>
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460f      	mov	r7, r1
 800ed12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ed16:	9606      	str	r6, [sp, #24]
 800ed18:	9307      	str	r3, [sp, #28]
 800ed1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed1e:	4d57      	ldr	r5, [pc, #348]	@ (800ee7c <_strtod_l+0xaf4>)
 800ed20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ed24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed26:	401d      	ands	r5, r3
 800ed28:	4b58      	ldr	r3, [pc, #352]	@ (800ee8c <_strtod_l+0xb04>)
 800ed2a:	429d      	cmp	r5, r3
 800ed2c:	f040 80b2 	bne.w	800ee94 <_strtod_l+0xb0c>
 800ed30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ed36:	ec4b ab10 	vmov	d0, sl, fp
 800ed3a:	f001 fd6d 	bl	8010818 <__ulp>
 800ed3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed42:	ec51 0b10 	vmov	r0, r1, d0
 800ed46:	f7f1 fc5f 	bl	8000608 <__aeabi_dmul>
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	465b      	mov	r3, fp
 800ed4e:	f7f1 faa5 	bl	800029c <__adddf3>
 800ed52:	460b      	mov	r3, r1
 800ed54:	4949      	ldr	r1, [pc, #292]	@ (800ee7c <_strtod_l+0xaf4>)
 800ed56:	4a4e      	ldr	r2, [pc, #312]	@ (800ee90 <_strtod_l+0xb08>)
 800ed58:	4019      	ands	r1, r3
 800ed5a:	4291      	cmp	r1, r2
 800ed5c:	4682      	mov	sl, r0
 800ed5e:	d942      	bls.n	800ede6 <_strtod_l+0xa5e>
 800ed60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed62:	4b47      	ldr	r3, [pc, #284]	@ (800ee80 <_strtod_l+0xaf8>)
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d103      	bne.n	800ed70 <_strtod_l+0x9e8>
 800ed68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	f43f ad2b 	beq.w	800e7c6 <_strtod_l+0x43e>
 800ed70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ee80 <_strtod_l+0xaf8>
 800ed74:	f04f 3aff 	mov.w	sl, #4294967295
 800ed78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed7a:	9805      	ldr	r0, [sp, #20]
 800ed7c:	f001 fa18 	bl	80101b0 <_Bfree>
 800ed80:	9805      	ldr	r0, [sp, #20]
 800ed82:	4649      	mov	r1, r9
 800ed84:	f001 fa14 	bl	80101b0 <_Bfree>
 800ed88:	9805      	ldr	r0, [sp, #20]
 800ed8a:	4641      	mov	r1, r8
 800ed8c:	f001 fa10 	bl	80101b0 <_Bfree>
 800ed90:	9805      	ldr	r0, [sp, #20]
 800ed92:	4621      	mov	r1, r4
 800ed94:	f001 fa0c 	bl	80101b0 <_Bfree>
 800ed98:	e618      	b.n	800e9cc <_strtod_l+0x644>
 800ed9a:	f1ba 0f01 	cmp.w	sl, #1
 800ed9e:	d103      	bne.n	800eda8 <_strtod_l+0xa20>
 800eda0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f43f ada5 	beq.w	800e8f2 <_strtod_l+0x56a>
 800eda8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ee58 <_strtod_l+0xad0>
 800edac:	4f35      	ldr	r7, [pc, #212]	@ (800ee84 <_strtod_l+0xafc>)
 800edae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800edb2:	2600      	movs	r6, #0
 800edb4:	e7b1      	b.n	800ed1a <_strtod_l+0x992>
 800edb6:	4f34      	ldr	r7, [pc, #208]	@ (800ee88 <_strtod_l+0xb00>)
 800edb8:	2600      	movs	r6, #0
 800edba:	e7aa      	b.n	800ed12 <_strtod_l+0x98a>
 800edbc:	4b32      	ldr	r3, [pc, #200]	@ (800ee88 <_strtod_l+0xb00>)
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	2200      	movs	r2, #0
 800edc4:	f7f1 fc20 	bl	8000608 <__aeabi_dmul>
 800edc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d09f      	beq.n	800ed12 <_strtod_l+0x98a>
 800edd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800edd6:	e7a0      	b.n	800ed1a <_strtod_l+0x992>
 800edd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ee60 <_strtod_l+0xad8>
 800eddc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ede0:	ec57 6b17 	vmov	r6, r7, d7
 800ede4:	e799      	b.n	800ed1a <_strtod_l+0x992>
 800ede6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800edea:	9b08      	ldr	r3, [sp, #32]
 800edec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1c1      	bne.n	800ed78 <_strtod_l+0x9f0>
 800edf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edf8:	0d1b      	lsrs	r3, r3, #20
 800edfa:	051b      	lsls	r3, r3, #20
 800edfc:	429d      	cmp	r5, r3
 800edfe:	d1bb      	bne.n	800ed78 <_strtod_l+0x9f0>
 800ee00:	4630      	mov	r0, r6
 800ee02:	4639      	mov	r1, r7
 800ee04:	f7f1 ff38 	bl	8000c78 <__aeabi_d2lz>
 800ee08:	f7f1 fbd0 	bl	80005ac <__aeabi_l2d>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4630      	mov	r0, r6
 800ee12:	4639      	mov	r1, r7
 800ee14:	f7f1 fa40 	bl	8000298 <__aeabi_dsub>
 800ee18:	460b      	mov	r3, r1
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ee20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ee24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee26:	ea46 060a 	orr.w	r6, r6, sl
 800ee2a:	431e      	orrs	r6, r3
 800ee2c:	d06f      	beq.n	800ef0e <_strtod_l+0xb86>
 800ee2e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ee68 <_strtod_l+0xae0>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	f7f1 fe5a 	bl	8000aec <__aeabi_dcmplt>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	f47f accf 	bne.w	800e7dc <_strtod_l+0x454>
 800ee3e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ee70 <_strtod_l+0xae8>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee48:	f7f1 fe6e 	bl	8000b28 <__aeabi_dcmpgt>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d093      	beq.n	800ed78 <_strtod_l+0x9f0>
 800ee50:	e4c4      	b.n	800e7dc <_strtod_l+0x454>
 800ee52:	bf00      	nop
 800ee54:	f3af 8000 	nop.w
 800ee58:	00000000 	.word	0x00000000
 800ee5c:	bff00000 	.word	0xbff00000
 800ee60:	00000000 	.word	0x00000000
 800ee64:	3ff00000 	.word	0x3ff00000
 800ee68:	94a03595 	.word	0x94a03595
 800ee6c:	3fdfffff 	.word	0x3fdfffff
 800ee70:	35afe535 	.word	0x35afe535
 800ee74:	3fe00000 	.word	0x3fe00000
 800ee78:	000fffff 	.word	0x000fffff
 800ee7c:	7ff00000 	.word	0x7ff00000
 800ee80:	7fefffff 	.word	0x7fefffff
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	3fe00000 	.word	0x3fe00000
 800ee8c:	7fe00000 	.word	0x7fe00000
 800ee90:	7c9fffff 	.word	0x7c9fffff
 800ee94:	9b08      	ldr	r3, [sp, #32]
 800ee96:	b323      	cbz	r3, 800eee2 <_strtod_l+0xb5a>
 800ee98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ee9c:	d821      	bhi.n	800eee2 <_strtod_l+0xb5a>
 800ee9e:	a328      	add	r3, pc, #160	@ (adr r3, 800ef40 <_strtod_l+0xbb8>)
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	4630      	mov	r0, r6
 800eea6:	4639      	mov	r1, r7
 800eea8:	f7f1 fe2a 	bl	8000b00 <__aeabi_dcmple>
 800eeac:	b1a0      	cbz	r0, 800eed8 <_strtod_l+0xb50>
 800eeae:	4639      	mov	r1, r7
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7f1 fe59 	bl	8000b68 <__aeabi_d2uiz>
 800eeb6:	2801      	cmp	r0, #1
 800eeb8:	bf38      	it	cc
 800eeba:	2001      	movcc	r0, #1
 800eebc:	f7f1 fb2a 	bl	8000514 <__aeabi_ui2d>
 800eec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eec2:	4606      	mov	r6, r0
 800eec4:	460f      	mov	r7, r1
 800eec6:	b9fb      	cbnz	r3, 800ef08 <_strtod_l+0xb80>
 800eec8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eecc:	9014      	str	r0, [sp, #80]	@ 0x50
 800eece:	9315      	str	r3, [sp, #84]	@ 0x54
 800eed0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800eed4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eed8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eeda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800eede:	1b5b      	subs	r3, r3, r5
 800eee0:	9311      	str	r3, [sp, #68]	@ 0x44
 800eee2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eee6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eeea:	f001 fc95 	bl	8010818 <__ulp>
 800eeee:	4650      	mov	r0, sl
 800eef0:	ec53 2b10 	vmov	r2, r3, d0
 800eef4:	4659      	mov	r1, fp
 800eef6:	f7f1 fb87 	bl	8000608 <__aeabi_dmul>
 800eefa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eefe:	f7f1 f9cd 	bl	800029c <__adddf3>
 800ef02:	4682      	mov	sl, r0
 800ef04:	468b      	mov	fp, r1
 800ef06:	e770      	b.n	800edea <_strtod_l+0xa62>
 800ef08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ef0c:	e7e0      	b.n	800eed0 <_strtod_l+0xb48>
 800ef0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef48 <_strtod_l+0xbc0>)
 800ef10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef14:	f7f1 fdea 	bl	8000aec <__aeabi_dcmplt>
 800ef18:	e798      	b.n	800ee4c <_strtod_l+0xac4>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ef20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	f7ff ba6d 	b.w	800e402 <_strtod_l+0x7a>
 800ef28:	2a65      	cmp	r2, #101	@ 0x65
 800ef2a:	f43f ab66 	beq.w	800e5fa <_strtod_l+0x272>
 800ef2e:	2a45      	cmp	r2, #69	@ 0x45
 800ef30:	f43f ab63 	beq.w	800e5fa <_strtod_l+0x272>
 800ef34:	2301      	movs	r3, #1
 800ef36:	f7ff bb9e 	b.w	800e676 <_strtod_l+0x2ee>
 800ef3a:	bf00      	nop
 800ef3c:	f3af 8000 	nop.w
 800ef40:	ffc00000 	.word	0xffc00000
 800ef44:	41dfffff 	.word	0x41dfffff
 800ef48:	94a03595 	.word	0x94a03595
 800ef4c:	3fcfffff 	.word	0x3fcfffff

0800ef50 <strtof>:
 800ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef54:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800f014 <strtof+0xc4>
 800ef58:	4b29      	ldr	r3, [pc, #164]	@ (800f000 <strtof+0xb0>)
 800ef5a:	460a      	mov	r2, r1
 800ef5c:	ed2d 8b02 	vpush	{d8}
 800ef60:	4601      	mov	r1, r0
 800ef62:	f8d8 0000 	ldr.w	r0, [r8]
 800ef66:	f7ff fa0f 	bl	800e388 <_strtod_l>
 800ef6a:	ec55 4b10 	vmov	r4, r5, d0
 800ef6e:	4622      	mov	r2, r4
 800ef70:	462b      	mov	r3, r5
 800ef72:	4620      	mov	r0, r4
 800ef74:	4629      	mov	r1, r5
 800ef76:	f7f1 fde1 	bl	8000b3c <__aeabi_dcmpun>
 800ef7a:	b190      	cbz	r0, 800efa2 <strtof+0x52>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	4821      	ldr	r0, [pc, #132]	@ (800f004 <strtof+0xb4>)
 800ef80:	da09      	bge.n	800ef96 <strtof+0x46>
 800ef82:	f000 fc65 	bl	800f850 <nanf>
 800ef86:	eeb1 8a40 	vneg.f32	s16, s0
 800ef8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef8e:	ecbd 8b02 	vpop	{d8}
 800ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef96:	ecbd 8b02 	vpop	{d8}
 800ef9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9e:	f000 bc57 	b.w	800f850 <nanf>
 800efa2:	4620      	mov	r0, r4
 800efa4:	4629      	mov	r1, r5
 800efa6:	f7f1 fdff 	bl	8000ba8 <__aeabi_d2f>
 800efaa:	ee08 0a10 	vmov	s16, r0
 800efae:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800f008 <strtof+0xb8>
 800efb2:	eeb0 7ac8 	vabs.f32	s14, s16
 800efb6:	eeb4 7a67 	vcmp.f32	s14, s15
 800efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbe:	dd11      	ble.n	800efe4 <strtof+0x94>
 800efc0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800efc4:	4b11      	ldr	r3, [pc, #68]	@ (800f00c <strtof+0xbc>)
 800efc6:	f04f 32ff 	mov.w	r2, #4294967295
 800efca:	4620      	mov	r0, r4
 800efcc:	4639      	mov	r1, r7
 800efce:	f7f1 fdb5 	bl	8000b3c <__aeabi_dcmpun>
 800efd2:	b980      	cbnz	r0, 800eff6 <strtof+0xa6>
 800efd4:	4b0d      	ldr	r3, [pc, #52]	@ (800f00c <strtof+0xbc>)
 800efd6:	f04f 32ff 	mov.w	r2, #4294967295
 800efda:	4620      	mov	r0, r4
 800efdc:	4639      	mov	r1, r7
 800efde:	f7f1 fd8f 	bl	8000b00 <__aeabi_dcmple>
 800efe2:	b940      	cbnz	r0, 800eff6 <strtof+0xa6>
 800efe4:	ee18 3a10 	vmov	r3, s16
 800efe8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800efec:	d1cd      	bne.n	800ef8a <strtof+0x3a>
 800efee:	4b08      	ldr	r3, [pc, #32]	@ (800f010 <strtof+0xc0>)
 800eff0:	402b      	ands	r3, r5
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d0c9      	beq.n	800ef8a <strtof+0x3a>
 800eff6:	f8d8 3000 	ldr.w	r3, [r8]
 800effa:	2222      	movs	r2, #34	@ 0x22
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	e7c4      	b.n	800ef8a <strtof+0x3a>
 800f000:	20000154 	.word	0x20000154
 800f004:	080122ed 	.word	0x080122ed
 800f008:	7f7fffff 	.word	0x7f7fffff
 800f00c:	7fefffff 	.word	0x7fefffff
 800f010:	7ff00000 	.word	0x7ff00000
 800f014:	200002c0 	.word	0x200002c0

0800f018 <_strtol_l.constprop.0>:
 800f018:	2b24      	cmp	r3, #36	@ 0x24
 800f01a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f01e:	4686      	mov	lr, r0
 800f020:	4690      	mov	r8, r2
 800f022:	d801      	bhi.n	800f028 <_strtol_l.constprop.0+0x10>
 800f024:	2b01      	cmp	r3, #1
 800f026:	d106      	bne.n	800f036 <_strtol_l.constprop.0+0x1e>
 800f028:	f000 fbcc 	bl	800f7c4 <__errno>
 800f02c:	2316      	movs	r3, #22
 800f02e:	6003      	str	r3, [r0, #0]
 800f030:	2000      	movs	r0, #0
 800f032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f036:	4834      	ldr	r0, [pc, #208]	@ (800f108 <_strtol_l.constprop.0+0xf0>)
 800f038:	460d      	mov	r5, r1
 800f03a:	462a      	mov	r2, r5
 800f03c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f040:	5d06      	ldrb	r6, [r0, r4]
 800f042:	f016 0608 	ands.w	r6, r6, #8
 800f046:	d1f8      	bne.n	800f03a <_strtol_l.constprop.0+0x22>
 800f048:	2c2d      	cmp	r4, #45	@ 0x2d
 800f04a:	d12d      	bne.n	800f0a8 <_strtol_l.constprop.0+0x90>
 800f04c:	782c      	ldrb	r4, [r5, #0]
 800f04e:	2601      	movs	r6, #1
 800f050:	1c95      	adds	r5, r2, #2
 800f052:	f033 0210 	bics.w	r2, r3, #16
 800f056:	d109      	bne.n	800f06c <_strtol_l.constprop.0+0x54>
 800f058:	2c30      	cmp	r4, #48	@ 0x30
 800f05a:	d12a      	bne.n	800f0b2 <_strtol_l.constprop.0+0x9a>
 800f05c:	782a      	ldrb	r2, [r5, #0]
 800f05e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f062:	2a58      	cmp	r2, #88	@ 0x58
 800f064:	d125      	bne.n	800f0b2 <_strtol_l.constprop.0+0x9a>
 800f066:	786c      	ldrb	r4, [r5, #1]
 800f068:	2310      	movs	r3, #16
 800f06a:	3502      	adds	r5, #2
 800f06c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f070:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f074:	2200      	movs	r2, #0
 800f076:	fbbc f9f3 	udiv	r9, ip, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	fb03 ca19 	mls	sl, r3, r9, ip
 800f080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f084:	2f09      	cmp	r7, #9
 800f086:	d81b      	bhi.n	800f0c0 <_strtol_l.constprop.0+0xa8>
 800f088:	463c      	mov	r4, r7
 800f08a:	42a3      	cmp	r3, r4
 800f08c:	dd27      	ble.n	800f0de <_strtol_l.constprop.0+0xc6>
 800f08e:	1c57      	adds	r7, r2, #1
 800f090:	d007      	beq.n	800f0a2 <_strtol_l.constprop.0+0x8a>
 800f092:	4581      	cmp	r9, r0
 800f094:	d320      	bcc.n	800f0d8 <_strtol_l.constprop.0+0xc0>
 800f096:	d101      	bne.n	800f09c <_strtol_l.constprop.0+0x84>
 800f098:	45a2      	cmp	sl, r4
 800f09a:	db1d      	blt.n	800f0d8 <_strtol_l.constprop.0+0xc0>
 800f09c:	fb00 4003 	mla	r0, r0, r3, r4
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0a6:	e7eb      	b.n	800f080 <_strtol_l.constprop.0+0x68>
 800f0a8:	2c2b      	cmp	r4, #43	@ 0x2b
 800f0aa:	bf04      	itt	eq
 800f0ac:	782c      	ldrbeq	r4, [r5, #0]
 800f0ae:	1c95      	addeq	r5, r2, #2
 800f0b0:	e7cf      	b.n	800f052 <_strtol_l.constprop.0+0x3a>
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1da      	bne.n	800f06c <_strtol_l.constprop.0+0x54>
 800f0b6:	2c30      	cmp	r4, #48	@ 0x30
 800f0b8:	bf0c      	ite	eq
 800f0ba:	2308      	moveq	r3, #8
 800f0bc:	230a      	movne	r3, #10
 800f0be:	e7d5      	b.n	800f06c <_strtol_l.constprop.0+0x54>
 800f0c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f0c4:	2f19      	cmp	r7, #25
 800f0c6:	d801      	bhi.n	800f0cc <_strtol_l.constprop.0+0xb4>
 800f0c8:	3c37      	subs	r4, #55	@ 0x37
 800f0ca:	e7de      	b.n	800f08a <_strtol_l.constprop.0+0x72>
 800f0cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f0d0:	2f19      	cmp	r7, #25
 800f0d2:	d804      	bhi.n	800f0de <_strtol_l.constprop.0+0xc6>
 800f0d4:	3c57      	subs	r4, #87	@ 0x57
 800f0d6:	e7d8      	b.n	800f08a <_strtol_l.constprop.0+0x72>
 800f0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0dc:	e7e1      	b.n	800f0a2 <_strtol_l.constprop.0+0x8a>
 800f0de:	1c53      	adds	r3, r2, #1
 800f0e0:	d108      	bne.n	800f0f4 <_strtol_l.constprop.0+0xdc>
 800f0e2:	2322      	movs	r3, #34	@ 0x22
 800f0e4:	f8ce 3000 	str.w	r3, [lr]
 800f0e8:	4660      	mov	r0, ip
 800f0ea:	f1b8 0f00 	cmp.w	r8, #0
 800f0ee:	d0a0      	beq.n	800f032 <_strtol_l.constprop.0+0x1a>
 800f0f0:	1e69      	subs	r1, r5, #1
 800f0f2:	e006      	b.n	800f102 <_strtol_l.constprop.0+0xea>
 800f0f4:	b106      	cbz	r6, 800f0f8 <_strtol_l.constprop.0+0xe0>
 800f0f6:	4240      	negs	r0, r0
 800f0f8:	f1b8 0f00 	cmp.w	r8, #0
 800f0fc:	d099      	beq.n	800f032 <_strtol_l.constprop.0+0x1a>
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	d1f6      	bne.n	800f0f0 <_strtol_l.constprop.0+0xd8>
 800f102:	f8c8 1000 	str.w	r1, [r8]
 800f106:	e794      	b.n	800f032 <_strtol_l.constprop.0+0x1a>
 800f108:	08012139 	.word	0x08012139

0800f10c <strtol>:
 800f10c:	4613      	mov	r3, r2
 800f10e:	460a      	mov	r2, r1
 800f110:	4601      	mov	r1, r0
 800f112:	4802      	ldr	r0, [pc, #8]	@ (800f11c <strtol+0x10>)
 800f114:	6800      	ldr	r0, [r0, #0]
 800f116:	f7ff bf7f 	b.w	800f018 <_strtol_l.constprop.0>
 800f11a:	bf00      	nop
 800f11c:	200002c0 	.word	0x200002c0

0800f120 <_strtoul_l.constprop.0>:
 800f120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f124:	4e34      	ldr	r6, [pc, #208]	@ (800f1f8 <_strtoul_l.constprop.0+0xd8>)
 800f126:	4686      	mov	lr, r0
 800f128:	460d      	mov	r5, r1
 800f12a:	4628      	mov	r0, r5
 800f12c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f130:	5d37      	ldrb	r7, [r6, r4]
 800f132:	f017 0708 	ands.w	r7, r7, #8
 800f136:	d1f8      	bne.n	800f12a <_strtoul_l.constprop.0+0xa>
 800f138:	2c2d      	cmp	r4, #45	@ 0x2d
 800f13a:	d12f      	bne.n	800f19c <_strtoul_l.constprop.0+0x7c>
 800f13c:	782c      	ldrb	r4, [r5, #0]
 800f13e:	2701      	movs	r7, #1
 800f140:	1c85      	adds	r5, r0, #2
 800f142:	f033 0010 	bics.w	r0, r3, #16
 800f146:	d109      	bne.n	800f15c <_strtoul_l.constprop.0+0x3c>
 800f148:	2c30      	cmp	r4, #48	@ 0x30
 800f14a:	d12c      	bne.n	800f1a6 <_strtoul_l.constprop.0+0x86>
 800f14c:	7828      	ldrb	r0, [r5, #0]
 800f14e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f152:	2858      	cmp	r0, #88	@ 0x58
 800f154:	d127      	bne.n	800f1a6 <_strtoul_l.constprop.0+0x86>
 800f156:	786c      	ldrb	r4, [r5, #1]
 800f158:	2310      	movs	r3, #16
 800f15a:	3502      	adds	r5, #2
 800f15c:	f04f 38ff 	mov.w	r8, #4294967295
 800f160:	2600      	movs	r6, #0
 800f162:	fbb8 f8f3 	udiv	r8, r8, r3
 800f166:	fb03 f908 	mul.w	r9, r3, r8
 800f16a:	ea6f 0909 	mvn.w	r9, r9
 800f16e:	4630      	mov	r0, r6
 800f170:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f174:	f1bc 0f09 	cmp.w	ip, #9
 800f178:	d81c      	bhi.n	800f1b4 <_strtoul_l.constprop.0+0x94>
 800f17a:	4664      	mov	r4, ip
 800f17c:	42a3      	cmp	r3, r4
 800f17e:	dd2a      	ble.n	800f1d6 <_strtoul_l.constprop.0+0xb6>
 800f180:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f184:	d007      	beq.n	800f196 <_strtoul_l.constprop.0+0x76>
 800f186:	4580      	cmp	r8, r0
 800f188:	d322      	bcc.n	800f1d0 <_strtoul_l.constprop.0+0xb0>
 800f18a:	d101      	bne.n	800f190 <_strtoul_l.constprop.0+0x70>
 800f18c:	45a1      	cmp	r9, r4
 800f18e:	db1f      	blt.n	800f1d0 <_strtoul_l.constprop.0+0xb0>
 800f190:	fb00 4003 	mla	r0, r0, r3, r4
 800f194:	2601      	movs	r6, #1
 800f196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f19a:	e7e9      	b.n	800f170 <_strtoul_l.constprop.0+0x50>
 800f19c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f19e:	bf04      	itt	eq
 800f1a0:	782c      	ldrbeq	r4, [r5, #0]
 800f1a2:	1c85      	addeq	r5, r0, #2
 800f1a4:	e7cd      	b.n	800f142 <_strtoul_l.constprop.0+0x22>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1d8      	bne.n	800f15c <_strtoul_l.constprop.0+0x3c>
 800f1aa:	2c30      	cmp	r4, #48	@ 0x30
 800f1ac:	bf0c      	ite	eq
 800f1ae:	2308      	moveq	r3, #8
 800f1b0:	230a      	movne	r3, #10
 800f1b2:	e7d3      	b.n	800f15c <_strtoul_l.constprop.0+0x3c>
 800f1b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f1b8:	f1bc 0f19 	cmp.w	ip, #25
 800f1bc:	d801      	bhi.n	800f1c2 <_strtoul_l.constprop.0+0xa2>
 800f1be:	3c37      	subs	r4, #55	@ 0x37
 800f1c0:	e7dc      	b.n	800f17c <_strtoul_l.constprop.0+0x5c>
 800f1c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f1c6:	f1bc 0f19 	cmp.w	ip, #25
 800f1ca:	d804      	bhi.n	800f1d6 <_strtoul_l.constprop.0+0xb6>
 800f1cc:	3c57      	subs	r4, #87	@ 0x57
 800f1ce:	e7d5      	b.n	800f17c <_strtoul_l.constprop.0+0x5c>
 800f1d0:	f04f 36ff 	mov.w	r6, #4294967295
 800f1d4:	e7df      	b.n	800f196 <_strtoul_l.constprop.0+0x76>
 800f1d6:	1c73      	adds	r3, r6, #1
 800f1d8:	d106      	bne.n	800f1e8 <_strtoul_l.constprop.0+0xc8>
 800f1da:	2322      	movs	r3, #34	@ 0x22
 800f1dc:	f8ce 3000 	str.w	r3, [lr]
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	b932      	cbnz	r2, 800f1f2 <_strtoul_l.constprop.0+0xd2>
 800f1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e8:	b107      	cbz	r7, 800f1ec <_strtoul_l.constprop.0+0xcc>
 800f1ea:	4240      	negs	r0, r0
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	d0f9      	beq.n	800f1e4 <_strtoul_l.constprop.0+0xc4>
 800f1f0:	b106      	cbz	r6, 800f1f4 <_strtoul_l.constprop.0+0xd4>
 800f1f2:	1e69      	subs	r1, r5, #1
 800f1f4:	6011      	str	r1, [r2, #0]
 800f1f6:	e7f5      	b.n	800f1e4 <_strtoul_l.constprop.0+0xc4>
 800f1f8:	08012139 	.word	0x08012139

0800f1fc <strtoul>:
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	460a      	mov	r2, r1
 800f200:	4601      	mov	r1, r0
 800f202:	4802      	ldr	r0, [pc, #8]	@ (800f20c <strtoul+0x10>)
 800f204:	6800      	ldr	r0, [r0, #0]
 800f206:	f7ff bf8b 	b.w	800f120 <_strtoul_l.constprop.0>
 800f20a:	bf00      	nop
 800f20c:	200002c0 	.word	0x200002c0

0800f210 <std>:
 800f210:	2300      	movs	r3, #0
 800f212:	b510      	push	{r4, lr}
 800f214:	4604      	mov	r4, r0
 800f216:	e9c0 3300 	strd	r3, r3, [r0]
 800f21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f21e:	6083      	str	r3, [r0, #8]
 800f220:	8181      	strh	r1, [r0, #12]
 800f222:	6643      	str	r3, [r0, #100]	@ 0x64
 800f224:	81c2      	strh	r2, [r0, #14]
 800f226:	6183      	str	r3, [r0, #24]
 800f228:	4619      	mov	r1, r3
 800f22a:	2208      	movs	r2, #8
 800f22c:	305c      	adds	r0, #92	@ 0x5c
 800f22e:	f000 f9f9 	bl	800f624 <memset>
 800f232:	4b0d      	ldr	r3, [pc, #52]	@ (800f268 <std+0x58>)
 800f234:	6263      	str	r3, [r4, #36]	@ 0x24
 800f236:	4b0d      	ldr	r3, [pc, #52]	@ (800f26c <std+0x5c>)
 800f238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f23a:	4b0d      	ldr	r3, [pc, #52]	@ (800f270 <std+0x60>)
 800f23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f23e:	4b0d      	ldr	r3, [pc, #52]	@ (800f274 <std+0x64>)
 800f240:	6323      	str	r3, [r4, #48]	@ 0x30
 800f242:	4b0d      	ldr	r3, [pc, #52]	@ (800f278 <std+0x68>)
 800f244:	6224      	str	r4, [r4, #32]
 800f246:	429c      	cmp	r4, r3
 800f248:	d006      	beq.n	800f258 <std+0x48>
 800f24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f24e:	4294      	cmp	r4, r2
 800f250:	d002      	beq.n	800f258 <std+0x48>
 800f252:	33d0      	adds	r3, #208	@ 0xd0
 800f254:	429c      	cmp	r4, r3
 800f256:	d105      	bne.n	800f264 <std+0x54>
 800f258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f260:	f000 bada 	b.w	800f818 <__retarget_lock_init_recursive>
 800f264:	bd10      	pop	{r4, pc}
 800f266:	bf00      	nop
 800f268:	0800f475 	.word	0x0800f475
 800f26c:	0800f497 	.word	0x0800f497
 800f270:	0800f4cf 	.word	0x0800f4cf
 800f274:	0800f4f3 	.word	0x0800f4f3
 800f278:	20003880 	.word	0x20003880

0800f27c <stdio_exit_handler>:
 800f27c:	4a02      	ldr	r2, [pc, #8]	@ (800f288 <stdio_exit_handler+0xc>)
 800f27e:	4903      	ldr	r1, [pc, #12]	@ (800f28c <stdio_exit_handler+0x10>)
 800f280:	4803      	ldr	r0, [pc, #12]	@ (800f290 <stdio_exit_handler+0x14>)
 800f282:	f000 b869 	b.w	800f358 <_fwalk_sglue>
 800f286:	bf00      	nop
 800f288:	20000148 	.word	0x20000148
 800f28c:	08011155 	.word	0x08011155
 800f290:	200002c4 	.word	0x200002c4

0800f294 <cleanup_stdio>:
 800f294:	6841      	ldr	r1, [r0, #4]
 800f296:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c8 <cleanup_stdio+0x34>)
 800f298:	4299      	cmp	r1, r3
 800f29a:	b510      	push	{r4, lr}
 800f29c:	4604      	mov	r4, r0
 800f29e:	d001      	beq.n	800f2a4 <cleanup_stdio+0x10>
 800f2a0:	f001 ff58 	bl	8011154 <_fflush_r>
 800f2a4:	68a1      	ldr	r1, [r4, #8]
 800f2a6:	4b09      	ldr	r3, [pc, #36]	@ (800f2cc <cleanup_stdio+0x38>)
 800f2a8:	4299      	cmp	r1, r3
 800f2aa:	d002      	beq.n	800f2b2 <cleanup_stdio+0x1e>
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f001 ff51 	bl	8011154 <_fflush_r>
 800f2b2:	68e1      	ldr	r1, [r4, #12]
 800f2b4:	4b06      	ldr	r3, [pc, #24]	@ (800f2d0 <cleanup_stdio+0x3c>)
 800f2b6:	4299      	cmp	r1, r3
 800f2b8:	d004      	beq.n	800f2c4 <cleanup_stdio+0x30>
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2c0:	f001 bf48 	b.w	8011154 <_fflush_r>
 800f2c4:	bd10      	pop	{r4, pc}
 800f2c6:	bf00      	nop
 800f2c8:	20003880 	.word	0x20003880
 800f2cc:	200038e8 	.word	0x200038e8
 800f2d0:	20003950 	.word	0x20003950

0800f2d4 <global_stdio_init.part.0>:
 800f2d4:	b510      	push	{r4, lr}
 800f2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f304 <global_stdio_init.part.0+0x30>)
 800f2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800f308 <global_stdio_init.part.0+0x34>)
 800f2da:	4a0c      	ldr	r2, [pc, #48]	@ (800f30c <global_stdio_init.part.0+0x38>)
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2104      	movs	r1, #4
 800f2e4:	f7ff ff94 	bl	800f210 <std>
 800f2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	2109      	movs	r1, #9
 800f2f0:	f7ff ff8e 	bl	800f210 <std>
 800f2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2fe:	2112      	movs	r1, #18
 800f300:	f7ff bf86 	b.w	800f210 <std>
 800f304:	200039b8 	.word	0x200039b8
 800f308:	20003880 	.word	0x20003880
 800f30c:	0800f27d 	.word	0x0800f27d

0800f310 <__sfp_lock_acquire>:
 800f310:	4801      	ldr	r0, [pc, #4]	@ (800f318 <__sfp_lock_acquire+0x8>)
 800f312:	f000 ba82 	b.w	800f81a <__retarget_lock_acquire_recursive>
 800f316:	bf00      	nop
 800f318:	200039c1 	.word	0x200039c1

0800f31c <__sfp_lock_release>:
 800f31c:	4801      	ldr	r0, [pc, #4]	@ (800f324 <__sfp_lock_release+0x8>)
 800f31e:	f000 ba7d 	b.w	800f81c <__retarget_lock_release_recursive>
 800f322:	bf00      	nop
 800f324:	200039c1 	.word	0x200039c1

0800f328 <__sinit>:
 800f328:	b510      	push	{r4, lr}
 800f32a:	4604      	mov	r4, r0
 800f32c:	f7ff fff0 	bl	800f310 <__sfp_lock_acquire>
 800f330:	6a23      	ldr	r3, [r4, #32]
 800f332:	b11b      	cbz	r3, 800f33c <__sinit+0x14>
 800f334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f338:	f7ff bff0 	b.w	800f31c <__sfp_lock_release>
 800f33c:	4b04      	ldr	r3, [pc, #16]	@ (800f350 <__sinit+0x28>)
 800f33e:	6223      	str	r3, [r4, #32]
 800f340:	4b04      	ldr	r3, [pc, #16]	@ (800f354 <__sinit+0x2c>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1f5      	bne.n	800f334 <__sinit+0xc>
 800f348:	f7ff ffc4 	bl	800f2d4 <global_stdio_init.part.0>
 800f34c:	e7f2      	b.n	800f334 <__sinit+0xc>
 800f34e:	bf00      	nop
 800f350:	0800f295 	.word	0x0800f295
 800f354:	200039b8 	.word	0x200039b8

0800f358 <_fwalk_sglue>:
 800f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f35c:	4607      	mov	r7, r0
 800f35e:	4688      	mov	r8, r1
 800f360:	4614      	mov	r4, r2
 800f362:	2600      	movs	r6, #0
 800f364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f368:	f1b9 0901 	subs.w	r9, r9, #1
 800f36c:	d505      	bpl.n	800f37a <_fwalk_sglue+0x22>
 800f36e:	6824      	ldr	r4, [r4, #0]
 800f370:	2c00      	cmp	r4, #0
 800f372:	d1f7      	bne.n	800f364 <_fwalk_sglue+0xc>
 800f374:	4630      	mov	r0, r6
 800f376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f37a:	89ab      	ldrh	r3, [r5, #12]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d907      	bls.n	800f390 <_fwalk_sglue+0x38>
 800f380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f384:	3301      	adds	r3, #1
 800f386:	d003      	beq.n	800f390 <_fwalk_sglue+0x38>
 800f388:	4629      	mov	r1, r5
 800f38a:	4638      	mov	r0, r7
 800f38c:	47c0      	blx	r8
 800f38e:	4306      	orrs	r6, r0
 800f390:	3568      	adds	r5, #104	@ 0x68
 800f392:	e7e9      	b.n	800f368 <_fwalk_sglue+0x10>

0800f394 <iprintf>:
 800f394:	b40f      	push	{r0, r1, r2, r3}
 800f396:	b507      	push	{r0, r1, r2, lr}
 800f398:	4906      	ldr	r1, [pc, #24]	@ (800f3b4 <iprintf+0x20>)
 800f39a:	ab04      	add	r3, sp, #16
 800f39c:	6808      	ldr	r0, [r1, #0]
 800f39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a2:	6881      	ldr	r1, [r0, #8]
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	f001 fbab 	bl	8010b00 <_vfiprintf_r>
 800f3aa:	b003      	add	sp, #12
 800f3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3b0:	b004      	add	sp, #16
 800f3b2:	4770      	bx	lr
 800f3b4:	200002c0 	.word	0x200002c0

0800f3b8 <_puts_r>:
 800f3b8:	6a03      	ldr	r3, [r0, #32]
 800f3ba:	b570      	push	{r4, r5, r6, lr}
 800f3bc:	6884      	ldr	r4, [r0, #8]
 800f3be:	4605      	mov	r5, r0
 800f3c0:	460e      	mov	r6, r1
 800f3c2:	b90b      	cbnz	r3, 800f3c8 <_puts_r+0x10>
 800f3c4:	f7ff ffb0 	bl	800f328 <__sinit>
 800f3c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3ca:	07db      	lsls	r3, r3, #31
 800f3cc:	d405      	bmi.n	800f3da <_puts_r+0x22>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	0598      	lsls	r0, r3, #22
 800f3d2:	d402      	bmi.n	800f3da <_puts_r+0x22>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3d6:	f000 fa20 	bl	800f81a <__retarget_lock_acquire_recursive>
 800f3da:	89a3      	ldrh	r3, [r4, #12]
 800f3dc:	0719      	lsls	r1, r3, #28
 800f3de:	d502      	bpl.n	800f3e6 <_puts_r+0x2e>
 800f3e0:	6923      	ldr	r3, [r4, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d135      	bne.n	800f452 <_puts_r+0x9a>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	f000 f8c5 	bl	800f578 <__swsetup_r>
 800f3ee:	b380      	cbz	r0, 800f452 <_puts_r+0x9a>
 800f3f0:	f04f 35ff 	mov.w	r5, #4294967295
 800f3f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3f6:	07da      	lsls	r2, r3, #31
 800f3f8:	d405      	bmi.n	800f406 <_puts_r+0x4e>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	059b      	lsls	r3, r3, #22
 800f3fe:	d402      	bmi.n	800f406 <_puts_r+0x4e>
 800f400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f402:	f000 fa0b 	bl	800f81c <__retarget_lock_release_recursive>
 800f406:	4628      	mov	r0, r5
 800f408:	bd70      	pop	{r4, r5, r6, pc}
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da04      	bge.n	800f418 <_puts_r+0x60>
 800f40e:	69a2      	ldr	r2, [r4, #24]
 800f410:	429a      	cmp	r2, r3
 800f412:	dc17      	bgt.n	800f444 <_puts_r+0x8c>
 800f414:	290a      	cmp	r1, #10
 800f416:	d015      	beq.n	800f444 <_puts_r+0x8c>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	6022      	str	r2, [r4, #0]
 800f41e:	7019      	strb	r1, [r3, #0]
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f426:	3b01      	subs	r3, #1
 800f428:	60a3      	str	r3, [r4, #8]
 800f42a:	2900      	cmp	r1, #0
 800f42c:	d1ed      	bne.n	800f40a <_puts_r+0x52>
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da11      	bge.n	800f456 <_puts_r+0x9e>
 800f432:	4622      	mov	r2, r4
 800f434:	210a      	movs	r1, #10
 800f436:	4628      	mov	r0, r5
 800f438:	f000 f85f 	bl	800f4fa <__swbuf_r>
 800f43c:	3001      	adds	r0, #1
 800f43e:	d0d7      	beq.n	800f3f0 <_puts_r+0x38>
 800f440:	250a      	movs	r5, #10
 800f442:	e7d7      	b.n	800f3f4 <_puts_r+0x3c>
 800f444:	4622      	mov	r2, r4
 800f446:	4628      	mov	r0, r5
 800f448:	f000 f857 	bl	800f4fa <__swbuf_r>
 800f44c:	3001      	adds	r0, #1
 800f44e:	d1e7      	bne.n	800f420 <_puts_r+0x68>
 800f450:	e7ce      	b.n	800f3f0 <_puts_r+0x38>
 800f452:	3e01      	subs	r6, #1
 800f454:	e7e4      	b.n	800f420 <_puts_r+0x68>
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	6022      	str	r2, [r4, #0]
 800f45c:	220a      	movs	r2, #10
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	e7ee      	b.n	800f440 <_puts_r+0x88>
	...

0800f464 <puts>:
 800f464:	4b02      	ldr	r3, [pc, #8]	@ (800f470 <puts+0xc>)
 800f466:	4601      	mov	r1, r0
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f7ff bfa5 	b.w	800f3b8 <_puts_r>
 800f46e:	bf00      	nop
 800f470:	200002c0 	.word	0x200002c0

0800f474 <__sread>:
 800f474:	b510      	push	{r4, lr}
 800f476:	460c      	mov	r4, r1
 800f478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47c:	f000 f97e 	bl	800f77c <_read_r>
 800f480:	2800      	cmp	r0, #0
 800f482:	bfab      	itete	ge
 800f484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f486:	89a3      	ldrhlt	r3, [r4, #12]
 800f488:	181b      	addge	r3, r3, r0
 800f48a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f48e:	bfac      	ite	ge
 800f490:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f492:	81a3      	strhlt	r3, [r4, #12]
 800f494:	bd10      	pop	{r4, pc}

0800f496 <__swrite>:
 800f496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49a:	461f      	mov	r7, r3
 800f49c:	898b      	ldrh	r3, [r1, #12]
 800f49e:	05db      	lsls	r3, r3, #23
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	4616      	mov	r6, r2
 800f4a6:	d505      	bpl.n	800f4b4 <__swrite+0x1e>
 800f4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f000 f952 	bl	800f758 <_lseek_r>
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	4632      	mov	r2, r6
 800f4c2:	463b      	mov	r3, r7
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ca:	f000 b969 	b.w	800f7a0 <_write_r>

0800f4ce <__sseek>:
 800f4ce:	b510      	push	{r4, lr}
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d6:	f000 f93f 	bl	800f758 <_lseek_r>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	bf15      	itete	ne
 800f4e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f4e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f4e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f4ea:	81a3      	strheq	r3, [r4, #12]
 800f4ec:	bf18      	it	ne
 800f4ee:	81a3      	strhne	r3, [r4, #12]
 800f4f0:	bd10      	pop	{r4, pc}

0800f4f2 <__sclose>:
 800f4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f6:	f000 b91f 	b.w	800f738 <_close_r>

0800f4fa <__swbuf_r>:
 800f4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fc:	460e      	mov	r6, r1
 800f4fe:	4614      	mov	r4, r2
 800f500:	4605      	mov	r5, r0
 800f502:	b118      	cbz	r0, 800f50c <__swbuf_r+0x12>
 800f504:	6a03      	ldr	r3, [r0, #32]
 800f506:	b90b      	cbnz	r3, 800f50c <__swbuf_r+0x12>
 800f508:	f7ff ff0e 	bl	800f328 <__sinit>
 800f50c:	69a3      	ldr	r3, [r4, #24]
 800f50e:	60a3      	str	r3, [r4, #8]
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	071a      	lsls	r2, r3, #28
 800f514:	d501      	bpl.n	800f51a <__swbuf_r+0x20>
 800f516:	6923      	ldr	r3, [r4, #16]
 800f518:	b943      	cbnz	r3, 800f52c <__swbuf_r+0x32>
 800f51a:	4621      	mov	r1, r4
 800f51c:	4628      	mov	r0, r5
 800f51e:	f000 f82b 	bl	800f578 <__swsetup_r>
 800f522:	b118      	cbz	r0, 800f52c <__swbuf_r+0x32>
 800f524:	f04f 37ff 	mov.w	r7, #4294967295
 800f528:	4638      	mov	r0, r7
 800f52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	6922      	ldr	r2, [r4, #16]
 800f530:	1a98      	subs	r0, r3, r2
 800f532:	6963      	ldr	r3, [r4, #20]
 800f534:	b2f6      	uxtb	r6, r6
 800f536:	4283      	cmp	r3, r0
 800f538:	4637      	mov	r7, r6
 800f53a:	dc05      	bgt.n	800f548 <__swbuf_r+0x4e>
 800f53c:	4621      	mov	r1, r4
 800f53e:	4628      	mov	r0, r5
 800f540:	f001 fe08 	bl	8011154 <_fflush_r>
 800f544:	2800      	cmp	r0, #0
 800f546:	d1ed      	bne.n	800f524 <__swbuf_r+0x2a>
 800f548:	68a3      	ldr	r3, [r4, #8]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	60a3      	str	r3, [r4, #8]
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	1c5a      	adds	r2, r3, #1
 800f552:	6022      	str	r2, [r4, #0]
 800f554:	701e      	strb	r6, [r3, #0]
 800f556:	6962      	ldr	r2, [r4, #20]
 800f558:	1c43      	adds	r3, r0, #1
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d004      	beq.n	800f568 <__swbuf_r+0x6e>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	07db      	lsls	r3, r3, #31
 800f562:	d5e1      	bpl.n	800f528 <__swbuf_r+0x2e>
 800f564:	2e0a      	cmp	r6, #10
 800f566:	d1df      	bne.n	800f528 <__swbuf_r+0x2e>
 800f568:	4621      	mov	r1, r4
 800f56a:	4628      	mov	r0, r5
 800f56c:	f001 fdf2 	bl	8011154 <_fflush_r>
 800f570:	2800      	cmp	r0, #0
 800f572:	d0d9      	beq.n	800f528 <__swbuf_r+0x2e>
 800f574:	e7d6      	b.n	800f524 <__swbuf_r+0x2a>
	...

0800f578 <__swsetup_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4b29      	ldr	r3, [pc, #164]	@ (800f620 <__swsetup_r+0xa8>)
 800f57c:	4605      	mov	r5, r0
 800f57e:	6818      	ldr	r0, [r3, #0]
 800f580:	460c      	mov	r4, r1
 800f582:	b118      	cbz	r0, 800f58c <__swsetup_r+0x14>
 800f584:	6a03      	ldr	r3, [r0, #32]
 800f586:	b90b      	cbnz	r3, 800f58c <__swsetup_r+0x14>
 800f588:	f7ff fece 	bl	800f328 <__sinit>
 800f58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f590:	0719      	lsls	r1, r3, #28
 800f592:	d422      	bmi.n	800f5da <__swsetup_r+0x62>
 800f594:	06da      	lsls	r2, r3, #27
 800f596:	d407      	bmi.n	800f5a8 <__swsetup_r+0x30>
 800f598:	2209      	movs	r2, #9
 800f59a:	602a      	str	r2, [r5, #0]
 800f59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a0:	81a3      	strh	r3, [r4, #12]
 800f5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a6:	e033      	b.n	800f610 <__swsetup_r+0x98>
 800f5a8:	0758      	lsls	r0, r3, #29
 800f5aa:	d512      	bpl.n	800f5d2 <__swsetup_r+0x5a>
 800f5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ae:	b141      	cbz	r1, 800f5c2 <__swsetup_r+0x4a>
 800f5b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5b4:	4299      	cmp	r1, r3
 800f5b6:	d002      	beq.n	800f5be <__swsetup_r+0x46>
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f000 f96d 	bl	800f898 <_free_r>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	6063      	str	r3, [r4, #4]
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	89a3      	ldrh	r3, [r4, #12]
 800f5d4:	f043 0308 	orr.w	r3, r3, #8
 800f5d8:	81a3      	strh	r3, [r4, #12]
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	b94b      	cbnz	r3, 800f5f2 <__swsetup_r+0x7a>
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5e8:	d003      	beq.n	800f5f2 <__swsetup_r+0x7a>
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f001 fe11 	bl	8011214 <__smakebuf_r>
 800f5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f6:	f013 0201 	ands.w	r2, r3, #1
 800f5fa:	d00a      	beq.n	800f612 <__swsetup_r+0x9a>
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	60a2      	str	r2, [r4, #8]
 800f600:	6962      	ldr	r2, [r4, #20]
 800f602:	4252      	negs	r2, r2
 800f604:	61a2      	str	r2, [r4, #24]
 800f606:	6922      	ldr	r2, [r4, #16]
 800f608:	b942      	cbnz	r2, 800f61c <__swsetup_r+0xa4>
 800f60a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f60e:	d1c5      	bne.n	800f59c <__swsetup_r+0x24>
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	0799      	lsls	r1, r3, #30
 800f614:	bf58      	it	pl
 800f616:	6962      	ldrpl	r2, [r4, #20]
 800f618:	60a2      	str	r2, [r4, #8]
 800f61a:	e7f4      	b.n	800f606 <__swsetup_r+0x8e>
 800f61c:	2000      	movs	r0, #0
 800f61e:	e7f7      	b.n	800f610 <__swsetup_r+0x98>
 800f620:	200002c0 	.word	0x200002c0

0800f624 <memset>:
 800f624:	4402      	add	r2, r0
 800f626:	4603      	mov	r3, r0
 800f628:	4293      	cmp	r3, r2
 800f62a:	d100      	bne.n	800f62e <memset+0xa>
 800f62c:	4770      	bx	lr
 800f62e:	f803 1b01 	strb.w	r1, [r3], #1
 800f632:	e7f9      	b.n	800f628 <memset+0x4>

0800f634 <strncmp>:
 800f634:	b510      	push	{r4, lr}
 800f636:	b16a      	cbz	r2, 800f654 <strncmp+0x20>
 800f638:	3901      	subs	r1, #1
 800f63a:	1884      	adds	r4, r0, r2
 800f63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f640:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f644:	429a      	cmp	r2, r3
 800f646:	d103      	bne.n	800f650 <strncmp+0x1c>
 800f648:	42a0      	cmp	r0, r4
 800f64a:	d001      	beq.n	800f650 <strncmp+0x1c>
 800f64c:	2a00      	cmp	r2, #0
 800f64e:	d1f5      	bne.n	800f63c <strncmp+0x8>
 800f650:	1ad0      	subs	r0, r2, r3
 800f652:	bd10      	pop	{r4, pc}
 800f654:	4610      	mov	r0, r2
 800f656:	e7fc      	b.n	800f652 <strncmp+0x1e>

0800f658 <strncpy>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	3901      	subs	r1, #1
 800f65c:	4603      	mov	r3, r0
 800f65e:	b132      	cbz	r2, 800f66e <strncpy+0x16>
 800f660:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f664:	f803 4b01 	strb.w	r4, [r3], #1
 800f668:	3a01      	subs	r2, #1
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	d1f7      	bne.n	800f65e <strncpy+0x6>
 800f66e:	441a      	add	r2, r3
 800f670:	2100      	movs	r1, #0
 800f672:	4293      	cmp	r3, r2
 800f674:	d100      	bne.n	800f678 <strncpy+0x20>
 800f676:	bd10      	pop	{r4, pc}
 800f678:	f803 1b01 	strb.w	r1, [r3], #1
 800f67c:	e7f9      	b.n	800f672 <strncpy+0x1a>
	...

0800f680 <strtok>:
 800f680:	4b16      	ldr	r3, [pc, #88]	@ (800f6dc <strtok+0x5c>)
 800f682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f686:	681f      	ldr	r7, [r3, #0]
 800f688:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f68a:	4605      	mov	r5, r0
 800f68c:	460e      	mov	r6, r1
 800f68e:	b9ec      	cbnz	r4, 800f6cc <strtok+0x4c>
 800f690:	2050      	movs	r0, #80	@ 0x50
 800f692:	f000 fc85 	bl	800ffa0 <malloc>
 800f696:	4602      	mov	r2, r0
 800f698:	6478      	str	r0, [r7, #68]	@ 0x44
 800f69a:	b920      	cbnz	r0, 800f6a6 <strtok+0x26>
 800f69c:	4b10      	ldr	r3, [pc, #64]	@ (800f6e0 <strtok+0x60>)
 800f69e:	4811      	ldr	r0, [pc, #68]	@ (800f6e4 <strtok+0x64>)
 800f6a0:	215b      	movs	r1, #91	@ 0x5b
 800f6a2:	f000 f8db 	bl	800f85c <__assert_func>
 800f6a6:	e9c0 4400 	strd	r4, r4, [r0]
 800f6aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f6ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f6b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f6b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f6ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f6be:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f6c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f6c6:	6184      	str	r4, [r0, #24]
 800f6c8:	7704      	strb	r4, [r0, #28]
 800f6ca:	6244      	str	r4, [r0, #36]	@ 0x24
 800f6cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	f000 b806 	b.w	800f6e8 <__strtok_r>
 800f6dc:	200002c0 	.word	0x200002c0
 800f6e0:	08012239 	.word	0x08012239
 800f6e4:	08012250 	.word	0x08012250

0800f6e8 <__strtok_r>:
 800f6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	b908      	cbnz	r0, 800f6f2 <__strtok_r+0xa>
 800f6ee:	6814      	ldr	r4, [r2, #0]
 800f6f0:	b144      	cbz	r4, 800f704 <__strtok_r+0x1c>
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f6f8:	460f      	mov	r7, r1
 800f6fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f6fe:	b91e      	cbnz	r6, 800f708 <__strtok_r+0x20>
 800f700:	b965      	cbnz	r5, 800f71c <__strtok_r+0x34>
 800f702:	6015      	str	r5, [r2, #0]
 800f704:	2000      	movs	r0, #0
 800f706:	e005      	b.n	800f714 <__strtok_r+0x2c>
 800f708:	42b5      	cmp	r5, r6
 800f70a:	d1f6      	bne.n	800f6fa <__strtok_r+0x12>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1f0      	bne.n	800f6f2 <__strtok_r+0xa>
 800f710:	6014      	str	r4, [r2, #0]
 800f712:	7003      	strb	r3, [r0, #0]
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	461c      	mov	r4, r3
 800f718:	e00c      	b.n	800f734 <__strtok_r+0x4c>
 800f71a:	b915      	cbnz	r5, 800f722 <__strtok_r+0x3a>
 800f71c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f720:	460e      	mov	r6, r1
 800f722:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f726:	42ab      	cmp	r3, r5
 800f728:	d1f7      	bne.n	800f71a <__strtok_r+0x32>
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0f3      	beq.n	800f716 <__strtok_r+0x2e>
 800f72e:	2300      	movs	r3, #0
 800f730:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f734:	6014      	str	r4, [r2, #0]
 800f736:	e7ed      	b.n	800f714 <__strtok_r+0x2c>

0800f738 <_close_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d06      	ldr	r5, [pc, #24]	@ (800f754 <_close_r+0x1c>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4604      	mov	r4, r0
 800f740:	4608      	mov	r0, r1
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	f7f4 f990 	bl	8003a68 <_close>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_close_r+0x1a>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_close_r+0x1a>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	200039bc 	.word	0x200039bc

0800f758 <_lseek_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d07      	ldr	r5, [pc, #28]	@ (800f778 <_lseek_r+0x20>)
 800f75c:	4604      	mov	r4, r0
 800f75e:	4608      	mov	r0, r1
 800f760:	4611      	mov	r1, r2
 800f762:	2200      	movs	r2, #0
 800f764:	602a      	str	r2, [r5, #0]
 800f766:	461a      	mov	r2, r3
 800f768:	f7f4 f9a5 	bl	8003ab6 <_lseek>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d102      	bne.n	800f776 <_lseek_r+0x1e>
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	b103      	cbz	r3, 800f776 <_lseek_r+0x1e>
 800f774:	6023      	str	r3, [r4, #0]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	200039bc 	.word	0x200039bc

0800f77c <_read_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4d07      	ldr	r5, [pc, #28]	@ (800f79c <_read_r+0x20>)
 800f780:	4604      	mov	r4, r0
 800f782:	4608      	mov	r0, r1
 800f784:	4611      	mov	r1, r2
 800f786:	2200      	movs	r2, #0
 800f788:	602a      	str	r2, [r5, #0]
 800f78a:	461a      	mov	r2, r3
 800f78c:	f7f4 f933 	bl	80039f6 <_read>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d102      	bne.n	800f79a <_read_r+0x1e>
 800f794:	682b      	ldr	r3, [r5, #0]
 800f796:	b103      	cbz	r3, 800f79a <_read_r+0x1e>
 800f798:	6023      	str	r3, [r4, #0]
 800f79a:	bd38      	pop	{r3, r4, r5, pc}
 800f79c:	200039bc 	.word	0x200039bc

0800f7a0 <_write_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4d07      	ldr	r5, [pc, #28]	@ (800f7c0 <_write_r+0x20>)
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	4608      	mov	r0, r1
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	602a      	str	r2, [r5, #0]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	f7f4 f93e 	bl	8003a30 <_write>
 800f7b4:	1c43      	adds	r3, r0, #1
 800f7b6:	d102      	bne.n	800f7be <_write_r+0x1e>
 800f7b8:	682b      	ldr	r3, [r5, #0]
 800f7ba:	b103      	cbz	r3, 800f7be <_write_r+0x1e>
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	200039bc 	.word	0x200039bc

0800f7c4 <__errno>:
 800f7c4:	4b01      	ldr	r3, [pc, #4]	@ (800f7cc <__errno+0x8>)
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	200002c0 	.word	0x200002c0

0800f7d0 <__libc_init_array>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	4d0d      	ldr	r5, [pc, #52]	@ (800f808 <__libc_init_array+0x38>)
 800f7d4:	4c0d      	ldr	r4, [pc, #52]	@ (800f80c <__libc_init_array+0x3c>)
 800f7d6:	1b64      	subs	r4, r4, r5
 800f7d8:	10a4      	asrs	r4, r4, #2
 800f7da:	2600      	movs	r6, #0
 800f7dc:	42a6      	cmp	r6, r4
 800f7de:	d109      	bne.n	800f7f4 <__libc_init_array+0x24>
 800f7e0:	4d0b      	ldr	r5, [pc, #44]	@ (800f810 <__libc_init_array+0x40>)
 800f7e2:	4c0c      	ldr	r4, [pc, #48]	@ (800f814 <__libc_init_array+0x44>)
 800f7e4:	f001 fde4 	bl	80113b0 <_init>
 800f7e8:	1b64      	subs	r4, r4, r5
 800f7ea:	10a4      	asrs	r4, r4, #2
 800f7ec:	2600      	movs	r6, #0
 800f7ee:	42a6      	cmp	r6, r4
 800f7f0:	d105      	bne.n	800f7fe <__libc_init_array+0x2e>
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7f8:	4798      	blx	r3
 800f7fa:	3601      	adds	r6, #1
 800f7fc:	e7ee      	b.n	800f7dc <__libc_init_array+0xc>
 800f7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f802:	4798      	blx	r3
 800f804:	3601      	adds	r6, #1
 800f806:	e7f2      	b.n	800f7ee <__libc_init_array+0x1e>
 800f808:	080124f4 	.word	0x080124f4
 800f80c:	080124f4 	.word	0x080124f4
 800f810:	080124f4 	.word	0x080124f4
 800f814:	080124f8 	.word	0x080124f8

0800f818 <__retarget_lock_init_recursive>:
 800f818:	4770      	bx	lr

0800f81a <__retarget_lock_acquire_recursive>:
 800f81a:	4770      	bx	lr

0800f81c <__retarget_lock_release_recursive>:
 800f81c:	4770      	bx	lr

0800f81e <memcpy>:
 800f81e:	440a      	add	r2, r1
 800f820:	4291      	cmp	r1, r2
 800f822:	f100 33ff 	add.w	r3, r0, #4294967295
 800f826:	d100      	bne.n	800f82a <memcpy+0xc>
 800f828:	4770      	bx	lr
 800f82a:	b510      	push	{r4, lr}
 800f82c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f830:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f834:	4291      	cmp	r1, r2
 800f836:	d1f9      	bne.n	800f82c <memcpy+0xe>
 800f838:	bd10      	pop	{r4, pc}
 800f83a:	0000      	movs	r0, r0
 800f83c:	0000      	movs	r0, r0
	...

0800f840 <nan>:
 800f840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f848 <nan+0x8>
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	00000000 	.word	0x00000000
 800f84c:	7ff80000 	.word	0x7ff80000

0800f850 <nanf>:
 800f850:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f858 <nanf+0x8>
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	7fc00000 	.word	0x7fc00000

0800f85c <__assert_func>:
 800f85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f85e:	4614      	mov	r4, r2
 800f860:	461a      	mov	r2, r3
 800f862:	4b09      	ldr	r3, [pc, #36]	@ (800f888 <__assert_func+0x2c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4605      	mov	r5, r0
 800f868:	68d8      	ldr	r0, [r3, #12]
 800f86a:	b954      	cbnz	r4, 800f882 <__assert_func+0x26>
 800f86c:	4b07      	ldr	r3, [pc, #28]	@ (800f88c <__assert_func+0x30>)
 800f86e:	461c      	mov	r4, r3
 800f870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f874:	9100      	str	r1, [sp, #0]
 800f876:	462b      	mov	r3, r5
 800f878:	4905      	ldr	r1, [pc, #20]	@ (800f890 <__assert_func+0x34>)
 800f87a:	f001 fc93 	bl	80111a4 <fiprintf>
 800f87e:	f001 fd37 	bl	80112f0 <abort>
 800f882:	4b04      	ldr	r3, [pc, #16]	@ (800f894 <__assert_func+0x38>)
 800f884:	e7f4      	b.n	800f870 <__assert_func+0x14>
 800f886:	bf00      	nop
 800f888:	200002c0 	.word	0x200002c0
 800f88c:	080122ed 	.word	0x080122ed
 800f890:	080122bf 	.word	0x080122bf
 800f894:	080122b2 	.word	0x080122b2

0800f898 <_free_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4605      	mov	r5, r0
 800f89c:	2900      	cmp	r1, #0
 800f89e:	d041      	beq.n	800f924 <_free_r+0x8c>
 800f8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8a4:	1f0c      	subs	r4, r1, #4
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	bfb8      	it	lt
 800f8aa:	18e4      	addlt	r4, r4, r3
 800f8ac:	f000 fc34 	bl	8010118 <__malloc_lock>
 800f8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f928 <_free_r+0x90>)
 800f8b2:	6813      	ldr	r3, [r2, #0]
 800f8b4:	b933      	cbnz	r3, 800f8c4 <_free_r+0x2c>
 800f8b6:	6063      	str	r3, [r4, #4]
 800f8b8:	6014      	str	r4, [r2, #0]
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8c0:	f000 bc30 	b.w	8010124 <__malloc_unlock>
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d908      	bls.n	800f8da <_free_r+0x42>
 800f8c8:	6820      	ldr	r0, [r4, #0]
 800f8ca:	1821      	adds	r1, r4, r0
 800f8cc:	428b      	cmp	r3, r1
 800f8ce:	bf01      	itttt	eq
 800f8d0:	6819      	ldreq	r1, [r3, #0]
 800f8d2:	685b      	ldreq	r3, [r3, #4]
 800f8d4:	1809      	addeq	r1, r1, r0
 800f8d6:	6021      	streq	r1, [r4, #0]
 800f8d8:	e7ed      	b.n	800f8b6 <_free_r+0x1e>
 800f8da:	461a      	mov	r2, r3
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	b10b      	cbz	r3, 800f8e4 <_free_r+0x4c>
 800f8e0:	42a3      	cmp	r3, r4
 800f8e2:	d9fa      	bls.n	800f8da <_free_r+0x42>
 800f8e4:	6811      	ldr	r1, [r2, #0]
 800f8e6:	1850      	adds	r0, r2, r1
 800f8e8:	42a0      	cmp	r0, r4
 800f8ea:	d10b      	bne.n	800f904 <_free_r+0x6c>
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	4401      	add	r1, r0
 800f8f0:	1850      	adds	r0, r2, r1
 800f8f2:	4283      	cmp	r3, r0
 800f8f4:	6011      	str	r1, [r2, #0]
 800f8f6:	d1e0      	bne.n	800f8ba <_free_r+0x22>
 800f8f8:	6818      	ldr	r0, [r3, #0]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	6053      	str	r3, [r2, #4]
 800f8fe:	4408      	add	r0, r1
 800f900:	6010      	str	r0, [r2, #0]
 800f902:	e7da      	b.n	800f8ba <_free_r+0x22>
 800f904:	d902      	bls.n	800f90c <_free_r+0x74>
 800f906:	230c      	movs	r3, #12
 800f908:	602b      	str	r3, [r5, #0]
 800f90a:	e7d6      	b.n	800f8ba <_free_r+0x22>
 800f90c:	6820      	ldr	r0, [r4, #0]
 800f90e:	1821      	adds	r1, r4, r0
 800f910:	428b      	cmp	r3, r1
 800f912:	bf04      	itt	eq
 800f914:	6819      	ldreq	r1, [r3, #0]
 800f916:	685b      	ldreq	r3, [r3, #4]
 800f918:	6063      	str	r3, [r4, #4]
 800f91a:	bf04      	itt	eq
 800f91c:	1809      	addeq	r1, r1, r0
 800f91e:	6021      	streq	r1, [r4, #0]
 800f920:	6054      	str	r4, [r2, #4]
 800f922:	e7ca      	b.n	800f8ba <_free_r+0x22>
 800f924:	bd38      	pop	{r3, r4, r5, pc}
 800f926:	bf00      	nop
 800f928:	200039c8 	.word	0x200039c8

0800f92c <rshift>:
 800f92c:	6903      	ldr	r3, [r0, #16]
 800f92e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f93a:	f100 0414 	add.w	r4, r0, #20
 800f93e:	dd45      	ble.n	800f9cc <rshift+0xa0>
 800f940:	f011 011f 	ands.w	r1, r1, #31
 800f944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f94c:	d10c      	bne.n	800f968 <rshift+0x3c>
 800f94e:	f100 0710 	add.w	r7, r0, #16
 800f952:	4629      	mov	r1, r5
 800f954:	42b1      	cmp	r1, r6
 800f956:	d334      	bcc.n	800f9c2 <rshift+0x96>
 800f958:	1a9b      	subs	r3, r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	1eea      	subs	r2, r5, #3
 800f95e:	4296      	cmp	r6, r2
 800f960:	bf38      	it	cc
 800f962:	2300      	movcc	r3, #0
 800f964:	4423      	add	r3, r4
 800f966:	e015      	b.n	800f994 <rshift+0x68>
 800f968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f96c:	f1c1 0820 	rsb	r8, r1, #32
 800f970:	40cf      	lsrs	r7, r1
 800f972:	f105 0e04 	add.w	lr, r5, #4
 800f976:	46a1      	mov	r9, r4
 800f978:	4576      	cmp	r6, lr
 800f97a:	46f4      	mov	ip, lr
 800f97c:	d815      	bhi.n	800f9aa <rshift+0x7e>
 800f97e:	1a9a      	subs	r2, r3, r2
 800f980:	0092      	lsls	r2, r2, #2
 800f982:	3a04      	subs	r2, #4
 800f984:	3501      	adds	r5, #1
 800f986:	42ae      	cmp	r6, r5
 800f988:	bf38      	it	cc
 800f98a:	2200      	movcc	r2, #0
 800f98c:	18a3      	adds	r3, r4, r2
 800f98e:	50a7      	str	r7, [r4, r2]
 800f990:	b107      	cbz	r7, 800f994 <rshift+0x68>
 800f992:	3304      	adds	r3, #4
 800f994:	1b1a      	subs	r2, r3, r4
 800f996:	42a3      	cmp	r3, r4
 800f998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f99c:	bf08      	it	eq
 800f99e:	2300      	moveq	r3, #0
 800f9a0:	6102      	str	r2, [r0, #16]
 800f9a2:	bf08      	it	eq
 800f9a4:	6143      	streq	r3, [r0, #20]
 800f9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9aa:	f8dc c000 	ldr.w	ip, [ip]
 800f9ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800f9b2:	ea4c 0707 	orr.w	r7, ip, r7
 800f9b6:	f849 7b04 	str.w	r7, [r9], #4
 800f9ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9be:	40cf      	lsrs	r7, r1
 800f9c0:	e7da      	b.n	800f978 <rshift+0x4c>
 800f9c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9ca:	e7c3      	b.n	800f954 <rshift+0x28>
 800f9cc:	4623      	mov	r3, r4
 800f9ce:	e7e1      	b.n	800f994 <rshift+0x68>

0800f9d0 <__hexdig_fun>:
 800f9d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f9d4:	2b09      	cmp	r3, #9
 800f9d6:	d802      	bhi.n	800f9de <__hexdig_fun+0xe>
 800f9d8:	3820      	subs	r0, #32
 800f9da:	b2c0      	uxtb	r0, r0
 800f9dc:	4770      	bx	lr
 800f9de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f9e2:	2b05      	cmp	r3, #5
 800f9e4:	d801      	bhi.n	800f9ea <__hexdig_fun+0x1a>
 800f9e6:	3847      	subs	r0, #71	@ 0x47
 800f9e8:	e7f7      	b.n	800f9da <__hexdig_fun+0xa>
 800f9ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f9ee:	2b05      	cmp	r3, #5
 800f9f0:	d801      	bhi.n	800f9f6 <__hexdig_fun+0x26>
 800f9f2:	3827      	subs	r0, #39	@ 0x27
 800f9f4:	e7f1      	b.n	800f9da <__hexdig_fun+0xa>
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	4770      	bx	lr
	...

0800f9fc <__gethex>:
 800f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	b085      	sub	sp, #20
 800fa02:	468a      	mov	sl, r1
 800fa04:	9302      	str	r3, [sp, #8]
 800fa06:	680b      	ldr	r3, [r1, #0]
 800fa08:	9001      	str	r0, [sp, #4]
 800fa0a:	4690      	mov	r8, r2
 800fa0c:	1c9c      	adds	r4, r3, #2
 800fa0e:	46a1      	mov	r9, r4
 800fa10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fa14:	2830      	cmp	r0, #48	@ 0x30
 800fa16:	d0fa      	beq.n	800fa0e <__gethex+0x12>
 800fa18:	eba9 0303 	sub.w	r3, r9, r3
 800fa1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa20:	f7ff ffd6 	bl	800f9d0 <__hexdig_fun>
 800fa24:	4605      	mov	r5, r0
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d168      	bne.n	800fafc <__gethex+0x100>
 800fa2a:	49a0      	ldr	r1, [pc, #640]	@ (800fcac <__gethex+0x2b0>)
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	4648      	mov	r0, r9
 800fa30:	f7ff fe00 	bl	800f634 <strncmp>
 800fa34:	4607      	mov	r7, r0
 800fa36:	2800      	cmp	r0, #0
 800fa38:	d167      	bne.n	800fb0a <__gethex+0x10e>
 800fa3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa3e:	4626      	mov	r6, r4
 800fa40:	f7ff ffc6 	bl	800f9d0 <__hexdig_fun>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d062      	beq.n	800fb0e <__gethex+0x112>
 800fa48:	4623      	mov	r3, r4
 800fa4a:	7818      	ldrb	r0, [r3, #0]
 800fa4c:	2830      	cmp	r0, #48	@ 0x30
 800fa4e:	4699      	mov	r9, r3
 800fa50:	f103 0301 	add.w	r3, r3, #1
 800fa54:	d0f9      	beq.n	800fa4a <__gethex+0x4e>
 800fa56:	f7ff ffbb 	bl	800f9d0 <__hexdig_fun>
 800fa5a:	fab0 f580 	clz	r5, r0
 800fa5e:	096d      	lsrs	r5, r5, #5
 800fa60:	f04f 0b01 	mov.w	fp, #1
 800fa64:	464a      	mov	r2, r9
 800fa66:	4616      	mov	r6, r2
 800fa68:	3201      	adds	r2, #1
 800fa6a:	7830      	ldrb	r0, [r6, #0]
 800fa6c:	f7ff ffb0 	bl	800f9d0 <__hexdig_fun>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d1f8      	bne.n	800fa66 <__gethex+0x6a>
 800fa74:	498d      	ldr	r1, [pc, #564]	@ (800fcac <__gethex+0x2b0>)
 800fa76:	2201      	movs	r2, #1
 800fa78:	4630      	mov	r0, r6
 800fa7a:	f7ff fddb 	bl	800f634 <strncmp>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d13f      	bne.n	800fb02 <__gethex+0x106>
 800fa82:	b944      	cbnz	r4, 800fa96 <__gethex+0x9a>
 800fa84:	1c74      	adds	r4, r6, #1
 800fa86:	4622      	mov	r2, r4
 800fa88:	4616      	mov	r6, r2
 800fa8a:	3201      	adds	r2, #1
 800fa8c:	7830      	ldrb	r0, [r6, #0]
 800fa8e:	f7ff ff9f 	bl	800f9d0 <__hexdig_fun>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d1f8      	bne.n	800fa88 <__gethex+0x8c>
 800fa96:	1ba4      	subs	r4, r4, r6
 800fa98:	00a7      	lsls	r7, r4, #2
 800fa9a:	7833      	ldrb	r3, [r6, #0]
 800fa9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800faa0:	2b50      	cmp	r3, #80	@ 0x50
 800faa2:	d13e      	bne.n	800fb22 <__gethex+0x126>
 800faa4:	7873      	ldrb	r3, [r6, #1]
 800faa6:	2b2b      	cmp	r3, #43	@ 0x2b
 800faa8:	d033      	beq.n	800fb12 <__gethex+0x116>
 800faaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800faac:	d034      	beq.n	800fb18 <__gethex+0x11c>
 800faae:	1c71      	adds	r1, r6, #1
 800fab0:	2400      	movs	r4, #0
 800fab2:	7808      	ldrb	r0, [r1, #0]
 800fab4:	f7ff ff8c 	bl	800f9d0 <__hexdig_fun>
 800fab8:	1e43      	subs	r3, r0, #1
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b18      	cmp	r3, #24
 800fabe:	d830      	bhi.n	800fb22 <__gethex+0x126>
 800fac0:	f1a0 0210 	sub.w	r2, r0, #16
 800fac4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fac8:	f7ff ff82 	bl	800f9d0 <__hexdig_fun>
 800facc:	f100 3cff 	add.w	ip, r0, #4294967295
 800fad0:	fa5f fc8c 	uxtb.w	ip, ip
 800fad4:	f1bc 0f18 	cmp.w	ip, #24
 800fad8:	f04f 030a 	mov.w	r3, #10
 800fadc:	d91e      	bls.n	800fb1c <__gethex+0x120>
 800fade:	b104      	cbz	r4, 800fae2 <__gethex+0xe6>
 800fae0:	4252      	negs	r2, r2
 800fae2:	4417      	add	r7, r2
 800fae4:	f8ca 1000 	str.w	r1, [sl]
 800fae8:	b1ed      	cbz	r5, 800fb26 <__gethex+0x12a>
 800faea:	f1bb 0f00 	cmp.w	fp, #0
 800faee:	bf0c      	ite	eq
 800faf0:	2506      	moveq	r5, #6
 800faf2:	2500      	movne	r5, #0
 800faf4:	4628      	mov	r0, r5
 800faf6:	b005      	add	sp, #20
 800faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafc:	2500      	movs	r5, #0
 800fafe:	462c      	mov	r4, r5
 800fb00:	e7b0      	b.n	800fa64 <__gethex+0x68>
 800fb02:	2c00      	cmp	r4, #0
 800fb04:	d1c7      	bne.n	800fa96 <__gethex+0x9a>
 800fb06:	4627      	mov	r7, r4
 800fb08:	e7c7      	b.n	800fa9a <__gethex+0x9e>
 800fb0a:	464e      	mov	r6, r9
 800fb0c:	462f      	mov	r7, r5
 800fb0e:	2501      	movs	r5, #1
 800fb10:	e7c3      	b.n	800fa9a <__gethex+0x9e>
 800fb12:	2400      	movs	r4, #0
 800fb14:	1cb1      	adds	r1, r6, #2
 800fb16:	e7cc      	b.n	800fab2 <__gethex+0xb6>
 800fb18:	2401      	movs	r4, #1
 800fb1a:	e7fb      	b.n	800fb14 <__gethex+0x118>
 800fb1c:	fb03 0002 	mla	r0, r3, r2, r0
 800fb20:	e7ce      	b.n	800fac0 <__gethex+0xc4>
 800fb22:	4631      	mov	r1, r6
 800fb24:	e7de      	b.n	800fae4 <__gethex+0xe8>
 800fb26:	eba6 0309 	sub.w	r3, r6, r9
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	2b07      	cmp	r3, #7
 800fb30:	dc0a      	bgt.n	800fb48 <__gethex+0x14c>
 800fb32:	9801      	ldr	r0, [sp, #4]
 800fb34:	f000 fafc 	bl	8010130 <_Balloc>
 800fb38:	4604      	mov	r4, r0
 800fb3a:	b940      	cbnz	r0, 800fb4e <__gethex+0x152>
 800fb3c:	4b5c      	ldr	r3, [pc, #368]	@ (800fcb0 <__gethex+0x2b4>)
 800fb3e:	4602      	mov	r2, r0
 800fb40:	21e4      	movs	r1, #228	@ 0xe4
 800fb42:	485c      	ldr	r0, [pc, #368]	@ (800fcb4 <__gethex+0x2b8>)
 800fb44:	f7ff fe8a 	bl	800f85c <__assert_func>
 800fb48:	3101      	adds	r1, #1
 800fb4a:	105b      	asrs	r3, r3, #1
 800fb4c:	e7ef      	b.n	800fb2e <__gethex+0x132>
 800fb4e:	f100 0a14 	add.w	sl, r0, #20
 800fb52:	2300      	movs	r3, #0
 800fb54:	4655      	mov	r5, sl
 800fb56:	469b      	mov	fp, r3
 800fb58:	45b1      	cmp	r9, r6
 800fb5a:	d337      	bcc.n	800fbcc <__gethex+0x1d0>
 800fb5c:	f845 bb04 	str.w	fp, [r5], #4
 800fb60:	eba5 050a 	sub.w	r5, r5, sl
 800fb64:	10ad      	asrs	r5, r5, #2
 800fb66:	6125      	str	r5, [r4, #16]
 800fb68:	4658      	mov	r0, fp
 800fb6a:	f000 fbd3 	bl	8010314 <__hi0bits>
 800fb6e:	016d      	lsls	r5, r5, #5
 800fb70:	f8d8 6000 	ldr.w	r6, [r8]
 800fb74:	1a2d      	subs	r5, r5, r0
 800fb76:	42b5      	cmp	r5, r6
 800fb78:	dd54      	ble.n	800fc24 <__gethex+0x228>
 800fb7a:	1bad      	subs	r5, r5, r6
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f000 ff67 	bl	8010a52 <__any_on>
 800fb84:	4681      	mov	r9, r0
 800fb86:	b178      	cbz	r0, 800fba8 <__gethex+0x1ac>
 800fb88:	1e6b      	subs	r3, r5, #1
 800fb8a:	1159      	asrs	r1, r3, #5
 800fb8c:	f003 021f 	and.w	r2, r3, #31
 800fb90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb94:	f04f 0901 	mov.w	r9, #1
 800fb98:	fa09 f202 	lsl.w	r2, r9, r2
 800fb9c:	420a      	tst	r2, r1
 800fb9e:	d003      	beq.n	800fba8 <__gethex+0x1ac>
 800fba0:	454b      	cmp	r3, r9
 800fba2:	dc36      	bgt.n	800fc12 <__gethex+0x216>
 800fba4:	f04f 0902 	mov.w	r9, #2
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7ff febe 	bl	800f92c <rshift>
 800fbb0:	442f      	add	r7, r5
 800fbb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbb6:	42bb      	cmp	r3, r7
 800fbb8:	da42      	bge.n	800fc40 <__gethex+0x244>
 800fbba:	9801      	ldr	r0, [sp, #4]
 800fbbc:	4621      	mov	r1, r4
 800fbbe:	f000 faf7 	bl	80101b0 <_Bfree>
 800fbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	25a3      	movs	r5, #163	@ 0xa3
 800fbca:	e793      	b.n	800faf4 <__gethex+0xf8>
 800fbcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fbd0:	2a2e      	cmp	r2, #46	@ 0x2e
 800fbd2:	d012      	beq.n	800fbfa <__gethex+0x1fe>
 800fbd4:	2b20      	cmp	r3, #32
 800fbd6:	d104      	bne.n	800fbe2 <__gethex+0x1e6>
 800fbd8:	f845 bb04 	str.w	fp, [r5], #4
 800fbdc:	f04f 0b00 	mov.w	fp, #0
 800fbe0:	465b      	mov	r3, fp
 800fbe2:	7830      	ldrb	r0, [r6, #0]
 800fbe4:	9303      	str	r3, [sp, #12]
 800fbe6:	f7ff fef3 	bl	800f9d0 <__hexdig_fun>
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	f000 000f 	and.w	r0, r0, #15
 800fbf0:	4098      	lsls	r0, r3
 800fbf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	e7ae      	b.n	800fb58 <__gethex+0x15c>
 800fbfa:	45b1      	cmp	r9, r6
 800fbfc:	d8ea      	bhi.n	800fbd4 <__gethex+0x1d8>
 800fbfe:	492b      	ldr	r1, [pc, #172]	@ (800fcac <__gethex+0x2b0>)
 800fc00:	9303      	str	r3, [sp, #12]
 800fc02:	2201      	movs	r2, #1
 800fc04:	4630      	mov	r0, r6
 800fc06:	f7ff fd15 	bl	800f634 <strncmp>
 800fc0a:	9b03      	ldr	r3, [sp, #12]
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1e1      	bne.n	800fbd4 <__gethex+0x1d8>
 800fc10:	e7a2      	b.n	800fb58 <__gethex+0x15c>
 800fc12:	1ea9      	subs	r1, r5, #2
 800fc14:	4620      	mov	r0, r4
 800fc16:	f000 ff1c 	bl	8010a52 <__any_on>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d0c2      	beq.n	800fba4 <__gethex+0x1a8>
 800fc1e:	f04f 0903 	mov.w	r9, #3
 800fc22:	e7c1      	b.n	800fba8 <__gethex+0x1ac>
 800fc24:	da09      	bge.n	800fc3a <__gethex+0x23e>
 800fc26:	1b75      	subs	r5, r6, r5
 800fc28:	4621      	mov	r1, r4
 800fc2a:	9801      	ldr	r0, [sp, #4]
 800fc2c:	462a      	mov	r2, r5
 800fc2e:	f000 fcd7 	bl	80105e0 <__lshift>
 800fc32:	1b7f      	subs	r7, r7, r5
 800fc34:	4604      	mov	r4, r0
 800fc36:	f100 0a14 	add.w	sl, r0, #20
 800fc3a:	f04f 0900 	mov.w	r9, #0
 800fc3e:	e7b8      	b.n	800fbb2 <__gethex+0x1b6>
 800fc40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc44:	42bd      	cmp	r5, r7
 800fc46:	dd6f      	ble.n	800fd28 <__gethex+0x32c>
 800fc48:	1bed      	subs	r5, r5, r7
 800fc4a:	42ae      	cmp	r6, r5
 800fc4c:	dc34      	bgt.n	800fcb8 <__gethex+0x2bc>
 800fc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d022      	beq.n	800fc9c <__gethex+0x2a0>
 800fc56:	2b03      	cmp	r3, #3
 800fc58:	d024      	beq.n	800fca4 <__gethex+0x2a8>
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d115      	bne.n	800fc8a <__gethex+0x28e>
 800fc5e:	42ae      	cmp	r6, r5
 800fc60:	d113      	bne.n	800fc8a <__gethex+0x28e>
 800fc62:	2e01      	cmp	r6, #1
 800fc64:	d10b      	bne.n	800fc7e <__gethex+0x282>
 800fc66:	9a02      	ldr	r2, [sp, #8]
 800fc68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	2301      	movs	r3, #1
 800fc70:	6123      	str	r3, [r4, #16]
 800fc72:	f8ca 3000 	str.w	r3, [sl]
 800fc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc78:	2562      	movs	r5, #98	@ 0x62
 800fc7a:	601c      	str	r4, [r3, #0]
 800fc7c:	e73a      	b.n	800faf4 <__gethex+0xf8>
 800fc7e:	1e71      	subs	r1, r6, #1
 800fc80:	4620      	mov	r0, r4
 800fc82:	f000 fee6 	bl	8010a52 <__any_on>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1ed      	bne.n	800fc66 <__gethex+0x26a>
 800fc8a:	9801      	ldr	r0, [sp, #4]
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	f000 fa8f 	bl	80101b0 <_Bfree>
 800fc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc94:	2300      	movs	r3, #0
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	2550      	movs	r5, #80	@ 0x50
 800fc9a:	e72b      	b.n	800faf4 <__gethex+0xf8>
 800fc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1f3      	bne.n	800fc8a <__gethex+0x28e>
 800fca2:	e7e0      	b.n	800fc66 <__gethex+0x26a>
 800fca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1dd      	bne.n	800fc66 <__gethex+0x26a>
 800fcaa:	e7ee      	b.n	800fc8a <__gethex+0x28e>
 800fcac:	080120d8 	.word	0x080120d8
 800fcb0:	080122ee 	.word	0x080122ee
 800fcb4:	080122ff 	.word	0x080122ff
 800fcb8:	1e6f      	subs	r7, r5, #1
 800fcba:	f1b9 0f00 	cmp.w	r9, #0
 800fcbe:	d130      	bne.n	800fd22 <__gethex+0x326>
 800fcc0:	b127      	cbz	r7, 800fccc <__gethex+0x2d0>
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 fec4 	bl	8010a52 <__any_on>
 800fcca:	4681      	mov	r9, r0
 800fccc:	117a      	asrs	r2, r7, #5
 800fcce:	2301      	movs	r3, #1
 800fcd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fcd4:	f007 071f 	and.w	r7, r7, #31
 800fcd8:	40bb      	lsls	r3, r7
 800fcda:	4213      	tst	r3, r2
 800fcdc:	4629      	mov	r1, r5
 800fcde:	4620      	mov	r0, r4
 800fce0:	bf18      	it	ne
 800fce2:	f049 0902 	orrne.w	r9, r9, #2
 800fce6:	f7ff fe21 	bl	800f92c <rshift>
 800fcea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fcee:	1b76      	subs	r6, r6, r5
 800fcf0:	2502      	movs	r5, #2
 800fcf2:	f1b9 0f00 	cmp.w	r9, #0
 800fcf6:	d047      	beq.n	800fd88 <__gethex+0x38c>
 800fcf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d015      	beq.n	800fd2c <__gethex+0x330>
 800fd00:	2b03      	cmp	r3, #3
 800fd02:	d017      	beq.n	800fd34 <__gethex+0x338>
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d109      	bne.n	800fd1c <__gethex+0x320>
 800fd08:	f019 0f02 	tst.w	r9, #2
 800fd0c:	d006      	beq.n	800fd1c <__gethex+0x320>
 800fd0e:	f8da 3000 	ldr.w	r3, [sl]
 800fd12:	ea49 0903 	orr.w	r9, r9, r3
 800fd16:	f019 0f01 	tst.w	r9, #1
 800fd1a:	d10e      	bne.n	800fd3a <__gethex+0x33e>
 800fd1c:	f045 0510 	orr.w	r5, r5, #16
 800fd20:	e032      	b.n	800fd88 <__gethex+0x38c>
 800fd22:	f04f 0901 	mov.w	r9, #1
 800fd26:	e7d1      	b.n	800fccc <__gethex+0x2d0>
 800fd28:	2501      	movs	r5, #1
 800fd2a:	e7e2      	b.n	800fcf2 <__gethex+0x2f6>
 800fd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd2e:	f1c3 0301 	rsb	r3, r3, #1
 800fd32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d0f0      	beq.n	800fd1c <__gethex+0x320>
 800fd3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd3e:	f104 0314 	add.w	r3, r4, #20
 800fd42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd4a:	f04f 0c00 	mov.w	ip, #0
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd58:	d01b      	beq.n	800fd92 <__gethex+0x396>
 800fd5a:	3201      	adds	r2, #1
 800fd5c:	6002      	str	r2, [r0, #0]
 800fd5e:	2d02      	cmp	r5, #2
 800fd60:	f104 0314 	add.w	r3, r4, #20
 800fd64:	d13c      	bne.n	800fde0 <__gethex+0x3e4>
 800fd66:	f8d8 2000 	ldr.w	r2, [r8]
 800fd6a:	3a01      	subs	r2, #1
 800fd6c:	42b2      	cmp	r2, r6
 800fd6e:	d109      	bne.n	800fd84 <__gethex+0x388>
 800fd70:	1171      	asrs	r1, r6, #5
 800fd72:	2201      	movs	r2, #1
 800fd74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd78:	f006 061f 	and.w	r6, r6, #31
 800fd7c:	fa02 f606 	lsl.w	r6, r2, r6
 800fd80:	421e      	tst	r6, r3
 800fd82:	d13a      	bne.n	800fdfa <__gethex+0x3fe>
 800fd84:	f045 0520 	orr.w	r5, r5, #32
 800fd88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd8a:	601c      	str	r4, [r3, #0]
 800fd8c:	9b02      	ldr	r3, [sp, #8]
 800fd8e:	601f      	str	r7, [r3, #0]
 800fd90:	e6b0      	b.n	800faf4 <__gethex+0xf8>
 800fd92:	4299      	cmp	r1, r3
 800fd94:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd98:	d8d9      	bhi.n	800fd4e <__gethex+0x352>
 800fd9a:	68a3      	ldr	r3, [r4, #8]
 800fd9c:	459b      	cmp	fp, r3
 800fd9e:	db17      	blt.n	800fdd0 <__gethex+0x3d4>
 800fda0:	6861      	ldr	r1, [r4, #4]
 800fda2:	9801      	ldr	r0, [sp, #4]
 800fda4:	3101      	adds	r1, #1
 800fda6:	f000 f9c3 	bl	8010130 <_Balloc>
 800fdaa:	4681      	mov	r9, r0
 800fdac:	b918      	cbnz	r0, 800fdb6 <__gethex+0x3ba>
 800fdae:	4b1a      	ldr	r3, [pc, #104]	@ (800fe18 <__gethex+0x41c>)
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	2184      	movs	r1, #132	@ 0x84
 800fdb4:	e6c5      	b.n	800fb42 <__gethex+0x146>
 800fdb6:	6922      	ldr	r2, [r4, #16]
 800fdb8:	3202      	adds	r2, #2
 800fdba:	f104 010c 	add.w	r1, r4, #12
 800fdbe:	0092      	lsls	r2, r2, #2
 800fdc0:	300c      	adds	r0, #12
 800fdc2:	f7ff fd2c 	bl	800f81e <memcpy>
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	9801      	ldr	r0, [sp, #4]
 800fdca:	f000 f9f1 	bl	80101b0 <_Bfree>
 800fdce:	464c      	mov	r4, r9
 800fdd0:	6923      	ldr	r3, [r4, #16]
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdd8:	6122      	str	r2, [r4, #16]
 800fdda:	2201      	movs	r2, #1
 800fddc:	615a      	str	r2, [r3, #20]
 800fdde:	e7be      	b.n	800fd5e <__gethex+0x362>
 800fde0:	6922      	ldr	r2, [r4, #16]
 800fde2:	455a      	cmp	r2, fp
 800fde4:	dd0b      	ble.n	800fdfe <__gethex+0x402>
 800fde6:	2101      	movs	r1, #1
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7ff fd9f 	bl	800f92c <rshift>
 800fdee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdf2:	3701      	adds	r7, #1
 800fdf4:	42bb      	cmp	r3, r7
 800fdf6:	f6ff aee0 	blt.w	800fbba <__gethex+0x1be>
 800fdfa:	2501      	movs	r5, #1
 800fdfc:	e7c2      	b.n	800fd84 <__gethex+0x388>
 800fdfe:	f016 061f 	ands.w	r6, r6, #31
 800fe02:	d0fa      	beq.n	800fdfa <__gethex+0x3fe>
 800fe04:	4453      	add	r3, sl
 800fe06:	f1c6 0620 	rsb	r6, r6, #32
 800fe0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe0e:	f000 fa81 	bl	8010314 <__hi0bits>
 800fe12:	42b0      	cmp	r0, r6
 800fe14:	dbe7      	blt.n	800fde6 <__gethex+0x3ea>
 800fe16:	e7f0      	b.n	800fdfa <__gethex+0x3fe>
 800fe18:	080122ee 	.word	0x080122ee

0800fe1c <L_shift>:
 800fe1c:	f1c2 0208 	rsb	r2, r2, #8
 800fe20:	0092      	lsls	r2, r2, #2
 800fe22:	b570      	push	{r4, r5, r6, lr}
 800fe24:	f1c2 0620 	rsb	r6, r2, #32
 800fe28:	6843      	ldr	r3, [r0, #4]
 800fe2a:	6804      	ldr	r4, [r0, #0]
 800fe2c:	fa03 f506 	lsl.w	r5, r3, r6
 800fe30:	432c      	orrs	r4, r5
 800fe32:	40d3      	lsrs	r3, r2
 800fe34:	6004      	str	r4, [r0, #0]
 800fe36:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe3a:	4288      	cmp	r0, r1
 800fe3c:	d3f4      	bcc.n	800fe28 <L_shift+0xc>
 800fe3e:	bd70      	pop	{r4, r5, r6, pc}

0800fe40 <__match>:
 800fe40:	b530      	push	{r4, r5, lr}
 800fe42:	6803      	ldr	r3, [r0, #0]
 800fe44:	3301      	adds	r3, #1
 800fe46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe4a:	b914      	cbnz	r4, 800fe52 <__match+0x12>
 800fe4c:	6003      	str	r3, [r0, #0]
 800fe4e:	2001      	movs	r0, #1
 800fe50:	bd30      	pop	{r4, r5, pc}
 800fe52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fe5a:	2d19      	cmp	r5, #25
 800fe5c:	bf98      	it	ls
 800fe5e:	3220      	addls	r2, #32
 800fe60:	42a2      	cmp	r2, r4
 800fe62:	d0f0      	beq.n	800fe46 <__match+0x6>
 800fe64:	2000      	movs	r0, #0
 800fe66:	e7f3      	b.n	800fe50 <__match+0x10>

0800fe68 <__hexnan>:
 800fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	680b      	ldr	r3, [r1, #0]
 800fe6e:	6801      	ldr	r1, [r0, #0]
 800fe70:	115e      	asrs	r6, r3, #5
 800fe72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe76:	f013 031f 	ands.w	r3, r3, #31
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	bf18      	it	ne
 800fe7e:	3604      	addne	r6, #4
 800fe80:	2500      	movs	r5, #0
 800fe82:	1f37      	subs	r7, r6, #4
 800fe84:	4682      	mov	sl, r0
 800fe86:	4690      	mov	r8, r2
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe8e:	46b9      	mov	r9, r7
 800fe90:	463c      	mov	r4, r7
 800fe92:	9502      	str	r5, [sp, #8]
 800fe94:	46ab      	mov	fp, r5
 800fe96:	784a      	ldrb	r2, [r1, #1]
 800fe98:	1c4b      	adds	r3, r1, #1
 800fe9a:	9303      	str	r3, [sp, #12]
 800fe9c:	b342      	cbz	r2, 800fef0 <__hexnan+0x88>
 800fe9e:	4610      	mov	r0, r2
 800fea0:	9105      	str	r1, [sp, #20]
 800fea2:	9204      	str	r2, [sp, #16]
 800fea4:	f7ff fd94 	bl	800f9d0 <__hexdig_fun>
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d151      	bne.n	800ff50 <__hexnan+0xe8>
 800feac:	9a04      	ldr	r2, [sp, #16]
 800feae:	9905      	ldr	r1, [sp, #20]
 800feb0:	2a20      	cmp	r2, #32
 800feb2:	d818      	bhi.n	800fee6 <__hexnan+0x7e>
 800feb4:	9b02      	ldr	r3, [sp, #8]
 800feb6:	459b      	cmp	fp, r3
 800feb8:	dd13      	ble.n	800fee2 <__hexnan+0x7a>
 800feba:	454c      	cmp	r4, r9
 800febc:	d206      	bcs.n	800fecc <__hexnan+0x64>
 800febe:	2d07      	cmp	r5, #7
 800fec0:	dc04      	bgt.n	800fecc <__hexnan+0x64>
 800fec2:	462a      	mov	r2, r5
 800fec4:	4649      	mov	r1, r9
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff ffa8 	bl	800fe1c <L_shift>
 800fecc:	4544      	cmp	r4, r8
 800fece:	d952      	bls.n	800ff76 <__hexnan+0x10e>
 800fed0:	2300      	movs	r3, #0
 800fed2:	f1a4 0904 	sub.w	r9, r4, #4
 800fed6:	f844 3c04 	str.w	r3, [r4, #-4]
 800feda:	f8cd b008 	str.w	fp, [sp, #8]
 800fede:	464c      	mov	r4, r9
 800fee0:	461d      	mov	r5, r3
 800fee2:	9903      	ldr	r1, [sp, #12]
 800fee4:	e7d7      	b.n	800fe96 <__hexnan+0x2e>
 800fee6:	2a29      	cmp	r2, #41	@ 0x29
 800fee8:	d157      	bne.n	800ff9a <__hexnan+0x132>
 800feea:	3102      	adds	r1, #2
 800feec:	f8ca 1000 	str.w	r1, [sl]
 800fef0:	f1bb 0f00 	cmp.w	fp, #0
 800fef4:	d051      	beq.n	800ff9a <__hexnan+0x132>
 800fef6:	454c      	cmp	r4, r9
 800fef8:	d206      	bcs.n	800ff08 <__hexnan+0xa0>
 800fefa:	2d07      	cmp	r5, #7
 800fefc:	dc04      	bgt.n	800ff08 <__hexnan+0xa0>
 800fefe:	462a      	mov	r2, r5
 800ff00:	4649      	mov	r1, r9
 800ff02:	4620      	mov	r0, r4
 800ff04:	f7ff ff8a 	bl	800fe1c <L_shift>
 800ff08:	4544      	cmp	r4, r8
 800ff0a:	d936      	bls.n	800ff7a <__hexnan+0x112>
 800ff0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ff10:	4623      	mov	r3, r4
 800ff12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff1a:	429f      	cmp	r7, r3
 800ff1c:	d2f9      	bcs.n	800ff12 <__hexnan+0xaa>
 800ff1e:	1b3b      	subs	r3, r7, r4
 800ff20:	f023 0303 	bic.w	r3, r3, #3
 800ff24:	3304      	adds	r3, #4
 800ff26:	3401      	adds	r4, #1
 800ff28:	3e03      	subs	r6, #3
 800ff2a:	42b4      	cmp	r4, r6
 800ff2c:	bf88      	it	hi
 800ff2e:	2304      	movhi	r3, #4
 800ff30:	4443      	add	r3, r8
 800ff32:	2200      	movs	r2, #0
 800ff34:	f843 2b04 	str.w	r2, [r3], #4
 800ff38:	429f      	cmp	r7, r3
 800ff3a:	d2fb      	bcs.n	800ff34 <__hexnan+0xcc>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	b91b      	cbnz	r3, 800ff48 <__hexnan+0xe0>
 800ff40:	4547      	cmp	r7, r8
 800ff42:	d128      	bne.n	800ff96 <__hexnan+0x12e>
 800ff44:	2301      	movs	r3, #1
 800ff46:	603b      	str	r3, [r7, #0]
 800ff48:	2005      	movs	r0, #5
 800ff4a:	b007      	add	sp, #28
 800ff4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff50:	3501      	adds	r5, #1
 800ff52:	2d08      	cmp	r5, #8
 800ff54:	f10b 0b01 	add.w	fp, fp, #1
 800ff58:	dd06      	ble.n	800ff68 <__hexnan+0x100>
 800ff5a:	4544      	cmp	r4, r8
 800ff5c:	d9c1      	bls.n	800fee2 <__hexnan+0x7a>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff64:	2501      	movs	r5, #1
 800ff66:	3c04      	subs	r4, #4
 800ff68:	6822      	ldr	r2, [r4, #0]
 800ff6a:	f000 000f 	and.w	r0, r0, #15
 800ff6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff72:	6020      	str	r0, [r4, #0]
 800ff74:	e7b5      	b.n	800fee2 <__hexnan+0x7a>
 800ff76:	2508      	movs	r5, #8
 800ff78:	e7b3      	b.n	800fee2 <__hexnan+0x7a>
 800ff7a:	9b01      	ldr	r3, [sp, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d0dd      	beq.n	800ff3c <__hexnan+0xd4>
 800ff80:	f1c3 0320 	rsb	r3, r3, #32
 800ff84:	f04f 32ff 	mov.w	r2, #4294967295
 800ff88:	40da      	lsrs	r2, r3
 800ff8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff8e:	4013      	ands	r3, r2
 800ff90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff94:	e7d2      	b.n	800ff3c <__hexnan+0xd4>
 800ff96:	3f04      	subs	r7, #4
 800ff98:	e7d0      	b.n	800ff3c <__hexnan+0xd4>
 800ff9a:	2004      	movs	r0, #4
 800ff9c:	e7d5      	b.n	800ff4a <__hexnan+0xe2>
	...

0800ffa0 <malloc>:
 800ffa0:	4b02      	ldr	r3, [pc, #8]	@ (800ffac <malloc+0xc>)
 800ffa2:	4601      	mov	r1, r0
 800ffa4:	6818      	ldr	r0, [r3, #0]
 800ffa6:	f000 b825 	b.w	800fff4 <_malloc_r>
 800ffaa:	bf00      	nop
 800ffac:	200002c0 	.word	0x200002c0

0800ffb0 <sbrk_aligned>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	4e0f      	ldr	r6, [pc, #60]	@ (800fff0 <sbrk_aligned+0x40>)
 800ffb4:	460c      	mov	r4, r1
 800ffb6:	6831      	ldr	r1, [r6, #0]
 800ffb8:	4605      	mov	r5, r0
 800ffba:	b911      	cbnz	r1, 800ffc2 <sbrk_aligned+0x12>
 800ffbc:	f001 f988 	bl	80112d0 <_sbrk_r>
 800ffc0:	6030      	str	r0, [r6, #0]
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f001 f983 	bl	80112d0 <_sbrk_r>
 800ffca:	1c43      	adds	r3, r0, #1
 800ffcc:	d103      	bne.n	800ffd6 <sbrk_aligned+0x26>
 800ffce:	f04f 34ff 	mov.w	r4, #4294967295
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	bd70      	pop	{r4, r5, r6, pc}
 800ffd6:	1cc4      	adds	r4, r0, #3
 800ffd8:	f024 0403 	bic.w	r4, r4, #3
 800ffdc:	42a0      	cmp	r0, r4
 800ffde:	d0f8      	beq.n	800ffd2 <sbrk_aligned+0x22>
 800ffe0:	1a21      	subs	r1, r4, r0
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	f001 f974 	bl	80112d0 <_sbrk_r>
 800ffe8:	3001      	adds	r0, #1
 800ffea:	d1f2      	bne.n	800ffd2 <sbrk_aligned+0x22>
 800ffec:	e7ef      	b.n	800ffce <sbrk_aligned+0x1e>
 800ffee:	bf00      	nop
 800fff0:	200039c4 	.word	0x200039c4

0800fff4 <_malloc_r>:
 800fff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff8:	1ccd      	adds	r5, r1, #3
 800fffa:	f025 0503 	bic.w	r5, r5, #3
 800fffe:	3508      	adds	r5, #8
 8010000:	2d0c      	cmp	r5, #12
 8010002:	bf38      	it	cc
 8010004:	250c      	movcc	r5, #12
 8010006:	2d00      	cmp	r5, #0
 8010008:	4606      	mov	r6, r0
 801000a:	db01      	blt.n	8010010 <_malloc_r+0x1c>
 801000c:	42a9      	cmp	r1, r5
 801000e:	d904      	bls.n	801001a <_malloc_r+0x26>
 8010010:	230c      	movs	r3, #12
 8010012:	6033      	str	r3, [r6, #0]
 8010014:	2000      	movs	r0, #0
 8010016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801001a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100f0 <_malloc_r+0xfc>
 801001e:	f000 f87b 	bl	8010118 <__malloc_lock>
 8010022:	f8d8 3000 	ldr.w	r3, [r8]
 8010026:	461c      	mov	r4, r3
 8010028:	bb44      	cbnz	r4, 801007c <_malloc_r+0x88>
 801002a:	4629      	mov	r1, r5
 801002c:	4630      	mov	r0, r6
 801002e:	f7ff ffbf 	bl	800ffb0 <sbrk_aligned>
 8010032:	1c43      	adds	r3, r0, #1
 8010034:	4604      	mov	r4, r0
 8010036:	d158      	bne.n	80100ea <_malloc_r+0xf6>
 8010038:	f8d8 4000 	ldr.w	r4, [r8]
 801003c:	4627      	mov	r7, r4
 801003e:	2f00      	cmp	r7, #0
 8010040:	d143      	bne.n	80100ca <_malloc_r+0xd6>
 8010042:	2c00      	cmp	r4, #0
 8010044:	d04b      	beq.n	80100de <_malloc_r+0xea>
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	4639      	mov	r1, r7
 801004a:	4630      	mov	r0, r6
 801004c:	eb04 0903 	add.w	r9, r4, r3
 8010050:	f001 f93e 	bl	80112d0 <_sbrk_r>
 8010054:	4581      	cmp	r9, r0
 8010056:	d142      	bne.n	80100de <_malloc_r+0xea>
 8010058:	6821      	ldr	r1, [r4, #0]
 801005a:	1a6d      	subs	r5, r5, r1
 801005c:	4629      	mov	r1, r5
 801005e:	4630      	mov	r0, r6
 8010060:	f7ff ffa6 	bl	800ffb0 <sbrk_aligned>
 8010064:	3001      	adds	r0, #1
 8010066:	d03a      	beq.n	80100de <_malloc_r+0xea>
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	442b      	add	r3, r5
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	f8d8 3000 	ldr.w	r3, [r8]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	bb62      	cbnz	r2, 80100d0 <_malloc_r+0xdc>
 8010076:	f8c8 7000 	str.w	r7, [r8]
 801007a:	e00f      	b.n	801009c <_malloc_r+0xa8>
 801007c:	6822      	ldr	r2, [r4, #0]
 801007e:	1b52      	subs	r2, r2, r5
 8010080:	d420      	bmi.n	80100c4 <_malloc_r+0xd0>
 8010082:	2a0b      	cmp	r2, #11
 8010084:	d917      	bls.n	80100b6 <_malloc_r+0xc2>
 8010086:	1961      	adds	r1, r4, r5
 8010088:	42a3      	cmp	r3, r4
 801008a:	6025      	str	r5, [r4, #0]
 801008c:	bf18      	it	ne
 801008e:	6059      	strne	r1, [r3, #4]
 8010090:	6863      	ldr	r3, [r4, #4]
 8010092:	bf08      	it	eq
 8010094:	f8c8 1000 	streq.w	r1, [r8]
 8010098:	5162      	str	r2, [r4, r5]
 801009a:	604b      	str	r3, [r1, #4]
 801009c:	4630      	mov	r0, r6
 801009e:	f000 f841 	bl	8010124 <__malloc_unlock>
 80100a2:	f104 000b 	add.w	r0, r4, #11
 80100a6:	1d23      	adds	r3, r4, #4
 80100a8:	f020 0007 	bic.w	r0, r0, #7
 80100ac:	1ac2      	subs	r2, r0, r3
 80100ae:	bf1c      	itt	ne
 80100b0:	1a1b      	subne	r3, r3, r0
 80100b2:	50a3      	strne	r3, [r4, r2]
 80100b4:	e7af      	b.n	8010016 <_malloc_r+0x22>
 80100b6:	6862      	ldr	r2, [r4, #4]
 80100b8:	42a3      	cmp	r3, r4
 80100ba:	bf0c      	ite	eq
 80100bc:	f8c8 2000 	streq.w	r2, [r8]
 80100c0:	605a      	strne	r2, [r3, #4]
 80100c2:	e7eb      	b.n	801009c <_malloc_r+0xa8>
 80100c4:	4623      	mov	r3, r4
 80100c6:	6864      	ldr	r4, [r4, #4]
 80100c8:	e7ae      	b.n	8010028 <_malloc_r+0x34>
 80100ca:	463c      	mov	r4, r7
 80100cc:	687f      	ldr	r7, [r7, #4]
 80100ce:	e7b6      	b.n	801003e <_malloc_r+0x4a>
 80100d0:	461a      	mov	r2, r3
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	42a3      	cmp	r3, r4
 80100d6:	d1fb      	bne.n	80100d0 <_malloc_r+0xdc>
 80100d8:	2300      	movs	r3, #0
 80100da:	6053      	str	r3, [r2, #4]
 80100dc:	e7de      	b.n	801009c <_malloc_r+0xa8>
 80100de:	230c      	movs	r3, #12
 80100e0:	6033      	str	r3, [r6, #0]
 80100e2:	4630      	mov	r0, r6
 80100e4:	f000 f81e 	bl	8010124 <__malloc_unlock>
 80100e8:	e794      	b.n	8010014 <_malloc_r+0x20>
 80100ea:	6005      	str	r5, [r0, #0]
 80100ec:	e7d6      	b.n	801009c <_malloc_r+0xa8>
 80100ee:	bf00      	nop
 80100f0:	200039c8 	.word	0x200039c8

080100f4 <__ascii_mbtowc>:
 80100f4:	b082      	sub	sp, #8
 80100f6:	b901      	cbnz	r1, 80100fa <__ascii_mbtowc+0x6>
 80100f8:	a901      	add	r1, sp, #4
 80100fa:	b142      	cbz	r2, 801010e <__ascii_mbtowc+0x1a>
 80100fc:	b14b      	cbz	r3, 8010112 <__ascii_mbtowc+0x1e>
 80100fe:	7813      	ldrb	r3, [r2, #0]
 8010100:	600b      	str	r3, [r1, #0]
 8010102:	7812      	ldrb	r2, [r2, #0]
 8010104:	1e10      	subs	r0, r2, #0
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	b002      	add	sp, #8
 801010c:	4770      	bx	lr
 801010e:	4610      	mov	r0, r2
 8010110:	e7fb      	b.n	801010a <__ascii_mbtowc+0x16>
 8010112:	f06f 0001 	mvn.w	r0, #1
 8010116:	e7f8      	b.n	801010a <__ascii_mbtowc+0x16>

08010118 <__malloc_lock>:
 8010118:	4801      	ldr	r0, [pc, #4]	@ (8010120 <__malloc_lock+0x8>)
 801011a:	f7ff bb7e 	b.w	800f81a <__retarget_lock_acquire_recursive>
 801011e:	bf00      	nop
 8010120:	200039c0 	.word	0x200039c0

08010124 <__malloc_unlock>:
 8010124:	4801      	ldr	r0, [pc, #4]	@ (801012c <__malloc_unlock+0x8>)
 8010126:	f7ff bb79 	b.w	800f81c <__retarget_lock_release_recursive>
 801012a:	bf00      	nop
 801012c:	200039c0 	.word	0x200039c0

08010130 <_Balloc>:
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	69c6      	ldr	r6, [r0, #28]
 8010134:	4604      	mov	r4, r0
 8010136:	460d      	mov	r5, r1
 8010138:	b976      	cbnz	r6, 8010158 <_Balloc+0x28>
 801013a:	2010      	movs	r0, #16
 801013c:	f7ff ff30 	bl	800ffa0 <malloc>
 8010140:	4602      	mov	r2, r0
 8010142:	61e0      	str	r0, [r4, #28]
 8010144:	b920      	cbnz	r0, 8010150 <_Balloc+0x20>
 8010146:	4b18      	ldr	r3, [pc, #96]	@ (80101a8 <_Balloc+0x78>)
 8010148:	4818      	ldr	r0, [pc, #96]	@ (80101ac <_Balloc+0x7c>)
 801014a:	216b      	movs	r1, #107	@ 0x6b
 801014c:	f7ff fb86 	bl	800f85c <__assert_func>
 8010150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010154:	6006      	str	r6, [r0, #0]
 8010156:	60c6      	str	r6, [r0, #12]
 8010158:	69e6      	ldr	r6, [r4, #28]
 801015a:	68f3      	ldr	r3, [r6, #12]
 801015c:	b183      	cbz	r3, 8010180 <_Balloc+0x50>
 801015e:	69e3      	ldr	r3, [r4, #28]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010166:	b9b8      	cbnz	r0, 8010198 <_Balloc+0x68>
 8010168:	2101      	movs	r1, #1
 801016a:	fa01 f605 	lsl.w	r6, r1, r5
 801016e:	1d72      	adds	r2, r6, #5
 8010170:	0092      	lsls	r2, r2, #2
 8010172:	4620      	mov	r0, r4
 8010174:	f001 f8c3 	bl	80112fe <_calloc_r>
 8010178:	b160      	cbz	r0, 8010194 <_Balloc+0x64>
 801017a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801017e:	e00e      	b.n	801019e <_Balloc+0x6e>
 8010180:	2221      	movs	r2, #33	@ 0x21
 8010182:	2104      	movs	r1, #4
 8010184:	4620      	mov	r0, r4
 8010186:	f001 f8ba 	bl	80112fe <_calloc_r>
 801018a:	69e3      	ldr	r3, [r4, #28]
 801018c:	60f0      	str	r0, [r6, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e4      	bne.n	801015e <_Balloc+0x2e>
 8010194:	2000      	movs	r0, #0
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	6802      	ldr	r2, [r0, #0]
 801019a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801019e:	2300      	movs	r3, #0
 80101a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101a4:	e7f7      	b.n	8010196 <_Balloc+0x66>
 80101a6:	bf00      	nop
 80101a8:	08012239 	.word	0x08012239
 80101ac:	0801235f 	.word	0x0801235f

080101b0 <_Bfree>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	69c6      	ldr	r6, [r0, #28]
 80101b4:	4605      	mov	r5, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	b976      	cbnz	r6, 80101d8 <_Bfree+0x28>
 80101ba:	2010      	movs	r0, #16
 80101bc:	f7ff fef0 	bl	800ffa0 <malloc>
 80101c0:	4602      	mov	r2, r0
 80101c2:	61e8      	str	r0, [r5, #28]
 80101c4:	b920      	cbnz	r0, 80101d0 <_Bfree+0x20>
 80101c6:	4b09      	ldr	r3, [pc, #36]	@ (80101ec <_Bfree+0x3c>)
 80101c8:	4809      	ldr	r0, [pc, #36]	@ (80101f0 <_Bfree+0x40>)
 80101ca:	218f      	movs	r1, #143	@ 0x8f
 80101cc:	f7ff fb46 	bl	800f85c <__assert_func>
 80101d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101d4:	6006      	str	r6, [r0, #0]
 80101d6:	60c6      	str	r6, [r0, #12]
 80101d8:	b13c      	cbz	r4, 80101ea <_Bfree+0x3a>
 80101da:	69eb      	ldr	r3, [r5, #28]
 80101dc:	6862      	ldr	r2, [r4, #4]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101e4:	6021      	str	r1, [r4, #0]
 80101e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101ea:	bd70      	pop	{r4, r5, r6, pc}
 80101ec:	08012239 	.word	0x08012239
 80101f0:	0801235f 	.word	0x0801235f

080101f4 <__multadd>:
 80101f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f8:	690d      	ldr	r5, [r1, #16]
 80101fa:	4607      	mov	r7, r0
 80101fc:	460c      	mov	r4, r1
 80101fe:	461e      	mov	r6, r3
 8010200:	f101 0c14 	add.w	ip, r1, #20
 8010204:	2000      	movs	r0, #0
 8010206:	f8dc 3000 	ldr.w	r3, [ip]
 801020a:	b299      	uxth	r1, r3
 801020c:	fb02 6101 	mla	r1, r2, r1, r6
 8010210:	0c1e      	lsrs	r6, r3, #16
 8010212:	0c0b      	lsrs	r3, r1, #16
 8010214:	fb02 3306 	mla	r3, r2, r6, r3
 8010218:	b289      	uxth	r1, r1
 801021a:	3001      	adds	r0, #1
 801021c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010220:	4285      	cmp	r5, r0
 8010222:	f84c 1b04 	str.w	r1, [ip], #4
 8010226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801022a:	dcec      	bgt.n	8010206 <__multadd+0x12>
 801022c:	b30e      	cbz	r6, 8010272 <__multadd+0x7e>
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	42ab      	cmp	r3, r5
 8010232:	dc19      	bgt.n	8010268 <__multadd+0x74>
 8010234:	6861      	ldr	r1, [r4, #4]
 8010236:	4638      	mov	r0, r7
 8010238:	3101      	adds	r1, #1
 801023a:	f7ff ff79 	bl	8010130 <_Balloc>
 801023e:	4680      	mov	r8, r0
 8010240:	b928      	cbnz	r0, 801024e <__multadd+0x5a>
 8010242:	4602      	mov	r2, r0
 8010244:	4b0c      	ldr	r3, [pc, #48]	@ (8010278 <__multadd+0x84>)
 8010246:	480d      	ldr	r0, [pc, #52]	@ (801027c <__multadd+0x88>)
 8010248:	21ba      	movs	r1, #186	@ 0xba
 801024a:	f7ff fb07 	bl	800f85c <__assert_func>
 801024e:	6922      	ldr	r2, [r4, #16]
 8010250:	3202      	adds	r2, #2
 8010252:	f104 010c 	add.w	r1, r4, #12
 8010256:	0092      	lsls	r2, r2, #2
 8010258:	300c      	adds	r0, #12
 801025a:	f7ff fae0 	bl	800f81e <memcpy>
 801025e:	4621      	mov	r1, r4
 8010260:	4638      	mov	r0, r7
 8010262:	f7ff ffa5 	bl	80101b0 <_Bfree>
 8010266:	4644      	mov	r4, r8
 8010268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801026c:	3501      	adds	r5, #1
 801026e:	615e      	str	r6, [r3, #20]
 8010270:	6125      	str	r5, [r4, #16]
 8010272:	4620      	mov	r0, r4
 8010274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010278:	080122ee 	.word	0x080122ee
 801027c:	0801235f 	.word	0x0801235f

08010280 <__s2b>:
 8010280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010284:	460c      	mov	r4, r1
 8010286:	4615      	mov	r5, r2
 8010288:	461f      	mov	r7, r3
 801028a:	2209      	movs	r2, #9
 801028c:	3308      	adds	r3, #8
 801028e:	4606      	mov	r6, r0
 8010290:	fb93 f3f2 	sdiv	r3, r3, r2
 8010294:	2100      	movs	r1, #0
 8010296:	2201      	movs	r2, #1
 8010298:	429a      	cmp	r2, r3
 801029a:	db09      	blt.n	80102b0 <__s2b+0x30>
 801029c:	4630      	mov	r0, r6
 801029e:	f7ff ff47 	bl	8010130 <_Balloc>
 80102a2:	b940      	cbnz	r0, 80102b6 <__s2b+0x36>
 80102a4:	4602      	mov	r2, r0
 80102a6:	4b19      	ldr	r3, [pc, #100]	@ (801030c <__s2b+0x8c>)
 80102a8:	4819      	ldr	r0, [pc, #100]	@ (8010310 <__s2b+0x90>)
 80102aa:	21d3      	movs	r1, #211	@ 0xd3
 80102ac:	f7ff fad6 	bl	800f85c <__assert_func>
 80102b0:	0052      	lsls	r2, r2, #1
 80102b2:	3101      	adds	r1, #1
 80102b4:	e7f0      	b.n	8010298 <__s2b+0x18>
 80102b6:	9b08      	ldr	r3, [sp, #32]
 80102b8:	6143      	str	r3, [r0, #20]
 80102ba:	2d09      	cmp	r5, #9
 80102bc:	f04f 0301 	mov.w	r3, #1
 80102c0:	6103      	str	r3, [r0, #16]
 80102c2:	dd16      	ble.n	80102f2 <__s2b+0x72>
 80102c4:	f104 0909 	add.w	r9, r4, #9
 80102c8:	46c8      	mov	r8, r9
 80102ca:	442c      	add	r4, r5
 80102cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102d0:	4601      	mov	r1, r0
 80102d2:	3b30      	subs	r3, #48	@ 0x30
 80102d4:	220a      	movs	r2, #10
 80102d6:	4630      	mov	r0, r6
 80102d8:	f7ff ff8c 	bl	80101f4 <__multadd>
 80102dc:	45a0      	cmp	r8, r4
 80102de:	d1f5      	bne.n	80102cc <__s2b+0x4c>
 80102e0:	f1a5 0408 	sub.w	r4, r5, #8
 80102e4:	444c      	add	r4, r9
 80102e6:	1b2d      	subs	r5, r5, r4
 80102e8:	1963      	adds	r3, r4, r5
 80102ea:	42bb      	cmp	r3, r7
 80102ec:	db04      	blt.n	80102f8 <__s2b+0x78>
 80102ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f2:	340a      	adds	r4, #10
 80102f4:	2509      	movs	r5, #9
 80102f6:	e7f6      	b.n	80102e6 <__s2b+0x66>
 80102f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80102fc:	4601      	mov	r1, r0
 80102fe:	3b30      	subs	r3, #48	@ 0x30
 8010300:	220a      	movs	r2, #10
 8010302:	4630      	mov	r0, r6
 8010304:	f7ff ff76 	bl	80101f4 <__multadd>
 8010308:	e7ee      	b.n	80102e8 <__s2b+0x68>
 801030a:	bf00      	nop
 801030c:	080122ee 	.word	0x080122ee
 8010310:	0801235f 	.word	0x0801235f

08010314 <__hi0bits>:
 8010314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010318:	4603      	mov	r3, r0
 801031a:	bf36      	itet	cc
 801031c:	0403      	lslcc	r3, r0, #16
 801031e:	2000      	movcs	r0, #0
 8010320:	2010      	movcc	r0, #16
 8010322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010326:	bf3c      	itt	cc
 8010328:	021b      	lslcc	r3, r3, #8
 801032a:	3008      	addcc	r0, #8
 801032c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010330:	bf3c      	itt	cc
 8010332:	011b      	lslcc	r3, r3, #4
 8010334:	3004      	addcc	r0, #4
 8010336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801033a:	bf3c      	itt	cc
 801033c:	009b      	lslcc	r3, r3, #2
 801033e:	3002      	addcc	r0, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	db05      	blt.n	8010350 <__hi0bits+0x3c>
 8010344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010348:	f100 0001 	add.w	r0, r0, #1
 801034c:	bf08      	it	eq
 801034e:	2020      	moveq	r0, #32
 8010350:	4770      	bx	lr

08010352 <__lo0bits>:
 8010352:	6803      	ldr	r3, [r0, #0]
 8010354:	4602      	mov	r2, r0
 8010356:	f013 0007 	ands.w	r0, r3, #7
 801035a:	d00b      	beq.n	8010374 <__lo0bits+0x22>
 801035c:	07d9      	lsls	r1, r3, #31
 801035e:	d421      	bmi.n	80103a4 <__lo0bits+0x52>
 8010360:	0798      	lsls	r0, r3, #30
 8010362:	bf49      	itett	mi
 8010364:	085b      	lsrmi	r3, r3, #1
 8010366:	089b      	lsrpl	r3, r3, #2
 8010368:	2001      	movmi	r0, #1
 801036a:	6013      	strmi	r3, [r2, #0]
 801036c:	bf5c      	itt	pl
 801036e:	6013      	strpl	r3, [r2, #0]
 8010370:	2002      	movpl	r0, #2
 8010372:	4770      	bx	lr
 8010374:	b299      	uxth	r1, r3
 8010376:	b909      	cbnz	r1, 801037c <__lo0bits+0x2a>
 8010378:	0c1b      	lsrs	r3, r3, #16
 801037a:	2010      	movs	r0, #16
 801037c:	b2d9      	uxtb	r1, r3
 801037e:	b909      	cbnz	r1, 8010384 <__lo0bits+0x32>
 8010380:	3008      	adds	r0, #8
 8010382:	0a1b      	lsrs	r3, r3, #8
 8010384:	0719      	lsls	r1, r3, #28
 8010386:	bf04      	itt	eq
 8010388:	091b      	lsreq	r3, r3, #4
 801038a:	3004      	addeq	r0, #4
 801038c:	0799      	lsls	r1, r3, #30
 801038e:	bf04      	itt	eq
 8010390:	089b      	lsreq	r3, r3, #2
 8010392:	3002      	addeq	r0, #2
 8010394:	07d9      	lsls	r1, r3, #31
 8010396:	d403      	bmi.n	80103a0 <__lo0bits+0x4e>
 8010398:	085b      	lsrs	r3, r3, #1
 801039a:	f100 0001 	add.w	r0, r0, #1
 801039e:	d003      	beq.n	80103a8 <__lo0bits+0x56>
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	4770      	bx	lr
 80103a4:	2000      	movs	r0, #0
 80103a6:	4770      	bx	lr
 80103a8:	2020      	movs	r0, #32
 80103aa:	4770      	bx	lr

080103ac <__i2b>:
 80103ac:	b510      	push	{r4, lr}
 80103ae:	460c      	mov	r4, r1
 80103b0:	2101      	movs	r1, #1
 80103b2:	f7ff febd 	bl	8010130 <_Balloc>
 80103b6:	4602      	mov	r2, r0
 80103b8:	b928      	cbnz	r0, 80103c6 <__i2b+0x1a>
 80103ba:	4b05      	ldr	r3, [pc, #20]	@ (80103d0 <__i2b+0x24>)
 80103bc:	4805      	ldr	r0, [pc, #20]	@ (80103d4 <__i2b+0x28>)
 80103be:	f240 1145 	movw	r1, #325	@ 0x145
 80103c2:	f7ff fa4b 	bl	800f85c <__assert_func>
 80103c6:	2301      	movs	r3, #1
 80103c8:	6144      	str	r4, [r0, #20]
 80103ca:	6103      	str	r3, [r0, #16]
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	bf00      	nop
 80103d0:	080122ee 	.word	0x080122ee
 80103d4:	0801235f 	.word	0x0801235f

080103d8 <__multiply>:
 80103d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	4614      	mov	r4, r2
 80103de:	690a      	ldr	r2, [r1, #16]
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	bfa8      	it	ge
 80103e6:	4623      	movge	r3, r4
 80103e8:	460f      	mov	r7, r1
 80103ea:	bfa4      	itt	ge
 80103ec:	460c      	movge	r4, r1
 80103ee:	461f      	movge	r7, r3
 80103f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80103f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80103f8:	68a3      	ldr	r3, [r4, #8]
 80103fa:	6861      	ldr	r1, [r4, #4]
 80103fc:	eb0a 0609 	add.w	r6, sl, r9
 8010400:	42b3      	cmp	r3, r6
 8010402:	b085      	sub	sp, #20
 8010404:	bfb8      	it	lt
 8010406:	3101      	addlt	r1, #1
 8010408:	f7ff fe92 	bl	8010130 <_Balloc>
 801040c:	b930      	cbnz	r0, 801041c <__multiply+0x44>
 801040e:	4602      	mov	r2, r0
 8010410:	4b44      	ldr	r3, [pc, #272]	@ (8010524 <__multiply+0x14c>)
 8010412:	4845      	ldr	r0, [pc, #276]	@ (8010528 <__multiply+0x150>)
 8010414:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010418:	f7ff fa20 	bl	800f85c <__assert_func>
 801041c:	f100 0514 	add.w	r5, r0, #20
 8010420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010424:	462b      	mov	r3, r5
 8010426:	2200      	movs	r2, #0
 8010428:	4543      	cmp	r3, r8
 801042a:	d321      	bcc.n	8010470 <__multiply+0x98>
 801042c:	f107 0114 	add.w	r1, r7, #20
 8010430:	f104 0214 	add.w	r2, r4, #20
 8010434:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010438:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801043c:	9302      	str	r3, [sp, #8]
 801043e:	1b13      	subs	r3, r2, r4
 8010440:	3b15      	subs	r3, #21
 8010442:	f023 0303 	bic.w	r3, r3, #3
 8010446:	3304      	adds	r3, #4
 8010448:	f104 0715 	add.w	r7, r4, #21
 801044c:	42ba      	cmp	r2, r7
 801044e:	bf38      	it	cc
 8010450:	2304      	movcc	r3, #4
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	9b02      	ldr	r3, [sp, #8]
 8010456:	9103      	str	r1, [sp, #12]
 8010458:	428b      	cmp	r3, r1
 801045a:	d80c      	bhi.n	8010476 <__multiply+0x9e>
 801045c:	2e00      	cmp	r6, #0
 801045e:	dd03      	ble.n	8010468 <__multiply+0x90>
 8010460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010464:	2b00      	cmp	r3, #0
 8010466:	d05b      	beq.n	8010520 <__multiply+0x148>
 8010468:	6106      	str	r6, [r0, #16]
 801046a:	b005      	add	sp, #20
 801046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010470:	f843 2b04 	str.w	r2, [r3], #4
 8010474:	e7d8      	b.n	8010428 <__multiply+0x50>
 8010476:	f8b1 a000 	ldrh.w	sl, [r1]
 801047a:	f1ba 0f00 	cmp.w	sl, #0
 801047e:	d024      	beq.n	80104ca <__multiply+0xf2>
 8010480:	f104 0e14 	add.w	lr, r4, #20
 8010484:	46a9      	mov	r9, r5
 8010486:	f04f 0c00 	mov.w	ip, #0
 801048a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801048e:	f8d9 3000 	ldr.w	r3, [r9]
 8010492:	fa1f fb87 	uxth.w	fp, r7
 8010496:	b29b      	uxth	r3, r3
 8010498:	fb0a 330b 	mla	r3, sl, fp, r3
 801049c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80104a0:	f8d9 7000 	ldr.w	r7, [r9]
 80104a4:	4463      	add	r3, ip
 80104a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80104ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104b8:	4572      	cmp	r2, lr
 80104ba:	f849 3b04 	str.w	r3, [r9], #4
 80104be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104c2:	d8e2      	bhi.n	801048a <__multiply+0xb2>
 80104c4:	9b01      	ldr	r3, [sp, #4]
 80104c6:	f845 c003 	str.w	ip, [r5, r3]
 80104ca:	9b03      	ldr	r3, [sp, #12]
 80104cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104d0:	3104      	adds	r1, #4
 80104d2:	f1b9 0f00 	cmp.w	r9, #0
 80104d6:	d021      	beq.n	801051c <__multiply+0x144>
 80104d8:	682b      	ldr	r3, [r5, #0]
 80104da:	f104 0c14 	add.w	ip, r4, #20
 80104de:	46ae      	mov	lr, r5
 80104e0:	f04f 0a00 	mov.w	sl, #0
 80104e4:	f8bc b000 	ldrh.w	fp, [ip]
 80104e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80104ec:	fb09 770b 	mla	r7, r9, fp, r7
 80104f0:	4457      	add	r7, sl
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104f8:	f84e 3b04 	str.w	r3, [lr], #4
 80104fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010504:	f8be 3000 	ldrh.w	r3, [lr]
 8010508:	fb09 330a 	mla	r3, r9, sl, r3
 801050c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010510:	4562      	cmp	r2, ip
 8010512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010516:	d8e5      	bhi.n	80104e4 <__multiply+0x10c>
 8010518:	9f01      	ldr	r7, [sp, #4]
 801051a:	51eb      	str	r3, [r5, r7]
 801051c:	3504      	adds	r5, #4
 801051e:	e799      	b.n	8010454 <__multiply+0x7c>
 8010520:	3e01      	subs	r6, #1
 8010522:	e79b      	b.n	801045c <__multiply+0x84>
 8010524:	080122ee 	.word	0x080122ee
 8010528:	0801235f 	.word	0x0801235f

0801052c <__pow5mult>:
 801052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010530:	4615      	mov	r5, r2
 8010532:	f012 0203 	ands.w	r2, r2, #3
 8010536:	4607      	mov	r7, r0
 8010538:	460e      	mov	r6, r1
 801053a:	d007      	beq.n	801054c <__pow5mult+0x20>
 801053c:	4c25      	ldr	r4, [pc, #148]	@ (80105d4 <__pow5mult+0xa8>)
 801053e:	3a01      	subs	r2, #1
 8010540:	2300      	movs	r3, #0
 8010542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010546:	f7ff fe55 	bl	80101f4 <__multadd>
 801054a:	4606      	mov	r6, r0
 801054c:	10ad      	asrs	r5, r5, #2
 801054e:	d03d      	beq.n	80105cc <__pow5mult+0xa0>
 8010550:	69fc      	ldr	r4, [r7, #28]
 8010552:	b97c      	cbnz	r4, 8010574 <__pow5mult+0x48>
 8010554:	2010      	movs	r0, #16
 8010556:	f7ff fd23 	bl	800ffa0 <malloc>
 801055a:	4602      	mov	r2, r0
 801055c:	61f8      	str	r0, [r7, #28]
 801055e:	b928      	cbnz	r0, 801056c <__pow5mult+0x40>
 8010560:	4b1d      	ldr	r3, [pc, #116]	@ (80105d8 <__pow5mult+0xac>)
 8010562:	481e      	ldr	r0, [pc, #120]	@ (80105dc <__pow5mult+0xb0>)
 8010564:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010568:	f7ff f978 	bl	800f85c <__assert_func>
 801056c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010570:	6004      	str	r4, [r0, #0]
 8010572:	60c4      	str	r4, [r0, #12]
 8010574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801057c:	b94c      	cbnz	r4, 8010592 <__pow5mult+0x66>
 801057e:	f240 2171 	movw	r1, #625	@ 0x271
 8010582:	4638      	mov	r0, r7
 8010584:	f7ff ff12 	bl	80103ac <__i2b>
 8010588:	2300      	movs	r3, #0
 801058a:	f8c8 0008 	str.w	r0, [r8, #8]
 801058e:	4604      	mov	r4, r0
 8010590:	6003      	str	r3, [r0, #0]
 8010592:	f04f 0900 	mov.w	r9, #0
 8010596:	07eb      	lsls	r3, r5, #31
 8010598:	d50a      	bpl.n	80105b0 <__pow5mult+0x84>
 801059a:	4631      	mov	r1, r6
 801059c:	4622      	mov	r2, r4
 801059e:	4638      	mov	r0, r7
 80105a0:	f7ff ff1a 	bl	80103d8 <__multiply>
 80105a4:	4631      	mov	r1, r6
 80105a6:	4680      	mov	r8, r0
 80105a8:	4638      	mov	r0, r7
 80105aa:	f7ff fe01 	bl	80101b0 <_Bfree>
 80105ae:	4646      	mov	r6, r8
 80105b0:	106d      	asrs	r5, r5, #1
 80105b2:	d00b      	beq.n	80105cc <__pow5mult+0xa0>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	b938      	cbnz	r0, 80105c8 <__pow5mult+0x9c>
 80105b8:	4622      	mov	r2, r4
 80105ba:	4621      	mov	r1, r4
 80105bc:	4638      	mov	r0, r7
 80105be:	f7ff ff0b 	bl	80103d8 <__multiply>
 80105c2:	6020      	str	r0, [r4, #0]
 80105c4:	f8c0 9000 	str.w	r9, [r0]
 80105c8:	4604      	mov	r4, r0
 80105ca:	e7e4      	b.n	8010596 <__pow5mult+0x6a>
 80105cc:	4630      	mov	r0, r6
 80105ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d2:	bf00      	nop
 80105d4:	080123b8 	.word	0x080123b8
 80105d8:	08012239 	.word	0x08012239
 80105dc:	0801235f 	.word	0x0801235f

080105e0 <__lshift>:
 80105e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e4:	460c      	mov	r4, r1
 80105e6:	6849      	ldr	r1, [r1, #4]
 80105e8:	6923      	ldr	r3, [r4, #16]
 80105ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ee:	68a3      	ldr	r3, [r4, #8]
 80105f0:	4607      	mov	r7, r0
 80105f2:	4691      	mov	r9, r2
 80105f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105f8:	f108 0601 	add.w	r6, r8, #1
 80105fc:	42b3      	cmp	r3, r6
 80105fe:	db0b      	blt.n	8010618 <__lshift+0x38>
 8010600:	4638      	mov	r0, r7
 8010602:	f7ff fd95 	bl	8010130 <_Balloc>
 8010606:	4605      	mov	r5, r0
 8010608:	b948      	cbnz	r0, 801061e <__lshift+0x3e>
 801060a:	4602      	mov	r2, r0
 801060c:	4b28      	ldr	r3, [pc, #160]	@ (80106b0 <__lshift+0xd0>)
 801060e:	4829      	ldr	r0, [pc, #164]	@ (80106b4 <__lshift+0xd4>)
 8010610:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010614:	f7ff f922 	bl	800f85c <__assert_func>
 8010618:	3101      	adds	r1, #1
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	e7ee      	b.n	80105fc <__lshift+0x1c>
 801061e:	2300      	movs	r3, #0
 8010620:	f100 0114 	add.w	r1, r0, #20
 8010624:	f100 0210 	add.w	r2, r0, #16
 8010628:	4618      	mov	r0, r3
 801062a:	4553      	cmp	r3, sl
 801062c:	db33      	blt.n	8010696 <__lshift+0xb6>
 801062e:	6920      	ldr	r0, [r4, #16]
 8010630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010634:	f104 0314 	add.w	r3, r4, #20
 8010638:	f019 091f 	ands.w	r9, r9, #31
 801063c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010644:	d02b      	beq.n	801069e <__lshift+0xbe>
 8010646:	f1c9 0e20 	rsb	lr, r9, #32
 801064a:	468a      	mov	sl, r1
 801064c:	2200      	movs	r2, #0
 801064e:	6818      	ldr	r0, [r3, #0]
 8010650:	fa00 f009 	lsl.w	r0, r0, r9
 8010654:	4310      	orrs	r0, r2
 8010656:	f84a 0b04 	str.w	r0, [sl], #4
 801065a:	f853 2b04 	ldr.w	r2, [r3], #4
 801065e:	459c      	cmp	ip, r3
 8010660:	fa22 f20e 	lsr.w	r2, r2, lr
 8010664:	d8f3      	bhi.n	801064e <__lshift+0x6e>
 8010666:	ebac 0304 	sub.w	r3, ip, r4
 801066a:	3b15      	subs	r3, #21
 801066c:	f023 0303 	bic.w	r3, r3, #3
 8010670:	3304      	adds	r3, #4
 8010672:	f104 0015 	add.w	r0, r4, #21
 8010676:	4584      	cmp	ip, r0
 8010678:	bf38      	it	cc
 801067a:	2304      	movcc	r3, #4
 801067c:	50ca      	str	r2, [r1, r3]
 801067e:	b10a      	cbz	r2, 8010684 <__lshift+0xa4>
 8010680:	f108 0602 	add.w	r6, r8, #2
 8010684:	3e01      	subs	r6, #1
 8010686:	4638      	mov	r0, r7
 8010688:	612e      	str	r6, [r5, #16]
 801068a:	4621      	mov	r1, r4
 801068c:	f7ff fd90 	bl	80101b0 <_Bfree>
 8010690:	4628      	mov	r0, r5
 8010692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010696:	f842 0f04 	str.w	r0, [r2, #4]!
 801069a:	3301      	adds	r3, #1
 801069c:	e7c5      	b.n	801062a <__lshift+0x4a>
 801069e:	3904      	subs	r1, #4
 80106a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80106a8:	459c      	cmp	ip, r3
 80106aa:	d8f9      	bhi.n	80106a0 <__lshift+0xc0>
 80106ac:	e7ea      	b.n	8010684 <__lshift+0xa4>
 80106ae:	bf00      	nop
 80106b0:	080122ee 	.word	0x080122ee
 80106b4:	0801235f 	.word	0x0801235f

080106b8 <__mcmp>:
 80106b8:	690a      	ldr	r2, [r1, #16]
 80106ba:	4603      	mov	r3, r0
 80106bc:	6900      	ldr	r0, [r0, #16]
 80106be:	1a80      	subs	r0, r0, r2
 80106c0:	b530      	push	{r4, r5, lr}
 80106c2:	d10e      	bne.n	80106e2 <__mcmp+0x2a>
 80106c4:	3314      	adds	r3, #20
 80106c6:	3114      	adds	r1, #20
 80106c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106d8:	4295      	cmp	r5, r2
 80106da:	d003      	beq.n	80106e4 <__mcmp+0x2c>
 80106dc:	d205      	bcs.n	80106ea <__mcmp+0x32>
 80106de:	f04f 30ff 	mov.w	r0, #4294967295
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	d3f3      	bcc.n	80106d0 <__mcmp+0x18>
 80106e8:	e7fb      	b.n	80106e2 <__mcmp+0x2a>
 80106ea:	2001      	movs	r0, #1
 80106ec:	e7f9      	b.n	80106e2 <__mcmp+0x2a>
	...

080106f0 <__mdiff>:
 80106f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	4689      	mov	r9, r1
 80106f6:	4606      	mov	r6, r0
 80106f8:	4611      	mov	r1, r2
 80106fa:	4648      	mov	r0, r9
 80106fc:	4614      	mov	r4, r2
 80106fe:	f7ff ffdb 	bl	80106b8 <__mcmp>
 8010702:	1e05      	subs	r5, r0, #0
 8010704:	d112      	bne.n	801072c <__mdiff+0x3c>
 8010706:	4629      	mov	r1, r5
 8010708:	4630      	mov	r0, r6
 801070a:	f7ff fd11 	bl	8010130 <_Balloc>
 801070e:	4602      	mov	r2, r0
 8010710:	b928      	cbnz	r0, 801071e <__mdiff+0x2e>
 8010712:	4b3f      	ldr	r3, [pc, #252]	@ (8010810 <__mdiff+0x120>)
 8010714:	f240 2137 	movw	r1, #567	@ 0x237
 8010718:	483e      	ldr	r0, [pc, #248]	@ (8010814 <__mdiff+0x124>)
 801071a:	f7ff f89f 	bl	800f85c <__assert_func>
 801071e:	2301      	movs	r3, #1
 8010720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010724:	4610      	mov	r0, r2
 8010726:	b003      	add	sp, #12
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	bfbc      	itt	lt
 801072e:	464b      	movlt	r3, r9
 8010730:	46a1      	movlt	r9, r4
 8010732:	4630      	mov	r0, r6
 8010734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010738:	bfba      	itte	lt
 801073a:	461c      	movlt	r4, r3
 801073c:	2501      	movlt	r5, #1
 801073e:	2500      	movge	r5, #0
 8010740:	f7ff fcf6 	bl	8010130 <_Balloc>
 8010744:	4602      	mov	r2, r0
 8010746:	b918      	cbnz	r0, 8010750 <__mdiff+0x60>
 8010748:	4b31      	ldr	r3, [pc, #196]	@ (8010810 <__mdiff+0x120>)
 801074a:	f240 2145 	movw	r1, #581	@ 0x245
 801074e:	e7e3      	b.n	8010718 <__mdiff+0x28>
 8010750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010754:	6926      	ldr	r6, [r4, #16]
 8010756:	60c5      	str	r5, [r0, #12]
 8010758:	f109 0310 	add.w	r3, r9, #16
 801075c:	f109 0514 	add.w	r5, r9, #20
 8010760:	f104 0e14 	add.w	lr, r4, #20
 8010764:	f100 0b14 	add.w	fp, r0, #20
 8010768:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801076c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	46d9      	mov	r9, fp
 8010774:	f04f 0c00 	mov.w	ip, #0
 8010778:	9b01      	ldr	r3, [sp, #4]
 801077a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801077e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	fa1f f38a 	uxth.w	r3, sl
 8010788:	4619      	mov	r1, r3
 801078a:	b283      	uxth	r3, r0
 801078c:	1acb      	subs	r3, r1, r3
 801078e:	0c00      	lsrs	r0, r0, #16
 8010790:	4463      	add	r3, ip
 8010792:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010796:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801079a:	b29b      	uxth	r3, r3
 801079c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107a0:	4576      	cmp	r6, lr
 80107a2:	f849 3b04 	str.w	r3, [r9], #4
 80107a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107aa:	d8e5      	bhi.n	8010778 <__mdiff+0x88>
 80107ac:	1b33      	subs	r3, r6, r4
 80107ae:	3b15      	subs	r3, #21
 80107b0:	f023 0303 	bic.w	r3, r3, #3
 80107b4:	3415      	adds	r4, #21
 80107b6:	3304      	adds	r3, #4
 80107b8:	42a6      	cmp	r6, r4
 80107ba:	bf38      	it	cc
 80107bc:	2304      	movcc	r3, #4
 80107be:	441d      	add	r5, r3
 80107c0:	445b      	add	r3, fp
 80107c2:	461e      	mov	r6, r3
 80107c4:	462c      	mov	r4, r5
 80107c6:	4544      	cmp	r4, r8
 80107c8:	d30e      	bcc.n	80107e8 <__mdiff+0xf8>
 80107ca:	f108 0103 	add.w	r1, r8, #3
 80107ce:	1b49      	subs	r1, r1, r5
 80107d0:	f021 0103 	bic.w	r1, r1, #3
 80107d4:	3d03      	subs	r5, #3
 80107d6:	45a8      	cmp	r8, r5
 80107d8:	bf38      	it	cc
 80107da:	2100      	movcc	r1, #0
 80107dc:	440b      	add	r3, r1
 80107de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107e2:	b191      	cbz	r1, 801080a <__mdiff+0x11a>
 80107e4:	6117      	str	r7, [r2, #16]
 80107e6:	e79d      	b.n	8010724 <__mdiff+0x34>
 80107e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80107ec:	46e6      	mov	lr, ip
 80107ee:	0c08      	lsrs	r0, r1, #16
 80107f0:	fa1c fc81 	uxtah	ip, ip, r1
 80107f4:	4471      	add	r1, lr
 80107f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107fa:	b289      	uxth	r1, r1
 80107fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010800:	f846 1b04 	str.w	r1, [r6], #4
 8010804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010808:	e7dd      	b.n	80107c6 <__mdiff+0xd6>
 801080a:	3f01      	subs	r7, #1
 801080c:	e7e7      	b.n	80107de <__mdiff+0xee>
 801080e:	bf00      	nop
 8010810:	080122ee 	.word	0x080122ee
 8010814:	0801235f 	.word	0x0801235f

08010818 <__ulp>:
 8010818:	b082      	sub	sp, #8
 801081a:	ed8d 0b00 	vstr	d0, [sp]
 801081e:	9a01      	ldr	r2, [sp, #4]
 8010820:	4b0f      	ldr	r3, [pc, #60]	@ (8010860 <__ulp+0x48>)
 8010822:	4013      	ands	r3, r2
 8010824:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010828:	2b00      	cmp	r3, #0
 801082a:	dc08      	bgt.n	801083e <__ulp+0x26>
 801082c:	425b      	negs	r3, r3
 801082e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010832:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010836:	da04      	bge.n	8010842 <__ulp+0x2a>
 8010838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801083c:	4113      	asrs	r3, r2
 801083e:	2200      	movs	r2, #0
 8010840:	e008      	b.n	8010854 <__ulp+0x3c>
 8010842:	f1a2 0314 	sub.w	r3, r2, #20
 8010846:	2b1e      	cmp	r3, #30
 8010848:	bfda      	itte	le
 801084a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801084e:	40da      	lsrle	r2, r3
 8010850:	2201      	movgt	r2, #1
 8010852:	2300      	movs	r3, #0
 8010854:	4619      	mov	r1, r3
 8010856:	4610      	mov	r0, r2
 8010858:	ec41 0b10 	vmov	d0, r0, r1
 801085c:	b002      	add	sp, #8
 801085e:	4770      	bx	lr
 8010860:	7ff00000 	.word	0x7ff00000

08010864 <__b2d>:
 8010864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	6906      	ldr	r6, [r0, #16]
 801086a:	f100 0814 	add.w	r8, r0, #20
 801086e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010872:	1f37      	subs	r7, r6, #4
 8010874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010878:	4610      	mov	r0, r2
 801087a:	f7ff fd4b 	bl	8010314 <__hi0bits>
 801087e:	f1c0 0320 	rsb	r3, r0, #32
 8010882:	280a      	cmp	r0, #10
 8010884:	600b      	str	r3, [r1, #0]
 8010886:	491b      	ldr	r1, [pc, #108]	@ (80108f4 <__b2d+0x90>)
 8010888:	dc15      	bgt.n	80108b6 <__b2d+0x52>
 801088a:	f1c0 0c0b 	rsb	ip, r0, #11
 801088e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010892:	45b8      	cmp	r8, r7
 8010894:	ea43 0501 	orr.w	r5, r3, r1
 8010898:	bf34      	ite	cc
 801089a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801089e:	2300      	movcs	r3, #0
 80108a0:	3015      	adds	r0, #21
 80108a2:	fa02 f000 	lsl.w	r0, r2, r0
 80108a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80108aa:	4303      	orrs	r3, r0
 80108ac:	461c      	mov	r4, r3
 80108ae:	ec45 4b10 	vmov	d0, r4, r5
 80108b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b6:	45b8      	cmp	r8, r7
 80108b8:	bf3a      	itte	cc
 80108ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80108be:	f1a6 0708 	subcc.w	r7, r6, #8
 80108c2:	2300      	movcs	r3, #0
 80108c4:	380b      	subs	r0, #11
 80108c6:	d012      	beq.n	80108ee <__b2d+0x8a>
 80108c8:	f1c0 0120 	rsb	r1, r0, #32
 80108cc:	fa23 f401 	lsr.w	r4, r3, r1
 80108d0:	4082      	lsls	r2, r0
 80108d2:	4322      	orrs	r2, r4
 80108d4:	4547      	cmp	r7, r8
 80108d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80108da:	bf8c      	ite	hi
 80108dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80108e0:	2200      	movls	r2, #0
 80108e2:	4083      	lsls	r3, r0
 80108e4:	40ca      	lsrs	r2, r1
 80108e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80108ea:	4313      	orrs	r3, r2
 80108ec:	e7de      	b.n	80108ac <__b2d+0x48>
 80108ee:	ea42 0501 	orr.w	r5, r2, r1
 80108f2:	e7db      	b.n	80108ac <__b2d+0x48>
 80108f4:	3ff00000 	.word	0x3ff00000

080108f8 <__d2b>:
 80108f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	460f      	mov	r7, r1
 80108fe:	2101      	movs	r1, #1
 8010900:	ec59 8b10 	vmov	r8, r9, d0
 8010904:	4616      	mov	r6, r2
 8010906:	f7ff fc13 	bl	8010130 <_Balloc>
 801090a:	4604      	mov	r4, r0
 801090c:	b930      	cbnz	r0, 801091c <__d2b+0x24>
 801090e:	4602      	mov	r2, r0
 8010910:	4b23      	ldr	r3, [pc, #140]	@ (80109a0 <__d2b+0xa8>)
 8010912:	4824      	ldr	r0, [pc, #144]	@ (80109a4 <__d2b+0xac>)
 8010914:	f240 310f 	movw	r1, #783	@ 0x30f
 8010918:	f7fe ffa0 	bl	800f85c <__assert_func>
 801091c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010924:	b10d      	cbz	r5, 801092a <__d2b+0x32>
 8010926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801092a:	9301      	str	r3, [sp, #4]
 801092c:	f1b8 0300 	subs.w	r3, r8, #0
 8010930:	d023      	beq.n	801097a <__d2b+0x82>
 8010932:	4668      	mov	r0, sp
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	f7ff fd0c 	bl	8010352 <__lo0bits>
 801093a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801093e:	b1d0      	cbz	r0, 8010976 <__d2b+0x7e>
 8010940:	f1c0 0320 	rsb	r3, r0, #32
 8010944:	fa02 f303 	lsl.w	r3, r2, r3
 8010948:	430b      	orrs	r3, r1
 801094a:	40c2      	lsrs	r2, r0
 801094c:	6163      	str	r3, [r4, #20]
 801094e:	9201      	str	r2, [sp, #4]
 8010950:	9b01      	ldr	r3, [sp, #4]
 8010952:	61a3      	str	r3, [r4, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	bf0c      	ite	eq
 8010958:	2201      	moveq	r2, #1
 801095a:	2202      	movne	r2, #2
 801095c:	6122      	str	r2, [r4, #16]
 801095e:	b1a5      	cbz	r5, 801098a <__d2b+0x92>
 8010960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010964:	4405      	add	r5, r0
 8010966:	603d      	str	r5, [r7, #0]
 8010968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801096c:	6030      	str	r0, [r6, #0]
 801096e:	4620      	mov	r0, r4
 8010970:	b003      	add	sp, #12
 8010972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010976:	6161      	str	r1, [r4, #20]
 8010978:	e7ea      	b.n	8010950 <__d2b+0x58>
 801097a:	a801      	add	r0, sp, #4
 801097c:	f7ff fce9 	bl	8010352 <__lo0bits>
 8010980:	9b01      	ldr	r3, [sp, #4]
 8010982:	6163      	str	r3, [r4, #20]
 8010984:	3020      	adds	r0, #32
 8010986:	2201      	movs	r2, #1
 8010988:	e7e8      	b.n	801095c <__d2b+0x64>
 801098a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801098e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010992:	6038      	str	r0, [r7, #0]
 8010994:	6918      	ldr	r0, [r3, #16]
 8010996:	f7ff fcbd 	bl	8010314 <__hi0bits>
 801099a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801099e:	e7e5      	b.n	801096c <__d2b+0x74>
 80109a0:	080122ee 	.word	0x080122ee
 80109a4:	0801235f 	.word	0x0801235f

080109a8 <__ratio>:
 80109a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	b085      	sub	sp, #20
 80109ae:	e9cd 1000 	strd	r1, r0, [sp]
 80109b2:	a902      	add	r1, sp, #8
 80109b4:	f7ff ff56 	bl	8010864 <__b2d>
 80109b8:	9800      	ldr	r0, [sp, #0]
 80109ba:	a903      	add	r1, sp, #12
 80109bc:	ec55 4b10 	vmov	r4, r5, d0
 80109c0:	f7ff ff50 	bl	8010864 <__b2d>
 80109c4:	9b01      	ldr	r3, [sp, #4]
 80109c6:	6919      	ldr	r1, [r3, #16]
 80109c8:	9b00      	ldr	r3, [sp, #0]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	1ac9      	subs	r1, r1, r3
 80109ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80109d2:	1a9b      	subs	r3, r3, r2
 80109d4:	ec5b ab10 	vmov	sl, fp, d0
 80109d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80109dc:	2b00      	cmp	r3, #0
 80109de:	bfce      	itee	gt
 80109e0:	462a      	movgt	r2, r5
 80109e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80109e6:	465a      	movle	r2, fp
 80109e8:	462f      	mov	r7, r5
 80109ea:	46d9      	mov	r9, fp
 80109ec:	bfcc      	ite	gt
 80109ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80109f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80109f6:	464b      	mov	r3, r9
 80109f8:	4652      	mov	r2, sl
 80109fa:	4620      	mov	r0, r4
 80109fc:	4639      	mov	r1, r7
 80109fe:	f7ef ff2d 	bl	800085c <__aeabi_ddiv>
 8010a02:	ec41 0b10 	vmov	d0, r0, r1
 8010a06:	b005      	add	sp, #20
 8010a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a0c <__copybits>:
 8010a0c:	3901      	subs	r1, #1
 8010a0e:	b570      	push	{r4, r5, r6, lr}
 8010a10:	1149      	asrs	r1, r1, #5
 8010a12:	6914      	ldr	r4, [r2, #16]
 8010a14:	3101      	adds	r1, #1
 8010a16:	f102 0314 	add.w	r3, r2, #20
 8010a1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a22:	1f05      	subs	r5, r0, #4
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	d30c      	bcc.n	8010a42 <__copybits+0x36>
 8010a28:	1aa3      	subs	r3, r4, r2
 8010a2a:	3b11      	subs	r3, #17
 8010a2c:	f023 0303 	bic.w	r3, r3, #3
 8010a30:	3211      	adds	r2, #17
 8010a32:	42a2      	cmp	r2, r4
 8010a34:	bf88      	it	hi
 8010a36:	2300      	movhi	r3, #0
 8010a38:	4418      	add	r0, r3
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	4288      	cmp	r0, r1
 8010a3e:	d305      	bcc.n	8010a4c <__copybits+0x40>
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a46:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a4a:	e7eb      	b.n	8010a24 <__copybits+0x18>
 8010a4c:	f840 3b04 	str.w	r3, [r0], #4
 8010a50:	e7f4      	b.n	8010a3c <__copybits+0x30>

08010a52 <__any_on>:
 8010a52:	f100 0214 	add.w	r2, r0, #20
 8010a56:	6900      	ldr	r0, [r0, #16]
 8010a58:	114b      	asrs	r3, r1, #5
 8010a5a:	4298      	cmp	r0, r3
 8010a5c:	b510      	push	{r4, lr}
 8010a5e:	db11      	blt.n	8010a84 <__any_on+0x32>
 8010a60:	dd0a      	ble.n	8010a78 <__any_on+0x26>
 8010a62:	f011 011f 	ands.w	r1, r1, #31
 8010a66:	d007      	beq.n	8010a78 <__any_on+0x26>
 8010a68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a6c:	fa24 f001 	lsr.w	r0, r4, r1
 8010a70:	fa00 f101 	lsl.w	r1, r0, r1
 8010a74:	428c      	cmp	r4, r1
 8010a76:	d10b      	bne.n	8010a90 <__any_on+0x3e>
 8010a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d803      	bhi.n	8010a88 <__any_on+0x36>
 8010a80:	2000      	movs	r0, #0
 8010a82:	bd10      	pop	{r4, pc}
 8010a84:	4603      	mov	r3, r0
 8010a86:	e7f7      	b.n	8010a78 <__any_on+0x26>
 8010a88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a8c:	2900      	cmp	r1, #0
 8010a8e:	d0f5      	beq.n	8010a7c <__any_on+0x2a>
 8010a90:	2001      	movs	r0, #1
 8010a92:	e7f6      	b.n	8010a82 <__any_on+0x30>

08010a94 <__ascii_wctomb>:
 8010a94:	4603      	mov	r3, r0
 8010a96:	4608      	mov	r0, r1
 8010a98:	b141      	cbz	r1, 8010aac <__ascii_wctomb+0x18>
 8010a9a:	2aff      	cmp	r2, #255	@ 0xff
 8010a9c:	d904      	bls.n	8010aa8 <__ascii_wctomb+0x14>
 8010a9e:	228a      	movs	r2, #138	@ 0x8a
 8010aa0:	601a      	str	r2, [r3, #0]
 8010aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa6:	4770      	bx	lr
 8010aa8:	700a      	strb	r2, [r1, #0]
 8010aaa:	2001      	movs	r0, #1
 8010aac:	4770      	bx	lr

08010aae <__sfputc_r>:
 8010aae:	6893      	ldr	r3, [r2, #8]
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	b410      	push	{r4}
 8010ab6:	6093      	str	r3, [r2, #8]
 8010ab8:	da08      	bge.n	8010acc <__sfputc_r+0x1e>
 8010aba:	6994      	ldr	r4, [r2, #24]
 8010abc:	42a3      	cmp	r3, r4
 8010abe:	db01      	blt.n	8010ac4 <__sfputc_r+0x16>
 8010ac0:	290a      	cmp	r1, #10
 8010ac2:	d103      	bne.n	8010acc <__sfputc_r+0x1e>
 8010ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ac8:	f7fe bd17 	b.w	800f4fa <__swbuf_r>
 8010acc:	6813      	ldr	r3, [r2, #0]
 8010ace:	1c58      	adds	r0, r3, #1
 8010ad0:	6010      	str	r0, [r2, #0]
 8010ad2:	7019      	strb	r1, [r3, #0]
 8010ad4:	4608      	mov	r0, r1
 8010ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <__sfputs_r>:
 8010adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	4614      	mov	r4, r2
 8010ae4:	18d5      	adds	r5, r2, r3
 8010ae6:	42ac      	cmp	r4, r5
 8010ae8:	d101      	bne.n	8010aee <__sfputs_r+0x12>
 8010aea:	2000      	movs	r0, #0
 8010aec:	e007      	b.n	8010afe <__sfputs_r+0x22>
 8010aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af2:	463a      	mov	r2, r7
 8010af4:	4630      	mov	r0, r6
 8010af6:	f7ff ffda 	bl	8010aae <__sfputc_r>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d1f3      	bne.n	8010ae6 <__sfputs_r+0xa>
 8010afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b00 <_vfiprintf_r>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	460d      	mov	r5, r1
 8010b06:	b09d      	sub	sp, #116	@ 0x74
 8010b08:	4614      	mov	r4, r2
 8010b0a:	4698      	mov	r8, r3
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	b118      	cbz	r0, 8010b18 <_vfiprintf_r+0x18>
 8010b10:	6a03      	ldr	r3, [r0, #32]
 8010b12:	b90b      	cbnz	r3, 8010b18 <_vfiprintf_r+0x18>
 8010b14:	f7fe fc08 	bl	800f328 <__sinit>
 8010b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b1a:	07d9      	lsls	r1, r3, #31
 8010b1c:	d405      	bmi.n	8010b2a <_vfiprintf_r+0x2a>
 8010b1e:	89ab      	ldrh	r3, [r5, #12]
 8010b20:	059a      	lsls	r2, r3, #22
 8010b22:	d402      	bmi.n	8010b2a <_vfiprintf_r+0x2a>
 8010b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b26:	f7fe fe78 	bl	800f81a <__retarget_lock_acquire_recursive>
 8010b2a:	89ab      	ldrh	r3, [r5, #12]
 8010b2c:	071b      	lsls	r3, r3, #28
 8010b2e:	d501      	bpl.n	8010b34 <_vfiprintf_r+0x34>
 8010b30:	692b      	ldr	r3, [r5, #16]
 8010b32:	b99b      	cbnz	r3, 8010b5c <_vfiprintf_r+0x5c>
 8010b34:	4629      	mov	r1, r5
 8010b36:	4630      	mov	r0, r6
 8010b38:	f7fe fd1e 	bl	800f578 <__swsetup_r>
 8010b3c:	b170      	cbz	r0, 8010b5c <_vfiprintf_r+0x5c>
 8010b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b40:	07dc      	lsls	r4, r3, #31
 8010b42:	d504      	bpl.n	8010b4e <_vfiprintf_r+0x4e>
 8010b44:	f04f 30ff 	mov.w	r0, #4294967295
 8010b48:	b01d      	add	sp, #116	@ 0x74
 8010b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	0598      	lsls	r0, r3, #22
 8010b52:	d4f7      	bmi.n	8010b44 <_vfiprintf_r+0x44>
 8010b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b56:	f7fe fe61 	bl	800f81c <__retarget_lock_release_recursive>
 8010b5a:	e7f3      	b.n	8010b44 <_vfiprintf_r+0x44>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b60:	2320      	movs	r3, #32
 8010b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b6a:	2330      	movs	r3, #48	@ 0x30
 8010b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010d1c <_vfiprintf_r+0x21c>
 8010b70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b74:	f04f 0901 	mov.w	r9, #1
 8010b78:	4623      	mov	r3, r4
 8010b7a:	469a      	mov	sl, r3
 8010b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b80:	b10a      	cbz	r2, 8010b86 <_vfiprintf_r+0x86>
 8010b82:	2a25      	cmp	r2, #37	@ 0x25
 8010b84:	d1f9      	bne.n	8010b7a <_vfiprintf_r+0x7a>
 8010b86:	ebba 0b04 	subs.w	fp, sl, r4
 8010b8a:	d00b      	beq.n	8010ba4 <_vfiprintf_r+0xa4>
 8010b8c:	465b      	mov	r3, fp
 8010b8e:	4622      	mov	r2, r4
 8010b90:	4629      	mov	r1, r5
 8010b92:	4630      	mov	r0, r6
 8010b94:	f7ff ffa2 	bl	8010adc <__sfputs_r>
 8010b98:	3001      	adds	r0, #1
 8010b9a:	f000 80a7 	beq.w	8010cec <_vfiprintf_r+0x1ec>
 8010b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ba0:	445a      	add	r2, fp
 8010ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 809f 	beq.w	8010cec <_vfiprintf_r+0x1ec>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bb8:	f10a 0a01 	add.w	sl, sl, #1
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	9307      	str	r3, [sp, #28]
 8010bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bc6:	4654      	mov	r4, sl
 8010bc8:	2205      	movs	r2, #5
 8010bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bce:	4853      	ldr	r0, [pc, #332]	@ (8010d1c <_vfiprintf_r+0x21c>)
 8010bd0:	f7ef fb0e 	bl	80001f0 <memchr>
 8010bd4:	9a04      	ldr	r2, [sp, #16]
 8010bd6:	b9d8      	cbnz	r0, 8010c10 <_vfiprintf_r+0x110>
 8010bd8:	06d1      	lsls	r1, r2, #27
 8010bda:	bf44      	itt	mi
 8010bdc:	2320      	movmi	r3, #32
 8010bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010be2:	0713      	lsls	r3, r2, #28
 8010be4:	bf44      	itt	mi
 8010be6:	232b      	movmi	r3, #43	@ 0x2b
 8010be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bec:	f89a 3000 	ldrb.w	r3, [sl]
 8010bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bf2:	d015      	beq.n	8010c20 <_vfiprintf_r+0x120>
 8010bf4:	9a07      	ldr	r2, [sp, #28]
 8010bf6:	4654      	mov	r4, sl
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	f04f 0c0a 	mov.w	ip, #10
 8010bfe:	4621      	mov	r1, r4
 8010c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c04:	3b30      	subs	r3, #48	@ 0x30
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	d94b      	bls.n	8010ca2 <_vfiprintf_r+0x1a2>
 8010c0a:	b1b0      	cbz	r0, 8010c3a <_vfiprintf_r+0x13a>
 8010c0c:	9207      	str	r2, [sp, #28]
 8010c0e:	e014      	b.n	8010c3a <_vfiprintf_r+0x13a>
 8010c10:	eba0 0308 	sub.w	r3, r0, r8
 8010c14:	fa09 f303 	lsl.w	r3, r9, r3
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	9304      	str	r3, [sp, #16]
 8010c1c:	46a2      	mov	sl, r4
 8010c1e:	e7d2      	b.n	8010bc6 <_vfiprintf_r+0xc6>
 8010c20:	9b03      	ldr	r3, [sp, #12]
 8010c22:	1d19      	adds	r1, r3, #4
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	9103      	str	r1, [sp, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	bfbb      	ittet	lt
 8010c2c:	425b      	neglt	r3, r3
 8010c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8010c32:	9307      	strge	r3, [sp, #28]
 8010c34:	9307      	strlt	r3, [sp, #28]
 8010c36:	bfb8      	it	lt
 8010c38:	9204      	strlt	r2, [sp, #16]
 8010c3a:	7823      	ldrb	r3, [r4, #0]
 8010c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c3e:	d10a      	bne.n	8010c56 <_vfiprintf_r+0x156>
 8010c40:	7863      	ldrb	r3, [r4, #1]
 8010c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c44:	d132      	bne.n	8010cac <_vfiprintf_r+0x1ac>
 8010c46:	9b03      	ldr	r3, [sp, #12]
 8010c48:	1d1a      	adds	r2, r3, #4
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	9203      	str	r2, [sp, #12]
 8010c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c52:	3402      	adds	r4, #2
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010d2c <_vfiprintf_r+0x22c>
 8010c5a:	7821      	ldrb	r1, [r4, #0]
 8010c5c:	2203      	movs	r2, #3
 8010c5e:	4650      	mov	r0, sl
 8010c60:	f7ef fac6 	bl	80001f0 <memchr>
 8010c64:	b138      	cbz	r0, 8010c76 <_vfiprintf_r+0x176>
 8010c66:	9b04      	ldr	r3, [sp, #16]
 8010c68:	eba0 000a 	sub.w	r0, r0, sl
 8010c6c:	2240      	movs	r2, #64	@ 0x40
 8010c6e:	4082      	lsls	r2, r0
 8010c70:	4313      	orrs	r3, r2
 8010c72:	3401      	adds	r4, #1
 8010c74:	9304      	str	r3, [sp, #16]
 8010c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c7a:	4829      	ldr	r0, [pc, #164]	@ (8010d20 <_vfiprintf_r+0x220>)
 8010c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c80:	2206      	movs	r2, #6
 8010c82:	f7ef fab5 	bl	80001f0 <memchr>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d03f      	beq.n	8010d0a <_vfiprintf_r+0x20a>
 8010c8a:	4b26      	ldr	r3, [pc, #152]	@ (8010d24 <_vfiprintf_r+0x224>)
 8010c8c:	bb1b      	cbnz	r3, 8010cd6 <_vfiprintf_r+0x1d6>
 8010c8e:	9b03      	ldr	r3, [sp, #12]
 8010c90:	3307      	adds	r3, #7
 8010c92:	f023 0307 	bic.w	r3, r3, #7
 8010c96:	3308      	adds	r3, #8
 8010c98:	9303      	str	r3, [sp, #12]
 8010c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c9c:	443b      	add	r3, r7
 8010c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ca0:	e76a      	b.n	8010b78 <_vfiprintf_r+0x78>
 8010ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	2001      	movs	r0, #1
 8010caa:	e7a8      	b.n	8010bfe <_vfiprintf_r+0xfe>
 8010cac:	2300      	movs	r3, #0
 8010cae:	3401      	adds	r4, #1
 8010cb0:	9305      	str	r3, [sp, #20]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	f04f 0c0a 	mov.w	ip, #10
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cbe:	3a30      	subs	r2, #48	@ 0x30
 8010cc0:	2a09      	cmp	r2, #9
 8010cc2:	d903      	bls.n	8010ccc <_vfiprintf_r+0x1cc>
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d0c6      	beq.n	8010c56 <_vfiprintf_r+0x156>
 8010cc8:	9105      	str	r1, [sp, #20]
 8010cca:	e7c4      	b.n	8010c56 <_vfiprintf_r+0x156>
 8010ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e7f0      	b.n	8010cb8 <_vfiprintf_r+0x1b8>
 8010cd6:	ab03      	add	r3, sp, #12
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	462a      	mov	r2, r5
 8010cdc:	4b12      	ldr	r3, [pc, #72]	@ (8010d28 <_vfiprintf_r+0x228>)
 8010cde:	a904      	add	r1, sp, #16
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f3af 8000 	nop.w
 8010ce6:	4607      	mov	r7, r0
 8010ce8:	1c78      	adds	r0, r7, #1
 8010cea:	d1d6      	bne.n	8010c9a <_vfiprintf_r+0x19a>
 8010cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cee:	07d9      	lsls	r1, r3, #31
 8010cf0:	d405      	bmi.n	8010cfe <_vfiprintf_r+0x1fe>
 8010cf2:	89ab      	ldrh	r3, [r5, #12]
 8010cf4:	059a      	lsls	r2, r3, #22
 8010cf6:	d402      	bmi.n	8010cfe <_vfiprintf_r+0x1fe>
 8010cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cfa:	f7fe fd8f 	bl	800f81c <__retarget_lock_release_recursive>
 8010cfe:	89ab      	ldrh	r3, [r5, #12]
 8010d00:	065b      	lsls	r3, r3, #25
 8010d02:	f53f af1f 	bmi.w	8010b44 <_vfiprintf_r+0x44>
 8010d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d08:	e71e      	b.n	8010b48 <_vfiprintf_r+0x48>
 8010d0a:	ab03      	add	r3, sp, #12
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4b05      	ldr	r3, [pc, #20]	@ (8010d28 <_vfiprintf_r+0x228>)
 8010d12:	a904      	add	r1, sp, #16
 8010d14:	4630      	mov	r0, r6
 8010d16:	f000 f879 	bl	8010e0c <_printf_i>
 8010d1a:	e7e4      	b.n	8010ce6 <_vfiprintf_r+0x1e6>
 8010d1c:	080124b8 	.word	0x080124b8
 8010d20:	080124c2 	.word	0x080124c2
 8010d24:	00000000 	.word	0x00000000
 8010d28:	08010add 	.word	0x08010add
 8010d2c:	080124be 	.word	0x080124be

08010d30 <_printf_common>:
 8010d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d34:	4616      	mov	r6, r2
 8010d36:	4698      	mov	r8, r3
 8010d38:	688a      	ldr	r2, [r1, #8]
 8010d3a:	690b      	ldr	r3, [r1, #16]
 8010d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d40:	4293      	cmp	r3, r2
 8010d42:	bfb8      	it	lt
 8010d44:	4613      	movlt	r3, r2
 8010d46:	6033      	str	r3, [r6, #0]
 8010d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d4c:	4607      	mov	r7, r0
 8010d4e:	460c      	mov	r4, r1
 8010d50:	b10a      	cbz	r2, 8010d56 <_printf_common+0x26>
 8010d52:	3301      	adds	r3, #1
 8010d54:	6033      	str	r3, [r6, #0]
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	0699      	lsls	r1, r3, #26
 8010d5a:	bf42      	ittt	mi
 8010d5c:	6833      	ldrmi	r3, [r6, #0]
 8010d5e:	3302      	addmi	r3, #2
 8010d60:	6033      	strmi	r3, [r6, #0]
 8010d62:	6825      	ldr	r5, [r4, #0]
 8010d64:	f015 0506 	ands.w	r5, r5, #6
 8010d68:	d106      	bne.n	8010d78 <_printf_common+0x48>
 8010d6a:	f104 0a19 	add.w	sl, r4, #25
 8010d6e:	68e3      	ldr	r3, [r4, #12]
 8010d70:	6832      	ldr	r2, [r6, #0]
 8010d72:	1a9b      	subs	r3, r3, r2
 8010d74:	42ab      	cmp	r3, r5
 8010d76:	dc26      	bgt.n	8010dc6 <_printf_common+0x96>
 8010d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d7c:	6822      	ldr	r2, [r4, #0]
 8010d7e:	3b00      	subs	r3, #0
 8010d80:	bf18      	it	ne
 8010d82:	2301      	movne	r3, #1
 8010d84:	0692      	lsls	r2, r2, #26
 8010d86:	d42b      	bmi.n	8010de0 <_printf_common+0xb0>
 8010d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d8c:	4641      	mov	r1, r8
 8010d8e:	4638      	mov	r0, r7
 8010d90:	47c8      	blx	r9
 8010d92:	3001      	adds	r0, #1
 8010d94:	d01e      	beq.n	8010dd4 <_printf_common+0xa4>
 8010d96:	6823      	ldr	r3, [r4, #0]
 8010d98:	6922      	ldr	r2, [r4, #16]
 8010d9a:	f003 0306 	and.w	r3, r3, #6
 8010d9e:	2b04      	cmp	r3, #4
 8010da0:	bf02      	ittt	eq
 8010da2:	68e5      	ldreq	r5, [r4, #12]
 8010da4:	6833      	ldreq	r3, [r6, #0]
 8010da6:	1aed      	subeq	r5, r5, r3
 8010da8:	68a3      	ldr	r3, [r4, #8]
 8010daa:	bf0c      	ite	eq
 8010dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010db0:	2500      	movne	r5, #0
 8010db2:	4293      	cmp	r3, r2
 8010db4:	bfc4      	itt	gt
 8010db6:	1a9b      	subgt	r3, r3, r2
 8010db8:	18ed      	addgt	r5, r5, r3
 8010dba:	2600      	movs	r6, #0
 8010dbc:	341a      	adds	r4, #26
 8010dbe:	42b5      	cmp	r5, r6
 8010dc0:	d11a      	bne.n	8010df8 <_printf_common+0xc8>
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	e008      	b.n	8010dd8 <_printf_common+0xa8>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	4652      	mov	r2, sl
 8010dca:	4641      	mov	r1, r8
 8010dcc:	4638      	mov	r0, r7
 8010dce:	47c8      	blx	r9
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	d103      	bne.n	8010ddc <_printf_common+0xac>
 8010dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ddc:	3501      	adds	r5, #1
 8010dde:	e7c6      	b.n	8010d6e <_printf_common+0x3e>
 8010de0:	18e1      	adds	r1, r4, r3
 8010de2:	1c5a      	adds	r2, r3, #1
 8010de4:	2030      	movs	r0, #48	@ 0x30
 8010de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010dea:	4422      	add	r2, r4
 8010dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010df4:	3302      	adds	r3, #2
 8010df6:	e7c7      	b.n	8010d88 <_printf_common+0x58>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	4622      	mov	r2, r4
 8010dfc:	4641      	mov	r1, r8
 8010dfe:	4638      	mov	r0, r7
 8010e00:	47c8      	blx	r9
 8010e02:	3001      	adds	r0, #1
 8010e04:	d0e6      	beq.n	8010dd4 <_printf_common+0xa4>
 8010e06:	3601      	adds	r6, #1
 8010e08:	e7d9      	b.n	8010dbe <_printf_common+0x8e>
	...

08010e0c <_printf_i>:
 8010e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e10:	7e0f      	ldrb	r7, [r1, #24]
 8010e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e14:	2f78      	cmp	r7, #120	@ 0x78
 8010e16:	4691      	mov	r9, r2
 8010e18:	4680      	mov	r8, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	469a      	mov	sl, r3
 8010e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e22:	d807      	bhi.n	8010e34 <_printf_i+0x28>
 8010e24:	2f62      	cmp	r7, #98	@ 0x62
 8010e26:	d80a      	bhi.n	8010e3e <_printf_i+0x32>
 8010e28:	2f00      	cmp	r7, #0
 8010e2a:	f000 80d2 	beq.w	8010fd2 <_printf_i+0x1c6>
 8010e2e:	2f58      	cmp	r7, #88	@ 0x58
 8010e30:	f000 80b9 	beq.w	8010fa6 <_printf_i+0x19a>
 8010e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e3c:	e03a      	b.n	8010eb4 <_printf_i+0xa8>
 8010e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e42:	2b15      	cmp	r3, #21
 8010e44:	d8f6      	bhi.n	8010e34 <_printf_i+0x28>
 8010e46:	a101      	add	r1, pc, #4	@ (adr r1, 8010e4c <_printf_i+0x40>)
 8010e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e4c:	08010ea5 	.word	0x08010ea5
 8010e50:	08010eb9 	.word	0x08010eb9
 8010e54:	08010e35 	.word	0x08010e35
 8010e58:	08010e35 	.word	0x08010e35
 8010e5c:	08010e35 	.word	0x08010e35
 8010e60:	08010e35 	.word	0x08010e35
 8010e64:	08010eb9 	.word	0x08010eb9
 8010e68:	08010e35 	.word	0x08010e35
 8010e6c:	08010e35 	.word	0x08010e35
 8010e70:	08010e35 	.word	0x08010e35
 8010e74:	08010e35 	.word	0x08010e35
 8010e78:	08010fb9 	.word	0x08010fb9
 8010e7c:	08010ee3 	.word	0x08010ee3
 8010e80:	08010f73 	.word	0x08010f73
 8010e84:	08010e35 	.word	0x08010e35
 8010e88:	08010e35 	.word	0x08010e35
 8010e8c:	08010fdb 	.word	0x08010fdb
 8010e90:	08010e35 	.word	0x08010e35
 8010e94:	08010ee3 	.word	0x08010ee3
 8010e98:	08010e35 	.word	0x08010e35
 8010e9c:	08010e35 	.word	0x08010e35
 8010ea0:	08010f7b 	.word	0x08010f7b
 8010ea4:	6833      	ldr	r3, [r6, #0]
 8010ea6:	1d1a      	adds	r2, r3, #4
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6032      	str	r2, [r6, #0]
 8010eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e09d      	b.n	8010ff4 <_printf_i+0x1e8>
 8010eb8:	6833      	ldr	r3, [r6, #0]
 8010eba:	6820      	ldr	r0, [r4, #0]
 8010ebc:	1d19      	adds	r1, r3, #4
 8010ebe:	6031      	str	r1, [r6, #0]
 8010ec0:	0606      	lsls	r6, r0, #24
 8010ec2:	d501      	bpl.n	8010ec8 <_printf_i+0xbc>
 8010ec4:	681d      	ldr	r5, [r3, #0]
 8010ec6:	e003      	b.n	8010ed0 <_printf_i+0xc4>
 8010ec8:	0645      	lsls	r5, r0, #25
 8010eca:	d5fb      	bpl.n	8010ec4 <_printf_i+0xb8>
 8010ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	da03      	bge.n	8010edc <_printf_i+0xd0>
 8010ed4:	232d      	movs	r3, #45	@ 0x2d
 8010ed6:	426d      	negs	r5, r5
 8010ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010edc:	4859      	ldr	r0, [pc, #356]	@ (8011044 <_printf_i+0x238>)
 8010ede:	230a      	movs	r3, #10
 8010ee0:	e011      	b.n	8010f06 <_printf_i+0xfa>
 8010ee2:	6821      	ldr	r1, [r4, #0]
 8010ee4:	6833      	ldr	r3, [r6, #0]
 8010ee6:	0608      	lsls	r0, r1, #24
 8010ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010eec:	d402      	bmi.n	8010ef4 <_printf_i+0xe8>
 8010eee:	0649      	lsls	r1, r1, #25
 8010ef0:	bf48      	it	mi
 8010ef2:	b2ad      	uxthmi	r5, r5
 8010ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010ef6:	4853      	ldr	r0, [pc, #332]	@ (8011044 <_printf_i+0x238>)
 8010ef8:	6033      	str	r3, [r6, #0]
 8010efa:	bf14      	ite	ne
 8010efc:	230a      	movne	r3, #10
 8010efe:	2308      	moveq	r3, #8
 8010f00:	2100      	movs	r1, #0
 8010f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f06:	6866      	ldr	r6, [r4, #4]
 8010f08:	60a6      	str	r6, [r4, #8]
 8010f0a:	2e00      	cmp	r6, #0
 8010f0c:	bfa2      	ittt	ge
 8010f0e:	6821      	ldrge	r1, [r4, #0]
 8010f10:	f021 0104 	bicge.w	r1, r1, #4
 8010f14:	6021      	strge	r1, [r4, #0]
 8010f16:	b90d      	cbnz	r5, 8010f1c <_printf_i+0x110>
 8010f18:	2e00      	cmp	r6, #0
 8010f1a:	d04b      	beq.n	8010fb4 <_printf_i+0x1a8>
 8010f1c:	4616      	mov	r6, r2
 8010f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f22:	fb03 5711 	mls	r7, r3, r1, r5
 8010f26:	5dc7      	ldrb	r7, [r0, r7]
 8010f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f2c:	462f      	mov	r7, r5
 8010f2e:	42bb      	cmp	r3, r7
 8010f30:	460d      	mov	r5, r1
 8010f32:	d9f4      	bls.n	8010f1e <_printf_i+0x112>
 8010f34:	2b08      	cmp	r3, #8
 8010f36:	d10b      	bne.n	8010f50 <_printf_i+0x144>
 8010f38:	6823      	ldr	r3, [r4, #0]
 8010f3a:	07df      	lsls	r7, r3, #31
 8010f3c:	d508      	bpl.n	8010f50 <_printf_i+0x144>
 8010f3e:	6923      	ldr	r3, [r4, #16]
 8010f40:	6861      	ldr	r1, [r4, #4]
 8010f42:	4299      	cmp	r1, r3
 8010f44:	bfde      	ittt	le
 8010f46:	2330      	movle	r3, #48	@ 0x30
 8010f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f50:	1b92      	subs	r2, r2, r6
 8010f52:	6122      	str	r2, [r4, #16]
 8010f54:	f8cd a000 	str.w	sl, [sp]
 8010f58:	464b      	mov	r3, r9
 8010f5a:	aa03      	add	r2, sp, #12
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	4640      	mov	r0, r8
 8010f60:	f7ff fee6 	bl	8010d30 <_printf_common>
 8010f64:	3001      	adds	r0, #1
 8010f66:	d14a      	bne.n	8010ffe <_printf_i+0x1f2>
 8010f68:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6c:	b004      	add	sp, #16
 8010f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f72:	6823      	ldr	r3, [r4, #0]
 8010f74:	f043 0320 	orr.w	r3, r3, #32
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	4833      	ldr	r0, [pc, #204]	@ (8011048 <_printf_i+0x23c>)
 8010f7c:	2778      	movs	r7, #120	@ 0x78
 8010f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	6831      	ldr	r1, [r6, #0]
 8010f86:	061f      	lsls	r7, r3, #24
 8010f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f8c:	d402      	bmi.n	8010f94 <_printf_i+0x188>
 8010f8e:	065f      	lsls	r7, r3, #25
 8010f90:	bf48      	it	mi
 8010f92:	b2ad      	uxthmi	r5, r5
 8010f94:	6031      	str	r1, [r6, #0]
 8010f96:	07d9      	lsls	r1, r3, #31
 8010f98:	bf44      	itt	mi
 8010f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8010f9e:	6023      	strmi	r3, [r4, #0]
 8010fa0:	b11d      	cbz	r5, 8010faa <_printf_i+0x19e>
 8010fa2:	2310      	movs	r3, #16
 8010fa4:	e7ac      	b.n	8010f00 <_printf_i+0xf4>
 8010fa6:	4827      	ldr	r0, [pc, #156]	@ (8011044 <_printf_i+0x238>)
 8010fa8:	e7e9      	b.n	8010f7e <_printf_i+0x172>
 8010faa:	6823      	ldr	r3, [r4, #0]
 8010fac:	f023 0320 	bic.w	r3, r3, #32
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	e7f6      	b.n	8010fa2 <_printf_i+0x196>
 8010fb4:	4616      	mov	r6, r2
 8010fb6:	e7bd      	b.n	8010f34 <_printf_i+0x128>
 8010fb8:	6833      	ldr	r3, [r6, #0]
 8010fba:	6825      	ldr	r5, [r4, #0]
 8010fbc:	6961      	ldr	r1, [r4, #20]
 8010fbe:	1d18      	adds	r0, r3, #4
 8010fc0:	6030      	str	r0, [r6, #0]
 8010fc2:	062e      	lsls	r6, r5, #24
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	d501      	bpl.n	8010fcc <_printf_i+0x1c0>
 8010fc8:	6019      	str	r1, [r3, #0]
 8010fca:	e002      	b.n	8010fd2 <_printf_i+0x1c6>
 8010fcc:	0668      	lsls	r0, r5, #25
 8010fce:	d5fb      	bpl.n	8010fc8 <_printf_i+0x1bc>
 8010fd0:	8019      	strh	r1, [r3, #0]
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	6123      	str	r3, [r4, #16]
 8010fd6:	4616      	mov	r6, r2
 8010fd8:	e7bc      	b.n	8010f54 <_printf_i+0x148>
 8010fda:	6833      	ldr	r3, [r6, #0]
 8010fdc:	1d1a      	adds	r2, r3, #4
 8010fde:	6032      	str	r2, [r6, #0]
 8010fe0:	681e      	ldr	r6, [r3, #0]
 8010fe2:	6862      	ldr	r2, [r4, #4]
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f7ef f902 	bl	80001f0 <memchr>
 8010fec:	b108      	cbz	r0, 8010ff2 <_printf_i+0x1e6>
 8010fee:	1b80      	subs	r0, r0, r6
 8010ff0:	6060      	str	r0, [r4, #4]
 8010ff2:	6863      	ldr	r3, [r4, #4]
 8010ff4:	6123      	str	r3, [r4, #16]
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ffc:	e7aa      	b.n	8010f54 <_printf_i+0x148>
 8010ffe:	6923      	ldr	r3, [r4, #16]
 8011000:	4632      	mov	r2, r6
 8011002:	4649      	mov	r1, r9
 8011004:	4640      	mov	r0, r8
 8011006:	47d0      	blx	sl
 8011008:	3001      	adds	r0, #1
 801100a:	d0ad      	beq.n	8010f68 <_printf_i+0x15c>
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	079b      	lsls	r3, r3, #30
 8011010:	d413      	bmi.n	801103a <_printf_i+0x22e>
 8011012:	68e0      	ldr	r0, [r4, #12]
 8011014:	9b03      	ldr	r3, [sp, #12]
 8011016:	4298      	cmp	r0, r3
 8011018:	bfb8      	it	lt
 801101a:	4618      	movlt	r0, r3
 801101c:	e7a6      	b.n	8010f6c <_printf_i+0x160>
 801101e:	2301      	movs	r3, #1
 8011020:	4632      	mov	r2, r6
 8011022:	4649      	mov	r1, r9
 8011024:	4640      	mov	r0, r8
 8011026:	47d0      	blx	sl
 8011028:	3001      	adds	r0, #1
 801102a:	d09d      	beq.n	8010f68 <_printf_i+0x15c>
 801102c:	3501      	adds	r5, #1
 801102e:	68e3      	ldr	r3, [r4, #12]
 8011030:	9903      	ldr	r1, [sp, #12]
 8011032:	1a5b      	subs	r3, r3, r1
 8011034:	42ab      	cmp	r3, r5
 8011036:	dcf2      	bgt.n	801101e <_printf_i+0x212>
 8011038:	e7eb      	b.n	8011012 <_printf_i+0x206>
 801103a:	2500      	movs	r5, #0
 801103c:	f104 0619 	add.w	r6, r4, #25
 8011040:	e7f5      	b.n	801102e <_printf_i+0x222>
 8011042:	bf00      	nop
 8011044:	080124c9 	.word	0x080124c9
 8011048:	080124da 	.word	0x080124da

0801104c <__sflush_r>:
 801104c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	0716      	lsls	r6, r2, #28
 8011056:	4605      	mov	r5, r0
 8011058:	460c      	mov	r4, r1
 801105a:	d454      	bmi.n	8011106 <__sflush_r+0xba>
 801105c:	684b      	ldr	r3, [r1, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	dc02      	bgt.n	8011068 <__sflush_r+0x1c>
 8011062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011064:	2b00      	cmp	r3, #0
 8011066:	dd48      	ble.n	80110fa <__sflush_r+0xae>
 8011068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801106a:	2e00      	cmp	r6, #0
 801106c:	d045      	beq.n	80110fa <__sflush_r+0xae>
 801106e:	2300      	movs	r3, #0
 8011070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011074:	682f      	ldr	r7, [r5, #0]
 8011076:	6a21      	ldr	r1, [r4, #32]
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	d030      	beq.n	80110de <__sflush_r+0x92>
 801107c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	0759      	lsls	r1, r3, #29
 8011082:	d505      	bpl.n	8011090 <__sflush_r+0x44>
 8011084:	6863      	ldr	r3, [r4, #4]
 8011086:	1ad2      	subs	r2, r2, r3
 8011088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801108a:	b10b      	cbz	r3, 8011090 <__sflush_r+0x44>
 801108c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801108e:	1ad2      	subs	r2, r2, r3
 8011090:	2300      	movs	r3, #0
 8011092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011094:	6a21      	ldr	r1, [r4, #32]
 8011096:	4628      	mov	r0, r5
 8011098:	47b0      	blx	r6
 801109a:	1c43      	adds	r3, r0, #1
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	d106      	bne.n	80110ae <__sflush_r+0x62>
 80110a0:	6829      	ldr	r1, [r5, #0]
 80110a2:	291d      	cmp	r1, #29
 80110a4:	d82b      	bhi.n	80110fe <__sflush_r+0xb2>
 80110a6:	4a2a      	ldr	r2, [pc, #168]	@ (8011150 <__sflush_r+0x104>)
 80110a8:	410a      	asrs	r2, r1
 80110aa:	07d6      	lsls	r6, r2, #31
 80110ac:	d427      	bmi.n	80110fe <__sflush_r+0xb2>
 80110ae:	2200      	movs	r2, #0
 80110b0:	6062      	str	r2, [r4, #4]
 80110b2:	04d9      	lsls	r1, r3, #19
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	6022      	str	r2, [r4, #0]
 80110b8:	d504      	bpl.n	80110c4 <__sflush_r+0x78>
 80110ba:	1c42      	adds	r2, r0, #1
 80110bc:	d101      	bne.n	80110c2 <__sflush_r+0x76>
 80110be:	682b      	ldr	r3, [r5, #0]
 80110c0:	b903      	cbnz	r3, 80110c4 <__sflush_r+0x78>
 80110c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80110c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110c6:	602f      	str	r7, [r5, #0]
 80110c8:	b1b9      	cbz	r1, 80110fa <__sflush_r+0xae>
 80110ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110ce:	4299      	cmp	r1, r3
 80110d0:	d002      	beq.n	80110d8 <__sflush_r+0x8c>
 80110d2:	4628      	mov	r0, r5
 80110d4:	f7fe fbe0 	bl	800f898 <_free_r>
 80110d8:	2300      	movs	r3, #0
 80110da:	6363      	str	r3, [r4, #52]	@ 0x34
 80110dc:	e00d      	b.n	80110fa <__sflush_r+0xae>
 80110de:	2301      	movs	r3, #1
 80110e0:	4628      	mov	r0, r5
 80110e2:	47b0      	blx	r6
 80110e4:	4602      	mov	r2, r0
 80110e6:	1c50      	adds	r0, r2, #1
 80110e8:	d1c9      	bne.n	801107e <__sflush_r+0x32>
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d0c6      	beq.n	801107e <__sflush_r+0x32>
 80110f0:	2b1d      	cmp	r3, #29
 80110f2:	d001      	beq.n	80110f8 <__sflush_r+0xac>
 80110f4:	2b16      	cmp	r3, #22
 80110f6:	d11e      	bne.n	8011136 <__sflush_r+0xea>
 80110f8:	602f      	str	r7, [r5, #0]
 80110fa:	2000      	movs	r0, #0
 80110fc:	e022      	b.n	8011144 <__sflush_r+0xf8>
 80110fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011102:	b21b      	sxth	r3, r3
 8011104:	e01b      	b.n	801113e <__sflush_r+0xf2>
 8011106:	690f      	ldr	r7, [r1, #16]
 8011108:	2f00      	cmp	r7, #0
 801110a:	d0f6      	beq.n	80110fa <__sflush_r+0xae>
 801110c:	0793      	lsls	r3, r2, #30
 801110e:	680e      	ldr	r6, [r1, #0]
 8011110:	bf08      	it	eq
 8011112:	694b      	ldreq	r3, [r1, #20]
 8011114:	600f      	str	r7, [r1, #0]
 8011116:	bf18      	it	ne
 8011118:	2300      	movne	r3, #0
 801111a:	eba6 0807 	sub.w	r8, r6, r7
 801111e:	608b      	str	r3, [r1, #8]
 8011120:	f1b8 0f00 	cmp.w	r8, #0
 8011124:	dde9      	ble.n	80110fa <__sflush_r+0xae>
 8011126:	6a21      	ldr	r1, [r4, #32]
 8011128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801112a:	4643      	mov	r3, r8
 801112c:	463a      	mov	r2, r7
 801112e:	4628      	mov	r0, r5
 8011130:	47b0      	blx	r6
 8011132:	2800      	cmp	r0, #0
 8011134:	dc08      	bgt.n	8011148 <__sflush_r+0xfc>
 8011136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801113e:	81a3      	strh	r3, [r4, #12]
 8011140:	f04f 30ff 	mov.w	r0, #4294967295
 8011144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011148:	4407      	add	r7, r0
 801114a:	eba8 0800 	sub.w	r8, r8, r0
 801114e:	e7e7      	b.n	8011120 <__sflush_r+0xd4>
 8011150:	dfbffffe 	.word	0xdfbffffe

08011154 <_fflush_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	690b      	ldr	r3, [r1, #16]
 8011158:	4605      	mov	r5, r0
 801115a:	460c      	mov	r4, r1
 801115c:	b913      	cbnz	r3, 8011164 <_fflush_r+0x10>
 801115e:	2500      	movs	r5, #0
 8011160:	4628      	mov	r0, r5
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	b118      	cbz	r0, 801116e <_fflush_r+0x1a>
 8011166:	6a03      	ldr	r3, [r0, #32]
 8011168:	b90b      	cbnz	r3, 801116e <_fflush_r+0x1a>
 801116a:	f7fe f8dd 	bl	800f328 <__sinit>
 801116e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d0f3      	beq.n	801115e <_fflush_r+0xa>
 8011176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011178:	07d0      	lsls	r0, r2, #31
 801117a:	d404      	bmi.n	8011186 <_fflush_r+0x32>
 801117c:	0599      	lsls	r1, r3, #22
 801117e:	d402      	bmi.n	8011186 <_fflush_r+0x32>
 8011180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011182:	f7fe fb4a 	bl	800f81a <__retarget_lock_acquire_recursive>
 8011186:	4628      	mov	r0, r5
 8011188:	4621      	mov	r1, r4
 801118a:	f7ff ff5f 	bl	801104c <__sflush_r>
 801118e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011190:	07da      	lsls	r2, r3, #31
 8011192:	4605      	mov	r5, r0
 8011194:	d4e4      	bmi.n	8011160 <_fflush_r+0xc>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	059b      	lsls	r3, r3, #22
 801119a:	d4e1      	bmi.n	8011160 <_fflush_r+0xc>
 801119c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801119e:	f7fe fb3d 	bl	800f81c <__retarget_lock_release_recursive>
 80111a2:	e7dd      	b.n	8011160 <_fflush_r+0xc>

080111a4 <fiprintf>:
 80111a4:	b40e      	push	{r1, r2, r3}
 80111a6:	b503      	push	{r0, r1, lr}
 80111a8:	4601      	mov	r1, r0
 80111aa:	ab03      	add	r3, sp, #12
 80111ac:	4805      	ldr	r0, [pc, #20]	@ (80111c4 <fiprintf+0x20>)
 80111ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b2:	6800      	ldr	r0, [r0, #0]
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	f7ff fca3 	bl	8010b00 <_vfiprintf_r>
 80111ba:	b002      	add	sp, #8
 80111bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80111c0:	b003      	add	sp, #12
 80111c2:	4770      	bx	lr
 80111c4:	200002c0 	.word	0x200002c0

080111c8 <__swhatbuf_r>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	460c      	mov	r4, r1
 80111cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d0:	2900      	cmp	r1, #0
 80111d2:	b096      	sub	sp, #88	@ 0x58
 80111d4:	4615      	mov	r5, r2
 80111d6:	461e      	mov	r6, r3
 80111d8:	da0d      	bge.n	80111f6 <__swhatbuf_r+0x2e>
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80111e0:	f04f 0100 	mov.w	r1, #0
 80111e4:	bf14      	ite	ne
 80111e6:	2340      	movne	r3, #64	@ 0x40
 80111e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111ec:	2000      	movs	r0, #0
 80111ee:	6031      	str	r1, [r6, #0]
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	b016      	add	sp, #88	@ 0x58
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	466a      	mov	r2, sp
 80111f8:	f000 f848 	bl	801128c <_fstat_r>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	dbec      	blt.n	80111da <__swhatbuf_r+0x12>
 8011200:	9901      	ldr	r1, [sp, #4]
 8011202:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011206:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801120a:	4259      	negs	r1, r3
 801120c:	4159      	adcs	r1, r3
 801120e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011212:	e7eb      	b.n	80111ec <__swhatbuf_r+0x24>

08011214 <__smakebuf_r>:
 8011214:	898b      	ldrh	r3, [r1, #12]
 8011216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011218:	079d      	lsls	r5, r3, #30
 801121a:	4606      	mov	r6, r0
 801121c:	460c      	mov	r4, r1
 801121e:	d507      	bpl.n	8011230 <__smakebuf_r+0x1c>
 8011220:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	6123      	str	r3, [r4, #16]
 8011228:	2301      	movs	r3, #1
 801122a:	6163      	str	r3, [r4, #20]
 801122c:	b003      	add	sp, #12
 801122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011230:	ab01      	add	r3, sp, #4
 8011232:	466a      	mov	r2, sp
 8011234:	f7ff ffc8 	bl	80111c8 <__swhatbuf_r>
 8011238:	9f00      	ldr	r7, [sp, #0]
 801123a:	4605      	mov	r5, r0
 801123c:	4639      	mov	r1, r7
 801123e:	4630      	mov	r0, r6
 8011240:	f7fe fed8 	bl	800fff4 <_malloc_r>
 8011244:	b948      	cbnz	r0, 801125a <__smakebuf_r+0x46>
 8011246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801124a:	059a      	lsls	r2, r3, #22
 801124c:	d4ee      	bmi.n	801122c <__smakebuf_r+0x18>
 801124e:	f023 0303 	bic.w	r3, r3, #3
 8011252:	f043 0302 	orr.w	r3, r3, #2
 8011256:	81a3      	strh	r3, [r4, #12]
 8011258:	e7e2      	b.n	8011220 <__smakebuf_r+0xc>
 801125a:	89a3      	ldrh	r3, [r4, #12]
 801125c:	6020      	str	r0, [r4, #0]
 801125e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	9b01      	ldr	r3, [sp, #4]
 8011266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801126a:	b15b      	cbz	r3, 8011284 <__smakebuf_r+0x70>
 801126c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011270:	4630      	mov	r0, r6
 8011272:	f000 f81d 	bl	80112b0 <_isatty_r>
 8011276:	b128      	cbz	r0, 8011284 <__smakebuf_r+0x70>
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	f023 0303 	bic.w	r3, r3, #3
 801127e:	f043 0301 	orr.w	r3, r3, #1
 8011282:	81a3      	strh	r3, [r4, #12]
 8011284:	89a3      	ldrh	r3, [r4, #12]
 8011286:	431d      	orrs	r5, r3
 8011288:	81a5      	strh	r5, [r4, #12]
 801128a:	e7cf      	b.n	801122c <__smakebuf_r+0x18>

0801128c <_fstat_r>:
 801128c:	b538      	push	{r3, r4, r5, lr}
 801128e:	4d07      	ldr	r5, [pc, #28]	@ (80112ac <_fstat_r+0x20>)
 8011290:	2300      	movs	r3, #0
 8011292:	4604      	mov	r4, r0
 8011294:	4608      	mov	r0, r1
 8011296:	4611      	mov	r1, r2
 8011298:	602b      	str	r3, [r5, #0]
 801129a:	f7f2 fbf1 	bl	8003a80 <_fstat>
 801129e:	1c43      	adds	r3, r0, #1
 80112a0:	d102      	bne.n	80112a8 <_fstat_r+0x1c>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	b103      	cbz	r3, 80112a8 <_fstat_r+0x1c>
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	bd38      	pop	{r3, r4, r5, pc}
 80112aa:	bf00      	nop
 80112ac:	200039bc 	.word	0x200039bc

080112b0 <_isatty_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4d06      	ldr	r5, [pc, #24]	@ (80112cc <_isatty_r+0x1c>)
 80112b4:	2300      	movs	r3, #0
 80112b6:	4604      	mov	r4, r0
 80112b8:	4608      	mov	r0, r1
 80112ba:	602b      	str	r3, [r5, #0]
 80112bc:	f7f2 fbf0 	bl	8003aa0 <_isatty>
 80112c0:	1c43      	adds	r3, r0, #1
 80112c2:	d102      	bne.n	80112ca <_isatty_r+0x1a>
 80112c4:	682b      	ldr	r3, [r5, #0]
 80112c6:	b103      	cbz	r3, 80112ca <_isatty_r+0x1a>
 80112c8:	6023      	str	r3, [r4, #0]
 80112ca:	bd38      	pop	{r3, r4, r5, pc}
 80112cc:	200039bc 	.word	0x200039bc

080112d0 <_sbrk_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d06      	ldr	r5, [pc, #24]	@ (80112ec <_sbrk_r+0x1c>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	f7f2 fbf8 	bl	8003ad0 <_sbrk>
 80112e0:	1c43      	adds	r3, r0, #1
 80112e2:	d102      	bne.n	80112ea <_sbrk_r+0x1a>
 80112e4:	682b      	ldr	r3, [r5, #0]
 80112e6:	b103      	cbz	r3, 80112ea <_sbrk_r+0x1a>
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	200039bc 	.word	0x200039bc

080112f0 <abort>:
 80112f0:	b508      	push	{r3, lr}
 80112f2:	2006      	movs	r0, #6
 80112f4:	f000 f840 	bl	8011378 <raise>
 80112f8:	2001      	movs	r0, #1
 80112fa:	f7f2 fb71 	bl	80039e0 <_exit>

080112fe <_calloc_r>:
 80112fe:	b570      	push	{r4, r5, r6, lr}
 8011300:	fba1 5402 	umull	r5, r4, r1, r2
 8011304:	b93c      	cbnz	r4, 8011316 <_calloc_r+0x18>
 8011306:	4629      	mov	r1, r5
 8011308:	f7fe fe74 	bl	800fff4 <_malloc_r>
 801130c:	4606      	mov	r6, r0
 801130e:	b928      	cbnz	r0, 801131c <_calloc_r+0x1e>
 8011310:	2600      	movs	r6, #0
 8011312:	4630      	mov	r0, r6
 8011314:	bd70      	pop	{r4, r5, r6, pc}
 8011316:	220c      	movs	r2, #12
 8011318:	6002      	str	r2, [r0, #0]
 801131a:	e7f9      	b.n	8011310 <_calloc_r+0x12>
 801131c:	462a      	mov	r2, r5
 801131e:	4621      	mov	r1, r4
 8011320:	f7fe f980 	bl	800f624 <memset>
 8011324:	e7f5      	b.n	8011312 <_calloc_r+0x14>

08011326 <_raise_r>:
 8011326:	291f      	cmp	r1, #31
 8011328:	b538      	push	{r3, r4, r5, lr}
 801132a:	4605      	mov	r5, r0
 801132c:	460c      	mov	r4, r1
 801132e:	d904      	bls.n	801133a <_raise_r+0x14>
 8011330:	2316      	movs	r3, #22
 8011332:	6003      	str	r3, [r0, #0]
 8011334:	f04f 30ff 	mov.w	r0, #4294967295
 8011338:	bd38      	pop	{r3, r4, r5, pc}
 801133a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801133c:	b112      	cbz	r2, 8011344 <_raise_r+0x1e>
 801133e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011342:	b94b      	cbnz	r3, 8011358 <_raise_r+0x32>
 8011344:	4628      	mov	r0, r5
 8011346:	f000 f831 	bl	80113ac <_getpid_r>
 801134a:	4622      	mov	r2, r4
 801134c:	4601      	mov	r1, r0
 801134e:	4628      	mov	r0, r5
 8011350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011354:	f000 b818 	b.w	8011388 <_kill_r>
 8011358:	2b01      	cmp	r3, #1
 801135a:	d00a      	beq.n	8011372 <_raise_r+0x4c>
 801135c:	1c59      	adds	r1, r3, #1
 801135e:	d103      	bne.n	8011368 <_raise_r+0x42>
 8011360:	2316      	movs	r3, #22
 8011362:	6003      	str	r3, [r0, #0]
 8011364:	2001      	movs	r0, #1
 8011366:	e7e7      	b.n	8011338 <_raise_r+0x12>
 8011368:	2100      	movs	r1, #0
 801136a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801136e:	4620      	mov	r0, r4
 8011370:	4798      	blx	r3
 8011372:	2000      	movs	r0, #0
 8011374:	e7e0      	b.n	8011338 <_raise_r+0x12>
	...

08011378 <raise>:
 8011378:	4b02      	ldr	r3, [pc, #8]	@ (8011384 <raise+0xc>)
 801137a:	4601      	mov	r1, r0
 801137c:	6818      	ldr	r0, [r3, #0]
 801137e:	f7ff bfd2 	b.w	8011326 <_raise_r>
 8011382:	bf00      	nop
 8011384:	200002c0 	.word	0x200002c0

08011388 <_kill_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	4d07      	ldr	r5, [pc, #28]	@ (80113a8 <_kill_r+0x20>)
 801138c:	2300      	movs	r3, #0
 801138e:	4604      	mov	r4, r0
 8011390:	4608      	mov	r0, r1
 8011392:	4611      	mov	r1, r2
 8011394:	602b      	str	r3, [r5, #0]
 8011396:	f7f2 fb13 	bl	80039c0 <_kill>
 801139a:	1c43      	adds	r3, r0, #1
 801139c:	d102      	bne.n	80113a4 <_kill_r+0x1c>
 801139e:	682b      	ldr	r3, [r5, #0]
 80113a0:	b103      	cbz	r3, 80113a4 <_kill_r+0x1c>
 80113a2:	6023      	str	r3, [r4, #0]
 80113a4:	bd38      	pop	{r3, r4, r5, pc}
 80113a6:	bf00      	nop
 80113a8:	200039bc 	.word	0x200039bc

080113ac <_getpid_r>:
 80113ac:	f7f2 bb00 	b.w	80039b0 <_getpid>

080113b0 <_init>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	bf00      	nop
 80113b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113b6:	bc08      	pop	{r3}
 80113b8:	469e      	mov	lr, r3
 80113ba:	4770      	bx	lr

080113bc <_fini>:
 80113bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113be:	bf00      	nop
 80113c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113c2:	bc08      	pop	{r3}
 80113c4:	469e      	mov	lr, r3
 80113c6:	4770      	bx	lr
