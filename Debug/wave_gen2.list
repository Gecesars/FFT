
wave_gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010658  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  080107e8  080107e8  000117e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801181c  0801181c  00013300  2**0
                  CONTENTS
  4 .ARM          00000008  0801181c  0801181c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011824  08011824  00013300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011824  08011824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011828  08011828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  20000000  0801182c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013300  2**0
                  CONTENTS
 10 .bss          00002e40  20000300  20000300  00013300  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003140  20003140  00013300  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c339  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044fb  00000000  00000000  0002f669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001435  00000000  00000000  00035590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ff8  00000000  00000000  000369c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f6e  00000000  00000000  0005c9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d73a4  00000000  00000000  0007e92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155ccf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008428  00000000  00000000  00155d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0015e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107d0 	.word	0x080107d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	080107d0 	.word	0x080107d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <write_reg>:
#include "accel_mma7660.h"

static bool write_reg(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t val) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	70bb      	strb	r3, [r7, #2]
    for (int t = 0; t < 3; ++t) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e017      	b.n	8000fea <write_reg+0x46>
        if (HAL_I2C_Mem_Write(hi2c, MMA7660_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1cbb      	adds	r3, r7, #2
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2198      	movs	r1, #152	@ 0x98
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f003 fdb2 	bl	8004b38 <HAL_I2C_Mem_Write>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <write_reg+0x3a>
                              &val, 1, 100) == HAL_OK) {
            return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e009      	b.n	8000ff2 <write_reg+0x4e>
        }
        HAL_Delay(2);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f002 fae6 	bl	80035b0 <HAL_Delay>
    for (int t = 0; t < 3; ++t) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	dde4      	ble.n	8000fba <write_reg+0x16>
    }
    return false;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <read_reg>:

static bool read_reg(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *val) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b08a      	sub	sp, #40	@ 0x28
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	460b      	mov	r3, r1
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	72fb      	strb	r3, [r7, #11]
    for (int t = 0; t < 3; ++t) {
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e017      	b.n	800103e <read_reg+0x44>
        if (HAL_I2C_Mem_Read(hi2c, MMA7660_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	b29a      	uxth	r2, r3
 8001012:	2364      	movs	r3, #100	@ 0x64
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	2198      	movs	r1, #152	@ 0x98
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f003 fe82 	bl	8004d2c <HAL_I2C_Mem_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <read_reg+0x38>
                             val, 1, 100) == HAL_OK) {
            return true;
 800102e:	2301      	movs	r3, #1
 8001030:	e009      	b.n	8001046 <read_reg+0x4c>
        }
        HAL_Delay(2);
 8001032:	2002      	movs	r0, #2
 8001034:	f002 fabc 	bl	80035b0 <HAL_Delay>
    for (int t = 0; t < 3; ++t) {
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b02      	cmp	r3, #2
 8001042:	dde4      	ble.n	800100e <read_reg+0x14>
    }
    return false;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <MMA7660_Init>:

bool MMA7660_Init(I2C_HandleTypeDef *hi2c,
                  GPIO_TypeDef *gpio_avdd, uint16_t gpio_pin)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
    /* Alimentação AVDD via PB5 (conforme esquemático) */
    HAL_GPIO_WritePin(gpio_avdd, gpio_pin, GPIO_PIN_RESET);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	f003 fbcc 	bl	8004800 <HAL_GPIO_WritePin>
    HAL_Delay(30);
 8001068:	201e      	movs	r0, #30
 800106a:	f002 faa1 	bl	80035b0 <HAL_Delay>
    HAL_GPIO_WritePin(gpio_avdd, gpio_pin, GPIO_PIN_SET);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	2201      	movs	r2, #1
 8001072:	4619      	mov	r1, r3
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f003 fbc3 	bl	8004800 <HAL_GPIO_WritePin>
    HAL_Delay(30);
 800107a:	201e      	movs	r0, #30
 800107c:	f002 fa98 	bl	80035b0 <HAL_Delay>

    /* Presença no barramento (até 4 tentativas) */
    for (int i = 0; i < 4; ++i) {
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e013      	b.n	80010ae <MMA7660_Init+0x60>
        if (HAL_I2C_IsDeviceReady(hi2c, MMA7660_I2C_ADDR, 1, 100) == HAL_OK) {
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	2201      	movs	r2, #1
 800108a:	2198      	movs	r1, #152	@ 0x98
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f004 f87f 	bl	8005190 <HAL_I2C_IsDeviceReady>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00e      	beq.n	80010b6 <MMA7660_Init+0x68>
            break;
        }
        if (i == 3) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d101      	bne.n	80010a2 <MMA7660_Init+0x54>
            return false; /* não respondeu */
 800109e:	2300      	movs	r3, #0
 80010a0:	e035      	b.n	800110e <MMA7660_Init+0xc0>
        }
        HAL_Delay(5);
 80010a2:	2005      	movs	r0, #5
 80010a4:	f002 fa84 	bl	80035b0 <HAL_Delay>
    for (int i = 0; i < 4; ++i) {
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	dde8      	ble.n	8001086 <MMA7660_Init+0x38>
 80010b4:	e000      	b.n	80010b8 <MMA7660_Init+0x6a>
            break;
 80010b6:	bf00      	nop
    }

    /* Entrar em STANDBY para configurar */
    if (!write_reg(hi2c, MMA7660_REG_MODE, MMA7660_MODE_STANDBY)) {
 80010b8:	2200      	movs	r2, #0
 80010ba:	2107      	movs	r1, #7
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff71 	bl	8000fa4 <write_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MMA7660_Init+0x84>
        return false;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e01d      	b.n	800110e <MMA7660_Init+0xc0>
    }

    /* Sample Rate = 64 Hz (qualquer outro pode ser usado) */
    if (!write_reg(hi2c, MMA7660_REG_SR, MMA7660_SR_64HZ)) {
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff64 	bl	8000fa4 <write_reg>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MMA7660_Init+0x9e>
        return false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e010      	b.n	800110e <MMA7660_Init+0xc0>
    }

    /* Ativar */
    if (!write_reg(hi2c, MMA7660_REG_MODE, MMA7660_MODE_ACTIVE)) {
 80010ec:	2201      	movs	r2, #1
 80010ee:	2107      	movs	r1, #7
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff57 	bl	8000fa4 <write_reg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MMA7660_Init+0xb8>
        return false;
 8001102:	2300      	movs	r3, #0
 8001104:	e003      	b.n	800110e <MMA7660_Init+0xc0>
    }

    HAL_Delay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f002 fa52 	bl	80035b0 <HAL_Delay>
    return true;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MMA7660_ReadXYZ>:
    *value = MMA7660_AXIS_SIGNED_VALUE(raw);
    return true;
}

bool MMA7660_ReadXYZ(I2C_HandleTypeDef *hi2c, int8_t *x, int8_t *y, int8_t *z)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
    uint8_t regs[3] = { MMA7660_REG_X_OUT, MMA7660_REG_Y_OUT, MMA7660_REG_Z_OUT };
 8001126:	4a38      	ldr	r2, [pc, #224]	@ (8001208 <MMA7660_ReadXYZ+0xf0>)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	4611      	mov	r1, r2
 8001130:	8019      	strh	r1, [r3, #0]
 8001132:	3302      	adds	r3, #2
 8001134:	0c12      	lsrs	r2, r2, #16
 8001136:	701a      	strb	r2, [r3, #0]
    uint8_t raw;
    if (!read_reg(hi2c, regs[0], &raw)) return false; *x = MMA7660_AXIS_SIGNED_VALUE(raw);
 8001138:	7d3b      	ldrb	r3, [r7, #20]
 800113a:	f107 0213 	add.w	r2, r7, #19
 800113e:	4619      	mov	r1, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff5a 	bl	8000ffa <read_reg>
 8001146:	4603      	mov	r3, r0
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MMA7660_ReadXYZ+0x3e>
 8001152:	2300      	movs	r3, #0
 8001154:	e054      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800115e:	b25b      	sxtb	r3, r3
 8001160:	7cfa      	ldrb	r2, [r7, #19]
 8001162:	f002 0220 	and.w	r2, r2, #32
 8001166:	2a00      	cmp	r2, #0
 8001168:	d002      	beq.n	8001170 <MMA7660_ReadXYZ+0x58>
 800116a:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 800116e:	e000      	b.n	8001172 <MMA7660_ReadXYZ+0x5a>
 8001170:	2200      	movs	r2, #0
 8001172:	4313      	orrs	r3, r2
 8001174:	b25a      	sxtb	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	701a      	strb	r2, [r3, #0]
    if (!read_reg(hi2c, regs[1], &raw)) return false; *y = MMA7660_AXIS_SIGNED_VALUE(raw);
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	f107 0213 	add.w	r2, r7, #19
 8001180:	4619      	mov	r1, r3
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff39 	bl	8000ffa <read_reg>
 8001188:	4603      	mov	r3, r0
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MMA7660_ReadXYZ+0x80>
 8001194:	2300      	movs	r3, #0
 8001196:	e033      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 8001198:	7cfb      	ldrb	r3, [r7, #19]
 800119a:	b25b      	sxtb	r3, r3
 800119c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	7cfa      	ldrb	r2, [r7, #19]
 80011a4:	f002 0220 	and.w	r2, r2, #32
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d002      	beq.n	80011b2 <MMA7660_ReadXYZ+0x9a>
 80011ac:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 80011b0:	e000      	b.n	80011b4 <MMA7660_ReadXYZ+0x9c>
 80011b2:	2200      	movs	r2, #0
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	701a      	strb	r2, [r3, #0]
    if (!read_reg(hi2c, regs[2], &raw)) return false; *z = MMA7660_AXIS_SIGNED_VALUE(raw);
 80011bc:	7dbb      	ldrb	r3, [r7, #22]
 80011be:	f107 0213 	add.w	r2, r7, #19
 80011c2:	4619      	mov	r1, r3
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff18 	bl	8000ffa <read_reg>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MMA7660_ReadXYZ+0xc2>
 80011d6:	2300      	movs	r3, #0
 80011d8:	e012      	b.n	8001200 <MMA7660_ReadXYZ+0xe8>
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	7cfa      	ldrb	r2, [r7, #19]
 80011e6:	f002 0220 	and.w	r2, r2, #32
 80011ea:	2a00      	cmp	r2, #0
 80011ec:	d002      	beq.n	80011f4 <MMA7660_ReadXYZ+0xdc>
 80011ee:	f06f 023f 	mvn.w	r2, #63	@ 0x3f
 80011f2:	e000      	b.n	80011f6 <MMA7660_ReadXYZ+0xde>
 80011f4:	2200      	movs	r2, #0
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
    return true;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080107e8 	.word	0x080107e8

0800120c <Error_Handler>:
#include "main.h"
#include <stdio.h>

void Error_Handler(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
    __disable_irq();
    while(1) {
        // Indicar erro com LEDs
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <Error_Handler+0x3c>)
 800121a:	f003 fb0a 	bl	8004832 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800121e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <Error_Handler+0x3c>)
 8001224:	f003 fb05 	bl	8004832 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122c:	4806      	ldr	r0, [pc, #24]	@ (8001248 <Error_Handler+0x3c>)
 800122e:	f003 fb00 	bl	8004832 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001232:	2110      	movs	r1, #16
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <Error_Handler+0x40>)
 8001236:	f003 fafc 	bl	8004832 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800123e:	f002 f9b7 	bl	80035b0 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001242:	bf00      	nop
 8001244:	e7e6      	b.n	8001214 <Error_Handler+0x8>
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400

08001250 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <__NVIC_SystemReset+0x24>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001262:	4904      	ldr	r1, [pc, #16]	@ (8001274 <__NVIC_SystemReset+0x24>)
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_SystemReset+0x28>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800126a:	f3bf 8f4f 	dsb	sy
}
 800126e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <__NVIC_SystemReset+0x20>
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	05fa0004 	.word	0x05fa0004

0800127c <kalman_step>:
static KFilter kx = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static KFilter ky = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static KFilter kz = {.Q=0.02f,.R=0.8f,.x=0,.P=1};
static uint8_t g_kalman_on = 1;

static inline float kalman_step(KFilter *kf, float z){
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	ed87 0a00 	vstr	s0, [r7]
  kf->P += kf->Q;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a03 	vldr	s14, [r3, #12]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edc3 7a03 	vstr	s15, [r3, #12]
  float K = kf->P / (kf->P + kf->R);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80012b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
  kf->x = kf->x + K*(z - kf->x);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	ed93 7a02 	vldr	s14, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c8:	edd7 6a00 	vldr	s13, [r7]
 80012cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a02 	vstr	s15, [r3, #8]
  kf->P = (1.f - K)*kf->P;
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a03 	vstr	s15, [r3, #12]
  return kf->x;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	ee07 3a90 	vmov	s15, r3
}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <fmax_from_fs>:
typedef enum { WIN_NONE, WIN_HANN, WIN_BLACKMAN, WIN_NUTTALL } WinType;
static WaveType g_wave = WT_SINE;
static WinType  g_win  = WIN_NONE;
static float    g_taper_percent = 50.f; // 0..100

static inline float fmax_from_fs(float fs, int N){ return fs / (float)N; }
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	6038      	str	r0, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed97 7a01 	vldr	s14, [r7, #4]
 800132e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001332:	eef0 7a66 	vmov.f32	s15, s13
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	0000      	movs	r0, r0
	...

08001348 <apply_window>:

static void apply_window(float *w, int N, WinType wt, float taper_pct){
 8001348:	b580      	push	{r7, lr}
 800134a:	ed2d 8b02 	vpush	{d8}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	ed87 0a00 	vstr	s0, [r7]
 800135c:	71fb      	strb	r3, [r7, #7]
  if (wt==WIN_NONE || taper_pct<=0.1f){ for(int i=0;i<N;i++) w[i]=1.0f; return; }
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <apply_window+0x2e>
 8001364:	edd7 7a00 	vldr	s15, [r7]
 8001368:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001610 <apply_window+0x2c8>
 800136c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d811      	bhi.n	800139a <apply_window+0x52>
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800137a:	e009      	b.n	8001390 <apply_window+0x48>
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	3301      	adds	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <apply_window+0x34>
 8001398:	e127      	b.n	80015ea <apply_window+0x2a2>
  float M=(float)(N-1);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3b01      	subs	r3, #1
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	edc7 7a07 	vstr	s15, [r7, #28]
  for(int n=0;n<N;n++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ae:	e117      	b.n	80015e0 <apply_window+0x298>
    float a = (float)n/M;
 80013b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	edc7 7a06 	vstr	s15, [r7, #24]
    float mult=1.f;
 80013c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
    switch(wt){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d062      	beq.n	8001498 <apply_window+0x150>
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	f300 80b6 	bgt.w	8001544 <apply_window+0x1fc>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <apply_window+0x9a>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d020      	beq.n	8001422 <apply_window+0xda>
      case WIN_HANN:     mult = 0.5f*(1.f - cosf(2.f*M_PI*a)); break;
      case WIN_BLACKMAN: mult = 0.42f - 0.5f*cosf(2.f*M_PI*a) + 0.08f*cosf(4.f*M_PI*a); break;
      case WIN_NUTTALL:  mult = 0.355768f - 0.487396f*cosf(2.f*M_PI*a) + 0.144232f*cosf(4.f*M_PI*a) - 0.012604f*cosf(6.f*M_PI*a); break;
      default: break;
 80013e0:	e0b0      	b.n	8001544 <apply_window+0x1fc>
      case WIN_HANN:     mult = 0.5f*(1.f - cosf(2.f*M_PI*a)); break;
 80013e2:	69b8      	ldr	r0, [r7, #24]
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	a383      	add	r3, pc, #524	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbd5 	bl	8000ba8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	ee00 3a10 	vmov	s0, r3
 8001404:	f00b fbf0 	bl	800cbe8 <cosf>
 8001408:	eef0 7a40 	vmov.f32	s15, s0
 800140c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001420:	e091      	b.n	8001546 <apply_window+0x1fe>
      case WIN_BLACKMAN: mult = 0.42f - 0.5f*cosf(2.f*M_PI*a) + 0.08f*cosf(4.f*M_PI*a); break;
 8001422:	69b8      	ldr	r0, [r7, #24]
 8001424:	f7ff f898 	bl	8000558 <__aeabi_f2d>
 8001428:	a373      	add	r3, pc, #460	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f8eb 	bl	8000608 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbb5 	bl	8000ba8 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	ee00 3a10 	vmov	s0, r3
 8001444:	f00b fbd0 	bl	800cbe8 <cosf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001614 <apply_window+0x2cc>
 8001458:	ee37 8a67 	vsub.f32	s16, s14, s15
 800145c:	69b8      	ldr	r0, [r7, #24]
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	a367      	add	r3, pc, #412	@ (adr r3, 8001600 <apply_window+0x2b8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ce 	bl	8000608 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb98 	bl	8000ba8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	ee00 3a10 	vmov	s0, r3
 800147e:	f00b fbb3 	bl	800cbe8 <cosf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001618 <apply_window+0x2d0>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001492:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001496:	e056      	b.n	8001546 <apply_window+0x1fe>
      case WIN_NUTTALL:  mult = 0.355768f - 0.487396f*cosf(2.f*M_PI*a) + 0.144232f*cosf(4.f*M_PI*a) - 0.012604f*cosf(6.f*M_PI*a); break;
 8001498:	69b8      	ldr	r0, [r7, #24]
 800149a:	f7ff f85d 	bl	8000558 <__aeabi_f2d>
 800149e:	a356      	add	r3, pc, #344	@ (adr r3, 80015f8 <apply_window+0x2b0>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8b0 	bl	8000608 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb7a 	bl	8000ba8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee00 3a10 	vmov	s0, r3
 80014ba:	f00b fb95 	bl	800cbe8 <cosf>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800161c <apply_window+0x2d4>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001620 <apply_window+0x2d8>
 80014ce:	ee37 8a67 	vsub.f32	s16, s14, s15
 80014d2:	69b8      	ldr	r0, [r7, #24]
 80014d4:	f7ff f840 	bl	8000558 <__aeabi_f2d>
 80014d8:	a349      	add	r3, pc, #292	@ (adr r3, 8001600 <apply_window+0x2b8>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f893 	bl	8000608 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb5d 	bl	8000ba8 <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	ee00 3a10 	vmov	s0, r3
 80014f4:	f00b fb78 	bl	800cbe8 <cosf>
 80014f8:	eef0 7a40 	vmov.f32	s15, s0
 80014fc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001624 <apply_window+0x2dc>
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001508:	69b8      	ldr	r0, [r7, #24]
 800150a:	f7ff f825 	bl	8000558 <__aeabi_f2d>
 800150e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001608 <apply_window+0x2c0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f878 	bl	8000608 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb42 	bl	8000ba8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	ee00 3a10 	vmov	s0, r3
 800152a:	f00b fb5d 	bl	800cbe8 <cosf>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001628 <apply_window+0x2e0>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800153e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001542:	e000      	b.n	8001546 <apply_window+0x1fe>
      default: break;
 8001544:	bf00      	nop
    }
    float edge = taper_pct/100.f, t=1.f;
 8001546:	ed97 7a00 	vldr	s14, [r7]
 800154a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800162c <apply_window+0x2e4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a05 	vstr	s15, [r7, #20]
 8001556:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800155a:	623b      	str	r3, [r7, #32]
    if (a<edge) t=a/edge; else if (a>(1.f-edge)) t=(1.f-a)/edge;
 800155c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001560:	edd7 7a05 	vldr	s15, [r7, #20]
 8001564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d508      	bpl.n	8001580 <apply_window+0x238>
 800156e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001572:	ed97 7a05 	vldr	s14, [r7, #20]
 8001576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157a:	edc7 7a08 	vstr	s15, [r7, #32]
 800157e:	e018      	b.n	80015b2 <apply_window+0x26a>
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001584:	edd7 7a05 	vldr	s15, [r7, #20]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	dd0b      	ble.n	80015b2 <apply_window+0x26a>
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80015aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ae:	edc7 7a08 	vstr	s15, [r7, #32]
    w[n] = 1.f - (1.f - mult)*t;
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015be:	edd7 7a08 	vldr	s15, [r7, #32]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	edc3 7a00 	vstr	s15, [r3]
  for(int n=0;n<N;n++){
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	3301      	adds	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f6ff aee3 	blt.w	80013b0 <apply_window+0x68>
  }
}
 80015ea:	3730      	adds	r7, #48	@ 0x30
 80015ec:	46bd      	mov	sp, r7
 80015ee:	ecbd 8b02 	vpop	{d8}
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	401921fb 	.word	0x401921fb
 8001600:	54442d18 	.word	0x54442d18
 8001604:	402921fb 	.word	0x402921fb
 8001608:	7f3321d2 	.word	0x7f3321d2
 800160c:	4032d97c 	.word	0x4032d97c
 8001610:	3dcccccd 	.word	0x3dcccccd
 8001614:	3ed70a3d 	.word	0x3ed70a3d
 8001618:	3da3d70a 	.word	0x3da3d70a
 800161c:	3ef98bf8 	.word	0x3ef98bf8
 8001620:	3eb62739 	.word	0x3eb62739
 8001624:	3e13b18e 	.word	0x3e13b18e
 8001628:	3c4e8102 	.word	0x3c4e8102
 800162c:	42c80000 	.word	0x42c80000

08001630 <fill_lut>:

static void fill_lut(WaveType wt){
 8001630:	b580      	push	{r7, lr}
 8001632:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001636:	af00      	add	r7, sp, #0
 8001638:	4602      	mov	r2, r0
 800163a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800163e:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001642:	701a      	strb	r2, [r3, #0]
  float win[LUT_N]; apply_window(win, LUT_N, g_win, g_taper_percent);
 8001644:	4b84      	ldr	r3, [pc, #528]	@ (8001858 <fill_lut+0x228>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b84      	ldr	r3, [pc, #528]	@ (800185c <fill_lut+0x22c>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fe74 	bl	8001348 <apply_window>
  for (int i=0;i<LUT_N;i++){
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001666:	e0e8      	b.n	800183a <fill_lut+0x20a>
    float ph=(float)i/(float)LUT_N, y=0.f;
 8001668:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001860 <fill_lut+0x230>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001680:	edc3 7a00 	vstr	s15, [r3]
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 800168c:	6013      	str	r3, [r2, #0]
    switch(wt){
 800168e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001692:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d87a      	bhi.n	8001792 <fill_lut+0x162>
 800169c:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <fill_lut+0x74>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016b9 	.word	0x080016b9
 80016a8:	08001701 	.word	0x08001701
 80016ac:	08001729 	.word	0x08001729
 80016b0:	0800176b 	.word	0x0800176b
 80016b4:	08001779 	.word	0x08001779
      case WT_SINE:   y = 0.5f*(sinf(2.f*M_PI*ph)+1.f); break;
 80016b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_f2d>
 80016c2:	a363      	add	r3, pc, #396	@ (adr r3, 8001850 <fill_lut+0x220>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff9e 	bl	8000608 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa68 	bl	8000ba8 <__aeabi_d2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	ee00 3a10 	vmov	s0, r3
 80016de:	f00b fac7 	bl	800cc70 <sinf>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80016fa:	edc3 7a00 	vstr	s15, [r3]
 80016fe:	e048      	b.n	8001792 <fill_lut+0x162>
      case WT_SQUARE: y = (ph<0.5f)?1.f:0.f; break;
 8001700:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d502      	bpl.n	800171c <fill_lut+0xec>
 8001716:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800171a:	e001      	b.n	8001720 <fill_lut+0xf0>
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e034      	b.n	8001792 <fill_lut+0x162>
      case WT_TRI:    y = (ph<0.5f)?(ph*2.f):(2.f-2.f*ph); break;
 8001728:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d506      	bpl.n	800174c <fill_lut+0x11c>
 800173e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174a:	e009      	b.n	8001760 <fill_lut+0x130>
 800174c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001758:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001764:	edc3 7a00 	vstr	s15, [r3]
 8001768:	e013      	b.n	8001792 <fill_lut+0x162>
      case WT_SAWUP:  y = ph; break;
 800176a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00c      	b.n	8001792 <fill_lut+0x162>
      case WT_SAWDN:  y = 1.f - ph; break;
 8001778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800178c:	edc3 7a00 	vstr	s15, [r3]
 8001790:	bf00      	nop
    }
    y *= win[i];
 8001792:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001796:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 800179a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017b6:	edc3 7a00 	vstr	s15, [r3]
    float v = y*4095.f; if (v<0) v=0; if (v>4095.f) v=4095.f;
 80017ba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001864 <fill_lut+0x234>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017ce:	edc3 7a00 	vstr	s15, [r3]
 80017d2:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d504      	bpl.n	80017ee <fill_lut+0x1be>
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001864 <fill_lut+0x234>
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd03      	ble.n	800180c <fill_lut+0x1dc>
 8001804:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <fill_lut+0x238>)
 8001806:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 800180a:	6013      	str	r3, [r2, #0]
    s_lut[i] = (uint16_t)(v+0.5f);
 800180c:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 3a90 	vmov	r3, s15
 8001824:	b299      	uxth	r1, r3
 8001826:	4a11      	ldr	r2, [pc, #68]	@ (800186c <fill_lut+0x23c>)
 8001828:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800182c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0;i<LUT_N;i++){
 8001830:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001834:	3301      	adds	r3, #1
 8001836:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800183a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	f77f af12 	ble.w	8001668 <fill_lut+0x38>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	54442d18 	.word	0x54442d18
 8001854:	401921fb 	.word	0x401921fb
 8001858:	200006d9 	.word	0x200006d9
 800185c:	20000038 	.word	0x20000038
 8001860:	43800000 	.word	0x43800000
 8001864:	457ff000 	.word	0x457ff000
 8001868:	457ff000 	.word	0x457ff000
 800186c:	200004d8 	.word	0x200004d8

08001870 <dac_start>:

static bool dac_start(float freq){
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	ed87 0a01 	vstr	s0, [r7, #4]
  if (freq<=0) return false;
 800187a:	edd7 7a01 	vldr	s15, [r7, #4]
 800187e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d801      	bhi.n	800188c <dac_start+0x1c>
 8001888:	2300      	movs	r3, #0
 800188a:	e07c      	b.n	8001986 <dac_start+0x116>
  float fs = (float)LUT_N * freq; if (fs>DAC_FS_MAX_HZ) fs=DAC_FS_MAX_HZ;
 800188c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001890:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001990 <dac_start+0x120>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	edc7 7a07 	vstr	s15, [r7, #28]
 800189c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001994 <dac_start+0x124>
 80018a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	dd01      	ble.n	80018b2 <dac_start+0x42>
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <dac_start+0x128>)
 80018b0:	61fb      	str	r3, [r7, #28]

  uint32_t pclk1  = HAL_RCC_GetPCLK1Freq();     // ~42 MHz
 80018b2:	f005 ffd1 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 80018b6:	6138      	str	r0, [r7, #16]
  uint32_t timclk = pclk1*2U; if (!timclk) timclk=84000000U;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <dac_start+0x58>
 80018c4:	4b35      	ldr	r3, [pc, #212]	@ (800199c <dac_start+0x12c>)
 80018c6:	61bb      	str	r3, [r7, #24]

  uint32_t psc=0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t arr = (uint32_t)((float)timclk/fs); if (arr<1) arr=1; arr-=1;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <dac_start+0x82>
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]

  __HAL_TIM_DISABLE(&htim2);
 80018f8:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <dac_start+0x130>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10f      	bne.n	8001928 <dac_start+0xb8>
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <dac_start+0x130>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <dac_start+0xb8>
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <dac_start+0x130>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <dac_start+0x130>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, psc);
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <dac_start+0x130>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <dac_start+0x130>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <dac_start+0x130>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <dac_start+0x130>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

  /* (Re)gera a LUT conforme tipo de onda atual */
  fill_lut(g_wave);
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <dac_start+0x134>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe70 	bl	8001630 <fill_lut>

  /* IMPORTANTE: requer hdma_dac1 linkado no MSP (DMA1 Stream5, Channel 7) */
  if (HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)s_lut, LUT_N, DAC_ALIGN_12B_R)!=HAL_OK)
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <dac_start+0x138>)
 800195a:	2100      	movs	r1, #0
 800195c:	4813      	ldr	r0, [pc, #76]	@ (80019ac <dac_start+0x13c>)
 800195e:	f001 ffc5 	bl	80038ec <HAL_DAC_Start_DMA>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <dac_start+0xfc>
    return false;
 8001968:	2300      	movs	r3, #0
 800196a:	e00c      	b.n	8001986 <dac_start+0x116>

  if (HAL_TIM_Base_Start(&htim2)!=HAL_OK){
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <dac_start+0x130>)
 800196e:	f006 fc3d 	bl	80081ec <HAL_TIM_Base_Start>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <dac_start+0x114>
    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001978:	2100      	movs	r1, #0
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <dac_start+0x13c>)
 800197c:	f002 f876 	bl	8003a6c <HAL_DAC_Stop_DMA>
    return false;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <dac_start+0x116>
  }
  return true;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	43800000 	.word	0x43800000
 8001994:	49742400 	.word	0x49742400
 8001998:	49742400 	.word	0x49742400
 800199c:	0501bd00 	.word	0x0501bd00
 80019a0:	20000444 	.word	0x20000444
 80019a4:	200006d8 	.word	0x200006d8
 80019a8:	200004d8 	.word	0x200004d8
 80019ac:	20000324 	.word	0x20000324

080019b0 <dac_stop>:

static void dac_stop(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop(&htim2);
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <dac_stop+0x18>)
 80019b6:	f006 fc81 	bl	80082bc <HAL_TIM_Base_Stop>
  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80019ba:	2100      	movs	r1, #0
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <dac_stop+0x1c>)
 80019be:	f002 f855 	bl	8003a6c <HAL_DAC_Stop_DMA>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000444 	.word	0x20000444
 80019cc:	20000324 	.word	0x20000324

080019d0 <put_prompt>:

/* ============================ Heartbeat ============================ */
static inline void put_prompt(void){ printf("> "); }
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <put_prompt+0x10>)
 80019d6:	f00c feed 	bl	800e7b4 <iprintf>
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	080107ec 	.word	0x080107ec

080019e4 <hb_tick>:
static void hb_tick(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  static uint32_t t0=0; if (!g_hb_enable) return;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <hb_tick+0x38>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <hb_tick+0x34>
  if (HAL_GetTick()-t0>500){ t0=HAL_GetTick(); HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); }
 80019f2:	f001 fdd1 	bl	8003598 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <hb_tick+0x3c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a02:	d90a      	bls.n	8001a1a <hb_tick+0x36>
 8001a04:	f001 fdc8 	bl	8003598 <HAL_GetTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <hb_tick+0x3c>)
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	2110      	movs	r1, #16
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <hb_tick+0x40>)
 8001a12:	f002 ff0e 	bl	8004832 <HAL_GPIO_TogglePin>
 8001a16:	e000      	b.n	8001a1a <hb_tick+0x36>
  static uint32_t t0=0; if (!g_hb_enable) return;
 8001a18:	bf00      	nop
}
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000ef4 	.word	0x20000ef4
 8001a24:	40020400 	.word	0x40020400

08001a28 <fpga_cs_low>:
static volatile uint32_t g_bin_crc_calc   = 0;

static uint8_t  g_rx_bin_buf[RX_BIN_BUF_SZ];
static volatile uint32_t g_rx_bin_w=0, g_rx_bin_r=0;

static inline void fpga_cs_low(void){ HAL_GPIO_WritePin(FPGA_CS_GPIO_Port, FPGA_CS_Pin, GPIO_PIN_RESET); }
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a32:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <fpga_cs_low+0x14>)
 8001a34:	f002 fee4 	bl	8004800 <HAL_GPIO_WritePin>
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40020400 	.word	0x40020400

08001a40 <fpga_cs_high>:
static inline void fpga_cs_high(void){ HAL_GPIO_WritePin(FPGA_CS_GPIO_Port, FPGA_CS_Pin, GPIO_PIN_SET); }
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a4a:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <fpga_cs_high+0x14>)
 8001a4c:	f002 fed8 	bl	8004800 <HAL_GPIO_WritePin>
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020400 	.word	0x40020400

08001a58 <spi_set_prescaler>:

static void spi_set_prescaler(uint32_t br_prescaler){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  hspi1.Init.BaudRatePrescaler = br_prescaler;
 8001a60:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <spi_set_prescaler+0x28>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	61d3      	str	r3, [r2, #28]
  if (HAL_SPI_Init(&hspi1)!=HAL_OK) Error_Handler();
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <spi_set_prescaler+0x28>)
 8001a68:	f005 ff1e 	bl	80078a8 <HAL_SPI_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <spi_set_prescaler+0x1e>
 8001a72:	f7ff fbcb 	bl	800120c <Error_Handler>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000038c 	.word	0x2000038c

08001a84 <bin_reset_ring>:

static void bin_reset_ring(void){ __disable_irq(); g_rx_bin_w=g_rx_bin_r=0; __enable_irq(); }
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <bin_reset_ring+0x20>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <bin_reset_ring+0x24>)
 8001a94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a96:	b662      	cpsie	i
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000ef0 	.word	0x20000ef0
 8001aa8:	20000eec 	.word	0x20000eec

08001aac <bin_ring_avail>:
static uint32_t bin_ring_avail(void){ uint32_t w=g_rx_bin_w,r=g_rx_bin_r; return (w>=r)?(w-r):(RX_BIN_BUF_SZ-r+w); }
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <bin_ring_avail+0x38>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <bin_ring_avail+0x3c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d303      	bcc.n	8001ace <bin_ring_avail+0x22>
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	e004      	b.n	8001ad8 <bin_ring_avail+0x2c>
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000eec 	.word	0x20000eec
 8001ae8:	20000ef0 	.word	0x20000ef0

08001aec <bin_ring_read>:

static uint32_t bin_ring_read(uint8_t *dst, uint32_t want){
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t got=0; __disable_irq();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001afa:	b672      	cpsid	i
}
 8001afc:	bf00      	nop
  while (got<want && g_rx_bin_r!=g_rx_bin_w){
 8001afe:	e014      	b.n	8001b2a <bin_ring_read+0x3e>
    dst[got++]=g_rx_bin_buf[g_rx_bin_r++]; if (g_rx_bin_r>=RX_BIN_BUF_SZ) g_rx_bin_r=0;
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <bin_ring_read+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	4912      	ldr	r1, [pc, #72]	@ (8001b50 <bin_ring_read+0x64>)
 8001b08:	600a      	str	r2, [r1, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	1c51      	adds	r1, r2, #1
 8001b0e:	60f9      	str	r1, [r7, #12]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	440a      	add	r2, r1
 8001b14:	490f      	ldr	r1, [pc, #60]	@ (8001b54 <bin_ring_read+0x68>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	7013      	strb	r3, [r2, #0]
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <bin_ring_read+0x64>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b22:	d302      	bcc.n	8001b2a <bin_ring_read+0x3e>
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <bin_ring_read+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
  while (got<want && g_rx_bin_r!=g_rx_bin_w){
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d205      	bcs.n	8001b3e <bin_ring_read+0x52>
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <bin_ring_read+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <bin_ring_read+0x6c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d1e0      	bne.n	8001b00 <bin_ring_read+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b3e:	b662      	cpsie	i
}
 8001b40:	bf00      	nop
  }
  __enable_irq(); return got;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000ef0 	.word	0x20000ef0
 8001b54:	200006ec 	.word	0x200006ec
 8001b58:	20000eec 	.word	0x20000eec

08001b5c <CDC_OnRxData>:

/* Chamado pelo usbd_cdc_if.c quando App_IsBinaryMode()=1 */
void CDC_OnRxData(uint8_t *buf, uint32_t len){
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  if (!g_bin_mode || len==0) return;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <CDC_OnRxData+0x74>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d027      	beq.n	8001bc0 <CDC_OnRxData+0x64>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d024      	beq.n	8001bc0 <CDC_OnRxData+0x64>
  for (uint32_t i=0;i<len;i++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e01c      	b.n	8001bb6 <CDC_OnRxData+0x5a>
    uint32_t next=g_rx_bin_w+1; if (next>=RX_BIN_BUF_SZ) next=0;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <CDC_OnRxData+0x78>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b8a:	d301      	bcc.n	8001b90 <CDC_OnRxData+0x34>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
    if (next==g_rx_bin_r) break; // overflow (descarta)
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <CDC_OnRxData+0x7c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d014      	beq.n	8001bc4 <CDC_OnRxData+0x68>
    g_rx_bin_buf[g_rx_bin_w]=buf[i]; g_rx_bin_w=next;
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	441a      	add	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <CDC_OnRxData+0x78>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	7811      	ldrb	r1, [r2, #0]
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <CDC_OnRxData+0x80>)
 8001ba8:	54d1      	strb	r1, [r2, r3]
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <CDC_OnRxData+0x78>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	6013      	str	r3, [r2, #0]
  for (uint32_t i=0;i<len;i++){
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3de      	bcc.n	8001b7c <CDC_OnRxData+0x20>
 8001bbe:	e002      	b.n	8001bc6 <CDC_OnRxData+0x6a>
  if (!g_bin_mode || len==0) return;
 8001bc0:	bf00      	nop
 8001bc2:	e000      	b.n	8001bc6 <CDC_OnRxData+0x6a>
    if (next==g_rx_bin_r) break; // overflow (descarta)
 8001bc4:	bf00      	nop
  }
}
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	200006da 	.word	0x200006da
 8001bd4:	20000eec 	.word	0x20000eec
 8001bd8:	20000ef0 	.word	0x20000ef0
 8001bdc:	200006ec 	.word	0x200006ec

08001be0 <App_IsBinaryMode>:
uint8_t App_IsBinaryMode(void){ return g_bin_mode; }
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <App_IsBinaryMode+0x14>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	200006da 	.word	0x200006da

08001bf8 <process_fpga_upload>:

static void process_fpga_upload(void){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
  if (!g_bin_mode) return;
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001d28 <process_fpga_upload+0x130>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8087 	beq.w	8001d18 <process_fpga_upload+0x120>
  static uint8_t chunk[1024];

  uint32_t need = (g_bin_bytes_left>sizeof(chunk))?sizeof(chunk):g_bin_bytes_left;
 8001c0a:	4b48      	ldr	r3, [pc, #288]	@ (8001d2c <process_fpga_upload+0x134>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d802      	bhi.n	8001c1a <process_fpga_upload+0x22>
 8001c14:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <process_fpga_upload+0x134>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e001      	b.n	8001c1e <process_fpga_upload+0x26>
 8001c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c1e:	613b      	str	r3, [r7, #16]
  if (bin_ring_avail()<need) return; // aguarda mais bytes
 8001c20:	f7ff ff44 	bl	8001aac <bin_ring_avail>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d877      	bhi.n	8001d1c <process_fpga_upload+0x124>

  uint32_t got = bin_ring_read(chunk, need); if (!got) return;
 8001c2c:	6939      	ldr	r1, [r7, #16]
 8001c2e:	4840      	ldr	r0, [pc, #256]	@ (8001d30 <process_fpga_upload+0x138>)
 8001c30:	f7ff ff5c 	bl	8001aec <bin_ring_read>
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d071      	beq.n	8001d20 <process_fpga_upload+0x128>

  // CRC periférico (palavras de 32b; faz padding do resto)
  uint32_t w=got/4, rem=got%4;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	607b      	str	r3, [r7, #4]
  if (w) HAL_CRC_Accumulate(&hcrc,(uint32_t*)chunk,w);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <process_fpga_upload+0x62>
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4937      	ldr	r1, [pc, #220]	@ (8001d30 <process_fpga_upload+0x138>)
 8001c54:	4837      	ldr	r0, [pc, #220]	@ (8001d34 <process_fpga_upload+0x13c>)
 8001c56:	f001 fdfc 	bl	8003852 <HAL_CRC_Accumulate>
  if (rem){ uint8_t pad[4]={0,0,0,0}; for (uint32_t i=0;i<rem;i++) pad[i]=chunk[4*w+i]; HAL_CRC_Accumulate(&hcrc,(uint32_t*)pad,1); }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01c      	beq.n	8001c9a <process_fpga_upload+0xa2>
 8001c60:	2300      	movs	r3, #0
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00d      	b.n	8001c86 <process_fpga_upload+0x8e>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	009a      	lsls	r2, r3, #2
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a2f      	ldr	r2, [pc, #188]	@ (8001d30 <process_fpga_upload+0x138>)
 8001c74:	5cd1      	ldrb	r1, [r2, r3]
 8001c76:	463a      	mov	r2, r7
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3ed      	bcc.n	8001c6a <process_fpga_upload+0x72>
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2201      	movs	r2, #1
 8001c92:	4619      	mov	r1, r3
 8001c94:	4827      	ldr	r0, [pc, #156]	@ (8001d34 <process_fpga_upload+0x13c>)
 8001c96:	f001 fddc 	bl	8003852 <HAL_CRC_Accumulate>

  if (HAL_SPI_Transmit(&hspi1, chunk, got, HAL_MAX_DELAY)!=HAL_OK){
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	4923      	ldr	r1, [pc, #140]	@ (8001d30 <process_fpga_upload+0x138>)
 8001ca4:	4824      	ldr	r0, [pc, #144]	@ (8001d38 <process_fpga_upload+0x140>)
 8001ca6:	f005 fe88 	bl	80079ba <HAL_SPI_Transmit>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <process_fpga_upload+0xce>
    printf("ERROR: SPI TX\r\n"); g_bin_mode=0; fpga_cs_high(); put_prompt(); return;
 8001cb0:	4822      	ldr	r0, [pc, #136]	@ (8001d3c <process_fpga_upload+0x144>)
 8001cb2:	f00c fde7 	bl	800e884 <puts>
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <process_fpga_upload+0x130>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	f7ff fec0 	bl	8001a40 <fpga_cs_high>
 8001cc0:	f7ff fe86 	bl	80019d0 <put_prompt>
 8001cc4:	e02d      	b.n	8001d22 <process_fpga_upload+0x12a>
  }

  g_bin_bytes_left -= got;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <process_fpga_upload+0x134>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <process_fpga_upload+0x134>)
 8001cd0:	6013      	str	r3, [r2, #0]
  if (g_bin_bytes_left==0){
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <process_fpga_upload+0x134>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d123      	bne.n	8001d22 <process_fpga_upload+0x12a>
    g_bin_crc_calc = hcrc.Instance->DR;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <process_fpga_upload+0x13c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <process_fpga_upload+0x148>)
 8001ce2:	6013      	str	r3, [r2, #0]
    fpga_cs_high(); g_bin_mode=0;
 8001ce4:	f7ff feac 	bl	8001a40 <fpga_cs_high>
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <process_fpga_upload+0x130>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
    if (g_bin_crc_calc==g_bin_crc_expect) printf("FPGA_UPLOAD_OK\r\n");
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <process_fpga_upload+0x148>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <process_fpga_upload+0x14c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d103      	bne.n	8001d02 <process_fpga_upload+0x10a>
 8001cfa:	4813      	ldr	r0, [pc, #76]	@ (8001d48 <process_fpga_upload+0x150>)
 8001cfc:	f00c fdc2 	bl	800e884 <puts>
 8001d00:	e007      	b.n	8001d12 <process_fpga_upload+0x11a>
    else printf("FPGA_UPLOAD_BADCRC exp:%lu got:%lu\r\n",(unsigned long)g_bin_crc_expect,(unsigned long)g_bin_crc_calc);
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <process_fpga_upload+0x14c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	@ (8001d40 <process_fpga_upload+0x148>)
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480f      	ldr	r0, [pc, #60]	@ (8001d4c <process_fpga_upload+0x154>)
 8001d0e:	f00c fd51 	bl	800e7b4 <iprintf>
    put_prompt();
 8001d12:	f7ff fe5d 	bl	80019d0 <put_prompt>
 8001d16:	e004      	b.n	8001d22 <process_fpga_upload+0x12a>
  if (!g_bin_mode) return;
 8001d18:	bf00      	nop
 8001d1a:	e002      	b.n	8001d22 <process_fpga_upload+0x12a>
  if (bin_ring_avail()<need) return; // aguarda mais bytes
 8001d1c:	bf00      	nop
 8001d1e:	e000      	b.n	8001d22 <process_fpga_upload+0x12a>
  uint32_t got = bin_ring_read(chunk, need); if (!got) return;
 8001d20:	bf00      	nop
  }
}
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200006da 	.word	0x200006da
 8001d2c:	200006e0 	.word	0x200006e0
 8001d30:	20000ef8 	.word	0x20000ef8
 8001d34:	2000031c 	.word	0x2000031c
 8001d38:	2000038c 	.word	0x2000038c
 8001d3c:	080107f0 	.word	0x080107f0
 8001d40:	200006e8 	.word	0x200006e8
 8001d44:	200006e4 	.word	0x200006e4
 8001d48:	08010800 	.word	0x08010800
 8001d4c:	08010810 	.word	0x08010810

08001d50 <cli_help>:
  {"FPGA_ABORT",cli_fpga_abort,"Cancela upload binario"},
  {"FPGA_PEEK", cli_fpga_peek, "FPGA_PEEK <nbytes>"},
  {"NOOP",      cli_noop,      "No operation"},
};

static void cli_help(int argc, char**argv){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  printf("Comandos:\r\n");
 8001d5a:	4813      	ldr	r0, [pc, #76]	@ (8001da8 <cli_help+0x58>)
 8001d5c:	f00c fd92 	bl	800e884 <puts>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e017      	b.n	8001d96 <cli_help+0x46>
    printf("  %-12s %s\r\n", cmds[i].name, cmds[i].help);
 8001d66:	4911      	ldr	r1, [pc, #68]	@ (8001dac <cli_help+0x5c>)
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <cli_help+0x5c>)
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4403      	add	r3, r0
 8001d84:	3308      	adds	r3, #8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4809      	ldr	r0, [pc, #36]	@ (8001db0 <cli_help+0x60>)
 8001d8c:	f00c fd12 	bl	800e7b4 <iprintf>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b13      	cmp	r3, #19
 8001d9a:	d9e4      	bls.n	8001d66 <cli_help+0x16>
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08010af4 	.word	0x08010af4
 8001dac:	08010f20 	.word	0x08010f20
 8001db0:	08010b00 	.word	0x08010b00

08001db4 <cli_ping>:
static void cli_ping(int argc, char**argv){ printf("PONG\r\n"); }
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <cli_ping+0x18>)
 8001dc0:	f00c fd60 	bl	800e884 <puts>
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08010b10 	.word	0x08010b10

08001dd0 <cli_led>:

static void cli_led(int argc, char**argv){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: LED <n> <0|1>\r\n"); return; }
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	dc03      	bgt.n	8001de8 <cli_led+0x18>
 8001de0:	4828      	ldr	r0, [pc, #160]	@ (8001e84 <cli_led+0xb4>)
 8001de2:	f00c fd4f 	bl	800e884 <puts>
 8001de6:	e049      	b.n	8001e7c <cli_led+0xac>
  int n=atoi(argv[1]), v=atoi(argv[2]);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00b fcb8 	bl	800d764 <atoi>
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00b fcb1 	bl	800d764 <atoi>
 8001e02:	60b8      	str	r0, [r7, #8]
  GPIO_TypeDef *port=NULL; uint16_t pin=0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	827b      	strh	r3, [r7, #18]
  switch(n){
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d821      	bhi.n	8001e56 <cli_led+0x86>
 8001e12:	a201      	add	r2, pc, #4	@ (adr r2, 8001e18 <cli_led+0x48>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e35 	.word	0x08001e35
 8001e20:	08001e41 	.word	0x08001e41
 8001e24:	08001e4d 	.word	0x08001e4d
    case 0: port=LED_RED_GPIO_Port;    pin=LED_RED_Pin;    break;
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <cli_led+0xb8>)
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e30:	827b      	strh	r3, [r7, #18]
 8001e32:	e014      	b.n	8001e5e <cli_led+0x8e>
    case 1: port=LED_GREEN_GPIO_Port;  pin=LED_GREEN_Pin;  break;
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <cli_led+0xb8>)
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e3c:	827b      	strh	r3, [r7, #18]
 8001e3e:	e00e      	b.n	8001e5e <cli_led+0x8e>
    case 2: port=LED_YELLOW_GPIO_Port; pin=LED_YELLOW_Pin; break;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <cli_led+0xb8>)
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e48:	827b      	strh	r3, [r7, #18]
 8001e4a:	e008      	b.n	8001e5e <cli_led+0x8e>
    case 3: port=LED_BLUE_GPIO_Port;   pin=LED_BLUE_Pin;   break;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <cli_led+0xbc>)
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	2310      	movs	r3, #16
 8001e52:	827b      	strh	r3, [r7, #18]
 8001e54:	e003      	b.n	8001e5e <cli_led+0x8e>
    default: printf("ERROR: LED invalido\r\n"); return;
 8001e56:	480e      	ldr	r0, [pc, #56]	@ (8001e90 <cli_led+0xc0>)
 8001e58:	f00c fd14 	bl	800e884 <puts>
 8001e5c:	e00e      	b.n	8001e7c <cli_led+0xac>
  }
  HAL_GPIO_WritePin(port,pin,v?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f002 fcc5 	bl	8004800 <HAL_GPIO_WritePin>
  printf("OK\r\n");
 8001e76:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <cli_led+0xc4>)
 8001e78:	f00c fd04 	bl	800e884 <puts>
}
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	08010b18 	.word	0x08010b18
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	08010b30 	.word	0x08010b30
 8001e94:	08010b48 	.word	0x08010b48

08001e98 <cli_accel>:

static void cli_accel(int argc, char**argv){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: ACCEL <0|1>\r\n"); return; }
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	dc03      	bgt.n	8001eb0 <cli_accel+0x18>
 8001ea8:	4814      	ldr	r0, [pc, #80]	@ (8001efc <cli_accel+0x64>)
 8001eaa:	f00c fceb 	bl	800e884 <puts>
 8001eae:	e022      	b.n	8001ef6 <cli_accel+0x5e>
  int on=atoi(argv[1]);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00b fc54 	bl	800d764 <atoi>
 8001ebc:	60f8      	str	r0, [r7, #12]
  if (on){
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <cli_accel+0x52>
    if (!MMA7660_Init(&hi2c1, MMA_AVDD_GPIO_Port, MMA_AVDD_Pin)){ printf("ERROR: MMA7660 init\r\n"); return; }
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <cli_accel+0x68>)
 8001ec8:	480e      	ldr	r0, [pc, #56]	@ (8001f04 <cli_accel+0x6c>)
 8001eca:	f7ff f8c0 	bl	800104e <MMA7660_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <cli_accel+0x4a>
 8001eda:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <cli_accel+0x70>)
 8001edc:	f00c fcd2 	bl	800e884 <puts>
 8001ee0:	e009      	b.n	8001ef6 <cli_accel+0x5e>
    g_app_state=STATE_STREAMING_ACCEL;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <cli_accel+0x74>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e002      	b.n	8001ef0 <cli_accel+0x58>
  } else g_app_state=STATE_IDLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <cli_accel+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  printf("OK\r\n");
 8001ef0:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <cli_accel+0x78>)
 8001ef2:	f00c fcc7 	bl	800e884 <puts>
}
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	08010b4c 	.word	0x08010b4c
 8001f00:	40020400 	.word	0x40020400
 8001f04:	20000338 	.word	0x20000338
 8001f08:	08010b60 	.word	0x08010b60
 8001f0c:	200004d4 	.word	0x200004d4
 8001f10:	08010b48 	.word	0x08010b48

08001f14 <cli_kalman>:

static void cli_kalman(int argc, char**argv){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: KALMAN <0|1>\r\n"); return; }
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	dc03      	bgt.n	8001f2c <cli_kalman+0x18>
 8001f24:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <cli_kalman+0x38>)
 8001f26:	f00c fcad 	bl	800e884 <puts>
 8001f2a:	e00c      	b.n	8001f46 <cli_kalman+0x32>
  g_kalman_on=(uint8_t)atoi(argv[1]); printf("OK\r\n");
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00b fc16 	bl	800d764 <atoi>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <cli_kalman+0x3c>)
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <cli_kalman+0x40>)
 8001f42:	f00c fc9f 	bl	800e884 <puts>
}
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08010b78 	.word	0x08010b78
 8001f50:	20000034 	.word	0x20000034
 8001f54:	08010b48 	.word	0x08010b48

08001f58 <cli_kalman_set>:
static void cli_kalman_set(int argc, char**argv){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: KALMAN_SET <Q> <R>\r\n"); return; }
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	dc03      	bgt.n	8001f70 <cli_kalman_set+0x18>
 8001f68:	4818      	ldr	r0, [pc, #96]	@ (8001fcc <cli_kalman_set+0x74>)
 8001f6a:	f00c fc8b 	bl	800e884 <puts>
 8001f6e:	e02a      	b.n	8001fc6 <cli_kalman_set+0x6e>
  float Q=strtof(argv[1],NULL), R=strtof(argv[2],NULL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00c f9f9 	bl	800e370 <strtof>
 8001f7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3308      	adds	r3, #8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00c f9f0 	bl	800e370 <strtof>
 8001f90:	ed87 0a02 	vstr	s0, [r7, #8]
  kx.Q=ky.Q=kz.Q=Q; kx.R=ky.R=kz.R=R; printf("OK\r\n");
 8001f94:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <cli_kalman_set+0x78>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <cli_kalman_set+0x78>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <cli_kalman_set+0x7c>)
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <cli_kalman_set+0x7c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <cli_kalman_set+0x80>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <cli_kalman_set+0x78>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6053      	str	r3, [r2, #4]
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <cli_kalman_set+0x78>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <cli_kalman_set+0x7c>)
 8001fb6:	6053      	str	r3, [r2, #4]
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <cli_kalman_set+0x7c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <cli_kalman_set+0x80>)
 8001fbe:	6053      	str	r3, [r2, #4]
 8001fc0:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <cli_kalman_set+0x84>)
 8001fc2:	f00c fc5f 	bl	800e884 <puts>
}
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	08010b90 	.word	0x08010b90
 8001fd0:	20000024 	.word	0x20000024
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	08010b48 	.word	0x08010b48

08001fe0 <cli_dac>:

static void cli_dac(int argc, char**argv){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: DAC <freq|0>\r\n"); return; }
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	dc03      	bgt.n	8001ff8 <cli_dac+0x18>
 8001ff0:	4821      	ldr	r0, [pc, #132]	@ (8002078 <cli_dac+0x98>)
 8001ff2:	f00c fc47 	bl	800e884 <puts>
 8001ff6:	e03b      	b.n	8002070 <cli_dac+0x90>
  float f=strtof(argv[1],NULL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f00c f9b5 	bl	800e370 <strtof>
 8002006:	ed87 0a03 	vstr	s0, [r7, #12]
  if (f>0.f){
 800200a:	edd7 7a03 	vldr	s15, [r7, #12]
 800200e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	dd26      	ble.n	8002066 <cli_dac+0x86>
    g_wave=WT_SINE;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <cli_dac+0x9c>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    float fmax=fmax_from_fs(DAC_FS_MAX_HZ, LUT_N); if (f>fmax) f=fmax;
 800201e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8002080 <cli_dac+0xa0>
 8002022:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	f7ff f973 	bl	8001314 <fmax_from_fs>
 800202e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002032:	ed97 7a03 	vldr	s14, [r7, #12]
 8002036:	edd7 7a02 	vldr	s15, [r7, #8]
 800203a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	dd01      	ble.n	8002048 <cli_dac+0x68>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60fb      	str	r3, [r7, #12]
    if (dac_start(f)) printf("OK\r\n"); else printf("ERROR: DAC start\r\n");
 8002048:	ed97 0a03 	vldr	s0, [r7, #12]
 800204c:	f7ff fc10 	bl	8001870 <dac_start>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <cli_dac+0x7e>
 8002056:	480b      	ldr	r0, [pc, #44]	@ (8002084 <cli_dac+0xa4>)
 8002058:	f00c fc14 	bl	800e884 <puts>
 800205c:	e008      	b.n	8002070 <cli_dac+0x90>
 800205e:	480a      	ldr	r0, [pc, #40]	@ (8002088 <cli_dac+0xa8>)
 8002060:	f00c fc10 	bl	800e884 <puts>
 8002064:	e004      	b.n	8002070 <cli_dac+0x90>
  } else { dac_stop(); printf("OK\r\n"); }
 8002066:	f7ff fca3 	bl	80019b0 <dac_stop>
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <cli_dac+0xa4>)
 800206c:	f00c fc0a 	bl	800e884 <puts>
}
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08010bac 	.word	0x08010bac
 800207c:	200006d8 	.word	0x200006d8
 8002080:	49742400 	.word	0x49742400
 8002084:	08010b48 	.word	0x08010b48
 8002088:	08010bc4 	.word	0x08010bc4

0800208c <cli_wave>:

static void cli_wave(int argc, char**argv){
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: WAVE <SINE|SQUARE|TRI|SAWUP|SAWDN> <freq>\r\n"); return; }
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b02      	cmp	r3, #2
 800209a:	dc03      	bgt.n	80020a4 <cli_wave+0x18>
 800209c:	4843      	ldr	r0, [pc, #268]	@ (80021ac <cli_wave+0x120>)
 800209e:	f00c fbf1 	bl	800e884 <puts>
 80020a2:	e080      	b.n	80021a6 <cli_wave+0x11a>
  float f=strtof(argv[2],NULL); if (f<=0){ printf("ERROR: freq invalida\r\n"); return; }
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	3308      	adds	r3, #8
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00c f95f 	bl	800e370 <strtof>
 80020b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	d803      	bhi.n	80020cc <cli_wave+0x40>
 80020c4:	483a      	ldr	r0, [pc, #232]	@ (80021b0 <cli_wave+0x124>)
 80020c6:	f00c fbdd 	bl	800e884 <puts>
 80020ca:	e06c      	b.n	80021a6 <cli_wave+0x11a>
  if      (!strcmp(argv[1],"SINE"))   g_wave=WT_SINE;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3304      	adds	r3, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4938      	ldr	r1, [pc, #224]	@ (80021b4 <cli_wave+0x128>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f87b 	bl	80001d0 <strcmp>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <cli_wave+0x5c>
 80020e0:	4b35      	ldr	r3, [pc, #212]	@ (80021b8 <cli_wave+0x12c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e03b      	b.n	8002160 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SQUARE")) g_wave=WT_SQUARE;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3304      	adds	r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4933      	ldr	r1, [pc, #204]	@ (80021bc <cli_wave+0x130>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f86d 	bl	80001d0 <strcmp>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <cli_wave+0x78>
 80020fc:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <cli_wave+0x12c>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e02d      	b.n	8002160 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"TRI"))    g_wave=WT_TRI;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3304      	adds	r3, #4
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	492d      	ldr	r1, [pc, #180]	@ (80021c0 <cli_wave+0x134>)
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f85f 	bl	80001d0 <strcmp>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d103      	bne.n	8002120 <cli_wave+0x94>
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <cli_wave+0x12c>)
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e01f      	b.n	8002160 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SAWUP"))  g_wave=WT_SAWUP;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3304      	adds	r3, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4927      	ldr	r1, [pc, #156]	@ (80021c4 <cli_wave+0x138>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe f851 	bl	80001d0 <strcmp>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <cli_wave+0xb0>
 8002134:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <cli_wave+0x12c>)
 8002136:	2203      	movs	r2, #3
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e011      	b.n	8002160 <cli_wave+0xd4>
  else if (!strcmp(argv[1],"SAWDN"))  g_wave=WT_SAWDN;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	3304      	adds	r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4921      	ldr	r1, [pc, #132]	@ (80021c8 <cli_wave+0x13c>)
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f843 	bl	80001d0 <strcmp>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <cli_wave+0xcc>
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <cli_wave+0x12c>)
 8002152:	2204      	movs	r2, #4
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e003      	b.n	8002160 <cli_wave+0xd4>
  else { printf("ERROR: tipo invalido\r\n"); return; }
 8002158:	481c      	ldr	r0, [pc, #112]	@ (80021cc <cli_wave+0x140>)
 800215a:	f00c fb93 	bl	800e884 <puts>
 800215e:	e022      	b.n	80021a6 <cli_wave+0x11a>
  float fmax=fmax_from_fs(DAC_FS_MAX_HZ, LUT_N); if (f>fmax) f=fmax;
 8002160:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80021d0 <cli_wave+0x144>
 8002164:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	f7ff f8d2 	bl	8001314 <fmax_from_fs>
 8002170:	ed87 0a02 	vstr	s0, [r7, #8]
 8002174:	ed97 7a03 	vldr	s14, [r7, #12]
 8002178:	edd7 7a02 	vldr	s15, [r7, #8]
 800217c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	dd01      	ble.n	800218a <cli_wave+0xfe>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	60fb      	str	r3, [r7, #12]
  if (dac_start(f)) printf("OK\r\n"); else printf("ERROR: DAC start\r\n");
 800218a:	ed97 0a03 	vldr	s0, [r7, #12]
 800218e:	f7ff fb6f 	bl	8001870 <dac_start>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <cli_wave+0x114>
 8002198:	480e      	ldr	r0, [pc, #56]	@ (80021d4 <cli_wave+0x148>)
 800219a:	f00c fb73 	bl	800e884 <puts>
 800219e:	e002      	b.n	80021a6 <cli_wave+0x11a>
 80021a0:	480d      	ldr	r0, [pc, #52]	@ (80021d8 <cli_wave+0x14c>)
 80021a2:	f00c fb6f 	bl	800e884 <puts>
}
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	08010bd8 	.word	0x08010bd8
 80021b0:	08010c0c 	.word	0x08010c0c
 80021b4:	08010c24 	.word	0x08010c24
 80021b8:	200006d8 	.word	0x200006d8
 80021bc:	08010c2c 	.word	0x08010c2c
 80021c0:	08010c34 	.word	0x08010c34
 80021c4:	08010c38 	.word	0x08010c38
 80021c8:	08010c40 	.word	0x08010c40
 80021cc:	08010c48 	.word	0x08010c48
 80021d0:	49742400 	.word	0x49742400
 80021d4:	08010b48 	.word	0x08010b48
 80021d8:	08010bc4 	.word	0x08010bc4

080021dc <cli_wavewin>:

static void cli_wavewin(int argc, char**argv){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: WAVEWIN <NONE|HANN|BLACKMAN|NUTTALL> <taper%%>\r\n"); return; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	dc03      	bgt.n	80021f4 <cli_wavewin+0x18>
 80021ec:	4833      	ldr	r0, [pc, #204]	@ (80022bc <cli_wavewin+0xe0>)
 80021ee:	f00c fae1 	bl	800e7b4 <iprintf>
 80021f2:	e05f      	b.n	80022b4 <cli_wavewin+0xd8>
  if      (!strcmp(argv[1],"NONE"))     g_win=WIN_NONE;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4931      	ldr	r1, [pc, #196]	@ (80022c0 <cli_wavewin+0xe4>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffe7 	bl	80001d0 <strcmp>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <cli_wavewin+0x34>
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <cli_wavewin+0xe8>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e02d      	b.n	800226c <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"HANN"))     g_win=WIN_HANN;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3304      	adds	r3, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	492c      	ldr	r1, [pc, #176]	@ (80022c8 <cli_wavewin+0xec>)
 8002218:	4618      	mov	r0, r3
 800221a:	f7fd ffd9 	bl	80001d0 <strcmp>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <cli_wavewin+0x50>
 8002224:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <cli_wavewin+0xe8>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e01f      	b.n	800226c <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"BLACKMAN")) g_win=WIN_BLACKMAN;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4926      	ldr	r1, [pc, #152]	@ (80022cc <cli_wavewin+0xf0>)
 8002234:	4618      	mov	r0, r3
 8002236:	f7fd ffcb 	bl	80001d0 <strcmp>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <cli_wavewin+0x6c>
 8002240:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <cli_wavewin+0xe8>)
 8002242:	2202      	movs	r2, #2
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e011      	b.n	800226c <cli_wavewin+0x90>
  else if (!strcmp(argv[1],"NUTTALL"))  g_win=WIN_NUTTALL;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3304      	adds	r3, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4920      	ldr	r1, [pc, #128]	@ (80022d0 <cli_wavewin+0xf4>)
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ffbd 	bl	80001d0 <strcmp>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <cli_wavewin+0x88>
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <cli_wavewin+0xe8>)
 800225e:	2203      	movs	r2, #3
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e003      	b.n	800226c <cli_wavewin+0x90>
  else { printf("ERROR: janela invalida\r\n"); return; }
 8002264:	481b      	ldr	r0, [pc, #108]	@ (80022d4 <cli_wavewin+0xf8>)
 8002266:	f00c fb0d 	bl	800e884 <puts>
 800226a:	e023      	b.n	80022b4 <cli_wavewin+0xd8>
  float t=strtof(argv[2],NULL); if(t<0) t=0; if(t>100) t=100; g_taper_percent=t;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3308      	adds	r3, #8
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f00c f87b 	bl	800e370 <strtof>
 800227a:	ed87 0a03 	vstr	s0, [r7, #12]
 800227e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002282:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d502      	bpl.n	8002292 <cli_wavewin+0xb6>
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	edd7 7a03 	vldr	s15, [r7, #12]
 8002296:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80022d8 <cli_wavewin+0xfc>
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	dd01      	ble.n	80022a8 <cli_wavewin+0xcc>
 80022a4:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <cli_wavewin+0x100>)
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <cli_wavewin+0x104>)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6013      	str	r3, [r2, #0]
  printf("OK\r\n");
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <cli_wavewin+0x108>)
 80022b0:	f00c fae8 	bl	800e884 <puts>
}
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	08010c60 	.word	0x08010c60
 80022c0:	08010c98 	.word	0x08010c98
 80022c4:	200006d9 	.word	0x200006d9
 80022c8:	08010ca0 	.word	0x08010ca0
 80022cc:	08010ca8 	.word	0x08010ca8
 80022d0:	08010cb4 	.word	0x08010cb4
 80022d4:	08010cbc 	.word	0x08010cbc
 80022d8:	42c80000 	.word	0x42c80000
 80022dc:	42c80000 	.word	0x42c80000
 80022e0:	20000038 	.word	0x20000038
 80022e4:	08010b48 	.word	0x08010b48

080022e8 <cli_sys>:

static void cli_sys(int argc, char**argv){
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
  if (argc>=2){
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	dd36      	ble.n	8002366 <cli_sys+0x7e>
    if (!strcmp(argv[1],"RESET")){ printf("RESETTING...\r\n"); HAL_Delay(20); NVIC_SystemReset(); return; }
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	3304      	adds	r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4930      	ldr	r1, [pc, #192]	@ (80023c0 <cli_sys+0xd8>)
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ff65 	bl	80001d0 <strcmp>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <cli_sys+0x34>
 800230c:	482d      	ldr	r0, [pc, #180]	@ (80023c4 <cli_sys+0xdc>)
 800230e:	f00c fab9 	bl	800e884 <puts>
 8002312:	2014      	movs	r0, #20
 8002314:	f001 f94c 	bl	80035b0 <HAL_Delay>
 8002318:	f7fe ff9a 	bl	8001250 <__NVIC_SystemReset>
    if (!strcmp(argv[1],"HB") && argc>=3){
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4929      	ldr	r1, [pc, #164]	@ (80023c8 <cli_sys+0xe0>)
 8002324:	4618      	mov	r0, r3
 8002326:	f7fd ff53 	bl	80001d0 <strcmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11a      	bne.n	8002366 <cli_sys+0x7e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b02      	cmp	r3, #2
 8002334:	dd17      	ble.n	8002366 <cli_sys+0x7e>
      g_hb_enable=(uint8_t)atoi(argv[2]); if (!g_hb_enable) HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3308      	adds	r3, #8
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f00b fa11 	bl	800d764 <atoi>
 8002342:	4603      	mov	r3, r0
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <cli_sys+0xe4>)
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <cli_sys+0xe4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <cli_sys+0x76>
 8002354:	2200      	movs	r2, #0
 8002356:	2110      	movs	r1, #16
 8002358:	481d      	ldr	r0, [pc, #116]	@ (80023d0 <cli_sys+0xe8>)
 800235a:	f002 fa51 	bl	8004800 <HAL_GPIO_WritePin>
      printf("OK\r\n"); return;
 800235e:	481d      	ldr	r0, [pc, #116]	@ (80023d4 <cli_sys+0xec>)
 8002360:	f00c fa90 	bl	800e884 <puts>
 8002364:	e028      	b.n	80023b8 <cli_sys+0xd0>
    }
  }
  printf("SYS: SYSCLK=%lu, PCLK1=%lu, PCLK2=%lu, HB=%u, fmax=%.1fHz\r\n",
 8002366:	f005 f9a5 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 800236a:	4604      	mov	r4, r0
 800236c:	f005 fa74 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 8002370:	4605      	mov	r5, r0
 8002372:	f005 fa85 	bl	8007880 <HAL_RCC_GetPCLK2Freq>
 8002376:	4606      	mov	r6, r0
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <cli_sys+0xe4>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	607b      	str	r3, [r7, #4]
    HAL_RCC_GetSysClockFreq(), HAL_RCC_GetPCLK1Freq(), HAL_RCC_GetPCLK2Freq(),
    (unsigned)g_hb_enable, fmax_from_fs(DAC_FS_MAX_HZ,LUT_N));
 8002380:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80023d8 <cli_sys+0xf0>
 8002384:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002388:	eeb0 0a67 	vmov.f32	s0, s15
 800238c:	f7fe ffc2 	bl	8001314 <fmax_from_fs>
 8002390:	ee10 3a10 	vmov	r3, s0
  printf("SYS: SYSCLK=%lu, PCLK1=%lu, PCLK2=%lu, HB=%u, fmax=%.1fHz\r\n",
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8df 	bl	8000558 <__aeabi_f2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4633      	mov	r3, r6
 80023a8:	462a      	mov	r2, r5
 80023aa:	4621      	mov	r1, r4
 80023ac:	480b      	ldr	r0, [pc, #44]	@ (80023dc <cli_sys+0xf4>)
 80023ae:	f00c fa01 	bl	800e7b4 <iprintf>
  printf("OK\r\n");
 80023b2:	4808      	ldr	r0, [pc, #32]	@ (80023d4 <cli_sys+0xec>)
 80023b4:	f00c fa66 	bl	800e884 <puts>
}
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023be:	bf00      	nop
 80023c0:	08010cd4 	.word	0x08010cd4
 80023c4:	08010cdc 	.word	0x08010cdc
 80023c8:	08010cec 	.word	0x08010cec
 80023cc:	20000000 	.word	0x20000000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	08010b48 	.word	0x08010b48
 80023d8:	49742400 	.word	0x49742400
 80023dc:	08010cf0 	.word	0x08010cf0

080023e0 <cli_adc_start>:

/* ADCs desabilitados */
static void cli_adc_start(int argc, char**argv){ printf("DISABLED\r\n"); }
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <cli_adc_start+0x18>)
 80023ec:	f00c fa4a 	bl	800e884 <puts>
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	08010d2c 	.word	0x08010d2c

080023fc <cli_adc_stop>:
static void cli_adc_stop (int argc, char**argv){ printf("DISABLED\r\n"); }
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	4803      	ldr	r0, [pc, #12]	@ (8002414 <cli_adc_stop+0x18>)
 8002408:	f00c fa3c 	bl	800e884 <puts>
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	08010d2c 	.word	0x08010d2c

08002418 <cli_adc_cfg>:
static void cli_adc_cfg  (int argc, char**argv){ printf("DISABLED\r\n"); }
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <cli_adc_cfg+0x18>)
 8002424:	f00c fa2e 	bl	800e884 <puts>
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08010d2c 	.word	0x08010d2c

08002434 <cli_adc_read>:
static void cli_adc_read (int argc, char**argv){ printf("DISABLED\r\n"); }
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	4803      	ldr	r0, [pc, #12]	@ (800244c <cli_adc_read+0x18>)
 8002440:	f00c fa20 	bl	800e884 <puts>
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	08010d2c 	.word	0x08010d2c

08002450 <cli_spi_speed>:

static void cli_spi_speed(int argc, char**argv){
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: SPI_SPEED <2|4|8|16|32|64|128|256>\r\n"); return; }
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	dc03      	bgt.n	8002468 <cli_spi_speed+0x18>
 8002460:	4847      	ldr	r0, [pc, #284]	@ (8002580 <cli_spi_speed+0x130>)
 8002462:	f00c fa0f 	bl	800e884 <puts>
 8002466:	e087      	b.n	8002578 <cli_spi_speed+0x128>
  int d=atoi(argv[1]); uint32_t p=SPI_BAUDRATEPRESCALER_8;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3304      	adds	r3, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f00b f978 	bl	800d764 <atoi>
 8002474:	60b8      	str	r0, [r7, #8]
 8002476:	2310      	movs	r3, #16
 8002478:	60fb      	str	r3, [r7, #12]
  switch(d){
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002480:	d06d      	beq.n	800255e <cli_spi_speed+0x10e>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002488:	dc6c      	bgt.n	8002564 <cli_spi_speed+0x114>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b80      	cmp	r3, #128	@ 0x80
 800248e:	d063      	beq.n	8002558 <cli_spi_speed+0x108>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b80      	cmp	r3, #128	@ 0x80
 8002494:	dc66      	bgt.n	8002564 <cli_spi_speed+0x114>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b20      	cmp	r3, #32
 800249a:	dc47      	bgt.n	800252c <cli_spi_speed+0xdc>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	db60      	blt.n	8002564 <cli_spi_speed+0x114>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b02      	subs	r3, #2
 80024a6:	2b1e      	cmp	r3, #30
 80024a8:	d85c      	bhi.n	8002564 <cli_spi_speed+0x114>
 80024aa:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <cli_spi_speed+0x60>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	08002535 	.word	0x08002535
 80024b4:	08002565 	.word	0x08002565
 80024b8:	0800253b 	.word	0x0800253b
 80024bc:	08002565 	.word	0x08002565
 80024c0:	08002565 	.word	0x08002565
 80024c4:	08002565 	.word	0x08002565
 80024c8:	08002541 	.word	0x08002541
 80024cc:	08002565 	.word	0x08002565
 80024d0:	08002565 	.word	0x08002565
 80024d4:	08002565 	.word	0x08002565
 80024d8:	08002565 	.word	0x08002565
 80024dc:	08002565 	.word	0x08002565
 80024e0:	08002565 	.word	0x08002565
 80024e4:	08002565 	.word	0x08002565
 80024e8:	08002547 	.word	0x08002547
 80024ec:	08002565 	.word	0x08002565
 80024f0:	08002565 	.word	0x08002565
 80024f4:	08002565 	.word	0x08002565
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002565 	.word	0x08002565
 8002500:	08002565 	.word	0x08002565
 8002504:	08002565 	.word	0x08002565
 8002508:	08002565 	.word	0x08002565
 800250c:	08002565 	.word	0x08002565
 8002510:	08002565 	.word	0x08002565
 8002514:	08002565 	.word	0x08002565
 8002518:	08002565 	.word	0x08002565
 800251c:	08002565 	.word	0x08002565
 8002520:	08002565 	.word	0x08002565
 8002524:	08002565 	.word	0x08002565
 8002528:	0800254d 	.word	0x0800254d
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d00f      	beq.n	8002552 <cli_spi_speed+0x102>
 8002532:	e017      	b.n	8002564 <cli_spi_speed+0x114>
    case 2: p=SPI_BAUDRATEPRESCALER_2; break; case 4: p=SPI_BAUDRATEPRESCALER_4; break;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e018      	b.n	800256c <cli_spi_speed+0x11c>
 800253a:	2308      	movs	r3, #8
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e015      	b.n	800256c <cli_spi_speed+0x11c>
    case 8: p=SPI_BAUDRATEPRESCALER_8; break; case 16:p=SPI_BAUDRATEPRESCALER_16; break;
 8002540:	2310      	movs	r3, #16
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e012      	b.n	800256c <cli_spi_speed+0x11c>
 8002546:	2318      	movs	r3, #24
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e00f      	b.n	800256c <cli_spi_speed+0x11c>
    case 32:p=SPI_BAUDRATEPRESCALER_32; break; case 64:p=SPI_BAUDRATEPRESCALER_64; break;
 800254c:	2320      	movs	r3, #32
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e00c      	b.n	800256c <cli_spi_speed+0x11c>
 8002552:	2328      	movs	r3, #40	@ 0x28
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e009      	b.n	800256c <cli_spi_speed+0x11c>
    case 128:p=SPI_BAUDRATEPRESCALER_128; break; case 256:p=SPI_BAUDRATEPRESCALER_256; break;
 8002558:	2330      	movs	r3, #48	@ 0x30
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e006      	b.n	800256c <cli_spi_speed+0x11c>
 800255e:	2338      	movs	r3, #56	@ 0x38
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e003      	b.n	800256c <cli_spi_speed+0x11c>
    default: printf("ERROR: divisor invalido\r\n"); return;
 8002564:	4807      	ldr	r0, [pc, #28]	@ (8002584 <cli_spi_speed+0x134>)
 8002566:	f00c f98d 	bl	800e884 <puts>
 800256a:	e005      	b.n	8002578 <cli_spi_speed+0x128>
  }
  spi_set_prescaler(p); printf("OK\r\n");
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fa73 	bl	8001a58 <spi_set_prescaler>
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <cli_spi_speed+0x138>)
 8002574:	f00c f986 	bl	800e884 <puts>
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08010d38 	.word	0x08010d38
 8002584:	08010d64 	.word	0x08010d64
 8002588:	08010b48 	.word	0x08010b48

0800258c <cli_fpga_cs>:
static void cli_fpga_cs(int argc, char**argv){
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  if (argc<2){ printf("ERROR: FPGA_CS <0|1>\r\n"); return; }
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	dc03      	bgt.n	80025a4 <cli_fpga_cs+0x18>
 800259c:	480c      	ldr	r0, [pc, #48]	@ (80025d0 <cli_fpga_cs+0x44>)
 800259e:	f00c f971 	bl	800e884 <puts>
 80025a2:	e011      	b.n	80025c8 <cli_fpga_cs+0x3c>
  int v=atoi(argv[1]); if (v) fpga_cs_low(); else fpga_cs_high(); printf("OK\r\n");
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	3304      	adds	r3, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00b f8da 	bl	800d764 <atoi>
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <cli_fpga_cs+0x32>
 80025b8:	f7ff fa36 	bl	8001a28 <fpga_cs_low>
 80025bc:	e001      	b.n	80025c2 <cli_fpga_cs+0x36>
 80025be:	f7ff fa3f 	bl	8001a40 <fpga_cs_high>
 80025c2:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <cli_fpga_cs+0x48>)
 80025c4:	f00c f95e 	bl	800e884 <puts>
}
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	08010d80 	.word	0x08010d80
 80025d4:	08010b48 	.word	0x08010b48

080025d8 <cli_fpga_upload>:
static void cli_fpga_upload(int argc, char**argv){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  if (argc<3){ printf("ERROR: FPGA_UPLOAD <bytes> <crc32>\r\n"); return; }
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	dc03      	bgt.n	80025f0 <cli_fpga_upload+0x18>
 80025e8:	481f      	ldr	r0, [pc, #124]	@ (8002668 <cli_fpga_upload+0x90>)
 80025ea:	f00c f94b 	bl	800e884 <puts>
 80025ee:	e037      	b.n	8002660 <cli_fpga_upload+0x88>
  uint32_t n=(uint32_t)strtoul(argv[1],NULL,0), c=(uint32_t)strtoul(argv[2],NULL,0);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3304      	adds	r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00c f80e 	bl	800e61c <strtoul>
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3308      	adds	r3, #8
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f00c f805 	bl	800e61c <strtoul>
 8002612:	60b8      	str	r0, [r7, #8]
  if (!n || n>FPGA_MAX_BYTES){ printf("ERROR: tamanho invalido\r\n"); return; }
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <cli_fpga_upload+0x4a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002620:	d903      	bls.n	800262a <cli_fpga_upload+0x52>
 8002622:	4812      	ldr	r0, [pc, #72]	@ (800266c <cli_fpga_upload+0x94>)
 8002624:	f00c f92e 	bl	800e884 <puts>
 8002628:	e01a      	b.n	8002660 <cli_fpga_upload+0x88>
  __HAL_CRC_DR_RESET(&hcrc);
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <cli_fpga_upload+0x98>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <cli_fpga_upload+0x98>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	609a      	str	r2, [r3, #8]
  fpga_cs_low(); bin_reset_ring();
 800263a:	f7ff f9f5 	bl	8001a28 <fpga_cs_low>
 800263e:	f7ff fa21 	bl	8001a84 <bin_reset_ring>
  g_bin_bytes_total=n; g_bin_bytes_left=n; g_bin_crc_expect=c; g_bin_mode=1;
 8002642:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <cli_fpga_upload+0x9c>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4a0b      	ldr	r2, [pc, #44]	@ (8002678 <cli_fpga_upload+0xa0>)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <cli_fpga_upload+0xa4>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <cli_fpga_upload+0xa8>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
  printf("FPGA_UPLOAD_READY\r\n");
 800265a:	480a      	ldr	r0, [pc, #40]	@ (8002684 <cli_fpga_upload+0xac>)
 800265c:	f00c f912 	bl	800e884 <puts>
}
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08010d98 	.word	0x08010d98
 800266c:	08010dbc 	.word	0x08010dbc
 8002670:	2000031c 	.word	0x2000031c
 8002674:	200006dc 	.word	0x200006dc
 8002678:	200006e0 	.word	0x200006e0
 800267c:	200006e4 	.word	0x200006e4
 8002680:	200006da 	.word	0x200006da
 8002684:	08010dd8 	.word	0x08010dd8

08002688 <cli_fpga_abort>:
static void cli_fpga_abort(int argc, char**argv){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  if (g_bin_mode){ g_bin_mode=0; fpga_cs_high(); } printf("OK\r\n");
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <cli_fpga_abort+0x2c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <cli_fpga_abort+0x1e>
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <cli_fpga_abort+0x2c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	f7ff f9cd 	bl	8001a40 <fpga_cs_high>
 80026a6:	4804      	ldr	r0, [pc, #16]	@ (80026b8 <cli_fpga_abort+0x30>)
 80026a8:	f00c f8ec 	bl	800e884 <puts>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200006da 	.word	0x200006da
 80026b8:	08010b48 	.word	0x08010b48

080026bc <cli_fpga_peek>:
static void cli_fpga_peek(int argc, char**argv){
 80026bc:	b580      	push	{r7, lr}
 80026be:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80026c2:	af02      	add	r7, sp, #8
 80026c4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80026c8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80026cc:	6018      	str	r0, [r3, #0]
 80026ce:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80026d2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80026d6:	6019      	str	r1, [r3, #0]
  if (argc<2){ printf("ERROR: FPGA_PEEK <nbytes>\r\n"); return; }
 80026d8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80026dc:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	dc03      	bgt.n	80026ee <cli_fpga_peek+0x32>
 80026e6:	482e      	ldr	r0, [pc, #184]	@ (80027a0 <cli_fpga_peek+0xe4>)
 80026e8:	f00c f8cc 	bl	800e884 <puts>
 80026ec:	e054      	b.n	8002798 <cli_fpga_peek+0xdc>
  uint32_t n=(uint32_t)strtoul(argv[1],NULL,0); if (!n||n>1024){ printf("ERROR: limite 1024\r\n"); return; }
 80026ee:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80026f2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3304      	adds	r3, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f00b ff8b 	bl	800e61c <strtoul>
 8002706:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
 800270a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <cli_fpga_peek+0x60>
 8002712:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271a:	d903      	bls.n	8002724 <cli_fpga_peek+0x68>
 800271c:	4821      	ldr	r0, [pc, #132]	@ (80027a4 <cli_fpga_peek+0xe8>)
 800271e:	f00c f8b1 	bl	800e884 <puts>
 8002722:	e039      	b.n	8002798 <cli_fpga_peek+0xdc>
  uint8_t tmp[1024]; memset(tmp,0xFF,n);
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 800272c:	21ff      	movs	r1, #255	@ 0xff
 800272e:	4618      	mov	r0, r3
 8002730:	f00c f988 	bl	800ea44 <memset>
  if (HAL_SPI_TransmitReceive(&hspi1,tmp,tmp,n,HAL_MAX_DELAY)!=HAL_OK){ printf("ERROR: SPI TR\r\n"); return; }
 8002734:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002738:	b29b      	uxth	r3, r3
 800273a:	f107 0208 	add.w	r2, r7, #8
 800273e:	f107 0108 	add.w	r1, r7, #8
 8002742:	f04f 30ff 	mov.w	r0, #4294967295
 8002746:	9000      	str	r0, [sp, #0]
 8002748:	4817      	ldr	r0, [pc, #92]	@ (80027a8 <cli_fpga_peek+0xec>)
 800274a:	f005 fa7a 	bl	8007c42 <HAL_SPI_TransmitReceive>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <cli_fpga_peek+0xa0>
 8002754:	4815      	ldr	r0, [pc, #84]	@ (80027ac <cli_fpga_peek+0xf0>)
 8002756:	f00c f895 	bl	800e884 <puts>
 800275a:	e01d      	b.n	8002798 <cli_fpga_peek+0xdc>
  for (uint32_t i=0; i<n; i++) { printf("%02X", tmp[i]); }
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8002762:	e010      	b.n	8002786 <cli_fpga_peek+0xca>
 8002764:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002768:	f5a3 6281 	sub.w	r2, r3, #1032	@ 0x408
 800276c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8002770:	4413      	add	r3, r2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <cli_fpga_peek+0xf4>)
 8002778:	f00c f81c 	bl	800e7b4 <iprintf>
 800277c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8002780:	3301      	adds	r3, #1
 8002782:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8002786:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800278a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800278e:	429a      	cmp	r2, r3
 8002790:	d3e8      	bcc.n	8002764 <cli_fpga_peek+0xa8>
  printf("\r\nOK\r\n");
 8002792:	4808      	ldr	r0, [pc, #32]	@ (80027b4 <cli_fpga_peek+0xf8>)
 8002794:	f00c f876 	bl	800e884 <puts>
}
 8002798:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	08010dec 	.word	0x08010dec
 80027a4:	08010e08 	.word	0x08010e08
 80027a8:	2000038c 	.word	0x2000038c
 80027ac:	08010e1c 	.word	0x08010e1c
 80027b0:	08010e2c 	.word	0x08010e2c
 80027b4:	08010e34 	.word	0x08010e34

080027b8 <cli_noop>:

static void cli_noop(int argc, char**argv){ printf("OK\r\n"); }
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	4803      	ldr	r0, [pc, #12]	@ (80027d0 <cli_noop+0x18>)
 80027c4:	f00c f85e 	bl	800e884 <puts>
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	08010b48 	.word	0x08010b48

080027d4 <CLI_ProcessLine>:

/* Parser e dispatch */
static void CLI_ProcessLine(const char* line){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0b2      	sub	sp, #200	@ 0xc8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  char buf[128]; strncpy(buf,line,sizeof(buf)-1); buf[sizeof(buf)-1]='\0';
 80027dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027e0:	227f      	movs	r2, #127	@ 0x7f
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00c f947 	bl	800ea78 <strncpy>
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
  char *argv[12]; int argc=0; char *tok=strtok(buf," \t\r\n");
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027fa:	492d      	ldr	r1, [pc, #180]	@ (80028b0 <CLI_ProcessLine+0xdc>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00c f94f 	bl	800eaa0 <strtok>
 8002802:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
  while (tok && argc<12){ argv[argc++]=tok; tok=strtok(NULL," \t\r\n"); }
 8002806:	e011      	b.n	800282c <CLI_ProcessLine+0x58>
 8002808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	33c8      	adds	r3, #200	@ 0xc8
 8002816:	443b      	add	r3, r7
 8002818:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800281c:	f843 2cbc 	str.w	r2, [r3, #-188]
 8002820:	4923      	ldr	r1, [pc, #140]	@ (80028b0 <CLI_ProcessLine+0xdc>)
 8002822:	2000      	movs	r0, #0
 8002824:	f00c f93c 	bl	800eaa0 <strtok>
 8002828:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800282c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <CLI_ProcessLine+0x68>
 8002834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002838:	2b0b      	cmp	r3, #11
 800283a:	dde5      	ble.n	8002808 <CLI_ProcessLine+0x34>
  if (argc==0) return;
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d031      	beq.n	80028a8 <CLI_ProcessLine+0xd4>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800284a:	e025      	b.n	8002898 <CLI_ProcessLine+0xc4>
    if (strcmp(argv[0],cmds[i].name)==0){ cmds[i].fn(argc,argv); return; }
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	4919      	ldr	r1, [pc, #100]	@ (80028b4 <CLI_ProcessLine+0xe0>)
 8002850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f7fd fcb5 	bl	80001d0 <strcmp>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d110      	bne.n	800288e <CLI_ProcessLine+0xba>
 800286c:	4911      	ldr	r1, [pc, #68]	@ (80028b4 <CLI_ProcessLine+0xe0>)
 800286e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f107 020c 	add.w	r2, r7, #12
 8002884:	4611      	mov	r1, r2
 8002886:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800288a:	4798      	blx	r3
 800288c:	e00d      	b.n	80028aa <CLI_ProcessLine+0xd6>
  for (unsigned i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){
 800288e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002892:	3301      	adds	r3, #1
 8002894:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800289c:	2b13      	cmp	r3, #19
 800289e:	d9d5      	bls.n	800284c <CLI_ProcessLine+0x78>
  }
  printf("ERROR: comando desconhecido. Use HELP\r\n");
 80028a0:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <CLI_ProcessLine+0xe4>)
 80028a2:	f00b ffef 	bl	800e884 <puts>
 80028a6:	e000      	b.n	80028aa <CLI_ProcessLine+0xd6>
  if (argc==0) return;
 80028a8:	bf00      	nop
}
 80028aa:	37c8      	adds	r7, #200	@ 0xc8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08010e3c 	.word	0x08010e3c
 80028b4:	08010f20 	.word	0x08010f20
 80028b8:	08010e44 	.word	0x08010e44

080028bc <SystemClock_Config>:
static void MX_CRC_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);   // não usado sem ADC
// ADCs propositalmente omitidos

void SystemClock_Config(void){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b094      	sub	sp, #80	@ 0x50
 80028c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_Osc={0};
 80028c2:	f107 0320 	add.w	r3, r7, #32
 80028c6:	2230      	movs	r2, #48	@ 0x30
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f00c f8ba 	bl	800ea44 <memset>
  RCC_ClkInitTypeDef RCC_Clk={0};
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <SystemClock_Config+0xcc>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <SystemClock_Config+0xcc>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <SystemClock_Config+0xcc>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4b22      	ldr	r3, [pc, #136]	@ (800298c <SystemClock_Config+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a21      	ldr	r2, [pc, #132]	@ (800298c <SystemClock_Config+0xd0>)
 8002906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <SystemClock_Config+0xd0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]

  RCC_Osc.OscillatorType=RCC_OSCILLATORTYPE_HSE;
 8002918:	2301      	movs	r3, #1
 800291a:	623b      	str	r3, [r7, #32]
  RCC_Osc.HSEState=RCC_HSE_ON;
 800291c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_Osc.PLL.PLLState=RCC_PLL_ON;
 8002922:	2302      	movs	r3, #2
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_Osc.PLL.PLLSource=RCC_PLLSOURCE_HSE;
 8002926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_Osc.PLL.PLLM=12; RCC_Osc.PLL.PLLN=336; RCC_Osc.PLL.PLLP=RCC_PLLP_DIV2; RCC_Osc.PLL.PLLQ=7;
 800292c:	230c      	movs	r3, #12
 800292e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002930:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002934:	647b      	str	r3, [r7, #68]	@ 0x44
 8002936:	2302      	movs	r3, #2
 8002938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800293a:	2307      	movs	r3, #7
 800293c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_Osc)!=HAL_OK) Error_Handler();
 800293e:	f107 0320 	add.w	r3, r7, #32
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fb58 	bl	8006ff8 <HAL_RCC_OscConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <SystemClock_Config+0x96>
 800294e:	f7fe fc5d 	bl	800120c <Error_Handler>

  RCC_Clk.ClockType=RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8002952:	230f      	movs	r3, #15
 8002954:	60fb      	str	r3, [r7, #12]
  RCC_Clk.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
 8002956:	2302      	movs	r3, #2
 8002958:	613b      	str	r3, [r7, #16]
  RCC_Clk.AHBCLKDivider=RCC_SYSCLK_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  RCC_Clk.APB1CLKDivider=RCC_HCLK_DIV4;   // TIM2 clock = 2*PCLK1
 800295e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002962:	61bb      	str	r3, [r7, #24]
  RCC_Clk.APB2CLKDivider=RCC_HCLK_DIV2;
 8002964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002968:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_Clk, FLASH_LATENCY_5)!=HAL_OK) Error_Handler();
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2105      	movs	r1, #5
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fdb9 	bl	80074e8 <HAL_RCC_ClockConfig>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <SystemClock_Config+0xc4>
 800297c:	f7fe fc46 	bl	800120c <Error_Handler>
}
 8002980:	bf00      	nop
 8002982:	3750      	adds	r7, #80	@ 0x50
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000

08002990 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GI={0};
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a34      	ldr	r2, [pc, #208]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b32      	ldr	r3, [pc, #200]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a26      	ldr	r2, [pc, #152]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <MX_GPIO_Init+0xf0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]

  /* Saídas em nível baixo ao iniciar */
  HAL_GPIO_WritePin(GPIOB, FPGA_CS_Pin|LED_BLUE_Pin|MMA_AVDD_Pin, GPIO_PIN_RESET);  // PB5=MMA_AVDD
 80029fa:	2200      	movs	r2, #0
 80029fc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8002a00:	4820      	ldr	r0, [pc, #128]	@ (8002a84 <MX_GPIO_Init+0xf4>)
 8002a02:	f001 fefd 	bl	8004800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002a0c:	481e      	ldr	r0, [pc, #120]	@ (8002a88 <MX_GPIO_Init+0xf8>)
 8002a0e:	f001 fef7 	bl	8004800 <HAL_GPIO_WritePin>

  /* PB: FPGA_CS, LED_BLUE, MMA_AVDD */
  GI.Pin = FPGA_CS_Pin|LED_BLUE_Pin|MMA_AVDD_Pin;
 8002a12:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8002a16:	60fb      	str	r3, [r7, #12]
  GI.Mode=GPIO_MODE_OUTPUT_PP; GI.Pull=GPIO_NOPULL; GI.Speed=GPIO_SPEED_FREQ_LOW;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB,&GI);
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4816      	ldr	r0, [pc, #88]	@ (8002a84 <MX_GPIO_Init+0xf4>)
 8002a2c:	f001 fd4c 	bl	80044c8 <HAL_GPIO_Init>

  /* PA: LEDs */
  GI.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin;
 8002a30:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a34:	60fb      	str	r3, [r7, #12]
  GI.Mode=GPIO_MODE_OUTPUT_PP; GI.Pull=GPIO_NOPULL; GI.Speed=GPIO_SPEED_FREQ_LOW;
 8002a36:	2301      	movs	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA,&GI);
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4619      	mov	r1, r3
 8002a48:	480f      	ldr	r0, [pc, #60]	@ (8002a88 <MX_GPIO_Init+0xf8>)
 8002a4a:	f001 fd3d 	bl	80044c8 <HAL_GPIO_Init>

  /* Botão usuário (EXTI3) */
  GI.Pin = USER_Btn_Pin; GI.Mode=GPIO_MODE_IT_RISING; GI.Pull=GPIO_NOPULL;
 8002a4e:	2308      	movs	r3, #8
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_Btn_GPIO_Port,&GI);
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	4619      	mov	r1, r3
 8002a62:	4808      	ldr	r0, [pc, #32]	@ (8002a84 <MX_GPIO_Init+0xf4>)
 8002a64:	f001 fd30 	bl	80044c8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2009      	movs	r0, #9
 8002a6e:	f000 fe9e 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a72:	2009      	movs	r0, #9
 8002a74:	f000 feb7 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020000 	.word	0x40020000

08002a8c <MX_DMA_Init>:

static void MX_DMA_Init(void){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();   // DAC (DMA1_Stream5)
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();   // reservado p/ ADC1 (inativo)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_DMA_Init+0x58>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2107      	movs	r1, #7
 8002ace:	2010      	movs	r0, #16
 8002ad0:	f000 fe6d 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ad4:	2010      	movs	r0, #16
 8002ad6:	f000 fe86 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <MX_DAC_Init>:

static void MX_DAC_Init(void){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef s={0};
 8002aee:	463b      	mov	r3, r7
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
  hdac.Instance = DAC;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_DAC_Init+0x4c>)
 8002af8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b38 <MX_DAC_Init+0x50>)
 8002afa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac)!=HAL_OK) Error_Handler();
 8002afc:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_DAC_Init+0x4c>)
 8002afe:	f000 fed3 	bl	80038a8 <HAL_DAC_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_DAC_Init+0x24>
 8002b08:	f7fe fb80 	bl	800120c <Error_Handler>
  s.DAC_Trigger = DAC_TRIGGER_T2_TRGO;          // TIM2 -> TRGO UPDATE
 8002b0c:	2324      	movs	r3, #36	@ 0x24
 8002b0e:	603b      	str	r3, [r7, #0]
  s.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac,&s,DAC_CHANNEL_1)!=HAL_OK) Error_Handler();
 8002b14:	463b      	mov	r3, r7
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	@ (8002b34 <MX_DAC_Init+0x4c>)
 8002b1c:	f001 f811 	bl	8003b42 <HAL_DAC_ConfigChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_DAC_Init+0x42>
 8002b26:	f7fe fb71 	bl	800120c <Error_Handler>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000324 	.word	0x20000324
 8002b38:	40007400 	.word	0x40007400

08002b3c <MX_I2C1_Init>:

static void MX_I2C1_Init(void){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  hi2c1.Instance=I2C1;
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b42:	4a13      	ldr	r2, [pc, #76]	@ (8002b90 <MX_I2C1_Init+0x54>)
 8002b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed=100000;
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b48:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <MX_I2C1_Init+0x58>)
 8002b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle=I2C_DUTYCYCLE_2;
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1=0;
 8002b52:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode=I2C_ADDRESSINGMODE_7BIT;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode=I2C_DUALADDRESS_DISABLE;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2=0;
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode=I2C_GENERALCALL_DISABLE;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode=I2C_NOSTRETCH_DISABLE;
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1)!=HAL_OK) Error_Handler();
 8002b78:	4804      	ldr	r0, [pc, #16]	@ (8002b8c <MX_I2C1_Init+0x50>)
 8002b7a:	f001 fe99 	bl	80048b0 <HAL_I2C_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_I2C1_Init+0x4c>
 8002b84:	f7fe fb42 	bl	800120c <Error_Handler>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000338 	.word	0x20000338
 8002b90:	40005400 	.word	0x40005400
 8002b94:	000186a0 	.word	0x000186a0

08002b98 <MX_SPI1_Init>:

static void MX_SPI1_Init(void){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  hspi1.Instance=SPI1;
 8002b9c:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002b9e:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <MX_SPI1_Init+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode=SPI_MODE_MASTER;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002ba4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction=SPI_DIRECTION_2LINES;
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize=SPI_DATASIZE_8BIT;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity=SPI_POLARITY_LOW;
 8002bb6:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase=SPI_PHASE_1EDGE;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS=SPI_NSS_SOFT;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_8; // ~10.5 MHz @84MHz/8
 8002bca:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bcc:	2210      	movs	r2, #16
 8002bce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit=SPI_FIRSTBIT_MSB;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode=SPI_TIMODE_DISABLE;
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial=10;
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002be4:	220a      	movs	r2, #10
 8002be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1)!=HAL_OK) Error_Handler();
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <MX_SPI1_Init+0x64>)
 8002bea:	f004 fe5d 	bl	80078a8 <HAL_SPI_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_SPI1_Init+0x60>
 8002bf4:	f7fe fb0a 	bl	800120c <Error_Handler>
  /* MOSI já está em PA7 no MSP */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	2000038c 	.word	0x2000038c
 8002c00:	40013000 	.word	0x40013000

08002c04 <MX_CRC_Init>:

static void MX_CRC_Init(void){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  hcrc.Instance=CRC; if (HAL_CRC_Init(&hcrc)!=HAL_OK) Error_Handler();
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <MX_CRC_Init+0x20>)
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <MX_CRC_Init+0x24>)
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <MX_CRC_Init+0x20>)
 8002c10:	f000 fe03 	bl	800381a <HAL_CRC_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_CRC_Init+0x1a>
 8002c1a:	f7fe faf7 	bl	800120c <Error_Handler>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000031c 	.word	0x2000031c
 8002c28:	40023000 	.word	0x40023000

08002c2c <MX_TIM2_Init>:

static void MX_TIM2_Init(void){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClk={0};
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sM={0};
 8002c40:	463b      	mov	r3, r7
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
  htim2.Instance=TIM2;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler=0;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode=TIM_COUNTERMODE_UP;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period=4294967295;          // recalculado dinamicamente no dac_start()
 8002c5c:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
 8002c64:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload=TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2)!=HAL_OK) Error_Handler();
 8002c70:	4813      	ldr	r0, [pc, #76]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c72:	f005 fa6b 	bl	800814c <HAL_TIM_Base_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM2_Init+0x54>
 8002c7c:	f7fe fac6 	bl	800120c <Error_Handler>
  sClk.ClockSource=TIM_CLOCKSOURCE_INTERNAL;
 8002c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2,&sClk)!=HAL_OK) Error_Handler();
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002c8e:	f005 fc2c 	bl	80084ea <HAL_TIM_ConfigClockSource>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM2_Init+0x70>
 8002c98:	f7fe fab8 	bl	800120c <Error_Handler>
  sM.MasterOutputTrigger=TIM_TRGO_UPDATE;    // TRGO UPDATE -> DAC
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	603b      	str	r3, [r7, #0]
  sM.MasterSlaveMode=TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2,&sM)!=HAL_OK) Error_Handler();
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <MX_TIM2_Init+0x94>)
 8002caa:	f005 fe57 	bl	800895c <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM2_Init+0x8c>
 8002cb4:	f7fe faaa 	bl	800120c <Error_Handler>
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000444 	.word	0x20000444

08002cc4 <MX_TIM3_Init>:

static void MX_TIM3_Init(void){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
  // Mantido para compatibilidade, mas não usado sem ADC1.
  TIM_MasterConfigTypeDef sM={0};
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <MX_TIM3_Init+0x88>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d4c <MX_TIM3_Init+0x88>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <MX_TIM3_Init+0x88>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
  htim3.Instance=TIM3;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002cf2:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <MX_TIM3_Init+0x90>)
 8002cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler=8400-1;          // 84MHz/8400 = 10kHz
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002cf8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode=TIM_COUNTERMODE_UP;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period=100-1;              // 10kHz/100 = 100 Hz
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d06:	2263      	movs	r2, #99	@ 0x63
 8002d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload=TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3)!=HAL_OK) Error_Handler();
 8002d16:	480e      	ldr	r0, [pc, #56]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d18:	f005 fa18 	bl	800814c <HAL_TIM_Base_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM3_Init+0x62>
 8002d22:	f7fe fa73 	bl	800120c <Error_Handler>
  sM.MasterOutputTrigger=TIM_TRGO_UPDATE;
 8002d26:	2320      	movs	r3, #32
 8002d28:	60bb      	str	r3, [r7, #8]
  sM.MasterSlaveMode=TIM_MASTERSLAVEMODE_DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3,&sM)!=HAL_OK) Error_Handler();
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	4806      	ldr	r0, [pc, #24]	@ (8002d50 <MX_TIM3_Init+0x8c>)
 8002d36:	f005 fe11 	bl	800895c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM3_Init+0x80>
 8002d40:	f7fe fa64 	bl	800120c <Error_Handler>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	2000048c 	.word	0x2000048c
 8002d54:	40000400 	.word	0x40000400

08002d58 <main>:

/* ============================ MAIN ============================ */
int main(void){
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b0a8      	sub	sp, #160	@ 0xa0
 8002d5c:	af00      	add	r7, sp, #0
  HAL_Init();
 8002d5e:	f000 fbb5 	bl	80034cc <HAL_Init>
  SystemClock_Config();
 8002d62:	f7ff fdab 	bl	80028bc <SystemClock_Config>

  MX_GPIO_Init();
 8002d66:	f7ff fe13 	bl	8002990 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d6a:	f7ff fe8f 	bl	8002a8c <MX_DMA_Init>
  MX_DAC_Init();
 8002d6e:	f7ff febb 	bl	8002ae8 <MX_DAC_Init>
  MX_I2C1_Init();
 8002d72:	f7ff fee3 	bl	8002b3c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002d76:	f7ff ff0f 	bl	8002b98 <MX_SPI1_Init>
  MX_CRC_Init();
 8002d7a:	f7ff ff43 	bl	8002c04 <MX_CRC_Init>
  MX_TIM2_Init();
 8002d7e:	f7ff ff55 	bl	8002c2c <MX_TIM2_Init>
  MX_TIM3_Init();    // não usado sem ADC
 8002d82:	f7ff ff9f 	bl	8002cc4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8002d86:	f009 f9b5 	bl	800c0f4 <MX_USB_DEVICE_Init>

  printf("\r\nPyboard v1.1 — AWG/ACCEL/FPGA CLI pronto. fmax(sine,N=256)=%.1f Hz\r\n",
         fmax_from_fs(DAC_FS_MAX_HZ, LUT_N));
 8002d8a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8002f0c <main+0x1b4>
 8002d8e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	f7fe fabd 	bl	8001314 <fmax_from_fs>
 8002d9a:	ee10 3a10 	vmov	r3, s0
  printf("\r\nPyboard v1.1 — AWG/ACCEL/FPGA CLI pronto. fmax(sine,N=256)=%.1f Hz\r\n",
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbda 	bl	8000558 <__aeabi_f2d>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4859      	ldr	r0, [pc, #356]	@ (8002f10 <main+0x1b8>)
 8002daa:	f00b fd03 	bl	800e7b4 <iprintf>
  printf("Digite HELP\r\n");
 8002dae:	4859      	ldr	r0, [pc, #356]	@ (8002f14 <main+0x1bc>)
 8002db0:	f00b fd68 	bl	800e884 <puts>
  put_prompt();
 8002db4:	f7fe fe0c 	bl	80019d0 <put_prompt>

  uint32_t t_acc = HAL_GetTick();
 8002db8:	f000 fbee 	bl	8003598 <HAL_GetTick>
 8002dbc:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

  for(;;){
    /* 1) Comandos do USB CDC */
    if (cdc_cmd_ready){
 8002dc0:	4b55      	ldr	r3, [pc, #340]	@ (8002f18 <main+0x1c0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d033      	beq.n	8002e32 <main+0xda>
      uint8_t local[128];
      uint32_t n=(cdc_cmd_length>sizeof(local)-1)?(sizeof(local)-1):cdc_cmd_length;
 8002dca:	4b54      	ldr	r3, [pc, #336]	@ (8002f1c <main+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dd0:	d802      	bhi.n	8002dd8 <main+0x80>
 8002dd2:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <main+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e000      	b.n	8002dda <main+0x82>
 8002dd8:	237f      	movs	r3, #127	@ 0x7f
 8002dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      for (uint32_t i=0;i<n;i++) local[i]=cdc_cmd_buffer[i];
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002de4:	e010      	b.n	8002e08 <main+0xb0>
 8002de6:	4a4e      	ldr	r2, [pc, #312]	@ (8002f20 <main+0x1c8>)
 8002de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2d9      	uxtb	r1, r3
 8002df2:	1d3a      	adds	r2, r7, #4
 8002df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002df8:	4413      	add	r3, r2
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e02:	3301      	adds	r3, #1
 8002e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e08:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3e8      	bcc.n	8002de6 <main+0x8e>
      local[n]=0;
 8002e14:	1d3a      	adds	r2, r7, #4
 8002e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e1a:	4413      	add	r3, r2
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
      cdc_cmd_ready=0;
 8002e20:	4b3d      	ldr	r3, [pc, #244]	@ (8002f18 <main+0x1c0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]

      CLI_ProcessLine((const char*)local);
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fcd3 	bl	80027d4 <CLI_ProcessLine>
      put_prompt();
 8002e2e:	f7fe fdcf 	bl	80019d0 <put_prompt>
    }

    /* 2) Heartbeat */
    hb_tick();
 8002e32:	f7fe fdd7 	bl	80019e4 <hb_tick>

    /* 3) Streaming do acelerômetro (~10 Hz) */
    if (g_app_state==STATE_STREAMING_ACCEL && HAL_GetTick()-t_acc>100){
 8002e36:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <main+0x1cc>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d15c      	bne.n	8002efa <main+0x1a2>
 8002e40:	f000 fbaa 	bl	8003598 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	@ 0x64
 8002e4e:	d954      	bls.n	8002efa <main+0x1a2>
      t_acc=HAL_GetTick();
 8002e50:	f000 fba2 	bl	8003598 <HAL_GetTick>
 8002e54:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      int8_t x,y,z;
      if (MMA7660_ReadXYZ(&hi2c1,&x,&y,&z)){
 8002e58:	f107 0385 	add.w	r3, r7, #133	@ 0x85
 8002e5c:	f107 0286 	add.w	r2, r7, #134	@ 0x86
 8002e60:	f107 0187 	add.w	r1, r7, #135	@ 0x87
 8002e64:	4830      	ldr	r0, [pc, #192]	@ (8002f28 <main+0x1d0>)
 8002e66:	f7fe f957 	bl	8001118 <MMA7660_ReadXYZ>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d044      	beq.n	8002efa <main+0x1a2>
        float fx=x,fy=y,fz=z;
 8002e70:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8002e80:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8002e90:	f997 3085 	ldrsb.w	r3, [r7, #133]	@ 0x85
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e9c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        if (g_kalman_on){ fx=kalman_step(&kx,fx); fy=kalman_step(&ky,fy); fz=kalman_step(&kz,fz); }
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <main+0x1d4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <main+0x17a>
 8002ea8:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8002eac:	4820      	ldr	r0, [pc, #128]	@ (8002f30 <main+0x1d8>)
 8002eae:	f7fe f9e5 	bl	800127c <kalman_step>
 8002eb2:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
 8002eb6:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8002eba:	481e      	ldr	r0, [pc, #120]	@ (8002f34 <main+0x1dc>)
 8002ebc:	f7fe f9de 	bl	800127c <kalman_step>
 8002ec0:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90
 8002ec4:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 8002ec8:	481b      	ldr	r0, [pc, #108]	@ (8002f38 <main+0x1e0>)
 8002eca:	f7fe f9d7 	bl	800127c <kalman_step>
 8002ece:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
        printf("A:%d,%d,%d\r\n",(int)lrintf(fx),(int)lrintf(fy),(int)lrintf(fz));
 8002ed2:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8002ed6:	f009 ff11 	bl	800ccfc <lrintf>
 8002eda:	4604      	mov	r4, r0
 8002edc:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8002ee0:	f009 ff0c 	bl	800ccfc <lrintf>
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 8002eea:	f009 ff07 	bl	800ccfc <lrintf>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4811      	ldr	r0, [pc, #68]	@ (8002f3c <main+0x1e4>)
 8002ef6:	f00b fc5d 	bl	800e7b4 <iprintf>
      }
    }

    /* 4) Upload binário p/ FPGA */
    if (g_bin_mode) process_fpga_upload();
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <main+0x1e8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f43f af5d 	beq.w	8002dc0 <main+0x68>
 8002f06:	f7fe fe77 	bl	8001bf8 <process_fpga_upload>
    if (cdc_cmd_ready){
 8002f0a:	e759      	b.n	8002dc0 <main+0x68>
 8002f0c:	49742400 	.word	0x49742400
 8002f10:	08010e6c 	.word	0x08010e6c
 8002f14:	08010eb8 	.word	0x08010eb8
 8002f18:	20001664 	.word	0x20001664
 8002f1c:	20001660 	.word	0x20001660
 8002f20:	200015e0 	.word	0x200015e0
 8002f24:	200004d4 	.word	0x200004d4
 8002f28:	20000338 	.word	0x20000338
 8002f2c:	20000034 	.word	0x20000034
 8002f30:	20000004 	.word	0x20000004
 8002f34:	20000014 	.word	0x20000014
 8002f38:	20000024 	.word	0x20000024
 8002f3c:	08010ec8 	.word	0x08010ec8
 8002f40:	200006da 	.word	0x200006da

08002f44 <HAL_MspInit>:
extern DAC_HandleTypeDef  hdac;
extern DMA_HandleTypeDef  hdma_dac1;

/* ========== Init global ========== */
void HAL_MspInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	4a0f      	ldr	r2, [pc, #60]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	4a08      	ldr	r2, [pc, #32]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_MspInit+0x4c>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_CRC_MspInit>:
  else if(hadc->Instance==ADC3){ __HAL_RCC_ADC3_CLK_DISABLE(); HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3); }
}

/* ========== CRC ========== */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC) { __HAL_RCC_CRC_CLK_ENABLE(); }
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd0 <HAL_CRC_MspInit+0x3c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_CRC_MspInit+0x2e>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_CRC_MspInit+0x40>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <HAL_CRC_MspInit+0x40>)
 8002fb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <HAL_CRC_MspInit+0x40>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023000 	.word	0x40023000
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_DAC_MspInit>:
}

/* ========== DAC + DMA ==========
   DAC1_CH1 usa DMA1 Stream5 Channel7 no F405  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <HAL_DAC_MspInit+0x10c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d16f      	bne.n	80030da <HAL_DAC_MspInit+0x102>
  {
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a39      	ldr	r2, [pc, #228]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a32      	ldr	r2, [pc, #200]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 800303c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <HAL_DAC_MspInit+0x110>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]

    /* PA4 -> DAC_OUT1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800304e:	2310      	movs	r3, #16
 8003050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003052:	2303      	movs	r3, #3
 8003054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4822      	ldr	r0, [pc, #136]	@ (80030ec <HAL_DAC_MspInit+0x114>)
 8003062:	f001 fa31 	bl	80044c8 <HAL_GPIO_Init>

    /* DMA1 Stream5 Channel7 -> DAC_CH1, mem->periph, circular */
    hdma_dac1.Instance = DMA1_Stream5;
 8003066:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 8003068:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_DAC_MspInit+0x11c>)
 800306a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800306c:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 800306e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003072:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 8003076:	2240      	movs	r2, #64	@ 0x40
 8003078:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 8003082:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003086:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 800308a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800308e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003090:	4b17      	ldr	r3, [pc, #92]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 8003092:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003096:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 800309a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800309e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 80030a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030a6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK) { Error_Handler(); }
 80030ae:	4810      	ldr	r0, [pc, #64]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 80030b0:	f000 fe2a 	bl	8003d08 <HAL_DMA_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_DAC_MspInit+0xe6>
 80030ba:	f7fe f8a7 	bl	800120c <Error_Handler>

    __HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <HAL_DAC_MspInit+0x118>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* NVIC do DMA (se ainda não tiver) */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2107      	movs	r1, #7
 80030ce:	2010      	movs	r0, #16
 80030d0:	f000 fb6d 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80030d4:	2010      	movs	r0, #16
 80030d6:	f000 fb86 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  }
}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	@ 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40007400 	.word	0x40007400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	200003e4 	.word	0x200003e4
 80030f4:	40026088 	.word	0x40026088

080030f8 <HAL_I2C_MspInit>:
  }
}

/* ========== I2C1 ========== */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <HAL_I2C_MspInit+0x84>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d133      	bne.n	8003172 <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a1b      	ldr	r2, [pc, #108]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    GPIO_InitTypeDef GI = {0};
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	611a      	str	r2, [r3, #16]
    GI.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003136:	23c0      	movs	r3, #192	@ 0xc0
 8003138:	617b      	str	r3, [r7, #20]
    GI.Mode = GPIO_MODE_AF_OD;
 800313a:	2312      	movs	r3, #18
 800313c:	61bb      	str	r3, [r7, #24]
    GI.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GI.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	623b      	str	r3, [r7, #32]
    GI.Alternate = GPIO_AF4_I2C1;
 8003146:	2304      	movs	r3, #4
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GI);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	480c      	ldr	r0, [pc, #48]	@ (8003184 <HAL_I2C_MspInit+0x8c>)
 8003152:	f001 f9b9 	bl	80044c8 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	4a08      	ldr	r2, [pc, #32]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 8003160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003164:	6413      	str	r3, [r2, #64]	@ 0x40
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_I2C_MspInit+0x88>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
  }
}
 8003172:	bf00      	nop
 8003174:	3728      	adds	r7, #40	@ 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40005400 	.word	0x40005400
 8003180:	40023800 	.word	0x40023800
 8003184:	40020400 	.word	0x40020400

08003188 <HAL_SPI_MspInit>:
}

/* ========== SPI1 ==========
   TROCA: MOSI agora é **PA7** (não mais PB5)  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <HAL_SPI_MspInit+0x84>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d133      	bne.n	8003202 <HAL_SPI_MspInit+0x7a>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_SPI_MspInit+0x88>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitTypeDef GI = {0};
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
    /* PA5=SCK, PA6=MISO, PA7=MOSI */
    GI.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80031e2:	23e0      	movs	r3, #224	@ 0xe0
 80031e4:	617b      	str	r3, [r7, #20]
    GI.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
    GI.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
    GI.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	623b      	str	r3, [r7, #32]
    GI.Alternate = GPIO_AF5_SPI1;
 80031f2:	2305      	movs	r3, #5
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GI);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	4805      	ldr	r0, [pc, #20]	@ (8003214 <HAL_SPI_MspInit+0x8c>)
 80031fe:	f001 f963 	bl	80044c8 <HAL_GPIO_Init>
  }
}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	@ 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40013000 	.word	0x40013000
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000

08003218 <HAL_TIM_Base_MspInit>:
  }
}

/* ========== TIM2 (gerador de trigger do DAC) ========== */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d10d      	bne.n	8003246 <HAL_TIM_Base_MspInit+0x2e>
  {
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_TIM_Base_MspInit+0x3c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	@ (8003254 <HAL_TIM_Base_MspInit+0x3c>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6413      	str	r3, [r2, #64]	@ 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_TIM_Base_MspInit+0x3c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    /* Não precisamos habilitar IRQ do TIM2 para o DAC funcionar em TRGO */
  }
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <DMA1_Stream5_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void DMA1_Stream5_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_dac1);
 800325c:	4802      	ldr	r0, [pc, #8]	@ (8003268 <DMA1_Stream5_IRQHandler+0x10>)
 800325e:	f000 fec9 	bl	8003ff4 <HAL_DMA_IRQHandler>
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200003e4 	.word	0x200003e4

0800326c <NMI_Handler>:

void NMI_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) { }
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <NMI_Handler+0x4>

08003274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <HardFault_Handler+0x4>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <MemManage_Handler+0x4>

08003284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <BusFault_Handler+0x4>

0800328c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <UsageFault_Handler+0x4>

08003294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c2:	f000 f955 	bl	8003570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}

080032ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80032ce:	2008      	movs	r0, #8
 80032d0:	f001 faca 	bl	8004868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <TIM2_IRQHandler+0x10>)
 80032de:	f005 f814 	bl	800830a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000444 	.word	0x20000444

080032ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <OTG_FS_IRQHandler+0x10>)
 80032f2:	f002 fd73 	bl	8005ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200028f0 	.word	0x200028f0

08003300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return 1;
 8003304:	2301      	movs	r3, #1
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_kill>:

int _kill(int pid, int sig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800331a:	f00b fc63 	bl	800ebe4 <__errno>
 800331e:	4603      	mov	r3, r0
 8003320:	2216      	movs	r2, #22
 8003322:	601a      	str	r2, [r3, #0]
  return -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_exit>:

void _exit (int status)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003338:	f04f 31ff 	mov.w	r1, #4294967295
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ffe7 	bl	8003310 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003342:	bf00      	nop
 8003344:	e7fd      	b.n	8003342 <_exit+0x12>

08003346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	e00a      	b.n	800336e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003358:	f3af 8000 	nop.w
 800335c:	4601      	mov	r1, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	60ba      	str	r2, [r7, #8]
 8003364:	b2ca      	uxtb	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	dbf0      	blt.n	8003358 <_read+0x12>
  }

  return len;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a8:	605a      	str	r2, [r3, #4]
  return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_isatty>:

int _isatty(int file)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f0:	4a14      	ldr	r2, [pc, #80]	@ (8003444 <_sbrk+0x5c>)
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <_sbrk+0x60>)
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <_sbrk+0x64>)
 8003406:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <_sbrk+0x68>)
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003418:	f00b fbe4 	bl	800ebe4 <__errno>
 800341c:	4603      	mov	r3, r0
 800341e:	220c      	movs	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	e009      	b.n	800343c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003428:	4b08      	ldr	r3, [pc, #32]	@ (800344c <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <_sbrk+0x64>)
 8003438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20020000 	.word	0x20020000
 8003448:	00000400 	.word	0x00000400
 800344c:	200012f8 	.word	0x200012f8
 8003450:	20003140 	.word	0x20003140

08003454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <SystemInit+0x20>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <SystemInit+0x20>)
 8003460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800347c:	f7ff ffea 	bl	8003454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003480:	480c      	ldr	r0, [pc, #48]	@ (80034b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003482:	490d      	ldr	r1, [pc, #52]	@ (80034b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003484:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003498:	4c0a      	ldr	r4, [pc, #40]	@ (80034c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80034a6:	f00b fba3 	bl	800ebf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034aa:	f7ff fc55 	bl	8002d58 <main>
  bx  lr    
 80034ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b8:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 80034bc:	0801182c 	.word	0x0801182c
  ldr r2, =_sbss
 80034c0:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80034c4:	20003140 	.word	0x20003140

080034c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <ADC_IRQHandler>
	...

080034cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d0:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <HAL_Init+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	@ (800350c <HAL_Init+0x40>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_Init+0x40>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <HAL_Init+0x40>)
 80034e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <HAL_Init+0x40>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a07      	ldr	r2, [pc, #28]	@ (800350c <HAL_Init+0x40>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f4:	2003      	movs	r0, #3
 80034f6:	f000 f94f 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fa:	200f      	movs	r0, #15
 80034fc:	f000 f808 	bl	8003510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003500:	f7ff fd20 	bl	8002f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023c00 	.word	0x40023c00

08003510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_InitTick+0x54>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_InitTick+0x58>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003526:	fbb3 f3f1 	udiv	r3, r3, r1
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f967 	bl	8003802 <HAL_SYSTICK_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00e      	b.n	800355c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d80a      	bhi.n	800355a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003544:	2200      	movs	r2, #0
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f000 f92f 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003550:	4a06      	ldr	r2, [pc, #24]	@ (800356c <HAL_InitTick+0x5c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000003c 	.word	0x2000003c
 8003568:	20000044 	.word	0x20000044
 800356c:	20000040 	.word	0x20000040

08003570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_IncTick+0x20>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_IncTick+0x24>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <HAL_IncTick+0x24>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000044 	.word	0x20000044
 8003594:	200012fc 	.word	0x200012fc

08003598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b03      	ldr	r3, [pc, #12]	@ (80035ac <HAL_GetTick+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200012fc 	.word	0x200012fc

080035b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7ff ffee 	bl	8003598 <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d005      	beq.n	80035d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ca:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_Delay+0x44>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035d6:	bf00      	nop
 80035d8:	f7ff ffde 	bl	8003598 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d8f7      	bhi.n	80035d8 <HAL_Delay+0x28>
  {
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000044 	.word	0x20000044

080035f8 <__NVIC_SetPriorityGrouping>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	@ (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_GetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	@ (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	@ (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	@ (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	@ 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	@ 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff3e 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff8e 	bl	80036ec <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5d 	bl	8003698 <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff31 	bl	800365c <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00e      	b.n	800384a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	795b      	ldrb	r3, [r3, #5]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff fba9 	bl	8002f94 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003852:	b480      	push	{r7}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e00a      	b.n	8003884 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	441a      	add	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3f0      	bcc.n	800386e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800389a:	693b      	ldr	r3, [r7, #16]
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e014      	b.n	80038e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	791b      	ldrb	r3, [r3, #4]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fb84 	bl	8002fd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0a2      	b.n	8003a4a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	795b      	ldrb	r3, [r3, #5]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_DAC_Start_DMA+0x24>
 800390c:	2302      	movs	r3, #2
 800390e:	e09c      	b.n	8003a4a <HAL_DAC_Start_DMA+0x15e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2202      	movs	r2, #2
 800391a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d129      	bne.n	8003976 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4a4b      	ldr	r2, [pc, #300]	@ (8003a54 <HAL_DAC_Start_DMA+0x168>)
 8003928:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a58 <HAL_DAC_Start_DMA+0x16c>)
 8003930:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4a49      	ldr	r2, [pc, #292]	@ (8003a5c <HAL_DAC_Start_DMA+0x170>)
 8003938:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003948:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_DAC_Start_DMA+0x6c>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d005      	beq.n	8003962 <HAL_DAC_Start_DMA+0x76>
 8003956:	e009      	b.n	800396c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3308      	adds	r3, #8
 800395e:	613b      	str	r3, [r7, #16]
        break;
 8003960:	e033      	b.n	80039ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	613b      	str	r3, [r7, #16]
        break;
 800396a:	e02e      	b.n	80039ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3310      	adds	r3, #16
 8003972:	613b      	str	r3, [r7, #16]
        break;
 8003974:	e029      	b.n	80039ca <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a39      	ldr	r2, [pc, #228]	@ (8003a60 <HAL_DAC_Start_DMA+0x174>)
 800397c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a38      	ldr	r2, [pc, #224]	@ (8003a64 <HAL_DAC_Start_DMA+0x178>)
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a37      	ldr	r2, [pc, #220]	@ (8003a68 <HAL_DAC_Start_DMA+0x17c>)
 800398c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800399c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_DAC_Start_DMA+0xc0>
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d005      	beq.n	80039b6 <HAL_DAC_Start_DMA+0xca>
 80039aa:	e009      	b.n	80039c0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	613b      	str	r3, [r7, #16]
        break;
 80039b4:	e009      	b.n	80039ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3318      	adds	r3, #24
 80039bc:	613b      	str	r3, [r7, #16]
        break;
 80039be:	e004      	b.n	80039ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	331c      	adds	r3, #28
 80039c6:	613b      	str	r3, [r7, #16]
        break;
 80039c8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d111      	bne.n	80039f4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	f000 fa3b 	bl	8003e64 <HAL_DMA_Start_IT>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
 80039f2:	e010      	b.n	8003a16 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003a02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68d8      	ldr	r0, [r3, #12]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	f000 fa29 	bl	8003e64 <HAL_DMA_Start_IT>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e005      	b.n	8003a48 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	08003bf5 	.word	0x08003bf5
 8003a58:	08003c17 	.word	0x08003c17
 8003a5c:	08003c33 	.word	0x08003c33
 8003a60:	08003c9d 	.word	0x08003c9d
 8003a64:	08003cbf 	.word	0x08003cbf
 8003a68:	08003cdb 	.word	0x08003cdb

08003a6c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e03e      	b.n	8003afe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43da      	mvns	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2201      	movs	r2, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10d      	bne.n	8003adc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa25 	bl	8003f14 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e00c      	b.n	8003af6 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa17 	bl	8003f14 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003af4:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b089      	sub	sp, #36	@ 0x24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_DAC_ConfigChannel+0x1c>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e042      	b.n	8003be8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	795b      	ldrb	r3, [r3, #5]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_DAC_ConfigChannel+0x2c>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e03c      	b.n	8003be8 <HAL_DAC_ConfigChannel+0xa6>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2202      	movs	r2, #2
 8003b78:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	22c0      	movs	r2, #192	@ 0xc0
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3724      	adds	r7, #36	@ 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff ff7f 	bl	8003b06 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	711a      	strb	r2, [r3, #4]
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff78 	bl	8003b1a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff ff6e 	bl	8003b2e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	711a      	strb	r2, [r3, #4]
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ffd8 	bl	8003c60 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	711a      	strb	r2, [r3, #4]
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff ffd1 	bl	8003c74 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff ffc7 	bl	8003c88 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	711a      	strb	r2, [r3, #4]
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7ff fc40 	bl	8003598 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e099      	b.n	8003e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d44:	e00f      	b.n	8003d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d46:	f7ff fc27 	bl	8003598 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d908      	bls.n	8003d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e078      	b.n	8003e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e8      	bne.n	8003d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_DMA_Init+0x158>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d117      	bne.n	8003e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fadf 	bl	80043d0 <DMA_CheckFifoParam>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2240      	movs	r2, #64	@ 0x40
 8003e1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e26:	2301      	movs	r3, #1
 8003e28:	e016      	b.n	8003e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa96 	bl	8004364 <DMA_CalcBaseAndBitshift>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	223f      	movs	r2, #63	@ 0x3f
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	f010803f 	.word	0xf010803f

08003e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_DMA_Start_IT+0x26>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e040      	b.n	8003f0c <HAL_DMA_Start_IT+0xa8>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d12f      	bne.n	8003efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fa28 	bl	8004308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	223f      	movs	r2, #63	@ 0x3f
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0216 	orr.w	r2, r2, #22
 8003ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0208 	orr.w	r2, r2, #8
 8003eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e005      	b.n	8003f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f22:	f7ff fb39 	bl	8003598 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d008      	beq.n	8003f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2280      	movs	r2, #128	@ 0x80
 8003f38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e052      	b.n	8003fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0216 	bic.w	r2, r2, #22
 8003f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_DMA_Abort+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0208 	bic.w	r2, r2, #8
 8003f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f96:	e013      	b.n	8003fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f98:	f7ff fafe 	bl	8003598 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2203      	movs	r2, #3
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e015      	b.n	8003fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e4      	bne.n	8003f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	223f      	movs	r2, #63	@ 0x3f
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004000:	4b8e      	ldr	r3, [pc, #568]	@ (800423c <HAL_DMA_IRQHandler+0x248>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a8e      	ldr	r2, [pc, #568]	@ (8004240 <HAL_DMA_IRQHandler+0x24c>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0a9b      	lsrs	r3, r3, #10
 800400c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401e:	2208      	movs	r2, #8
 8004020:	409a      	lsls	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01a      	beq.n	8004060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0204 	bic.w	r2, r2, #4
 8004046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	2208      	movs	r2, #8
 800404e:	409a      	lsls	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d012      	beq.n	8004096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	2201      	movs	r2, #1
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	2204      	movs	r2, #4
 800409c:	409a      	lsls	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2204      	movs	r2, #4
 80040ba:	409a      	lsls	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	2210      	movs	r2, #16
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d043      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03c      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2210      	movs	r2, #16
 80040f0:	409a      	lsls	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d024      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
 8004122:	e01f      	b.n	8004164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
 8004134:	e016      	b.n	8004164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0208 	bic.w	r2, r2, #8
 8004152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	2220      	movs	r2, #32
 800416a:	409a      	lsls	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 808f 	beq.w	8004294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8087 	beq.w	8004294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	2220      	movs	r2, #32
 800418c:	409a      	lsls	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b05      	cmp	r3, #5
 800419c:	d136      	bne.n	800420c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0216 	bic.w	r2, r2, #22
 80041ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_DMA_IRQHandler+0x1da>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	223f      	movs	r2, #63	@ 0x3f
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d07e      	beq.n	8004300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
        }
        return;
 800420a:	e079      	b.n	8004300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	2b00      	cmp	r3, #0
 800422e:	d031      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
 8004238:	e02c      	b.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
 800423a:	bf00      	nop
 800423c:	2000003c 	.word	0x2000003c
 8004240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
 8004254:	e01e      	b.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d032      	beq.n	8004302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2205      	movs	r2, #5
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d307      	bcc.n	80042dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f2      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x2cc>
 80042da:	e000      	b.n	80042de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e000      	b.n	8004302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004300:	bf00      	nop
    }
  }
}
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d108      	bne.n	8004348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004346:	e007      	b.n	8004358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b10      	subs	r3, #16
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800437e:	4a13      	ldr	r2, [pc, #76]	@ (80043cc <DMA_CalcBaseAndBitshift+0x68>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d909      	bls.n	80043a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80043a4:	e007      	b.n	80043b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	08011028 	.word	0x08011028

080043d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11f      	bne.n	800442a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d856      	bhi.n	800449e <DMA_CheckFifoParam+0xce>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <DMA_CheckFifoParam+0x28>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004409 	.word	0x08004409
 80043fc:	0800441b 	.word	0x0800441b
 8004400:	08004409 	.word	0x08004409
 8004404:	0800449f 	.word	0x0800449f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d046      	beq.n	80044a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004418:	e043      	b.n	80044a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004422:	d140      	bne.n	80044a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e03d      	b.n	80044a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004432:	d121      	bne.n	8004478 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d837      	bhi.n	80044aa <DMA_CheckFifoParam+0xda>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <DMA_CheckFifoParam+0x70>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	08004457 	.word	0x08004457
 8004448:	08004451 	.word	0x08004451
 800444c:	08004469 	.word	0x08004469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e030      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d025      	beq.n	80044ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004466:	e022      	b.n	80044ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004470:	d11f      	bne.n	80044b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004476:	e01c      	b.n	80044b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d903      	bls.n	8004486 <DMA_CheckFifoParam+0xb6>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d003      	beq.n	800448c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004484:	e018      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
      break;
 800448a:	e015      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e00b      	b.n	80044b6 <DMA_CheckFifoParam+0xe6>
      break;
 800449e:	bf00      	nop
 80044a0:	e00a      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e008      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e006      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
    }
  } 
  
  return status; 
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e16b      	b.n	80047bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 815a 	bne.w	80047b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80b4 	beq.w	80047b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b60      	ldr	r3, [pc, #384]	@ (80047d4 <HAL_GPIO_Init+0x30c>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	4a5f      	ldr	r2, [pc, #380]	@ (80047d4 <HAL_GPIO_Init+0x30c>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800465c:	6453      	str	r3, [r2, #68]	@ 0x44
 800465e:	4b5d      	ldr	r3, [pc, #372]	@ (80047d4 <HAL_GPIO_Init+0x30c>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a5b      	ldr	r2, [pc, #364]	@ (80047d8 <HAL_GPIO_Init+0x310>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a52      	ldr	r2, [pc, #328]	@ (80047dc <HAL_GPIO_Init+0x314>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02b      	beq.n	80046ee <HAL_GPIO_Init+0x226>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a51      	ldr	r2, [pc, #324]	@ (80047e0 <HAL_GPIO_Init+0x318>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x222>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a50      	ldr	r2, [pc, #320]	@ (80047e4 <HAL_GPIO_Init+0x31c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x21e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4f      	ldr	r2, [pc, #316]	@ (80047e8 <HAL_GPIO_Init+0x320>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x21a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4e      	ldr	r2, [pc, #312]	@ (80047ec <HAL_GPIO_Init+0x324>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x216>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4d      	ldr	r2, [pc, #308]	@ (80047f0 <HAL_GPIO_Init+0x328>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x212>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4c      	ldr	r2, [pc, #304]	@ (80047f4 <HAL_GPIO_Init+0x32c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x20e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4b      	ldr	r2, [pc, #300]	@ (80047f8 <HAL_GPIO_Init+0x330>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x20a>
 80046ce:	2307      	movs	r3, #7
 80046d0:	e00e      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046d2:	2308      	movs	r3, #8
 80046d4:	e00c      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046d6:	2306      	movs	r3, #6
 80046d8:	e00a      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046da:	2305      	movs	r3, #5
 80046dc:	e008      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046de:	2304      	movs	r3, #4
 80046e0:	e006      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e004      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x228>
 80046ee:	2300      	movs	r3, #0
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	f002 0203 	and.w	r2, r2, #3
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	4093      	lsls	r3, r2
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004700:	4935      	ldr	r1, [pc, #212]	@ (80047d8 <HAL_GPIO_Init+0x310>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <HAL_GPIO_Init+0x334>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <HAL_GPIO_Init+0x334>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b30      	ldr	r3, [pc, #192]	@ (80047fc <HAL_GPIO_Init+0x334>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <HAL_GPIO_Init+0x334>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004762:	4b26      	ldr	r3, [pc, #152]	@ (80047fc <HAL_GPIO_Init+0x334>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004786:	4a1d      	ldr	r2, [pc, #116]	@ (80047fc <HAL_GPIO_Init+0x334>)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_GPIO_Init+0x334>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <HAL_GPIO_Init+0x334>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	f67f ae90 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	@ 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40013800 	.word	0x40013800
 80047dc:	40020000 	.word	0x40020000
 80047e0:	40020400 	.word	0x40020400
 80047e4:	40020800 	.word	0x40020800
 80047e8:	40020c00 	.word	0x40020c00
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40021400 	.word	0x40021400
 80047f4:	40021800 	.word	0x40021800
 80047f8:	40021c00 	.word	0x40021c00
 80047fc:	40013c00 	.word	0x40013c00

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800481c:	e003      	b.n	8004826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	041a      	lsls	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43d9      	mvns	r1, r3
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	400b      	ands	r3, r1
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	619a      	str	r2, [r3, #24]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800487e:	4a05      	ldr	r2, [pc, #20]	@ (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f806 	bl	8004898 <HAL_GPIO_EXTI_Callback>
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40013c00 	.word	0x40013c00

08004898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e12b      	b.n	8004b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fe fc0e 	bl	80030f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004914:	f002 ffa0 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 8004918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a81      	ldr	r2, [pc, #516]	@ (8004b24 <HAL_I2C_Init+0x274>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d807      	bhi.n	8004934 <HAL_I2C_Init+0x84>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a80      	ldr	r2, [pc, #512]	@ (8004b28 <HAL_I2C_Init+0x278>)
 8004928:	4293      	cmp	r3, r2
 800492a:	bf94      	ite	ls
 800492c:	2301      	movls	r3, #1
 800492e:	2300      	movhi	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e006      	b.n	8004942 <HAL_I2C_Init+0x92>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a7d      	ldr	r2, [pc, #500]	@ (8004b2c <HAL_I2C_Init+0x27c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	bf94      	ite	ls
 800493c:	2301      	movls	r3, #1
 800493e:	2300      	movhi	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0e7      	b.n	8004b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a78      	ldr	r2, [pc, #480]	@ (8004b30 <HAL_I2C_Init+0x280>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0c9b      	lsrs	r3, r3, #18
 8004954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4a6a      	ldr	r2, [pc, #424]	@ (8004b24 <HAL_I2C_Init+0x274>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d802      	bhi.n	8004984 <HAL_I2C_Init+0xd4>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3301      	adds	r3, #1
 8004982:	e009      	b.n	8004998 <HAL_I2C_Init+0xe8>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	4a69      	ldr	r2, [pc, #420]	@ (8004b34 <HAL_I2C_Init+0x284>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	3301      	adds	r3, #1
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	430b      	orrs	r3, r1
 800499e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	495c      	ldr	r1, [pc, #368]	@ (8004b24 <HAL_I2C_Init+0x274>)
 80049b4:	428b      	cmp	r3, r1
 80049b6:	d819      	bhi.n	80049ec <HAL_I2C_Init+0x13c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1e59      	subs	r1, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c6:	1c59      	adds	r1, r3, #1
 80049c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049cc:	400b      	ands	r3, r1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_I2C_Init+0x138>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e59      	subs	r1, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e0:	3301      	adds	r3, #1
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e6:	e051      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 80049e8:	2304      	movs	r3, #4
 80049ea:	e04f      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d111      	bne.n	8004a18 <HAL_I2C_Init+0x168>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1e58      	subs	r0, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e012      	b.n	8004a3e <HAL_I2C_Init+0x18e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e58      	subs	r0, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	0099      	lsls	r1, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Init+0x196>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e022      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10e      	bne.n	8004a6c <HAL_I2C_Init+0x1bc>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e58      	subs	r0, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	440b      	add	r3, r1
 8004a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6a:	e00f      	b.n	8004a8c <HAL_I2C_Init+0x1dc>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	0099      	lsls	r1, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	6809      	ldr	r1, [r1, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6911      	ldr	r1, [r2, #16]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68d2      	ldr	r2, [r2, #12]
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	000186a0 	.word	0x000186a0
 8004b28:	001e847f 	.word	0x001e847f
 8004b2c:	003d08ff 	.word	0x003d08ff
 8004b30:	431bde83 	.word	0x431bde83
 8004b34:	10624dd3 	.word	0x10624dd3

08004b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	4608      	mov	r0, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	817b      	strh	r3, [r7, #10]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	813b      	strh	r3, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b52:	f7fe fd21 	bl	8003598 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f040 80d9 	bne.w	8004d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	2319      	movs	r3, #25
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	496d      	ldr	r1, [pc, #436]	@ (8004d24 <HAL_I2C_Mem_Write+0x1ec>)
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fdb9 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0cc      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Mem_Write+0x56>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0c5      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d007      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2221      	movs	r2, #33	@ 0x21
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2240      	movs	r2, #64	@ 0x40
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8004d28 <HAL_I2C_Mem_Write+0x1f0>)
 8004bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bf6:	88f8      	ldrh	r0, [r7, #6]
 8004bf8:	893a      	ldrh	r2, [r7, #8]
 8004bfa:	8979      	ldrh	r1, [r7, #10]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4603      	mov	r3, r0
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fbf0 	bl	80053ec <I2C_RequestMemoryWrite>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d052      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e081      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fe7e 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d107      	bne.n	8004c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e06b      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d017      	beq.n	8004cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1aa      	bne.n	8004c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fe71 	bl	80059ac <I2C_WaitOnBTFFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d107      	bne.n	8004ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e016      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	00100002 	.word	0x00100002
 8004d28:	ffff0000 	.word	0xffff0000

08004d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	@ 0x30
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d46:	f7fe fc27 	bl	8003598 <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 8214 	bne.w	8005182 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2319      	movs	r3, #25
 8004d60:	2201      	movs	r2, #1
 8004d62:	497b      	ldr	r1, [pc, #492]	@ (8004f50 <HAL_I2C_Mem_Read+0x224>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fcbf 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
 8004d72:	e207      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x56>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e200      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d007      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2222      	movs	r2, #34	@ 0x22
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2240      	movs	r2, #64	@ 0x40
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f54 <HAL_I2C_Mem_Read+0x228>)
 8004de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dea:	88f8      	ldrh	r0, [r7, #6]
 8004dec:	893a      	ldrh	r2, [r7, #8]
 8004dee:	8979      	ldrh	r1, [r7, #10]
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fb8c 	bl	8005518 <I2C_RequestMemoryRead>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e1bc      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d113      	bne.n	8004e3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e190      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d11b      	bne.n	8004e7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e170      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d11b      	bne.n	8004eba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	e150      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ed0:	e144      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	f200 80f1 	bhi.w	80050be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d123      	bne.n	8004f2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fda7 	bl	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e145      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f2a:	e117      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d14e      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4906      	ldr	r1, [pc, #24]	@ (8004f58 <HAL_I2C_Mem_Read+0x22c>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fbd2 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e11a      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
 8004f4e:	bf00      	nop
 8004f50:	00100002 	.word	0x00100002
 8004f54:	ffff0000 	.word	0xffff0000
 8004f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fd0:	e0c4      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd8:	2200      	movs	r2, #0
 8004fda:	496c      	ldr	r1, [pc, #432]	@ (800518c <HAL_I2C_Mem_Read+0x460>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fb83 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0cb      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005034:	2200      	movs	r2, #0
 8005036:	4955      	ldr	r1, [pc, #340]	@ (800518c <HAL_I2C_Mem_Read+0x460>)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fb55 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e09d      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050bc:	e04e      	b.n	800515c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fcba 	bl	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e058      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d124      	bne.n	800515c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005128:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f aeb6 	bne.w	8004ed2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3728      	adds	r7, #40	@ 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	00010004 	.word	0x00010004

08005190 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	460b      	mov	r3, r1
 800519e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7fe f9fa 	bl	8003598 <HAL_GetTick>
 80051a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	f040 8111 	bne.w	80053da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2319      	movs	r3, #25
 80051be:	2201      	movs	r2, #1
 80051c0:	4988      	ldr	r1, [pc, #544]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa90 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
 80051d0:	e104      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_I2C_IsDeviceReady+0x50>
 80051dc:	2302      	movs	r3, #2
 80051de:	e0fd      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d007      	beq.n	8005206 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2224      	movs	r2, #36	@ 0x24
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a70      	ldr	r2, [pc, #448]	@ (80053e8 <HAL_I2C_IsDeviceReady+0x258>)
 8005228:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005238:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fa4e 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005260:	d103      	bne.n	800526a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005268:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0b6      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800527c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800527e:	f7fe f98b 	bl	8003598 <HAL_GetTick>
 8005282:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052b2:	e025      	b.n	8005300 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fe f970 	bl	8003598 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <HAL_I2C_IsDeviceReady+0x13a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22a0      	movs	r2, #160	@ 0xa0
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2ba0      	cmp	r3, #160	@ 0xa0
 800530a:	d005      	beq.n	8005318 <HAL_I2C_IsDeviceReady+0x188>
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_I2C_IsDeviceReady+0x188>
 8005312:	7dbb      	ldrb	r3, [r7, #22]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0cd      	beq.n	80052b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d129      	bne.n	8005382 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2319      	movs	r3, #25
 800535a:	2201      	movs	r2, #1
 800535c:	4921      	ldr	r1, [pc, #132]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f9c2 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e036      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e02c      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005390:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800539a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2319      	movs	r3, #25
 80053a2:	2201      	movs	r2, #1
 80053a4:	490f      	ldr	r1, [pc, #60]	@ (80053e4 <HAL_I2C_IsDeviceReady+0x254>)
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f99e 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e012      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f4ff af32 	bcc.w	800522a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	00100002 	.word	0x00100002
 80053e8:	ffff0000 	.word	0xffff0000

080053ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	817b      	strh	r3, [r7, #10]
 80053fe:	460b      	mov	r3, r1
 8005400:	813b      	strh	r3, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	2200      	movs	r2, #0
 800541e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f960 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543c:	d103      	bne.n	8005446 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005444:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e05f      	b.n	800550a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800544a:	897b      	ldrh	r3, [r7, #10]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	492d      	ldr	r1, [pc, #180]	@ (8005514 <I2C_RequestMemoryWrite+0x128>)
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f9bb 	bl	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e04c      	b.n	800550a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fa46 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e02b      	b.n	800550a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d105      	bne.n	80054c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]
 80054c2:	e021      	b.n	8005508 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054c4:	893b      	ldrh	r3, [r7, #8]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	6a39      	ldr	r1, [r7, #32]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fa20 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d107      	bne.n	80054fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e005      	b.n	800550a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fe:	893b      	ldrh	r3, [r7, #8]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	00010002 	.word	0x00010002

08005518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	4603      	mov	r3, r0
 8005528:	817b      	strh	r3, [r7, #10]
 800552a:	460b      	mov	r3, r1
 800552c:	813b      	strh	r3, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2200      	movs	r2, #0
 800555a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f8c2 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005578:	d103      	bne.n	8005582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005580:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0aa      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	4952      	ldr	r1, [pc, #328]	@ (80056e4 <I2C_RequestMemoryRead+0x1cc>)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f91d 	bl	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e097      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f9a8 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e076      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f4:	893b      	ldrh	r3, [r7, #8]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]
 80055fe:	e021      	b.n	8005644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	b29b      	uxth	r3, r3
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005610:	6a39      	ldr	r1, [r7, #32]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f982 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e050      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563a:	893b      	ldrh	r3, [r7, #8]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005646:	6a39      	ldr	r1, [r7, #32]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f967 	bl	800591c <I2C_WaitOnTXEFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	2b04      	cmp	r3, #4
 800565a:	d107      	bne.n	800566c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800566a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e035      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800567e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	2200      	movs	r2, #0
 8005688:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f82b 	bl	80056e8 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a6:	d103      	bne.n	80056b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e013      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056b4:	897b      	ldrh	r3, [r7, #10]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	6a3a      	ldr	r2, [r7, #32]
 80056c8:	4906      	ldr	r1, [pc, #24]	@ (80056e4 <I2C_RequestMemoryRead+0x1cc>)
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f886 	bl	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	00010002 	.word	0x00010002

080056e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f8:	e048      	b.n	800578c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d044      	beq.n	800578c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fd ff49 	bl	8003598 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d139      	bne.n	800578c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10d      	bne.n	800573e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	43da      	mvns	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	e00c      	b.n	8005758 <I2C_WaitOnFlagUntilTimeout+0x70>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	43da      	mvns	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	d116      	bne.n	800578c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e023      	b.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10d      	bne.n	80057b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	e00c      	b.n	80057cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	43da      	mvns	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d093      	beq.n	80056fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ea:	e071      	b.n	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057fa:	d123      	bne.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800580a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	f043 0204 	orr.w	r2, r3, #4
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e067      	b.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d041      	beq.n	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fd fea4 	bl	8003598 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d136      	bne.n	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d10c      	bne.n	8005886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e00b      	b.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	43da      	mvns	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4013      	ands	r3, r2
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e021      	b.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10c      	bne.n	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	43da      	mvns	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e00b      	b.n	800590c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	43da      	mvns	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf14      	ite	ne
 8005906:	2301      	movne	r3, #1
 8005908:	2300      	moveq	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f af6d 	bne.w	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005928:	e034      	b.n	8005994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8e3 	bl	8005af6 <I2C_IsAcknowledgeFailed>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e034      	b.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d028      	beq.n	8005994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005942:	f7fd fe29 	bl	8003598 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11d      	bne.n	8005994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	2b80      	cmp	r3, #128	@ 0x80
 8005964:	d016      	beq.n	8005994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e007      	b.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599e:	2b80      	cmp	r3, #128	@ 0x80
 80059a0:	d1c3      	bne.n	800592a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b8:	e034      	b.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f89b 	bl	8005af6 <I2C_IsAcknowledgeFailed>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e034      	b.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d028      	beq.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fd fde1 	bl	8003598 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11d      	bne.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d016      	beq.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	f043 0220 	orr.w	r2, r3, #32
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e007      	b.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d1c3      	bne.n	80059ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a48:	e049      	b.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d119      	bne.n	8005a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0210 	mvn.w	r2, #16
 8005a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e030      	b.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8c:	f7fd fd84 	bl	8003598 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d11d      	bne.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d016      	beq.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	f043 0220 	orr.w	r2, r3, #32
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e007      	b.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d1ae      	bne.n	8005a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0c:	d11b      	bne.n	8005b46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f043 0204 	orr.w	r2, r3, #4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e101      	b.n	8005d6a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f006 fd1d 	bl	800c5c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b94:	d102      	bne.n	8005b9c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f003 f882 	bl	8008caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7c1a      	ldrb	r2, [r3, #16]
 8005bae:	f88d 2000 	strb.w	r2, [sp]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb6:	f002 ff61 	bl	8008a7c <USB_CoreInit>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0ce      	b.n	8005d6a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f003 f87a 	bl	8008ccc <USB_SetCurrentMode>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0bf      	b.n	8005d6a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	e04a      	b.n	8005c86 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bf0:	7bfa      	ldrb	r2, [r7, #15]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3315      	adds	r3, #21
 8005c00:	2201      	movs	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c04:	7bfa      	ldrb	r2, [r7, #15]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	3314      	adds	r3, #20
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	b298      	uxth	r0, r3
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	332e      	adds	r3, #46	@ 0x2e
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c30:	7bfa      	ldrb	r2, [r7, #15]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3318      	adds	r3, #24
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	331c      	adds	r3, #28
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c58:	7bfa      	ldrb	r2, [r7, #15]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3320      	adds	r3, #32
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c6c:	7bfa      	ldrb	r2, [r7, #15]
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	3324      	adds	r3, #36	@ 0x24
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	3301      	adds	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d3af      	bcc.n	8005bf0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]
 8005c94:	e044      	b.n	8005d20 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cac:	7bfa      	ldrb	r2, [r7, #15]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005cbe:	7bfa      	ldrb	r2, [r7, #15]
 8005cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d04:	7bfa      	ldrb	r2, [r7, #15]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	791b      	ldrb	r3, [r3, #4]
 8005d24:	7bfa      	ldrb	r2, [r7, #15]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d3b5      	bcc.n	8005c96 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7c1a      	ldrb	r2, [r3, #16]
 8005d32:	f88d 2000 	strb.w	r2, [sp]
 8005d36:	3304      	adds	r3, #4
 8005d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d3a:	f003 f813 	bl	8008d64 <USB_DevInit>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e00c      	b.n	8005d6a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f004 f85d 	bl	8009e22 <USB_DevDisconnect>

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_PCD_Start+0x1c>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e022      	b.n	8005dd4 <HAL_PCD_Start+0x62>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f002 ff64 	bl	8008c88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f004 f80b 	bl	8009de0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b08d      	sub	sp, #52	@ 0x34
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f004 f8c9 	bl	8009f8a <USB_GetMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 848c 	bne.w	8006718 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f004 f82d 	bl	8009e64 <USB_ReadInterrupts>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8482 	beq.w	8006716 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f004 f81a 	bl	8009e64 <USB_ReadInterrupts>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d107      	bne.n	8005e4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f002 0202 	and.w	r2, r2, #2
 8005e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 f808 	bl	8009e64 <USB_ReadInterrupts>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d161      	bne.n	8005f22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0210 	bic.w	r2, r2, #16
 8005e6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	0c5b      	lsrs	r3, r3, #17
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d124      	bne.n	8005ee4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d035      	beq.n	8005f12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6a38      	ldr	r0, [r7, #32]
 8005eba:	f003 fe3f 	bl	8009b3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eca:	441a      	add	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005edc:	441a      	add	r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	615a      	str	r2, [r3, #20]
 8005ee2:	e016      	b.n	8005f12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	0c5b      	lsrs	r3, r3, #17
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2b06      	cmp	r3, #6
 8005eee:	d110      	bne.n	8005f12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6a38      	ldr	r0, [r7, #32]
 8005efc:	f003 fe1e 	bl	8009b3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0c:	441a      	add	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0210 	orr.w	r2, r2, #16
 8005f20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f003 ff9c 	bl	8009e64 <USB_ReadInterrupts>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f36:	f040 80a7 	bne.w	8006088 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f003 ffa1 	bl	8009e8a <USB_ReadDevAllOutEpInterrupt>
 8005f48:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005f4a:	e099      	b.n	8006080 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 808e 	beq.w	8006074 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f003 ffc5 	bl	8009ef2 <USB_ReadDevOutEPInterrupt>
 8005f68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2301      	movs	r3, #1
 8005f84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fea3 	bl	8006cd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00c      	beq.n	8005fb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005faa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff79 	bl	8006ea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2310      	movs	r3, #16
 8005fcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d030      	beq.n	800603a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d109      	bne.n	8005ff8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ff6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	3304      	adds	r3, #4
 800600c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d108      	bne.n	8006028 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	b2db      	uxtb	r3, r3
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f006 fbd2 	bl	800c7cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	2302      	movs	r3, #2
 8006038:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	461a      	mov	r2, r3
 8006052:	2320      	movs	r3, #32
 8006054:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606c:	461a      	mov	r2, r3
 800606e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006072:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	3301      	adds	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f af62 	bne.w	8005f4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f003 fee9 	bl	8009e64 <USB_ReadInterrupts>
 8006092:	4603      	mov	r3, r0
 8006094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006098:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800609c:	f040 80db 	bne.w	8006256 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f003 ff0a 	bl	8009ebe <USB_ReadDevAllInEpInterrupt>
 80060aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80060b0:	e0cd      	b.n	800624e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 80c2 	beq.w	8006242 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f003 ff30 	bl	8009f2e <USB_ReadDevInEPInterrupt>
 80060ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d057      	beq.n	800618a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	2201      	movs	r2, #1
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060fa:	4013      	ands	r3, r2
 80060fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610a:	461a      	mov	r2, r3
 800610c:	2301      	movs	r3, #1
 800610e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	799b      	ldrb	r3, [r3, #6]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d132      	bne.n	800617e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	3320      	adds	r3, #32
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4403      	add	r3, r0
 8006138:	331c      	adds	r3, #28
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4419      	add	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4403      	add	r3, r0
 800614c:	3320      	adds	r3, #32
 800614e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <HAL_PCD_IRQHandler+0x3a2>
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3324      	adds	r3, #36	@ 0x24
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d108      	bne.n	800617e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006176:	461a      	mov	r2, r3
 8006178:	2101      	movs	r1, #1
 800617a:	f003 ff37 	bl	8009fec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f006 fa9c 	bl	800c6c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	461a      	mov	r2, r3
 80061a2:	2308      	movs	r3, #8
 80061a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061bc:	461a      	mov	r2, r3
 80061be:	2310      	movs	r3, #16
 80061c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	461a      	mov	r2, r3
 80061da:	2340      	movs	r3, #64	@ 0x40
 80061dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d023      	beq.n	8006230 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80061e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061ea:	6a38      	ldr	r0, [r7, #32]
 80061ec:	f002 ff1e 	bl	800902c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3310      	adds	r3, #16
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	78db      	ldrb	r3, [r3, #3]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d108      	bne.n	800621e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	b2db      	uxtb	r3, r3
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f006 fae9 	bl	800c7f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	461a      	mov	r2, r3
 800622c:	2302      	movs	r3, #2
 800622e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800623a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fcbd 	bl	8006bbc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	3301      	adds	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f af2e 	bne.w	80060b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f003 fe02 	bl	8009e64 <USB_ReadInterrupts>
 8006260:	4603      	mov	r3, r0
 8006262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800626a:	d122      	bne.n	80062b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006286:	2b01      	cmp	r3, #1
 8006288:	d108      	bne.n	800629c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fea3 	bl	8006fe0 <HAL_PCDEx_LPM_Callback>
 800629a:	e002      	b.n	80062a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f006 fa87 	bl	800c7b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80062b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f003 fdd4 	bl	8009e64 <USB_ReadInterrupts>
 80062bc:	4603      	mov	r3, r0
 80062be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062c6:	d112      	bne.n	80062ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d102      	bne.n	80062de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f006 fa43 	bl	800c764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80062ec:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f003 fdb6 	bl	8009e64 <USB_ReadInterrupts>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006302:	f040 80b7 	bne.w	8006474 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2110      	movs	r1, #16
 8006320:	4618      	mov	r0, r3
 8006322:	f002 fe83 	bl	800902c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006326:	2300      	movs	r3, #0
 8006328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800632a:	e046      	b.n	80063ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006338:	461a      	mov	r2, r3
 800633a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800633e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800635e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636c:	461a      	mov	r2, r3
 800636e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006372:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006392:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	3301      	adds	r3, #1
 80063b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	461a      	mov	r2, r3
 80063c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d3b2      	bcc.n	800632c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80063d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7bdb      	ldrb	r3, [r3, #15]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f2:	f043 030b 	orr.w	r3, r3, #11
 80063f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006408:	f043 030b 	orr.w	r3, r3, #11
 800640c:	6453      	str	r3, [r2, #68]	@ 0x44
 800640e:	e015      	b.n	800643c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800641e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006422:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006426:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006436:	f043 030b 	orr.w	r3, r3, #11
 800643a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800644a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800644e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800645e:	461a      	mov	r2, r3
 8006460:	f003 fdc4 	bl	8009fec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f003 fcf3 	bl	8009e64 <USB_ReadInterrupts>
 800647e:	4603      	mov	r3, r0
 8006480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006488:	d123      	bne.n	80064d2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f003 fd89 	bl	8009fa6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f002 fe40 	bl	800911e <USB_GetDevSpeed>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	f001 f9c9 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 80064ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064b4:	461a      	mov	r2, r3
 80064b6:	4620      	mov	r0, r4
 80064b8:	f002 fb44 	bl	8008b44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f006 f928 	bl	800c712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80064d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f003 fcc4 	bl	8009e64 <USB_ReadInterrupts>
 80064dc:	4603      	mov	r3, r0
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d10a      	bne.n	80064fc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f006 f905 	bl	800c6f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f002 0208 	and.w	r2, r2, #8
 80064fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f003 fcaf 	bl	8009e64 <USB_ReadInterrupts>
 8006506:	4603      	mov	r3, r0
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b80      	cmp	r3, #128	@ 0x80
 800650e:	d123      	bne.n	8006558 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800651c:	2301      	movs	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006520:	e014      	b.n	800654c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb0a 	bl	8006b5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	3301      	adds	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	791b      	ldrb	r3, [r3, #4]
 8006550:	461a      	mov	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	4293      	cmp	r3, r2
 8006556:	d3e4      	bcc.n	8006522 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f003 fc81 	bl	8009e64 <USB_ReadInterrupts>
 8006562:	4603      	mov	r3, r0
 8006564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656c:	d13c      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800656e:	2301      	movs	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
 8006572:	e02b      	b.n	80065cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	3318      	adds	r3, #24
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d115      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800659a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800659c:	2b00      	cmp	r3, #0
 800659e:	da12      	bge.n	80065c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	3317      	adds	r3, #23
 80065b0:	2201      	movs	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 faca 	bl	8006b5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	3301      	adds	r3, #1
 80065ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	791b      	ldrb	r3, [r3, #4]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d3cd      	bcc.n	8006574 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80065e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f003 fc39 	bl	8009e64 <USB_ReadInterrupts>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065fc:	d156      	bne.n	80066ac <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065fe:	2301      	movs	r3, #1
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
 8006602:	e045      	b.n	8006690 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d12e      	bne.n	800668a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800662c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800662e:	2b00      	cmp	r3, #0
 8006630:	da2b      	bge.n	800668a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	0c1a      	lsrs	r2, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800663c:	4053      	eors	r3, r2
 800663e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d121      	bne.n	800668a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006686:	6053      	str	r3, [r2, #4]
            break;
 8006688:	e008      	b.n	800669c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	3301      	adds	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	791b      	ldrb	r3, [r3, #4]
 8006694:	461a      	mov	r2, r3
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	4293      	cmp	r3, r2
 800669a:	d3b3      	bcc.n	8006604 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80066aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f003 fbd7 	bl	8009e64 <USB_ReadInterrupts>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c0:	d10a      	bne.n	80066d8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f006 f8a6 	bl	800c814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 fbc1 	bl	8009e64 <USB_ReadInterrupts>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d115      	bne.n	8006718 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f006 f896 	bl	800c830 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6859      	ldr	r1, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	430a      	orrs	r2, r1
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	e000      	b.n	8006718 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006716:	bf00      	nop
    }
  }
}
 8006718:	3734      	adds	r7, #52	@ 0x34
 800671a:	46bd      	mov	sp, r7
 800671c:	bd90      	pop	{r4, r7, pc}

0800671e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_PCD_SetAddress+0x1a>
 8006734:	2302      	movs	r3, #2
 8006736:	e012      	b.n	800675e <HAL_PCD_SetAddress+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f003 fb20 	bl	8009d94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	4608      	mov	r0, r1
 8006770:	4611      	mov	r1, r2
 8006772:	461a      	mov	r2, r3
 8006774:	4603      	mov	r3, r0
 8006776:	70fb      	strb	r3, [r7, #3]
 8006778:	460b      	mov	r3, r1
 800677a:	803b      	strh	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0f      	bge.n	80067ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	3310      	adds	r3, #16
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	705a      	strb	r2, [r3, #1]
 80067aa:	e00f      	b.n	80067cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80067d8:	883b      	ldrh	r3, [r7, #0]
 80067da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	78ba      	ldrb	r2, [r7, #2]
 80067e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067fa:	78bb      	ldrb	r3, [r7, #2]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d102      	bne.n	8006806 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_PCD_EP_Open+0xae>
 8006810:	2302      	movs	r3, #2
 8006812:	e00e      	b.n	8006832 <HAL_PCD_EP_Open+0xcc>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	4618      	mov	r0, r3
 8006824:	f002 fca0 	bl	8009168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006830:	7afb      	ldrb	r3, [r7, #11]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800684a:	2b00      	cmp	r3, #0
 800684c:	da0f      	bge.n	800686e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	f003 020f 	and.w	r2, r3, #15
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	3310      	adds	r3, #16
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4413      	add	r3, r2
 8006862:	3304      	adds	r3, #4
 8006864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	705a      	strb	r2, [r3, #1]
 800686c:	e00f      	b.n	800688e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	4613      	mov	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	3304      	adds	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_PCD_EP_Close+0x6e>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e00e      	b.n	80068c6 <HAL_PCD_EP_Close+0x8c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 fcde 	bl	8009278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	460b      	mov	r3, r1
 80068dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	f003 020f 	and.w	r2, r3, #15
 80068e4:	4613      	mov	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	3304      	adds	r3, #4
 80068f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2200      	movs	r2, #0
 8006908:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	b2da      	uxtb	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	799b      	ldrb	r3, [r3, #6]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d102      	bne.n	800692a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	799b      	ldrb	r3, [r3, #6]
 8006932:	461a      	mov	r2, r3
 8006934:	6979      	ldr	r1, [r7, #20]
 8006936:	f002 fd7b 	bl	8009430 <USB_EPStartXfer>

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	f003 020f 	and.w	r2, r3, #15
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006966:	681b      	ldr	r3, [r3, #0]
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	460b      	mov	r3, r1
 8006982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	f003 020f 	and.w	r2, r3, #15
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	3310      	adds	r3, #16
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	3304      	adds	r3, #4
 800699a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2200      	movs	r2, #0
 80069ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2201      	movs	r2, #1
 80069b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	799b      	ldrb	r3, [r3, #6]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	799b      	ldrb	r3, [r3, #6]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6979      	ldr	r1, [r7, #20]
 80069da:	f002 fd29 	bl	8009430 <USB_EPStartXfer>

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	7912      	ldrb	r2, [r2, #4]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e04f      	b.n	8006aa6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da0f      	bge.n	8006a2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	3304      	adds	r3, #4
 8006a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	705a      	strb	r2, [r3, #1]
 8006a2c:	e00d      	b.n	8006a4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	3304      	adds	r3, #4
 8006a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_PCD_EP_SetStall+0x82>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e01d      	b.n	8006aa6 <HAL_PCD_EP_SetStall+0xbe>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68f9      	ldr	r1, [r7, #12]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f003 f8b7 	bl	8009bec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7999      	ldrb	r1, [r3, #6]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a96:	461a      	mov	r2, r3
 8006a98:	f003 faa8 	bl	8009fec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7912      	ldrb	r2, [r2, #4]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e042      	b.n	8006b52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da0f      	bge.n	8006af4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	4613      	mov	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	3310      	adds	r3, #16
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3304      	adds	r3, #4
 8006aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	705a      	strb	r2, [r3, #1]
 8006af2:	e00f      	b.n	8006b14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	4613      	mov	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_PCD_EP_ClrStall+0x86>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e00e      	b.n	8006b52 <HAL_PCD_EP_ClrStall+0xa4>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68f9      	ldr	r1, [r7, #12]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f003 f8c0 	bl	8009cc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da0c      	bge.n	8006b88 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	3310      	adds	r3, #16
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4413      	add	r3, r2
 8006b82:	3304      	adds	r3, #4
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	e00c      	b.n	8006ba2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	f003 020f 	and.w	r2, r3, #15
 8006b8e:	4613      	mov	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f002 fedf 	bl	800996c <USB_EPStopXfer>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	@ 0x28
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3310      	adds	r3, #16
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	695a      	ldr	r2, [r3, #20]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d901      	bls.n	8006bf4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e06b      	b.n	8006ccc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d902      	bls.n	8006c10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3303      	adds	r3, #3
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c18:	e02a      	b.n	8006c70 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d902      	bls.n	8006c36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68d9      	ldr	r1, [r3, #12]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	4603      	mov	r3, r0
 8006c52:	6978      	ldr	r0, [r7, #20]
 8006c54:	f002 ff34 	bl	8009ac0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	441a      	add	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d809      	bhi.n	8006c9a <PCD_WriteEmptyTxFifo+0xde>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d203      	bcs.n	8006c9a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1bf      	bne.n	8006c1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d811      	bhi.n	8006cca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	6939      	ldr	r1, [r7, #16]
 8006cc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	333c      	adds	r3, #60	@ 0x3c
 8006cec:	3304      	adds	r3, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	799b      	ldrb	r3, [r3, #6]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d17b      	bne.n	8006e02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d015      	beq.n	8006d40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	4a61      	ldr	r2, [pc, #388]	@ (8006e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	f240 80b9 	bls.w	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80b3 	beq.w	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3c:	6093      	str	r3, [r2, #8]
 8006d3e:	e0a7      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	2320      	movs	r3, #32
 8006d5a:	6093      	str	r3, [r2, #8]
 8006d5c:	e098      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 8093 	bne.w	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8006e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d90f      	bls.n	8006d92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8e:	6093      	str	r3, [r2, #8]
 8006d90:	e07e      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	3304      	adds	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	0159      	lsls	r1, r3, #5
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	440b      	add	r3, r1
 8006db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d114      	bne.n	8006df4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2101      	movs	r1, #1
 8006de0:	f003 f904 	bl	8009fec <USB_EP0_OutStart>
 8006de4:	e006      	b.n	8006df4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	441a      	add	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f005 fc46 	bl	800c68c <HAL_PCD_DataOutStageCallback>
 8006e00:	e046      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	4a26      	ldr	r2, [pc, #152]	@ (8006ea0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d124      	bne.n	8006e54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e20:	461a      	mov	r2, r3
 8006e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e26:	6093      	str	r3, [r2, #8]
 8006e28:	e032      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	2320      	movs	r3, #32
 8006e44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f005 fc1d 	bl	800c68c <HAL_PCD_DataOutStageCallback>
 8006e52:	e01d      	b.n	8006e90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d114      	bne.n	8006e84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d108      	bne.n	8006e84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2100      	movs	r1, #0
 8006e80:	f003 f8b4 	bl	8009fec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f005 fbfe 	bl	800c68c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	4f54300a 	.word	0x4f54300a
 8006ea0:	4f54310a 	.word	0x4f54310a

08006ea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	333c      	adds	r3, #60	@ 0x3c
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a15      	ldr	r2, [pc, #84]	@ (8006f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d90e      	bls.n	8006ef8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f005 fbb5 	bl	800c668 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	@ (8006f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d90c      	bls.n	8006f20 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	799b      	ldrb	r3, [r3, #6]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d108      	bne.n	8006f20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	f003 f866 	bl	8009fec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	4f54300a 	.word	0x4f54300a

08006f30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f4e:	883b      	ldrh	r3, [r7, #0]
 8006f50:	0419      	lsls	r1, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f5c:	e028      	b.n	8006fb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e00d      	b.n	8006f8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	3340      	adds	r3, #64	@ 0x40
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3ec      	bcc.n	8006f72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f98:	883b      	ldrh	r3, [r7, #0]
 8006f9a:	0418      	lsls	r0, r3, #16
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4302      	orrs	r2, r0
 8006fa8:	3340      	adds	r3, #64	@ 0x40
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e267      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d075      	beq.n	8007102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007016:	4b88      	ldr	r3, [pc, #544]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	2b04      	cmp	r3, #4
 8007020:	d00c      	beq.n	800703c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007022:	4b85      	ldr	r3, [pc, #532]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800702a:	2b08      	cmp	r3, #8
 800702c:	d112      	bne.n	8007054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702e:	4b82      	ldr	r3, [pc, #520]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800703a:	d10b      	bne.n	8007054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703c:	4b7e      	ldr	r3, [pc, #504]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d05b      	beq.n	8007100 <HAL_RCC_OscConfig+0x108>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d157      	bne.n	8007100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e242      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800705c:	d106      	bne.n	800706c <HAL_RCC_OscConfig+0x74>
 800705e:	4b76      	ldr	r3, [pc, #472]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a75      	ldr	r2, [pc, #468]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e01d      	b.n	80070a8 <HAL_RCC_OscConfig+0xb0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0x98>
 8007076:	4b70      	ldr	r3, [pc, #448]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a6f      	ldr	r2, [pc, #444]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800707c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b6d      	ldr	r3, [pc, #436]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6c      	ldr	r2, [pc, #432]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e00b      	b.n	80070a8 <HAL_RCC_OscConfig+0xb0>
 8007090:	4b69      	ldr	r3, [pc, #420]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a68      	ldr	r2, [pc, #416]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4b66      	ldr	r3, [pc, #408]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a65      	ldr	r2, [pc, #404]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d013      	beq.n	80070d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b0:	f7fc fa72 	bl	8003598 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fc fa6e 	bl	8003598 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	@ 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e207      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0xc0>
 80070d6:	e014      	b.n	8007102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d8:	f7fc fa5e 	bl	8003598 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e0:	f7fc fa5a 	bl	8003598 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	@ 0x64
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e1f3      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f2:	4b51      	ldr	r3, [pc, #324]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0xe8>
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800710e:	4b4a      	ldr	r3, [pc, #296]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800711a:	4b47      	ldr	r3, [pc, #284]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007122:	2b08      	cmp	r3, #8
 8007124:	d11c      	bne.n	8007160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007126:	4b44      	ldr	r3, [pc, #272]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d116      	bne.n	8007160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007132:	4b41      	ldr	r3, [pc, #260]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_RCC_OscConfig+0x152>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d001      	beq.n	800714a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e1c7      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714a:	4b3b      	ldr	r3, [pc, #236]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4937      	ldr	r1, [pc, #220]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800715a:	4313      	orrs	r3, r2
 800715c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715e:	e03a      	b.n	80071d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d020      	beq.n	80071aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007168:	4b34      	ldr	r3, [pc, #208]	@ (800723c <HAL_RCC_OscConfig+0x244>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716e:	f7fc fa13 	bl	8003598 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007176:	f7fc fa0f 	bl	8003598 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e1a8      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007188:	4b2b      	ldr	r3, [pc, #172]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0f0      	beq.n	8007176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007194:	4b28      	ldr	r3, [pc, #160]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4925      	ldr	r1, [pc, #148]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
 80071a8:	e015      	b.n	80071d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071aa:	4b24      	ldr	r3, [pc, #144]	@ (800723c <HAL_RCC_OscConfig+0x244>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fc f9f2 	bl	8003598 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b8:	f7fc f9ee 	bl	8003598 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e187      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d036      	beq.n	8007250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ea:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <HAL_RCC_OscConfig+0x248>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f0:	f7fc f9d2 	bl	8003598 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f8:	f7fc f9ce 	bl	8003598 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e167      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720a:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <HAL_RCC_OscConfig+0x240>)
 800720c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x200>
 8007216:	e01b      	b.n	8007250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007218:	4b09      	ldr	r3, [pc, #36]	@ (8007240 <HAL_RCC_OscConfig+0x248>)
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721e:	f7fc f9bb 	bl	8003598 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007224:	e00e      	b.n	8007244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007226:	f7fc f9b7 	bl	8003598 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d907      	bls.n	8007244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e150      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
 8007238:	40023800 	.word	0x40023800
 800723c:	42470000 	.word	0x42470000
 8007240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007244:	4b88      	ldr	r3, [pc, #544]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ea      	bne.n	8007226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8097 	beq.w	800738c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007262:	4b81      	ldr	r3, [pc, #516]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10f      	bne.n	800728e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	4b7d      	ldr	r3, [pc, #500]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	4a7c      	ldr	r2, [pc, #496]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800727c:	6413      	str	r3, [r2, #64]	@ 0x40
 800727e:	4b7a      	ldr	r3, [pc, #488]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728e:	4b77      	ldr	r3, [pc, #476]	@ (800746c <HAL_RCC_OscConfig+0x474>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d118      	bne.n	80072cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800729a:	4b74      	ldr	r3, [pc, #464]	@ (800746c <HAL_RCC_OscConfig+0x474>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a73      	ldr	r2, [pc, #460]	@ (800746c <HAL_RCC_OscConfig+0x474>)
 80072a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a6:	f7fc f977 	bl	8003598 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ae:	f7fc f973 	bl	8003598 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e10c      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c0:	4b6a      	ldr	r3, [pc, #424]	@ (800746c <HAL_RCC_OscConfig+0x474>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <HAL_RCC_OscConfig+0x2ea>
 80072d4:	4b64      	ldr	r3, [pc, #400]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d8:	4a63      	ldr	r2, [pc, #396]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e0:	e01c      	b.n	800731c <HAL_RCC_OscConfig+0x324>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d10c      	bne.n	8007304 <HAL_RCC_OscConfig+0x30c>
 80072ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ee:	4a5e      	ldr	r2, [pc, #376]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072f0:	f043 0304 	orr.w	r3, r3, #4
 80072f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fa:	4a5b      	ldr	r2, [pc, #364]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	6713      	str	r3, [r2, #112]	@ 0x70
 8007302:	e00b      	b.n	800731c <HAL_RCC_OscConfig+0x324>
 8007304:	4b58      	ldr	r3, [pc, #352]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007308:	4a57      	ldr	r2, [pc, #348]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007310:	4b55      	ldr	r3, [pc, #340]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007314:	4a54      	ldr	r2, [pc, #336]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007316:	f023 0304 	bic.w	r3, r3, #4
 800731a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d015      	beq.n	8007350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007324:	f7fc f938 	bl	8003598 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732a:	e00a      	b.n	8007342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732c:	f7fc f934 	bl	8003598 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e0cb      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007342:	4b49      	ldr	r3, [pc, #292]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ee      	beq.n	800732c <HAL_RCC_OscConfig+0x334>
 800734e:	e014      	b.n	800737a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007350:	f7fc f922 	bl	8003598 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007356:	e00a      	b.n	800736e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007358:	f7fc f91e 	bl	8003598 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0b5      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736e:	4b3e      	ldr	r3, [pc, #248]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1ee      	bne.n	8007358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d105      	bne.n	800738c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007380:	4b39      	ldr	r3, [pc, #228]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007384:	4a38      	ldr	r2, [pc, #224]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800738a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80a1 	beq.w	80074d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007396:	4b34      	ldr	r3, [pc, #208]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 030c 	and.w	r3, r3, #12
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d05c      	beq.n	800745c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d141      	bne.n	800742e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073aa:	4b31      	ldr	r3, [pc, #196]	@ (8007470 <HAL_RCC_OscConfig+0x478>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fc f8f2 	bl	8003598 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fc f8ee 	bl	8003598 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e087      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ca:	4b27      	ldr	r3, [pc, #156]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69da      	ldr	r2, [r3, #28]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	019b      	lsls	r3, r3, #6
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	3b01      	subs	r3, #1
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	061b      	lsls	r3, r3, #24
 80073fa:	491b      	ldr	r1, [pc, #108]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007400:	4b1b      	ldr	r3, [pc, #108]	@ (8007470 <HAL_RCC_OscConfig+0x478>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007406:	f7fc f8c7 	bl	8003598 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740e:	f7fc f8c3 	bl	8003598 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e05c      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007420:	4b11      	ldr	r3, [pc, #68]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <HAL_RCC_OscConfig+0x416>
 800742c:	e054      	b.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742e:	4b10      	ldr	r3, [pc, #64]	@ (8007470 <HAL_RCC_OscConfig+0x478>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007434:	f7fc f8b0 	bl	8003598 <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743c:	f7fc f8ac 	bl	8003598 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e045      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744e:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <HAL_RCC_OscConfig+0x470>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <HAL_RCC_OscConfig+0x444>
 800745a:	e03d      	b.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d107      	bne.n	8007474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e038      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
 8007468:	40023800 	.word	0x40023800
 800746c:	40007000 	.word	0x40007000
 8007470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007474:	4b1b      	ldr	r3, [pc, #108]	@ (80074e4 <HAL_RCC_OscConfig+0x4ec>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d028      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d121      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d11a      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d111      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	3b01      	subs	r3, #1
 80074be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d107      	bne.n	80074d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d001      	beq.n	80074d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800

080074e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0cc      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074fc:	4b68      	ldr	r3, [pc, #416]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d90c      	bls.n	8007524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800750a:	4b65      	ldr	r3, [pc, #404]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	4b63      	ldr	r3, [pc, #396]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d001      	beq.n	8007524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0b8      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d020      	beq.n	8007572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800753c:	4b59      	ldr	r3, [pc, #356]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4a58      	ldr	r2, [pc, #352]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007554:	4b53      	ldr	r3, [pc, #332]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4a52      	ldr	r2, [pc, #328]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800755e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007560:	4b50      	ldr	r3, [pc, #320]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	494d      	ldr	r1, [pc, #308]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	4313      	orrs	r3, r2
 8007570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d044      	beq.n	8007608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007586:	4b47      	ldr	r3, [pc, #284]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d119      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e07f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d003      	beq.n	80075a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d107      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a6:	4b3f      	ldr	r3, [pc, #252]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e06f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b6:	4b3b      	ldr	r3, [pc, #236]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e067      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075c6:	4b37      	ldr	r3, [pc, #220]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f023 0203 	bic.w	r2, r3, #3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4934      	ldr	r1, [pc, #208]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075d8:	f7fb ffde 	bl	8003598 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	e00a      	b.n	80075f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e0:	f7fb ffda 	bl	8003598 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e04f      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f6:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 020c 	and.w	r2, r3, #12
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	429a      	cmp	r2, r3
 8007606:	d1eb      	bne.n	80075e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007608:	4b25      	ldr	r3, [pc, #148]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d20c      	bcs.n	8007630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b22      	ldr	r3, [pc, #136]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800761e:	4b20      	ldr	r3, [pc, #128]	@ (80076a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d001      	beq.n	8007630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e032      	b.n	8007696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800763c:	4b19      	ldr	r3, [pc, #100]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4916      	ldr	r1, [pc, #88]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800765a:	4b12      	ldr	r3, [pc, #72]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	490e      	ldr	r1, [pc, #56]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800766e:	f000 f821 	bl	80076b4 <HAL_RCC_GetSysClockFreq>
 8007672:	4602      	mov	r2, r0
 8007674:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	490a      	ldr	r1, [pc, #40]	@ (80076a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007680:	5ccb      	ldrb	r3, [r1, r3]
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	4a09      	ldr	r2, [pc, #36]	@ (80076ac <HAL_RCC_ClockConfig+0x1c4>)
 8007688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f7fb ff3e 	bl	8003510 <HAL_InitTick>

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40023c00 	.word	0x40023c00
 80076a4:	40023800 	.word	0x40023800
 80076a8:	08011010 	.word	0x08011010
 80076ac:	2000003c 	.word	0x2000003c
 80076b0:	20000040 	.word	0x20000040

080076b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b090      	sub	sp, #64	@ 0x40
 80076ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076cc:	4b59      	ldr	r3, [pc, #356]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 030c 	and.w	r3, r3, #12
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d00d      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x40>
 80076d8:	2b08      	cmp	r3, #8
 80076da:	f200 80a1 	bhi.w	8007820 <HAL_RCC_GetSysClockFreq+0x16c>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x34>
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d003      	beq.n	80076ee <HAL_RCC_GetSysClockFreq+0x3a>
 80076e6:	e09b      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076e8:	4b53      	ldr	r3, [pc, #332]	@ (8007838 <HAL_RCC_GetSysClockFreq+0x184>)
 80076ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076ec:	e09b      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ee:	4b53      	ldr	r3, [pc, #332]	@ (800783c <HAL_RCC_GetSysClockFreq+0x188>)
 80076f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076f2:	e098      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076fe:	4b4d      	ldr	r3, [pc, #308]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d028      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800770a:	4b4a      	ldr	r3, [pc, #296]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	099b      	lsrs	r3, r3, #6
 8007710:	2200      	movs	r2, #0
 8007712:	623b      	str	r3, [r7, #32]
 8007714:	627a      	str	r2, [r7, #36]	@ 0x24
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800771c:	2100      	movs	r1, #0
 800771e:	4b47      	ldr	r3, [pc, #284]	@ (800783c <HAL_RCC_GetSysClockFreq+0x188>)
 8007720:	fb03 f201 	mul.w	r2, r3, r1
 8007724:	2300      	movs	r3, #0
 8007726:	fb00 f303 	mul.w	r3, r0, r3
 800772a:	4413      	add	r3, r2
 800772c:	4a43      	ldr	r2, [pc, #268]	@ (800783c <HAL_RCC_GetSysClockFreq+0x188>)
 800772e:	fba0 1202 	umull	r1, r2, r0, r2
 8007732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007734:	460a      	mov	r2, r1
 8007736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800773a:	4413      	add	r3, r2
 800773c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800773e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007740:	2200      	movs	r2, #0
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	61fa      	str	r2, [r7, #28]
 8007746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800774a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800774e:	f7f9 fa7b 	bl	8000c48 <__aeabi_uldivmod>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4613      	mov	r3, r2
 8007758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800775a:	e053      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800775c:	4b35      	ldr	r3, [pc, #212]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	099b      	lsrs	r3, r3, #6
 8007762:	2200      	movs	r2, #0
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	617a      	str	r2, [r7, #20]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800776e:	f04f 0b00 	mov.w	fp, #0
 8007772:	4652      	mov	r2, sl
 8007774:	465b      	mov	r3, fp
 8007776:	f04f 0000 	mov.w	r0, #0
 800777a:	f04f 0100 	mov.w	r1, #0
 800777e:	0159      	lsls	r1, r3, #5
 8007780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007784:	0150      	lsls	r0, r2, #5
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	ebb2 080a 	subs.w	r8, r2, sl
 800778e:	eb63 090b 	sbc.w	r9, r3, fp
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800779e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80077a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80077a6:	ebb2 0408 	subs.w	r4, r2, r8
 80077aa:	eb63 0509 	sbc.w	r5, r3, r9
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	00eb      	lsls	r3, r5, #3
 80077b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077bc:	00e2      	lsls	r2, r4, #3
 80077be:	4614      	mov	r4, r2
 80077c0:	461d      	mov	r5, r3
 80077c2:	eb14 030a 	adds.w	r3, r4, sl
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	eb45 030b 	adc.w	r3, r5, fp
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077da:	4629      	mov	r1, r5
 80077dc:	028b      	lsls	r3, r1, #10
 80077de:	4621      	mov	r1, r4
 80077e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077e4:	4621      	mov	r1, r4
 80077e6:	028a      	lsls	r2, r1, #10
 80077e8:	4610      	mov	r0, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ee:	2200      	movs	r2, #0
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077f8:	f7f9 fa26 	bl	8000c48 <__aeabi_uldivmod>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4613      	mov	r3, r2
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x180>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	3301      	adds	r3, #1
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800781e:	e002      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <HAL_RCC_GetSysClockFreq+0x184>)
 8007822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007828:	4618      	mov	r0, r3
 800782a:	3740      	adds	r7, #64	@ 0x40
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007832:	bf00      	nop
 8007834:	40023800 	.word	0x40023800
 8007838:	00f42400 	.word	0x00f42400
 800783c:	00b71b00 	.word	0x00b71b00

08007840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007844:	4b03      	ldr	r3, [pc, #12]	@ (8007854 <HAL_RCC_GetHCLKFreq+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	2000003c 	.word	0x2000003c

08007858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800785c:	f7ff fff0 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	0a9b      	lsrs	r3, r3, #10
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	4903      	ldr	r1, [pc, #12]	@ (800787c <HAL_RCC_GetPCLK1Freq+0x24>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007874:	4618      	mov	r0, r3
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40023800 	.word	0x40023800
 800787c:	08011020 	.word	0x08011020

08007880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007884:	f7ff ffdc 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 8007888:	4602      	mov	r2, r0
 800788a:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	0b5b      	lsrs	r3, r3, #13
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	4903      	ldr	r1, [pc, #12]	@ (80078a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007896:	5ccb      	ldrb	r3, [r1, r3]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40023800 	.word	0x40023800
 80078a4:	08011020 	.word	0x08011020

080078a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e07b      	b.n	80079b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d108      	bne.n	80078d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ca:	d009      	beq.n	80078e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	61da      	str	r2, [r3, #28]
 80078d2:	e005      	b.n	80078e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fb fc44 	bl	8003188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007964:	ea42 0103 	orr.w	r1, r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	f003 0104 	and.w	r1, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	f003 0210 	and.w	r2, r3, #16
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b088      	sub	sp, #32
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079ca:	f7fb fde5 	bl	8003598 <HAL_GetTick>
 80079ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d001      	beq.n	80079e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
 80079e2:	e12a      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_Transmit+0x36>
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e122      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_SPI_Transmit+0x48>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e11b      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a50:	d10f      	bne.n	8007a72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	d007      	beq.n	8007a90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a98:	d152      	bne.n	8007b40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_Transmit+0xee>
 8007aa2:	8b7b      	ldrh	r3, [r7, #26]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d145      	bne.n	8007b34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aac:	881a      	ldrh	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	1c9a      	adds	r2, r3, #2
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007acc:	e032      	b.n	8007b34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d112      	bne.n	8007b02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b00:	e018      	b.n	8007b34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b02:	f7fb fd49 	bl	8003598 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d803      	bhi.n	8007b1a <HAL_SPI_Transmit+0x160>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d102      	bne.n	8007b20 <HAL_SPI_Transmit+0x166>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e082      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1c7      	bne.n	8007ace <HAL_SPI_Transmit+0x114>
 8007b3e:	e053      	b.n	8007be8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_SPI_Transmit+0x194>
 8007b48:	8b7b      	ldrh	r3, [r7, #26]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d147      	bne.n	8007bde <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	7812      	ldrb	r2, [r2, #0]
 8007b5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b74:	e033      	b.n	8007bde <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d113      	bne.n	8007bac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007baa:	e018      	b.n	8007bde <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bac:	f7fb fcf4 	bl	8003598 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d803      	bhi.n	8007bc4 <HAL_SPI_Transmit+0x20a>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d102      	bne.n	8007bca <HAL_SPI_Transmit+0x210>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e02d      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1c6      	bne.n	8007b76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fa59 	bl	80080a4 <SPI_EndRxTxTransaction>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b08a      	sub	sp, #40	@ 0x28
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
 8007c4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c50:	2301      	movs	r3, #1
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c54:	f7fb fca0 	bl	8003598 <HAL_GetTick>
 8007c58:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c60:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c68:	887b      	ldrh	r3, [r7, #2]
 8007c6a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c6c:	7ffb      	ldrb	r3, [r7, #31]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d00c      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x4a>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c78:	d106      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x46>
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d001      	beq.n	8007c8c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e17f      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x5c>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x5c>
 8007c98:	887b      	ldrh	r3, [r7, #2]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e174      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x6e>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e16d      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d003      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	887a      	ldrh	r2, [r7, #2]
 8007cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	887a      	ldrh	r2, [r7, #2]
 8007ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	887a      	ldrh	r2, [r7, #2]
 8007cee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b40      	cmp	r3, #64	@ 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d28:	d17e      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0xf6>
 8007d32:	8afb      	ldrh	r3, [r7, #22]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d16c      	bne.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d5c:	e059      	b.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d11b      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d113      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d119      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x1a4>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d014      	beq.n	8007de6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007de2:	2301      	movs	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007de6:	f7fb fbd7 	bl	8003598 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d80d      	bhi.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d009      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e0bc      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1a0      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x11c>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d19b      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x11c>
 8007e26:	e082      	b.n	8007f2e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_SPI_TransmitReceive+0x1f4>
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d171      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e5c:	e05d      	b.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d11c      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d114      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d119      	bne.n	8007ee8 <HAL_SPI_TransmitReceive+0x2a6>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d014      	beq.n	8007ee8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ee8:	f7fb fb56 	bl	8003598 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d803      	bhi.n	8007f00 <HAL_SPI_TransmitReceive+0x2be>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d102      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x2c4>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e038      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d19c      	bne.n	8007e5e <HAL_SPI_TransmitReceive+0x21c>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d197      	bne.n	8007e5e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f2e:	6a3a      	ldr	r2, [r7, #32]
 8007f30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f8b6 	bl	80080a4 <SPI_EndRxTxTransaction>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e01d      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
  }
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3728      	adds	r7, #40	@ 0x28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fa4:	f7fb faf8 	bl	8003598 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fb4:	f7fb faf0 	bl	8003598 <HAL_GetTick>
 8007fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fba:	4b39      	ldr	r3, [pc, #228]	@ (80080a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	015b      	lsls	r3, r3, #5
 8007fc0:	0d1b      	lsrs	r3, r3, #20
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	fb02 f303 	mul.w	r3, r2, r3
 8007fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fca:	e055      	b.n	8008078 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd2:	d051      	beq.n	8008078 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fd4:	f7fb fae0 	bl	8003598 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d902      	bls.n	8007fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d13d      	bne.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008002:	d111      	bne.n	8008028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800c:	d004      	beq.n	8008018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008016:	d107      	bne.n	8008028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008030:	d10f      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e018      	b.n	8008098 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e002      	b.n	8008078 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3b01      	subs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4013      	ands	r3, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	429a      	cmp	r2, r3
 8008086:	bf0c      	ite	eq
 8008088:	2301      	moveq	r3, #1
 800808a:	2300      	movne	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	429a      	cmp	r2, r3
 8008094:	d19a      	bne.n	8007fcc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	2000003c 	.word	0x2000003c

080080a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2201      	movs	r2, #1
 80080b8:	2102      	movs	r1, #2
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff6a 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ca:	f043 0220 	orr.w	r2, r3, #32
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e032      	b.n	800813c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008144 <SPI_EndRxTxTransaction+0xa0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1b      	ldr	r2, [pc, #108]	@ (8008148 <SPI_EndRxTxTransaction+0xa4>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	0d5b      	lsrs	r3, r3, #21
 80080e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080e6:	fb02 f303 	mul.w	r3, r2, r3
 80080ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080f4:	d112      	bne.n	800811c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	2180      	movs	r1, #128	@ 0x80
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff ff47 	bl	8007f94 <SPI_WaitFlagStateUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d016      	beq.n	800813a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e00f      	b.n	800813c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	3b01      	subs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008132:	2b80      	cmp	r3, #128	@ 0x80
 8008134:	d0f2      	beq.n	800811c <SPI_EndRxTxTransaction+0x78>
 8008136:	e000      	b.n	800813a <SPI_EndRxTxTransaction+0x96>
        break;
 8008138:	bf00      	nop
  }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	2000003c 	.word	0x2000003c
 8008148:	165e9f81 	.word	0x165e9f81

0800814c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e041      	b.n	80081e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fb f850 	bl	8003218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f000 faa6 	bl	80086dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e046      	b.n	8008292 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a23      	ldr	r2, [pc, #140]	@ (80082a0 <HAL_TIM_Base_Start+0xb4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d022      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821e:	d01d      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1f      	ldr	r2, [pc, #124]	@ (80082a4 <HAL_TIM_Base_Start+0xb8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1e      	ldr	r2, [pc, #120]	@ (80082a8 <HAL_TIM_Base_Start+0xbc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1c      	ldr	r2, [pc, #112]	@ (80082ac <HAL_TIM_Base_Start+0xc0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1b      	ldr	r2, [pc, #108]	@ (80082b0 <HAL_TIM_Base_Start+0xc4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a19      	ldr	r2, [pc, #100]	@ (80082b4 <HAL_TIM_Base_Start+0xc8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_Base_Start+0x70>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a18      	ldr	r2, [pc, #96]	@ (80082b8 <HAL_TIM_Base_Start+0xcc>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d111      	bne.n	8008280 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b06      	cmp	r3, #6
 800826c:	d010      	beq.n	8008290 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827e:	e007      	b.n	8008290 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0201 	orr.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40000c00 	.word	0x40000c00
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40001800 	.word	0x40001800

080082bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a1a      	ldr	r2, [r3, #32]
 80082ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10f      	bne.n	80082f4 <HAL_TIM_Base_Stop+0x38>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	f240 4344 	movw	r3, #1092	@ 0x444
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_Base_Stop+0x38>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d020      	beq.n	800836e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01b      	beq.n	800836e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f06f 0202 	mvn.w	r2, #2
 800833e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9a3 	bl	80086a0 <HAL_TIM_IC_CaptureCallback>
 800835a:	e005      	b.n	8008368 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f995 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9a6 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d020      	beq.n	80083ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01b      	beq.n	80083ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f06f 0204 	mvn.w	r2, #4
 800838a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f97d 	bl	80086a0 <HAL_TIM_IC_CaptureCallback>
 80083a6:	e005      	b.n	80083b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f96f 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f980 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d020      	beq.n	8008406 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01b      	beq.n	8008406 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f06f 0208 	mvn.w	r2, #8
 80083d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2204      	movs	r2, #4
 80083dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f957 	bl	80086a0 <HAL_TIM_IC_CaptureCallback>
 80083f2:	e005      	b.n	8008400 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f949 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f95a 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b00      	cmp	r3, #0
 800840e:	d020      	beq.n	8008452 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01b      	beq.n	8008452 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f06f 0210 	mvn.w	r2, #16
 8008422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2208      	movs	r2, #8
 8008428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f931 	bl	80086a0 <HAL_TIM_IC_CaptureCallback>
 800843e:	e005      	b.n	800844c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f923 	bl	800868c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f934 	bl	80086b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00c      	beq.n	8008476 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f06f 0201 	mvn.w	r2, #1
 800846e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f901 	bl	8008678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fae7 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00c      	beq.n	80084be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f905 	bl	80086c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d007      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f06f 0220 	mvn.w	r2, #32
 80084da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fab9 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <HAL_TIM_ConfigClockSource+0x1c>
 8008502:	2302      	movs	r3, #2
 8008504:	e0b4      	b.n	8008670 <HAL_TIM_ConfigClockSource+0x186>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2202      	movs	r2, #2
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008524:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800852c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853e:	d03e      	beq.n	80085be <HAL_TIM_ConfigClockSource+0xd4>
 8008540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008544:	f200 8087 	bhi.w	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 8008548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854c:	f000 8086 	beq.w	800865c <HAL_TIM_ConfigClockSource+0x172>
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008554:	d87f      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 8008556:	2b70      	cmp	r3, #112	@ 0x70
 8008558:	d01a      	beq.n	8008590 <HAL_TIM_ConfigClockSource+0xa6>
 800855a:	2b70      	cmp	r3, #112	@ 0x70
 800855c:	d87b      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 800855e:	2b60      	cmp	r3, #96	@ 0x60
 8008560:	d050      	beq.n	8008604 <HAL_TIM_ConfigClockSource+0x11a>
 8008562:	2b60      	cmp	r3, #96	@ 0x60
 8008564:	d877      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 8008566:	2b50      	cmp	r3, #80	@ 0x50
 8008568:	d03c      	beq.n	80085e4 <HAL_TIM_ConfigClockSource+0xfa>
 800856a:	2b50      	cmp	r3, #80	@ 0x50
 800856c:	d873      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d058      	beq.n	8008624 <HAL_TIM_ConfigClockSource+0x13a>
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	d86f      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 8008576:	2b30      	cmp	r3, #48	@ 0x30
 8008578:	d064      	beq.n	8008644 <HAL_TIM_ConfigClockSource+0x15a>
 800857a:	2b30      	cmp	r3, #48	@ 0x30
 800857c:	d86b      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 800857e:	2b20      	cmp	r3, #32
 8008580:	d060      	beq.n	8008644 <HAL_TIM_ConfigClockSource+0x15a>
 8008582:	2b20      	cmp	r3, #32
 8008584:	d867      	bhi.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d05c      	beq.n	8008644 <HAL_TIM_ConfigClockSource+0x15a>
 800858a:	2b10      	cmp	r3, #16
 800858c:	d05a      	beq.n	8008644 <HAL_TIM_ConfigClockSource+0x15a>
 800858e:	e062      	b.n	8008656 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085a0:	f000 f9bc 	bl	800891c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	609a      	str	r2, [r3, #8]
      break;
 80085bc:	e04f      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085ce:	f000 f9a5 	bl	800891c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085e0:	609a      	str	r2, [r3, #8]
      break;
 80085e2:	e03c      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085f0:	461a      	mov	r2, r3
 80085f2:	f000 f919 	bl	8008828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2150      	movs	r1, #80	@ 0x50
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f972 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008602:	e02c      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008610:	461a      	mov	r2, r3
 8008612:	f000 f938 	bl	8008886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2160      	movs	r1, #96	@ 0x60
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f962 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008622:	e01c      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008630:	461a      	mov	r2, r3
 8008632:	f000 f8f9 	bl	8008828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2140      	movs	r1, #64	@ 0x40
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f952 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008642:	e00c      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f000 f949 	bl	80088e6 <TIM_ITRx_SetConfig>
      break;
 8008654:	e003      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e000      	b.n	800865e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800865c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a43      	ldr	r2, [pc, #268]	@ (80087fc <TIM_Base_SetConfig+0x120>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d013      	beq.n	800871c <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fa:	d00f      	beq.n	800871c <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a40      	ldr	r2, [pc, #256]	@ (8008800 <TIM_Base_SetConfig+0x124>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00b      	beq.n	800871c <TIM_Base_SetConfig+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a3f      	ldr	r2, [pc, #252]	@ (8008804 <TIM_Base_SetConfig+0x128>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d007      	beq.n	800871c <TIM_Base_SetConfig+0x40>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a3e      	ldr	r2, [pc, #248]	@ (8008808 <TIM_Base_SetConfig+0x12c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_Base_SetConfig+0x40>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a3d      	ldr	r2, [pc, #244]	@ (800880c <TIM_Base_SetConfig+0x130>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d108      	bne.n	800872e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a32      	ldr	r2, [pc, #200]	@ (80087fc <TIM_Base_SetConfig+0x120>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02b      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873c:	d027      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a2f      	ldr	r2, [pc, #188]	@ (8008800 <TIM_Base_SetConfig+0x124>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d023      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a2e      	ldr	r2, [pc, #184]	@ (8008804 <TIM_Base_SetConfig+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d01f      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a2d      	ldr	r2, [pc, #180]	@ (8008808 <TIM_Base_SetConfig+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01b      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a2c      	ldr	r2, [pc, #176]	@ (800880c <TIM_Base_SetConfig+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d017      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a2b      	ldr	r2, [pc, #172]	@ (8008810 <TIM_Base_SetConfig+0x134>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2a      	ldr	r2, [pc, #168]	@ (8008814 <TIM_Base_SetConfig+0x138>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a29      	ldr	r2, [pc, #164]	@ (8008818 <TIM_Base_SetConfig+0x13c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a28      	ldr	r2, [pc, #160]	@ (800881c <TIM_Base_SetConfig+0x140>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a27      	ldr	r2, [pc, #156]	@ (8008820 <TIM_Base_SetConfig+0x144>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a26      	ldr	r2, [pc, #152]	@ (8008824 <TIM_Base_SetConfig+0x148>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d108      	bne.n	80087a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a0e      	ldr	r2, [pc, #56]	@ (80087fc <TIM_Base_SetConfig+0x120>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d003      	beq.n	80087ce <TIM_Base_SetConfig+0xf2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a10      	ldr	r2, [pc, #64]	@ (800880c <TIM_Base_SetConfig+0x130>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d103      	bne.n	80087d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f043 0204 	orr.w	r2, r3, #4
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40010400 	.word	0x40010400
 8008810:	40014000 	.word	0x40014000
 8008814:	40014400 	.word	0x40014400
 8008818:	40014800 	.word	0x40014800
 800881c:	40001800 	.word	0x40001800
 8008820:	40001c00 	.word	0x40001c00
 8008824:	40002000 	.word	0x40002000

08008828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0201 	bic.w	r2, r3, #1
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f023 030a 	bic.w	r3, r3, #10
 8008864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	f023 0210 	bic.w	r2, r3, #16
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	031b      	lsls	r3, r3, #12
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	f043 0307 	orr.w	r3, r3, #7
 8008908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	021a      	lsls	r2, r3, #8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	431a      	orrs	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4313      	orrs	r3, r2
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008970:	2302      	movs	r3, #2
 8008972:	e05a      	b.n	8008a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a21      	ldr	r2, [pc, #132]	@ (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d022      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c0:	d01d      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1d      	ldr	r2, [pc, #116]	@ (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1a      	ldr	r2, [pc, #104]	@ (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a18      	ldr	r2, [pc, #96]	@ (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a17      	ldr	r2, [pc, #92]	@ (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a15      	ldr	r2, [pc, #84]	@ (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d10c      	bne.n	8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00
 8008a48:	40010400 	.word	0x40010400
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40001800 	.word	0x40001800

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	f107 001c 	add.w	r0, r7, #28
 8008a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d123      	bne.n	8008ade <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008abe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d105      	bne.n	8008ad2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fae8 	bl	800a0a8 <USB_CoreReset>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
 8008adc:	e01b      	b.n	8008b16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fadc 	bl	800a0a8 <USB_CoreReset>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b08:	e005      	b.n	8008b16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b16:	7fbb      	ldrb	r3, [r7, #30]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d10b      	bne.n	8008b34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f043 0206 	orr.w	r2, r3, #6
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f043 0220 	orr.w	r2, r3, #32
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b40:	b004      	add	sp, #16
 8008b42:	4770      	bx	lr

08008b44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d165      	bne.n	8008c24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4a41      	ldr	r2, [pc, #260]	@ (8008c60 <USB_SetTurnaroundTime+0x11c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d906      	bls.n	8008b6e <USB_SetTurnaroundTime+0x2a>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4a40      	ldr	r2, [pc, #256]	@ (8008c64 <USB_SetTurnaroundTime+0x120>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d202      	bcs.n	8008b6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b68:	230f      	movs	r3, #15
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e062      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4a3c      	ldr	r2, [pc, #240]	@ (8008c64 <USB_SetTurnaroundTime+0x120>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d306      	bcc.n	8008b84 <USB_SetTurnaroundTime+0x40>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4a3b      	ldr	r2, [pc, #236]	@ (8008c68 <USB_SetTurnaroundTime+0x124>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d202      	bcs.n	8008b84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b7e:	230e      	movs	r3, #14
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e057      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4a38      	ldr	r2, [pc, #224]	@ (8008c68 <USB_SetTurnaroundTime+0x124>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d306      	bcc.n	8008b9a <USB_SetTurnaroundTime+0x56>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4a37      	ldr	r2, [pc, #220]	@ (8008c6c <USB_SetTurnaroundTime+0x128>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d202      	bcs.n	8008b9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b94:	230d      	movs	r3, #13
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	e04c      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4a33      	ldr	r2, [pc, #204]	@ (8008c6c <USB_SetTurnaroundTime+0x128>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d306      	bcc.n	8008bb0 <USB_SetTurnaroundTime+0x6c>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	4a32      	ldr	r2, [pc, #200]	@ (8008c70 <USB_SetTurnaroundTime+0x12c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008baa:	230c      	movs	r3, #12
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e041      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8008c70 <USB_SetTurnaroundTime+0x12c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d906      	bls.n	8008bc6 <USB_SetTurnaroundTime+0x82>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a2e      	ldr	r2, [pc, #184]	@ (8008c74 <USB_SetTurnaroundTime+0x130>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d802      	bhi.n	8008bc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bc0:	230b      	movs	r3, #11
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	e036      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8008c74 <USB_SetTurnaroundTime+0x130>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d906      	bls.n	8008bdc <USB_SetTurnaroundTime+0x98>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4a29      	ldr	r2, [pc, #164]	@ (8008c78 <USB_SetTurnaroundTime+0x134>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d802      	bhi.n	8008bdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e02b      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4a26      	ldr	r2, [pc, #152]	@ (8008c78 <USB_SetTurnaroundTime+0x134>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d906      	bls.n	8008bf2 <USB_SetTurnaroundTime+0xae>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4a25      	ldr	r2, [pc, #148]	@ (8008c7c <USB_SetTurnaroundTime+0x138>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d202      	bcs.n	8008bf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bec:	2309      	movs	r3, #9
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e020      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a21      	ldr	r2, [pc, #132]	@ (8008c7c <USB_SetTurnaroundTime+0x138>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d306      	bcc.n	8008c08 <USB_SetTurnaroundTime+0xc4>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	@ (8008c80 <USB_SetTurnaroundTime+0x13c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d802      	bhi.n	8008c08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c02:	2308      	movs	r3, #8
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e015      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <USB_SetTurnaroundTime+0x13c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d906      	bls.n	8008c1e <USB_SetTurnaroundTime+0xda>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	@ (8008c84 <USB_SetTurnaroundTime+0x140>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d202      	bcs.n	8008c1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c18:	2307      	movs	r3, #7
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e00a      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c1e:	2306      	movs	r3, #6
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e007      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c2a:	2309      	movs	r3, #9
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e001      	b.n	8008c34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c30:	2309      	movs	r3, #9
 8008c32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	029b      	lsls	r3, r3, #10
 8008c48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	371c      	adds	r7, #28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	00d8acbf 	.word	0x00d8acbf
 8008c64:	00e4e1c0 	.word	0x00e4e1c0
 8008c68:	00f42400 	.word	0x00f42400
 8008c6c:	01067380 	.word	0x01067380
 8008c70:	011a499f 	.word	0x011a499f
 8008c74:	01312cff 	.word	0x01312cff
 8008c78:	014ca43f 	.word	0x014ca43f
 8008c7c:	016e3600 	.word	0x016e3600
 8008c80:	01a6ab1f 	.word	0x01a6ab1f
 8008c84:	01e84800 	.word	0x01e84800

08008c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f043 0201 	orr.w	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d115      	bne.n	8008d1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008cfa:	200a      	movs	r0, #10
 8008cfc:	f7fa fc58 	bl	80035b0 <HAL_Delay>
      ms += 10U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	330a      	adds	r3, #10
 8008d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f93f 	bl	8009f8a <USB_GetMode>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d01e      	beq.n	8008d50 <USB_SetCurrentMode+0x84>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d16:	d9f0      	bls.n	8008cfa <USB_SetCurrentMode+0x2e>
 8008d18:	e01a      	b.n	8008d50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d115      	bne.n	8008d4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d2c:	200a      	movs	r0, #10
 8008d2e:	f7fa fc3f 	bl	80035b0 <HAL_Delay>
      ms += 10U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	330a      	adds	r3, #10
 8008d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 f926 	bl	8009f8a <USB_GetMode>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <USB_SetCurrentMode+0x84>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d48:	d9f0      	bls.n	8008d2c <USB_SetCurrentMode+0x60>
 8008d4a:	e001      	b.n	8008d50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e005      	b.n	8008d5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2bc8      	cmp	r3, #200	@ 0xc8
 8008d54:	d101      	bne.n	8008d5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d64:	b084      	sub	sp, #16
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	e009      	b.n	8008d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3340      	adds	r3, #64	@ 0x40
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b0e      	cmp	r3, #14
 8008d9c:	d9f2      	bls.n	8008d84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d11c      	bne.n	8008de0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008db4:	f043 0302 	orr.w	r3, r3, #2
 8008db8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	@ 0x38
 8008dde:	e00b      	b.n	8008df8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2300      	movs	r3, #0
 8008e02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d10d      	bne.n	8008e28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e14:	2100      	movs	r1, #0
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f968 	bl	80090ec <USB_SetDevSpeed>
 8008e1c:	e008      	b.n	8008e30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e1e:	2101      	movs	r1, #1
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f963 	bl	80090ec <USB_SetDevSpeed>
 8008e26:	e003      	b.n	8008e30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e28:	2103      	movs	r1, #3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f95e 	bl	80090ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e30:	2110      	movs	r1, #16
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8fa 	bl	800902c <USB_FlushTxFifo>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f924 	bl	8009090 <USB_FlushRxFifo>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e70:	461a      	mov	r2, r3
 8008e72:	2300      	movs	r3, #0
 8008e74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e76:	2300      	movs	r3, #0
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	e043      	b.n	8008f04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e92:	d118      	bne.n	8008ec6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10a      	bne.n	8008eb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e013      	b.n	8008ed8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e008      	b.n	8008ed8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008efc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3301      	adds	r3, #1
 8008f02:	613b      	str	r3, [r7, #16]
 8008f04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f08:	461a      	mov	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d3b5      	bcc.n	8008e7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	e043      	b.n	8008f9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f2c:	d118      	bne.n	8008f60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f40:	461a      	mov	r2, r3
 8008f42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e013      	b.n	8008f72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e008      	b.n	8008f72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f90:	461a      	mov	r2, r3
 8008f92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d3b5      	bcc.n	8008f16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008fca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f043 0210 	orr.w	r2, r3, #16
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	4b10      	ldr	r3, [pc, #64]	@ (8009028 <USB_DevInit+0x2c4>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f043 0208 	orr.w	r2, r3, #8
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009000:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009004:	2b01      	cmp	r3, #1
 8009006:	d107      	bne.n	8009018 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009010:	f043 0304 	orr.w	r3, r3, #4
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009024:	b004      	add	sp, #16
 8009026:	4770      	bx	lr
 8009028:	803c3800 	.word	0x803c3800

0800902c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	3301      	adds	r3, #1
 800903e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009046:	d901      	bls.n	800904c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e01b      	b.n	8009084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	daf2      	bge.n	800903a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	019b      	lsls	r3, r3, #6
 800905c:	f043 0220 	orr.w	r2, r3, #32
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3301      	adds	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009070:	d901      	bls.n	8009076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e006      	b.n	8009084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b20      	cmp	r3, #32
 8009080:	d0f0      	beq.n	8009064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090a8:	d901      	bls.n	80090ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e018      	b.n	80090e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	daf2      	bge.n	800909c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2210      	movs	r2, #16
 80090be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090cc:	d901      	bls.n	80090d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e006      	b.n	80090e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d0f0      	beq.n	80090c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800910c:	4313      	orrs	r3, r2
 800910e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800911e:	b480      	push	{r7}
 8009120:	b087      	sub	sp, #28
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0306 	and.w	r3, r3, #6
 8009136:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
 8009142:	e00a      	b.n	800915a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d002      	beq.n	8009150 <USB_GetDevSpeed+0x32>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b06      	cmp	r3, #6
 800914e:	d102      	bne.n	8009156 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009150:	2302      	movs	r3, #2
 8009152:	75fb      	strb	r3, [r7, #23]
 8009154:	e001      	b.n	800915a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009156:	230f      	movs	r3, #15
 8009158:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
}
 800915c:	4618      	mov	r0, r3
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d13a      	bne.n	80091fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	2101      	movs	r1, #1
 8009196:	fa01 f303 	lsl.w	r3, r1, r3
 800919a:	b29b      	uxth	r3, r3
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091a2:	4313      	orrs	r3, r2
 80091a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d155      	bne.n	8009268 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	791b      	ldrb	r3, [r3, #4]
 80091d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	059b      	lsls	r3, r3, #22
 80091de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091e0:	4313      	orrs	r3, r2
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	e036      	b.n	8009268 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009200:	69da      	ldr	r2, [r3, #28]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	2101      	movs	r1, #1
 800920c:	fa01 f303 	lsl.w	r3, r1, r3
 8009210:	041b      	lsls	r3, r3, #16
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009218:	4313      	orrs	r3, r2
 800921a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d11a      	bne.n	8009268 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	791b      	ldrb	r3, [r3, #4]
 800924c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800924e:	430b      	orrs	r3, r1
 8009250:	4313      	orrs	r3, r2
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	0151      	lsls	r1, r2, #5
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	440a      	add	r2, r1
 800925a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800925e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009266:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
	...

08009278 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d161      	bne.n	8009358 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092aa:	d11f      	bne.n	80092ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	0151      	lsls	r1, r2, #5
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	440a      	add	r2, r1
 80092c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	0151      	lsls	r1, r2, #5
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	440a      	add	r2, r1
 80092e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009302:	b29b      	uxth	r3, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800930c:	4013      	ands	r3, r2
 800930e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	2101      	movs	r1, #1
 8009322:	fa01 f303 	lsl.w	r3, r1, r3
 8009326:	b29b      	uxth	r3, r3
 8009328:	43db      	mvns	r3, r3
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009330:	4013      	ands	r3, r2
 8009332:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0159      	lsls	r1, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	440b      	add	r3, r1
 800934a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934e:	4619      	mov	r1, r3
 8009350:	4b35      	ldr	r3, [pc, #212]	@ (8009428 <USB_DeactivateEndpoint+0x1b0>)
 8009352:	4013      	ands	r3, r2
 8009354:	600b      	str	r3, [r1, #0]
 8009356:	e060      	b.n	800941a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800936a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800936e:	d11f      	bne.n	80093b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800938a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800938e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	2101      	movs	r1, #1
 80093c2:	fa01 f303 	lsl.w	r3, r1, r3
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	43db      	mvns	r3, r3
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093d0:	4013      	ands	r3, r2
 80093d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093da:	69da      	ldr	r2, [r3, #28]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	2101      	movs	r1, #1
 80093e6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	43db      	mvns	r3, r3
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093f4:	4013      	ands	r3, r2
 80093f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	0159      	lsls	r1, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	440b      	add	r3, r1
 800940e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009412:	4619      	mov	r1, r3
 8009414:	4b05      	ldr	r3, [pc, #20]	@ (800942c <USB_DeactivateEndpoint+0x1b4>)
 8009416:	4013      	ands	r3, r2
 8009418:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	ec337800 	.word	0xec337800
 800942c:	eff37800 	.word	0xeff37800

08009430 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	@ 0x28
 8009434:	af02      	add	r7, sp, #8
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b01      	cmp	r3, #1
 800944e:	f040 817f 	bne.w	8009750 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d132      	bne.n	80094c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009474:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009478:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800947c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009498:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800949c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b8:	0cdb      	lsrs	r3, r3, #19
 80094ba:	04db      	lsls	r3, r3, #19
 80094bc:	6113      	str	r3, [r2, #16]
 80094be:	e097      	b.n	80095f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094da:	0cdb      	lsrs	r3, r3, #19
 80094dc:	04db      	lsls	r3, r3, #19
 80094de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009502:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d11a      	bne.n	8009540 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	d903      	bls.n	800951e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	69fa      	ldr	r2, [r7, #28]
 8009532:	440a      	add	r2, r1
 8009534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009538:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800953c:	6113      	str	r3, [r2, #16]
 800953e:	e044      	b.n	80095ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	4413      	add	r3, r2
 800954a:	1e5a      	subs	r2, r3, #1
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	fbb2 f3f3 	udiv	r3, r2, r3
 8009554:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	8afb      	ldrh	r3, [r7, #22]
 8009566:	04d9      	lsls	r1, r3, #19
 8009568:	4ba4      	ldr	r3, [pc, #656]	@ (80097fc <USB_EPStartXfer+0x3cc>)
 800956a:	400b      	ands	r3, r1
 800956c:	69b9      	ldr	r1, [r7, #24]
 800956e:	0148      	lsls	r0, r1, #5
 8009570:	69f9      	ldr	r1, [r7, #28]
 8009572:	4401      	add	r1, r0
 8009574:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009578:	4313      	orrs	r3, r2
 800957a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	791b      	ldrb	r3, [r3, #4]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d122      	bne.n	80095ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	440a      	add	r2, r1
 800959a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800959e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80095a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	8afb      	ldrh	r3, [r7, #22]
 80095b4:	075b      	lsls	r3, r3, #29
 80095b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80095ba:	69b9      	ldr	r1, [r7, #24]
 80095bc:	0148      	lsls	r0, r1, #5
 80095be:	69f9      	ldr	r1, [r7, #28]
 80095c0:	4401      	add	r1, r0
 80095c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095c6:	4313      	orrs	r3, r2
 80095c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095e0:	69b9      	ldr	r1, [r7, #24]
 80095e2:	0148      	lsls	r0, r1, #5
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	4401      	add	r1, r0
 80095e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095ec:	4313      	orrs	r3, r2
 80095ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d14b      	bne.n	800968e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800960a:	461a      	mov	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d128      	bne.n	800966c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009626:	2b00      	cmp	r3, #0
 8009628:	d110      	bne.n	800964c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	0151      	lsls	r1, r2, #5
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	440a      	add	r2, r1
 8009640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	e00f      	b.n	800966c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800966a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009686:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e166      	b.n	800995c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d015      	beq.n	80096e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 814e 	beq.w	800995c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	f003 030f 	and.w	r3, r3, #15
 80096d0:	2101      	movs	r1, #1
 80096d2:	fa01 f303 	lsl.w	r3, r1, r3
 80096d6:	69f9      	ldr	r1, [r7, #28]
 80096d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096dc:	4313      	orrs	r3, r2
 80096de:	634b      	str	r3, [r1, #52]	@ 0x34
 80096e0:	e13c      	b.n	800995c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d110      	bne.n	8009714 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	e00f      	b.n	8009734 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800972e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009732:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	68d9      	ldr	r1, [r3, #12]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	781a      	ldrb	r2, [r3, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	b298      	uxth	r0, r3
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	4603      	mov	r3, r0
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f9b9 	bl	8009ac0 <USB_WritePacket>
 800974e:	e105      	b.n	800995c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800976a:	0cdb      	lsrs	r3, r3, #19
 800976c:	04db      	lsls	r3, r3, #19
 800976e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800978a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800978e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009792:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d132      	bne.n	8009800 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097c8:	69b9      	ldr	r1, [r7, #24]
 80097ca:	0148      	lsls	r0, r1, #5
 80097cc:	69f9      	ldr	r1, [r7, #28]
 80097ce:	4401      	add	r1, r0
 80097d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80097d4:	4313      	orrs	r3, r2
 80097d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	0151      	lsls	r1, r2, #5
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	440a      	add	r2, r1
 80097ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097f6:	6113      	str	r3, [r2, #16]
 80097f8:	e062      	b.n	80098c0 <USB_EPStartXfer+0x490>
 80097fa:	bf00      	nop
 80097fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d123      	bne.n	8009850 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	0148      	lsls	r0, r1, #5
 8009822:	69f9      	ldr	r1, [r7, #28]
 8009824:	4401      	add	r1, r0
 8009826:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800982a:	4313      	orrs	r3, r2
 800982c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800984c:	6113      	str	r3, [r2, #16]
 800984e:	e037      	b.n	80098c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	4413      	add	r3, r2
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	fbb2 f3f3 	udiv	r3, r2, r3
 8009864:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	8afa      	ldrh	r2, [r7, #22]
 800986c:	fb03 f202 	mul.w	r2, r3, r2
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009880:	691a      	ldr	r2, [r3, #16]
 8009882:	8afb      	ldrh	r3, [r7, #22]
 8009884:	04d9      	lsls	r1, r3, #19
 8009886:	4b38      	ldr	r3, [pc, #224]	@ (8009968 <USB_EPStartXfer+0x538>)
 8009888:	400b      	ands	r3, r1
 800988a:	69b9      	ldr	r1, [r7, #24]
 800988c:	0148      	lsls	r0, r1, #5
 800988e:	69f9      	ldr	r1, [r7, #28]
 8009890:	4401      	add	r1, r0
 8009892:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009896:	4313      	orrs	r3, r2
 8009898:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098b0:	69b9      	ldr	r1, [r7, #24]
 80098b2:	0148      	lsls	r0, r1, #5
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	4401      	add	r1, r0
 80098b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098bc:	4313      	orrs	r3, r2
 80098be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d10d      	bne.n	80098e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	68d9      	ldr	r1, [r3, #12]
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098de:	460a      	mov	r2, r1
 80098e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d128      	bne.n	800993c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d110      	bne.n	800991c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009914:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e00f      	b.n	800993c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800993a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	440a      	add	r2, r1
 8009952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009956:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800995a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	1ff80000 	.word	0x1ff80000

0800996c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d14a      	bne.n	8009a20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800999e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a2:	f040 8086 	bne.w	8009ab2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	7812      	ldrb	r2, [r2, #0]
 80099ba:	0151      	lsls	r1, r2, #5
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	440a      	add	r2, r1
 80099c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	7812      	ldrb	r2, [r2, #0]
 80099de:	0151      	lsls	r1, r2, #5
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	440a      	add	r2, r1
 80099e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3301      	adds	r3, #1
 80099f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d902      	bls.n	8009a04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
          break;
 8009a02:	e056      	b.n	8009ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a1c:	d0e7      	beq.n	80099ee <USB_EPStopXfer+0x82>
 8009a1e:	e048      	b.n	8009ab2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a38:	d13b      	bne.n	8009ab2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	7812      	ldrb	r2, [r2, #0]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d902      	bls.n	8009a98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	75fb      	strb	r3, [r7, #23]
          break;
 8009a96:	e00c      	b.n	8009ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ab0:	d0e7      	beq.n	8009a82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b089      	sub	sp, #36	@ 0x24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4611      	mov	r1, r2
 8009acc:	461a      	mov	r2, r3
 8009ace:	460b      	mov	r3, r1
 8009ad0:	71fb      	strb	r3, [r7, #7]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d123      	bne.n	8009b2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ae6:	88bb      	ldrh	r3, [r7, #4]
 8009ae8:	3303      	adds	r3, #3
 8009aea:	089b      	lsrs	r3, r3, #2
 8009aec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	e018      	b.n	8009b26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	031a      	lsls	r2, r3, #12
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b00:	461a      	mov	r2, r3
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	3301      	adds	r3, #1
 8009b12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	3301      	adds	r3, #1
 8009b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d3e2      	bcc.n	8009af4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3724      	adds	r7, #36	@ 0x24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b08b      	sub	sp, #44	@ 0x2c
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	623b      	str	r3, [r7, #32]
 8009b66:	e014      	b.n	8009b92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	3301      	adds	r3, #1
 8009b78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	3301      	adds	r3, #1
 8009b84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	3301      	adds	r3, #1
 8009b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	623b      	str	r3, [r7, #32]
 8009b92:	6a3a      	ldr	r2, [r7, #32]
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d3e6      	bcc.n	8009b68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b9a:	8bfb      	ldrh	r3, [r7, #30]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01e      	beq.n	8009bde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009baa:	461a      	mov	r2, r3
 8009bac:	f107 0310 	add.w	r3, r7, #16
 8009bb0:	6812      	ldr	r2, [r2, #0]
 8009bb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc4:	701a      	strb	r2, [r3, #0]
      i++;
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	623b      	str	r3, [r7, #32]
      pDest++;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	3301      	adds	r3, #1
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009bd2:	8bfb      	ldrh	r3, [r7, #30]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bd8:	8bfb      	ldrh	r3, [r7, #30]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1ea      	bne.n	8009bb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	372c      	adds	r7, #44	@ 0x2c
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d12c      	bne.n	8009c62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	db12      	blt.n	8009c40 <USB_EPSetStall+0x54>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00f      	beq.n	8009c40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	0151      	lsls	r1, r2, #5
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	440a      	add	r2, r1
 8009c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	0151      	lsls	r1, r2, #5
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	440a      	add	r2, r1
 8009c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	e02b      	b.n	8009cba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	db12      	blt.n	8009c9a <USB_EPSetStall+0xae>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00f      	beq.n	8009c9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	0151      	lsls	r1, r2, #5
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	440a      	add	r2, r1
 8009c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	785b      	ldrb	r3, [r3, #1]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d128      	bne.n	8009d36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d003      	beq.n	8009d14 <USB_EPClearStall+0x4c>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	791b      	ldrb	r3, [r3, #4]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d138      	bne.n	8009d86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	0151      	lsls	r1, r2, #5
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	440a      	add	r2, r1
 8009d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	e027      	b.n	8009d86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	0151      	lsls	r1, r2, #5
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	440a      	add	r2, r1
 8009d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	791b      	ldrb	r3, [r3, #4]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d003      	beq.n	8009d66 <USB_EPClearStall+0x9e>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	791b      	ldrb	r3, [r3, #4]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d10f      	bne.n	8009d86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	0151      	lsls	r1, r2, #5
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	440a      	add	r2, r1
 8009d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009db2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009db6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009dc8:	68f9      	ldr	r1, [r7, #12]
 8009dca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e0e:	f023 0302 	bic.w	r3, r3, #2
 8009e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e50:	f043 0302 	orr.w	r3, r3, #2
 8009e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4013      	ands	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	0c1b      	lsrs	r3, r3, #16
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	b29b      	uxth	r3, r3
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f20:	68bb      	ldr	r3, [r7, #8]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b087      	sub	sp, #28
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5e:	01db      	lsls	r3, r3, #7
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0301 	and.w	r3, r3, #1
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009fc4:	f023 0307 	bic.w	r3, r3, #7
 8009fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	333c      	adds	r3, #60	@ 0x3c
 800a002:	3304      	adds	r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4a26      	ldr	r2, [pc, #152]	@ (800a0a4 <USB_EP0_OutStart+0xb8>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d90a      	bls.n	800a026 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a01c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a020:	d101      	bne.n	800a026 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	e037      	b.n	800a096 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02c:	461a      	mov	r2, r3
 800a02e:	2300      	movs	r3, #0
 800a030:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a040:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a054:	f043 0318 	orr.w	r3, r3, #24
 800a058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a068:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a06c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d10f      	bne.n	800a094 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a08e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	4f54300a 	.word	0x4f54300a

0800a0a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0c0:	d901      	bls.n	800a0c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e022      	b.n	800a10c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	daf2      	bge.n	800a0b4 <USB_CoreReset+0xc>

  count = 10U;
 800a0ce:	230a      	movs	r3, #10
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a0d2:	e002      	b.n	800a0da <USB_CoreReset+0x32>
  {
    count--;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f9      	bne.n	800a0d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f043 0201 	orr.w	r2, r3, #1
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0f8:	d901      	bls.n	800a0fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e006      	b.n	800a10c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b01      	cmp	r3, #1
 800a108:	d0f0      	beq.n	800a0ec <USB_CoreReset+0x44>

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a124:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a128:	f002 fd1a 	bl	800cb60 <USBD_static_malloc>
 800a12c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	@ 0xb0
 800a13e:	2100      	movs	r1, #0
 800a140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a144:	2302      	movs	r3, #2
 800a146:	e0d4      	b.n	800a2f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a148:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a14c:	2100      	movs	r1, #0
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f004 fc78 	bl	800ea44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32b0      	adds	r2, #176	@ 0xb0
 800a15e:	68f9      	ldr	r1, [r7, #12]
 800a160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	32b0      	adds	r2, #176	@ 0xb0
 800a16e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7c1b      	ldrb	r3, [r3, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d138      	bne.n	800a1f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a180:	4b5e      	ldr	r3, [pc, #376]	@ (800a2fc <USBD_CDC_Init+0x1e4>)
 800a182:	7819      	ldrb	r1, [r3, #0]
 800a184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a188:	2202      	movs	r2, #2
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f002 fbc5 	bl	800c91a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a190:	4b5a      	ldr	r3, [pc, #360]	@ (800a2fc <USBD_CDC_Init+0x1e4>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 020f 	and.w	r2, r3, #15
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3323      	adds	r3, #35	@ 0x23
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1aa:	4b55      	ldr	r3, [pc, #340]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a1ac:	7819      	ldrb	r1, [r3, #0]
 800a1ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f002 fbb0 	bl	800c91a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1ba:	4b51      	ldr	r3, [pc, #324]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	f003 020f 	and.w	r2, r3, #15
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1d6:	4b4b      	ldr	r3, [pc, #300]	@ (800a304 <USBD_CDC_Init+0x1ec>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 020f 	and.w	r2, r3, #15
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	331c      	adds	r3, #28
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	e035      	b.n	800a25e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1f2:	4b42      	ldr	r3, [pc, #264]	@ (800a2fc <USBD_CDC_Init+0x1e4>)
 800a1f4:	7819      	ldrb	r1, [r3, #0]
 800a1f6:	2340      	movs	r3, #64	@ 0x40
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f002 fb8d 	bl	800c91a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a200:	4b3e      	ldr	r3, [pc, #248]	@ (800a2fc <USBD_CDC_Init+0x1e4>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	3323      	adds	r3, #35	@ 0x23
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a21a:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a21c:	7819      	ldrb	r1, [r3, #0]
 800a21e:	2340      	movs	r3, #64	@ 0x40
 800a220:	2202      	movs	r2, #2
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f002 fb79 	bl	800c91a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a228:	4b35      	ldr	r3, [pc, #212]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f003 020f 	and.w	r2, r3, #15
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a240:	2201      	movs	r2, #1
 800a242:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a244:	4b2f      	ldr	r3, [pc, #188]	@ (800a304 <USBD_CDC_Init+0x1ec>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f003 020f 	and.w	r2, r3, #15
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	440b      	add	r3, r1
 800a258:	331c      	adds	r3, #28
 800a25a:	2210      	movs	r2, #16
 800a25c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a25e:	4b29      	ldr	r3, [pc, #164]	@ (800a304 <USBD_CDC_Init+0x1ec>)
 800a260:	7819      	ldrb	r1, [r3, #0]
 800a262:	2308      	movs	r3, #8
 800a264:	2203      	movs	r2, #3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f002 fb57 	bl	800c91a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a26c:	4b25      	ldr	r3, [pc, #148]	@ (800a304 <USBD_CDC_Init+0x1ec>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 020f 	and.w	r2, r3, #15
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	3323      	adds	r3, #35	@ 0x23
 800a282:	2201      	movs	r2, #1
 800a284:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	33b0      	adds	r3, #176	@ 0xb0
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e018      	b.n	800a2f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7c1b      	ldrb	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a2ca:	7819      	ldrb	r1, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f002 fc0e 	bl	800caf8 <USBD_LL_PrepareReceive>
 800a2dc:	e008      	b.n	800a2f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2de:	4b08      	ldr	r3, [pc, #32]	@ (800a300 <USBD_CDC_Init+0x1e8>)
 800a2e0:	7819      	ldrb	r1, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a2e8:	2340      	movs	r3, #64	@ 0x40
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f002 fc04 	bl	800caf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	200000cf 	.word	0x200000cf
 800a300:	200000d0 	.word	0x200000d0
 800a304:	200000d1 	.word	0x200000d1

0800a308 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a314:	4b3a      	ldr	r3, [pc, #232]	@ (800a400 <USBD_CDC_DeInit+0xf8>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f002 fb23 	bl	800c966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a320:	4b37      	ldr	r3, [pc, #220]	@ (800a400 <USBD_CDC_DeInit+0xf8>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f003 020f 	and.w	r2, r3, #15
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	440b      	add	r3, r1
 800a334:	3323      	adds	r3, #35	@ 0x23
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a33a:	4b32      	ldr	r3, [pc, #200]	@ (800a404 <USBD_CDC_DeInit+0xfc>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f002 fb10 	bl	800c966 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a346:	4b2f      	ldr	r3, [pc, #188]	@ (800a404 <USBD_CDC_DeInit+0xfc>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	f003 020f 	and.w	r2, r3, #15
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a362:	4b29      	ldr	r3, [pc, #164]	@ (800a408 <USBD_CDC_DeInit+0x100>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 fafc 	bl	800c966 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a36e:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <USBD_CDC_DeInit+0x100>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 020f 	and.w	r2, r3, #15
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	3323      	adds	r3, #35	@ 0x23
 800a384:	2200      	movs	r2, #0
 800a386:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a388:	4b1f      	ldr	r3, [pc, #124]	@ (800a408 <USBD_CDC_DeInit+0x100>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f003 020f 	and.w	r2, r3, #15
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	4613      	mov	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	440b      	add	r3, r1
 800a39c:	331c      	adds	r3, #28
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	32b0      	adds	r2, #176	@ 0xb0
 800a3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01f      	beq.n	800a3f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	33b0      	adds	r3, #176	@ 0xb0
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	32b0      	adds	r2, #176	@ 0xb0
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f002 fbd0 	bl	800cb7c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	32b0      	adds	r2, #176	@ 0xb0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200000cf 	.word	0x200000cf
 800a404:	200000d0 	.word	0x200000d0
 800a408:	200000d1 	.word	0x200000d1

0800a40c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	32b0      	adds	r2, #176	@ 0xb0
 800a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a424:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	e0bf      	b.n	800a5bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a444:	2b00      	cmp	r3, #0
 800a446:	d050      	beq.n	800a4ea <USBD_CDC_Setup+0xde>
 800a448:	2b20      	cmp	r3, #32
 800a44a:	f040 80af 	bne.w	800a5ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	88db      	ldrh	r3, [r3, #6]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d03a      	beq.n	800a4cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	b25b      	sxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da1b      	bge.n	800a498 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	33b0      	adds	r3, #176	@ 0xb0
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a476:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	88d2      	ldrh	r2, [r2, #6]
 800a47c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	88db      	ldrh	r3, [r3, #6]
 800a482:	2b07      	cmp	r3, #7
 800a484:	bf28      	it	cs
 800a486:	2307      	movcs	r3, #7
 800a488:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	89fa      	ldrh	r2, [r7, #14]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 fda7 	bl	800bfe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a496:	e090      	b.n	800a5ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	785a      	ldrb	r2, [r3, #1]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	88db      	ldrh	r3, [r3, #6]
 800a4a6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a4a8:	d803      	bhi.n	800a4b2 <USBD_CDC_Setup+0xa6>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	88db      	ldrh	r3, [r3, #6]
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	e000      	b.n	800a4b4 <USBD_CDC_Setup+0xa8>
 800a4b2:	2240      	movs	r2, #64	@ 0x40
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a4ba:	6939      	ldr	r1, [r7, #16]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fdbc 	bl	800c042 <USBD_CtlPrepareRx>
      break;
 800a4ca:	e076      	b.n	800a5ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	33b0      	adds	r3, #176	@ 0xb0
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	7850      	ldrb	r0, [r2, #1]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	4798      	blx	r3
      break;
 800a4e8:	e067      	b.n	800a5ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	2b0b      	cmp	r3, #11
 800a4f0:	d851      	bhi.n	800a596 <USBD_CDC_Setup+0x18a>
 800a4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f8 <USBD_CDC_Setup+0xec>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a529 	.word	0x0800a529
 800a4fc:	0800a5a5 	.word	0x0800a5a5
 800a500:	0800a597 	.word	0x0800a597
 800a504:	0800a597 	.word	0x0800a597
 800a508:	0800a597 	.word	0x0800a597
 800a50c:	0800a597 	.word	0x0800a597
 800a510:	0800a597 	.word	0x0800a597
 800a514:	0800a597 	.word	0x0800a597
 800a518:	0800a597 	.word	0x0800a597
 800a51c:	0800a597 	.word	0x0800a597
 800a520:	0800a553 	.word	0x0800a553
 800a524:	0800a57d 	.word	0x0800a57d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b03      	cmp	r3, #3
 800a532:	d107      	bne.n	800a544 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a534:	f107 030a 	add.w	r3, r7, #10
 800a538:	2202      	movs	r2, #2
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 fd51 	bl	800bfe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a542:	e032      	b.n	800a5aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fccf 	bl	800beea <USBD_CtlError>
            ret = USBD_FAIL;
 800a54c:	2303      	movs	r3, #3
 800a54e:	75fb      	strb	r3, [r7, #23]
          break;
 800a550:	e02b      	b.n	800a5aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d107      	bne.n	800a56e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a55e:	f107 030d 	add.w	r3, r7, #13
 800a562:	2201      	movs	r2, #1
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fd3c 	bl	800bfe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a56c:	e01d      	b.n	800a5aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 fcba 	bl	800beea <USBD_CtlError>
            ret = USBD_FAIL;
 800a576:	2303      	movs	r3, #3
 800a578:	75fb      	strb	r3, [r7, #23]
          break;
 800a57a:	e016      	b.n	800a5aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b03      	cmp	r3, #3
 800a586:	d00f      	beq.n	800a5a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 fcad 	bl	800beea <USBD_CtlError>
            ret = USBD_FAIL;
 800a590:	2303      	movs	r3, #3
 800a592:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a594:	e008      	b.n	800a5a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fca6 	bl	800beea <USBD_CtlError>
          ret = USBD_FAIL;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5a2:	e002      	b.n	800a5aa <USBD_CDC_Setup+0x19e>
          break;
 800a5a4:	bf00      	nop
 800a5a6:	e008      	b.n	800a5ba <USBD_CDC_Setup+0x1ae>
          break;
 800a5a8:	bf00      	nop
      }
      break;
 800a5aa:	e006      	b.n	800a5ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 fc9b 	bl	800beea <USBD_CtlError>
      ret = USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	32b0      	adds	r2, #176	@ 0xb0
 800a5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e065      	b.n	800a6ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	32b0      	adds	r2, #176	@ 0xb0
 800a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	f003 020f 	and.w	r2, r3, #15
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	3314      	adds	r3, #20
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02f      	beq.n	800a678 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	f003 020f 	and.w	r2, r3, #15
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	3314      	adds	r3, #20
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	f003 010f 	and.w	r1, r3, #15
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	460b      	mov	r3, r1
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	440b      	add	r3, r1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4403      	add	r3, r0
 800a640:	331c      	adds	r3, #28
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	fbb2 f1f3 	udiv	r1, r2, r3
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d112      	bne.n	800a678 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	f003 020f 	and.w	r2, r3, #15
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	3314      	adds	r3, #20
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a66a:	78f9      	ldrb	r1, [r7, #3]
 800a66c:	2300      	movs	r3, #0
 800a66e:	2200      	movs	r2, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f002 fa20 	bl	800cab6 <USBD_LL_Transmit>
 800a676:	e01f      	b.n	800a6b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	33b0      	adds	r3, #176	@ 0xb0
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d010      	beq.n	800a6b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	33b0      	adds	r3, #176	@ 0xb0
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a6b4:	78fa      	ldrb	r2, [r7, #3]
 800a6b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32b0      	adds	r2, #176	@ 0xb0
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	32b0      	adds	r2, #176	@ 0xb0
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e01a      	b.n	800a72a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f002 fa1e 	bl	800cb3a <USBD_LL_GetRxDataSize>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	33b0      	adds	r3, #176	@ 0xb0
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a724:	4611      	mov	r1, r2
 800a726:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	32b0      	adds	r2, #176	@ 0xb0
 800a744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a748:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	e024      	b.n	800a79e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	33b0      	adds	r3, #176	@ 0xb0
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d019      	beq.n	800a79c <USBD_CDC_EP0_RxReady+0x6a>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a76e:	2bff      	cmp	r3, #255	@ 0xff
 800a770:	d014      	beq.n	800a79c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	33b0      	adds	r3, #176	@ 0xb0
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a78a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a792:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	22ff      	movs	r2, #255	@ 0xff
 800a798:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7b0:	2182      	movs	r1, #130	@ 0x82
 800a7b2:	4818      	ldr	r0, [pc, #96]	@ (800a814 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7b4:	f000 fd62 	bl	800b27c <USBD_GetEpDesc>
 800a7b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	4815      	ldr	r0, [pc, #84]	@ (800a814 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7be:	f000 fd5d 	bl	800b27c <USBD_GetEpDesc>
 800a7c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7c4:	2181      	movs	r1, #129	@ 0x81
 800a7c6:	4813      	ldr	r0, [pc, #76]	@ (800a814 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7c8:	f000 fd58 	bl	800b27c <USBD_GetEpDesc>
 800a7cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d006      	beq.n	800a7ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7e8:	711a      	strb	r2, [r3, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d006      	beq.n	800a802 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7fc:	711a      	strb	r2, [r3, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2243      	movs	r2, #67	@ 0x43
 800a806:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a808:	4b02      	ldr	r3, [pc, #8]	@ (800a814 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	2000008c 	.word	0x2000008c

0800a818 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a820:	2182      	movs	r1, #130	@ 0x82
 800a822:	4818      	ldr	r0, [pc, #96]	@ (800a884 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a824:	f000 fd2a 	bl	800b27c <USBD_GetEpDesc>
 800a828:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a82a:	2101      	movs	r1, #1
 800a82c:	4815      	ldr	r0, [pc, #84]	@ (800a884 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a82e:	f000 fd25 	bl	800b27c <USBD_GetEpDesc>
 800a832:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a834:	2181      	movs	r1, #129	@ 0x81
 800a836:	4813      	ldr	r0, [pc, #76]	@ (800a884 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a838:	f000 fd20 	bl	800b27c <USBD_GetEpDesc>
 800a83c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2210      	movs	r2, #16
 800a848:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d006      	beq.n	800a85e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2200      	movs	r2, #0
 800a854:	711a      	strb	r2, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f042 0202 	orr.w	r2, r2, #2
 800a85c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d006      	beq.n	800a872 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	711a      	strb	r2, [r3, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f042 0202 	orr.w	r2, r2, #2
 800a870:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2243      	movs	r2, #67	@ 0x43
 800a876:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a878:	4b02      	ldr	r3, [pc, #8]	@ (800a884 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000008c 	.word	0x2000008c

0800a888 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a890:	2182      	movs	r1, #130	@ 0x82
 800a892:	4818      	ldr	r0, [pc, #96]	@ (800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a894:	f000 fcf2 	bl	800b27c <USBD_GetEpDesc>
 800a898:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a89a:	2101      	movs	r1, #1
 800a89c:	4815      	ldr	r0, [pc, #84]	@ (800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a89e:	f000 fced 	bl	800b27c <USBD_GetEpDesc>
 800a8a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8a4:	2181      	movs	r1, #129	@ 0x81
 800a8a6:	4813      	ldr	r0, [pc, #76]	@ (800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a8a8:	f000 fce8 	bl	800b27c <USBD_GetEpDesc>
 800a8ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2210      	movs	r2, #16
 800a8b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d006      	beq.n	800a8ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8c8:	711a      	strb	r2, [r3, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d006      	beq.n	800a8e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8dc:	711a      	strb	r2, [r3, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2243      	movs	r2, #67	@ 0x43
 800a8e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8e8:	4b02      	ldr	r3, [pc, #8]	@ (800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000008c 	.word	0x2000008c

0800a8f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	220a      	movs	r2, #10
 800a904:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a906:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000048 	.word	0x20000048

0800a918 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	e009      	b.n	800a940 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	33b0      	adds	r3, #176	@ 0xb0
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	32b0      	adds	r2, #176	@ 0xb0
 800a962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a966:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a96e:	2303      	movs	r3, #3
 800a970:	e008      	b.n	800a984 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	32b0      	adds	r2, #176	@ 0xb0
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e004      	b.n	800a9be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	32b0      	adds	r2, #176	@ 0xb0
 800a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e025      	b.n	800aa3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11f      	bne.n	800aa3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aa04:	4b10      	ldr	r3, [pc, #64]	@ (800aa48 <USBD_CDC_TransmitPacket+0x7c>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	f003 020f 	and.w	r2, r3, #15
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4403      	add	r3, r0
 800aa1e:	3314      	adds	r3, #20
 800aa20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aa22:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <USBD_CDC_TransmitPacket+0x7c>)
 800aa24:	7819      	ldrb	r1, [r3, #0]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f002 f83f 	bl	800cab6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200000cf 	.word	0x200000cf

0800aa4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32b0      	adds	r2, #176	@ 0xb0
 800aa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32b0      	adds	r2, #176	@ 0xb0
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e018      	b.n	800aaac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7c1b      	ldrb	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa82:	4b0c      	ldr	r3, [pc, #48]	@ (800aab4 <USBD_CDC_ReceivePacket+0x68>)
 800aa84:	7819      	ldrb	r1, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f002 f831 	bl	800caf8 <USBD_LL_PrepareReceive>
 800aa96:	e008      	b.n	800aaaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa98:	4b06      	ldr	r3, [pc, #24]	@ (800aab4 <USBD_CDC_ReceivePacket+0x68>)
 800aa9a:	7819      	ldrb	r1, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aaa2:	2340      	movs	r3, #64	@ 0x40
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 f827 	bl	800caf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	200000d0 	.word	0x200000d0

0800aab8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01f      	b.n	800ab10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	79fa      	ldrb	r2, [r7, #7]
 800ab02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f001 fea1 	bl	800c84c <USBD_LL_Init>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e025      	b.n	800ab7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	32ae      	adds	r2, #174	@ 0xae
 800ab42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00f      	beq.n	800ab6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32ae      	adds	r2, #174	@ 0xae
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5c:	f107 020e 	add.w	r2, r7, #14
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	4602      	mov	r2, r0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 fea9 	bl	800c8e4 <USBD_LL_Start>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	4611      	mov	r1, r2
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
 800abdc:	4603      	mov	r3, r0
 800abde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	460b      	mov	r3, r1
 800abf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	4611      	mov	r1, r2
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	4798      	blx	r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f001 f920 	bl	800be76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d01a      	beq.n	800ac90 <USBD_LL_SetupStage+0x72>
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d822      	bhi.n	800aca4 <USBD_LL_SetupStage+0x86>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <USBD_LL_SetupStage+0x4a>
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d00a      	beq.n	800ac7c <USBD_LL_SetupStage+0x5e>
 800ac66:	e01d      	b.n	800aca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fb75 	bl	800b360 <USBD_StdDevReq>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
      break;
 800ac7a:	e020      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fbdd 	bl	800b444 <USBD_StdItfReq>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8e:	e016      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fc3f 	bl	800b51c <USBD_StdEPReq>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
      break;
 800aca2:	e00c      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fe76 	bl	800c9a4 <USBD_LL_StallEP>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	bf00      	nop
  }

  return ret;
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d177      	bne.n	800add0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ace6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acee:	2b03      	cmp	r3, #3
 800acf0:	f040 80a1 	bne.w	800ae36 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	8992      	ldrh	r2, [r2, #12]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d91c      	bls.n	800ad3a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	8992      	ldrh	r2, [r2, #12]
 800ad08:	1a9a      	subs	r2, r3, r2
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	8992      	ldrh	r2, [r2, #12]
 800ad16:	441a      	add	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6919      	ldr	r1, [r3, #16]
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	899b      	ldrh	r3, [r3, #12]
 800ad24:	461a      	mov	r2, r3
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	bf38      	it	cc
 800ad2e:	4613      	movcc	r3, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f001 f9a6 	bl	800c084 <USBD_CtlContinueRx>
 800ad38:	e07d      	b.n	800ae36 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad40:	f003 031f 	and.w	r3, r3, #31
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d014      	beq.n	800ad72 <USBD_LL_DataOutStage+0xaa>
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d81d      	bhi.n	800ad88 <USBD_LL_DataOutStage+0xc0>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <USBD_LL_DataOutStage+0x8e>
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d003      	beq.n	800ad5c <USBD_LL_DataOutStage+0x94>
 800ad54:	e018      	b.n	800ad88 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75bb      	strb	r3, [r7, #22]
            break;
 800ad5a:	e018      	b.n	800ad8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	4619      	mov	r1, r3
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fa6e 	bl	800b248 <USBD_CoreFindIF>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	75bb      	strb	r3, [r7, #22]
            break;
 800ad70:	e00d      	b.n	800ad8e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 fa70 	bl	800b262 <USBD_CoreFindEP>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75bb      	strb	r3, [r7, #22]
            break;
 800ad86:	e002      	b.n	800ad8e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	75bb      	strb	r3, [r7, #22]
            break;
 800ad8c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad8e:	7dbb      	ldrb	r3, [r7, #22]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d119      	bne.n	800adc8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d113      	bne.n	800adc8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ada0:	7dba      	ldrb	r2, [r7, #22]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	32ae      	adds	r2, #174	@ 0xae
 800ada6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800adb0:	7dba      	ldrb	r2, [r7, #22]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800adb8:	7dba      	ldrb	r2, [r7, #22]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	32ae      	adds	r2, #174	@ 0xae
 800adbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f001 f96c 	bl	800c0a6 <USBD_CtlSendStatus>
 800adce:	e032      	b.n	800ae36 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800add0:	7afb      	ldrb	r3, [r7, #11]
 800add2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add6:	b2db      	uxtb	r3, r3
 800add8:	4619      	mov	r1, r3
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fa41 	bl	800b262 <USBD_CoreFindEP>
 800ade0:	4603      	mov	r3, r0
 800ade2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ade4:	7dbb      	ldrb	r3, [r7, #22]
 800ade6:	2bff      	cmp	r3, #255	@ 0xff
 800ade8:	d025      	beq.n	800ae36 <USBD_LL_DataOutStage+0x16e>
 800adea:	7dbb      	ldrb	r3, [r7, #22]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d122      	bne.n	800ae36 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d117      	bne.n	800ae2c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adfc:	7dba      	ldrb	r2, [r7, #22]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	32ae      	adds	r2, #174	@ 0xae
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00f      	beq.n	800ae2c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ae0c:	7dba      	ldrb	r2, [r7, #22]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae14:	7dba      	ldrb	r2, [r7, #22]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	32ae      	adds	r2, #174	@ 0xae
 800ae1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	7afa      	ldrb	r2, [r7, #11]
 800ae22:	4611      	mov	r1, r2
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	4798      	blx	r3
 800ae28:	4603      	mov	r3, r0
 800ae2a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	e000      	b.n	800ae38 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d178      	bne.n	800af46 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3314      	adds	r3, #20
 800ae58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d163      	bne.n	800af2c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	8992      	ldrh	r2, [r2, #12]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d91c      	bls.n	800aeaa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	8992      	ldrh	r2, [r2, #12]
 800ae78:	1a9a      	subs	r2, r3, r2
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	8992      	ldrh	r2, [r2, #12]
 800ae86:	441a      	add	r2, r3
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6919      	ldr	r1, [r3, #16]
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	461a      	mov	r2, r3
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f001 f8c2 	bl	800c020 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2100      	movs	r1, #0
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f001 fe28 	bl	800caf8 <USBD_LL_PrepareReceive>
 800aea8:	e040      	b.n	800af2c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	899b      	ldrh	r3, [r3, #12]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d11c      	bne.n	800aef2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d316      	bcc.n	800aef2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aece:	429a      	cmp	r2, r3
 800aed0:	d20f      	bcs.n	800aef2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aed2:	2200      	movs	r2, #0
 800aed4:	2100      	movs	r1, #0
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f001 f8a2 	bl	800c020 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f001 fe04 	bl	800caf8 <USBD_LL_PrepareReceive>
 800aef0:	e01c      	b.n	800af2c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d10f      	bne.n	800af1e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af1e:	2180      	movs	r1, #128	@ 0x80
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f001 fd3f 	bl	800c9a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f001 f8d0 	bl	800c0cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d03a      	beq.n	800afac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff fe30 	bl	800ab9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af44:	e032      	b.n	800afac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	4619      	mov	r1, r3
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f986 	bl	800b262 <USBD_CoreFindEP>
 800af56:	4603      	mov	r3, r0
 800af58:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	2bff      	cmp	r3, #255	@ 0xff
 800af5e:	d025      	beq.n	800afac <USBD_LL_DataInStage+0x16c>
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d122      	bne.n	800afac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d11c      	bne.n	800afac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af72:	7dfa      	ldrb	r2, [r7, #23]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	32ae      	adds	r2, #174	@ 0xae
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d014      	beq.n	800afac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800af82:	7dfa      	ldrb	r2, [r7, #23]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af8a:	7dfa      	ldrb	r2, [r7, #23]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	32ae      	adds	r2, #174	@ 0xae
 800af90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	7afa      	ldrb	r2, [r7, #11]
 800af98:	4611      	mov	r1, r2
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800afa2:	7dbb      	ldrb	r3, [r7, #22]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800afa8:	7dbb      	ldrb	r3, [r7, #22]
 800afaa:	e000      	b.n	800afae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d014      	beq.n	800b01c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00e      	beq.n	800b01c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6852      	ldr	r2, [r2, #4]
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	4611      	mov	r1, r2
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	4798      	blx	r3
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b01c:	2340      	movs	r3, #64	@ 0x40
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fc79 	bl	800c91a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2240      	movs	r2, #64	@ 0x40
 800b034:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b038:	2340      	movs	r3, #64	@ 0x40
 800b03a:	2200      	movs	r2, #0
 800b03c:	2180      	movs	r1, #128	@ 0x80
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fc6b 	bl	800c91a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2240      	movs	r2, #64	@ 0x40
 800b050:	841a      	strh	r2, [r3, #32]

  return ret;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	78fa      	ldrb	r2, [r7, #3]
 800b06c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d006      	beq.n	800b09e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b096:	b2da      	uxtb	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d106      	bne.n	800b0d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d110      	bne.n	800b11a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00b      	beq.n	800b11a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d005      	beq.n	800b11a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	32ae      	adds	r2, #174	@ 0xae
 800b13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	e01c      	b.n	800b180 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d115      	bne.n	800b17e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	32ae      	adds	r2, #174	@ 0xae
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00b      	beq.n	800b17e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32ae      	adds	r2, #174	@ 0xae
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	78fa      	ldrb	r2, [r7, #3]
 800b178:	4611      	mov	r1, r2
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32ae      	adds	r2, #174	@ 0xae
 800b19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e01c      	b.n	800b1e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d115      	bne.n	800b1e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	32ae      	adds	r2, #174	@ 0xae
 800b1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	32ae      	adds	r2, #174	@ 0xae
 800b1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1da:	78fa      	ldrb	r2, [r7, #3]
 800b1dc:	4611      	mov	r1, r2
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00e      	beq.n	800b23e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6852      	ldr	r2, [r2, #4]
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	4611      	mov	r1, r2
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	4798      	blx	r3
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b254:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b26e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	885b      	ldrh	r3, [r3, #2]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	7812      	ldrb	r2, [r2, #0]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d91f      	bls.n	800b2e2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b2a8:	e013      	b.n	800b2d2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b2aa:	f107 030a 	add.w	r3, r7, #10
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6978      	ldr	r0, [r7, #20]
 800b2b2:	f000 f81b 	bl	800b2ec <USBD_GetNextDesc>
 800b2b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d108      	bne.n	800b2d2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	789b      	ldrb	r3, [r3, #2]
 800b2c8:	78fa      	ldrb	r2, [r7, #3]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d008      	beq.n	800b2e0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	885b      	ldrh	r3, [r3, #2]
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	897b      	ldrh	r3, [r7, #10]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d8e5      	bhi.n	800b2aa <USBD_GetEpDesc+0x2e>
 800b2de:	e000      	b.n	800b2e2 <USBD_GetEpDesc+0x66>
          break;
 800b2e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2e2:	693b      	ldr	r3, [r7, #16]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	7812      	ldrb	r2, [r2, #0]
 800b302:	4413      	add	r3, r2
 800b304:	b29a      	uxth	r2, r3
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4413      	add	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b316:	68fb      	ldr	r3, [r7, #12]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b324:	b480      	push	{r7}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	3301      	adds	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b342:	8a3b      	ldrh	r3, [r7, #16]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	b21a      	sxth	r2, r3
 800b348:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	b21b      	sxth	r3, r3
 800b350:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b352:	89fb      	ldrh	r3, [r7, #14]
}
 800b354:	4618      	mov	r0, r3
 800b356:	371c      	adds	r7, #28
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b376:	2b40      	cmp	r3, #64	@ 0x40
 800b378:	d005      	beq.n	800b386 <USBD_StdDevReq+0x26>
 800b37a:	2b40      	cmp	r3, #64	@ 0x40
 800b37c:	d857      	bhi.n	800b42e <USBD_StdDevReq+0xce>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00f      	beq.n	800b3a2 <USBD_StdDevReq+0x42>
 800b382:	2b20      	cmp	r3, #32
 800b384:	d153      	bne.n	800b42e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	32ae      	adds	r2, #174	@ 0xae
 800b390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a0:	e04a      	b.n	800b438 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2b09      	cmp	r3, #9
 800b3a8:	d83b      	bhi.n	800b422 <USBD_StdDevReq+0xc2>
 800b3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b0 <USBD_StdDevReq+0x50>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b419 	.word	0x0800b419
 800b3b8:	0800b423 	.word	0x0800b423
 800b3bc:	0800b40f 	.word	0x0800b40f
 800b3c0:	0800b423 	.word	0x0800b423
 800b3c4:	0800b3e3 	.word	0x0800b3e3
 800b3c8:	0800b3d9 	.word	0x0800b3d9
 800b3cc:	0800b423 	.word	0x0800b423
 800b3d0:	0800b3fb 	.word	0x0800b3fb
 800b3d4:	0800b3ed 	.word	0x0800b3ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa3e 	bl	800b85c <USBD_GetDescriptor>
          break;
 800b3e0:	e024      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fba3 	bl	800bb30 <USBD_SetAddress>
          break;
 800b3ea:	e01f      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fbe2 	bl	800bbb8 <USBD_SetConfig>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
          break;
 800b3f8:	e018      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fc85 	bl	800bd0c <USBD_GetConfig>
          break;
 800b402:	e013      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fcb6 	bl	800bd78 <USBD_GetStatus>
          break;
 800b40c:	e00e      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fce5 	bl	800bde0 <USBD_SetFeature>
          break;
 800b416:	e009      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd09 	bl	800be32 <USBD_ClrFeature>
          break;
 800b420:	e004      	b.n	800b42c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fd60 	bl	800beea <USBD_CtlError>
          break;
 800b42a:	bf00      	nop
      }
      break;
 800b42c:	e004      	b.n	800b438 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fd5a 	bl	800beea <USBD_CtlError>
      break;
 800b436:	bf00      	nop
  }

  return ret;
 800b438:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop

0800b444 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b45a:	2b40      	cmp	r3, #64	@ 0x40
 800b45c:	d005      	beq.n	800b46a <USBD_StdItfReq+0x26>
 800b45e:	2b40      	cmp	r3, #64	@ 0x40
 800b460:	d852      	bhi.n	800b508 <USBD_StdItfReq+0xc4>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <USBD_StdItfReq+0x26>
 800b466:	2b20      	cmp	r3, #32
 800b468:	d14e      	bne.n	800b508 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b470:	b2db      	uxtb	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	2b02      	cmp	r3, #2
 800b476:	d840      	bhi.n	800b4fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	889b      	ldrh	r3, [r3, #4]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d836      	bhi.n	800b4f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	889b      	ldrh	r3, [r3, #4]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fedc 	bl	800b248 <USBD_CoreFindIF>
 800b490:	4603      	mov	r3, r0
 800b492:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	2bff      	cmp	r3, #255	@ 0xff
 800b498:	d01d      	beq.n	800b4d6 <USBD_StdItfReq+0x92>
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d11a      	bne.n	800b4d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b4a0:	7bba      	ldrb	r2, [r7, #14]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32ae      	adds	r2, #174	@ 0xae
 800b4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00f      	beq.n	800b4d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b4b0:	7bba      	ldrb	r2, [r7, #14]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4b8:	7bba      	ldrb	r2, [r7, #14]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	@ 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	4798      	blx	r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4ce:	e004      	b.n	800b4da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4d4:	e001      	b.n	800b4da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d110      	bne.n	800b504 <USBD_StdItfReq+0xc0>
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10d      	bne.n	800b504 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fddc 	bl	800c0a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ee:	e009      	b.n	800b504 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fcf9 	bl	800beea <USBD_CtlError>
          break;
 800b4f8:	e004      	b.n	800b504 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fcf4 	bl	800beea <USBD_CtlError>
          break;
 800b502:	e000      	b.n	800b506 <USBD_StdItfReq+0xc2>
          break;
 800b504:	bf00      	nop
      }
      break;
 800b506:	e004      	b.n	800b512 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fced 	bl	800beea <USBD_CtlError>
      break;
 800b510:	bf00      	nop
  }

  return ret;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	889b      	ldrh	r3, [r3, #4]
 800b52e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b538:	2b40      	cmp	r3, #64	@ 0x40
 800b53a:	d007      	beq.n	800b54c <USBD_StdEPReq+0x30>
 800b53c:	2b40      	cmp	r3, #64	@ 0x40
 800b53e:	f200 8181 	bhi.w	800b844 <USBD_StdEPReq+0x328>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d02a      	beq.n	800b59c <USBD_StdEPReq+0x80>
 800b546:	2b20      	cmp	r3, #32
 800b548:	f040 817c 	bne.w	800b844 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff fe86 	bl	800b262 <USBD_CoreFindEP>
 800b556:	4603      	mov	r3, r0
 800b558:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b55a:	7b7b      	ldrb	r3, [r7, #13]
 800b55c:	2bff      	cmp	r3, #255	@ 0xff
 800b55e:	f000 8176 	beq.w	800b84e <USBD_StdEPReq+0x332>
 800b562:	7b7b      	ldrb	r3, [r7, #13]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f040 8172 	bne.w	800b84e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800b56a:	7b7a      	ldrb	r2, [r7, #13]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b572:	7b7a      	ldrb	r2, [r7, #13]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	32ae      	adds	r2, #174	@ 0xae
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8165 	beq.w	800b84e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b584:	7b7a      	ldrb	r2, [r7, #13]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	32ae      	adds	r2, #174	@ 0xae
 800b58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b59a:	e158      	b.n	800b84e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	785b      	ldrb	r3, [r3, #1]
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d008      	beq.n	800b5b6 <USBD_StdEPReq+0x9a>
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	f300 8147 	bgt.w	800b838 <USBD_StdEPReq+0x31c>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 809b 	beq.w	800b6e6 <USBD_StdEPReq+0x1ca>
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d03c      	beq.n	800b62e <USBD_StdEPReq+0x112>
 800b5b4:	e140      	b.n	800b838 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d002      	beq.n	800b5c8 <USBD_StdEPReq+0xac>
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d016      	beq.n	800b5f4 <USBD_StdEPReq+0xd8>
 800b5c6:	e02c      	b.n	800b622 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <USBD_StdEPReq+0xce>
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b80      	cmp	r3, #128	@ 0x80
 800b5d2:	d00a      	beq.n	800b5ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 f9e3 	bl	800c9a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5de:	2180      	movs	r1, #128	@ 0x80
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 f9df 	bl	800c9a4 <USBD_LL_StallEP>
 800b5e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5e8:	e020      	b.n	800b62c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fc7c 	bl	800beea <USBD_CtlError>
              break;
 800b5f2:	e01b      	b.n	800b62c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10e      	bne.n	800b61a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00b      	beq.n	800b61a <USBD_StdEPReq+0xfe>
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b80      	cmp	r3, #128	@ 0x80
 800b606:	d008      	beq.n	800b61a <USBD_StdEPReq+0xfe>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	88db      	ldrh	r3, [r3, #6]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d104      	bne.n	800b61a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 f9c5 	bl	800c9a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fd43 	bl	800c0a6 <USBD_CtlSendStatus>

              break;
 800b620:	e004      	b.n	800b62c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fc60 	bl	800beea <USBD_CtlError>
              break;
 800b62a:	bf00      	nop
          }
          break;
 800b62c:	e109      	b.n	800b842 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d002      	beq.n	800b640 <USBD_StdEPReq+0x124>
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d016      	beq.n	800b66c <USBD_StdEPReq+0x150>
 800b63e:	e04b      	b.n	800b6d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00d      	beq.n	800b662 <USBD_StdEPReq+0x146>
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b80      	cmp	r3, #128	@ 0x80
 800b64a:	d00a      	beq.n	800b662 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 f9a7 	bl	800c9a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b656:	2180      	movs	r1, #128	@ 0x80
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 f9a3 	bl	800c9a4 <USBD_LL_StallEP>
 800b65e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b660:	e040      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fc40 	bl	800beea <USBD_CtlError>
              break;
 800b66a:	e03b      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	885b      	ldrh	r3, [r3, #2]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d136      	bne.n	800b6e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d004      	beq.n	800b688 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 f9ad 	bl	800c9e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fd0c 	bl	800c0a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff fde5 	bl	800b262 <USBD_CoreFindEP>
 800b698:	4603      	mov	r3, r0
 800b69a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b69c:	7b7b      	ldrb	r3, [r7, #13]
 800b69e:	2bff      	cmp	r3, #255	@ 0xff
 800b6a0:	d01f      	beq.n	800b6e2 <USBD_StdEPReq+0x1c6>
 800b6a2:	7b7b      	ldrb	r3, [r7, #13]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d11c      	bne.n	800b6e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b6a8:	7b7a      	ldrb	r2, [r7, #13]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b6b0:	7b7a      	ldrb	r2, [r7, #13]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	32ae      	adds	r2, #174	@ 0xae
 800b6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d010      	beq.n	800b6e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6c0:	7b7a      	ldrb	r2, [r7, #13]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32ae      	adds	r2, #174	@ 0xae
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6d6:	e004      	b.n	800b6e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fc05 	bl	800beea <USBD_CtlError>
              break;
 800b6e0:	e000      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>
              break;
 800b6e2:	bf00      	nop
          }
          break;
 800b6e4:	e0ad      	b.n	800b842 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d002      	beq.n	800b6f8 <USBD_StdEPReq+0x1dc>
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d033      	beq.n	800b75e <USBD_StdEPReq+0x242>
 800b6f6:	e099      	b.n	800b82c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <USBD_StdEPReq+0x1f2>
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b80      	cmp	r3, #128	@ 0x80
 800b702:	d004      	beq.n	800b70e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fbef 	bl	800beea <USBD_CtlError>
                break;
 800b70c:	e093      	b.n	800b836 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b70e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b712:	2b00      	cmp	r3, #0
 800b714:	da0b      	bge.n	800b72e <USBD_StdEPReq+0x212>
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	3310      	adds	r3, #16
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	3304      	adds	r3, #4
 800b72c:	e00b      	b.n	800b746 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	4413      	add	r3, r2
 800b744:	3304      	adds	r3, #4
 800b746:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	330e      	adds	r3, #14
 800b752:	2202      	movs	r2, #2
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fc44 	bl	800bfe4 <USBD_CtlSendData>
              break;
 800b75c:	e06b      	b.n	800b836 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b75e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b762:	2b00      	cmp	r3, #0
 800b764:	da11      	bge.n	800b78a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	f003 020f 	and.w	r2, r3, #15
 800b76c:	6879      	ldr	r1, [r7, #4]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	440b      	add	r3, r1
 800b778:	3323      	adds	r3, #35	@ 0x23
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d117      	bne.n	800b7b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fbb1 	bl	800beea <USBD_CtlError>
                  break;
 800b788:	e055      	b.n	800b836 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	f003 020f 	and.w	r2, r3, #15
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fb9e 	bl	800beea <USBD_CtlError>
                  break;
 800b7ae:	e042      	b.n	800b836 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da0b      	bge.n	800b7d0 <USBD_StdEPReq+0x2b4>
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	3310      	adds	r3, #16
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	e00b      	b.n	800b7e8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7ea:	7bbb      	ldrb	r3, [r7, #14]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <USBD_StdEPReq+0x2da>
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b80      	cmp	r3, #128	@ 0x80
 800b7f4:	d103      	bne.n	800b7fe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	739a      	strb	r2, [r3, #14]
 800b7fc:	e00e      	b.n	800b81c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 f90c 	bl	800ca20 <USBD_LL_IsStallEP>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2201      	movs	r2, #1
 800b812:	739a      	strb	r2, [r3, #14]
 800b814:	e002      	b.n	800b81c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2200      	movs	r2, #0
 800b81a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	330e      	adds	r3, #14
 800b820:	2202      	movs	r2, #2
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fbdd 	bl	800bfe4 <USBD_CtlSendData>
              break;
 800b82a:	e004      	b.n	800b836 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb5b 	bl	800beea <USBD_CtlError>
              break;
 800b834:	bf00      	nop
          }
          break;
 800b836:	e004      	b.n	800b842 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fb55 	bl	800beea <USBD_CtlError>
          break;
 800b840:	bf00      	nop
      }
      break;
 800b842:	e005      	b.n	800b850 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fb4f 	bl	800beea <USBD_CtlError>
      break;
 800b84c:	e000      	b.n	800b850 <USBD_StdEPReq+0x334>
      break;
 800b84e:	bf00      	nop
  }

  return ret;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	885b      	ldrh	r3, [r3, #2]
 800b876:	0a1b      	lsrs	r3, r3, #8
 800b878:	b29b      	uxth	r3, r3
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2b06      	cmp	r3, #6
 800b87e:	f200 8128 	bhi.w	800bad2 <USBD_GetDescriptor+0x276>
 800b882:	a201      	add	r2, pc, #4	@ (adr r2, 800b888 <USBD_GetDescriptor+0x2c>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8a5 	.word	0x0800b8a5
 800b88c:	0800b8bd 	.word	0x0800b8bd
 800b890:	0800b8fd 	.word	0x0800b8fd
 800b894:	0800bad3 	.word	0x0800bad3
 800b898:	0800bad3 	.word	0x0800bad3
 800b89c:	0800ba73 	.word	0x0800ba73
 800b8a0:	0800ba9f 	.word	0x0800ba9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	7c12      	ldrb	r2, [r2, #16]
 800b8b0:	f107 0108 	add.w	r1, r7, #8
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	4798      	blx	r3
 800b8b8:	60f8      	str	r0, [r7, #12]
      break;
 800b8ba:	e112      	b.n	800bae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	7c1b      	ldrb	r3, [r3, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10d      	bne.n	800b8e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8cc:	f107 0208 	add.w	r2, r7, #8
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4798      	blx	r3
 800b8d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	2202      	movs	r2, #2
 800b8dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8de:	e100      	b.n	800bae2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e8:	f107 0208 	add.w	r2, r7, #8
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	701a      	strb	r2, [r3, #0]
      break;
 800b8fa:	e0f2      	b.n	800bae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	885b      	ldrh	r3, [r3, #2]
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b05      	cmp	r3, #5
 800b904:	f200 80ac 	bhi.w	800ba60 <USBD_GetDescriptor+0x204>
 800b908:	a201      	add	r2, pc, #4	@ (adr r2, 800b910 <USBD_GetDescriptor+0xb4>)
 800b90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90e:	bf00      	nop
 800b910:	0800b929 	.word	0x0800b929
 800b914:	0800b95d 	.word	0x0800b95d
 800b918:	0800b991 	.word	0x0800b991
 800b91c:	0800b9c5 	.word	0x0800b9c5
 800b920:	0800b9f9 	.word	0x0800b9f9
 800b924:	0800ba2d 	.word	0x0800ba2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	7c12      	ldrb	r2, [r2, #16]
 800b940:	f107 0108 	add.w	r1, r7, #8
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
 800b948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94a:	e091      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 facb 	bl	800beea <USBD_CtlError>
            err++;
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	3301      	adds	r3, #1
 800b958:	72fb      	strb	r3, [r7, #11]
          break;
 800b95a:	e089      	b.n	800ba70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	7c12      	ldrb	r2, [r2, #16]
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97e:	e077      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fab1 	bl	800beea <USBD_CtlError>
            err++;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3301      	adds	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]
          break;
 800b98e:	e06f      	b.n	800ba70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7c12      	ldrb	r2, [r2, #16]
 800b9a8:	f107 0108 	add.w	r1, r7, #8
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b2:	e05d      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa97 	bl	800beea <USBD_CtlError>
            err++;
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c2:	e055      	b.n	800ba70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9e6:	e043      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa7d 	bl	800beea <USBD_CtlError>
            err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9f6:	e03b      	b.n	800ba70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	7c12      	ldrb	r2, [r2, #16]
 800ba10:	f107 0108 	add.w	r1, r7, #8
 800ba14:	4610      	mov	r0, r2
 800ba16:	4798      	blx	r3
 800ba18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba1a:	e029      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa63 	bl	800beea <USBD_CtlError>
            err++;
 800ba24:	7afb      	ldrb	r3, [r7, #11]
 800ba26:	3301      	adds	r3, #1
 800ba28:	72fb      	strb	r3, [r7, #11]
          break;
 800ba2a:	e021      	b.n	800ba70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	7c12      	ldrb	r2, [r2, #16]
 800ba44:	f107 0108 	add.w	r1, r7, #8
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4e:	e00f      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa49 	bl	800beea <USBD_CtlError>
            err++;
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5e:	e007      	b.n	800ba70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fa41 	bl	800beea <USBD_CtlError>
          err++;
 800ba68:	7afb      	ldrb	r3, [r7, #11]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba6e:	bf00      	nop
      }
      break;
 800ba70:	e037      	b.n	800bae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	7c1b      	ldrb	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d109      	bne.n	800ba8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba82:	f107 0208 	add.w	r2, r7, #8
 800ba86:	4610      	mov	r0, r2
 800ba88:	4798      	blx	r3
 800ba8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba8c:	e029      	b.n	800bae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa2a 	bl	800beea <USBD_CtlError>
        err++;
 800ba96:	7afb      	ldrb	r3, [r7, #11]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba9c:	e021      	b.n	800bae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	7c1b      	ldrb	r3, [r3, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10d      	bne.n	800bac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baae:	f107 0208 	add.w	r2, r7, #8
 800bab2:	4610      	mov	r0, r2
 800bab4:	4798      	blx	r3
 800bab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3301      	adds	r3, #1
 800babc:	2207      	movs	r2, #7
 800babe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bac0:	e00f      	b.n	800bae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fa10 	bl	800beea <USBD_CtlError>
        err++;
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	3301      	adds	r3, #1
 800bace:	72fb      	strb	r3, [r7, #11]
      break;
 800bad0:	e007      	b.n	800bae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fa08 	bl	800beea <USBD_CtlError>
      err++;
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	3301      	adds	r3, #1
 800bade:	72fb      	strb	r3, [r7, #11]
      break;
 800bae0:	bf00      	nop
  }

  if (err != 0U)
 800bae2:	7afb      	ldrb	r3, [r7, #11]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d11e      	bne.n	800bb26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d016      	beq.n	800bb1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800baf0:	893b      	ldrh	r3, [r7, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00e      	beq.n	800bb14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	88da      	ldrh	r2, [r3, #6]
 800bafa:	893b      	ldrh	r3, [r7, #8]
 800bafc:	4293      	cmp	r3, r2
 800bafe:	bf28      	it	cs
 800bb00:	4613      	movcs	r3, r2
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb06:	893b      	ldrh	r3, [r7, #8]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fa69 	bl	800bfe4 <USBD_CtlSendData>
 800bb12:	e009      	b.n	800bb28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f9e7 	bl	800beea <USBD_CtlError>
 800bb1c:	e004      	b.n	800bb28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fac1 	bl	800c0a6 <USBD_CtlSendStatus>
 800bb24:	e000      	b.n	800bb28 <USBD_GetDescriptor+0x2cc>
    return;
 800bb26:	bf00      	nop
  }
}
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop

0800bb30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	889b      	ldrh	r3, [r3, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d131      	bne.n	800bba6 <USBD_SetAddress+0x76>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	88db      	ldrh	r3, [r3, #6]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d12d      	bne.n	800bba6 <USBD_SetAddress+0x76>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb50:	d829      	bhi.n	800bba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	885b      	ldrh	r3, [r3, #2]
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d104      	bne.n	800bb74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f9bc 	bl	800beea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb72:	e01d      	b.n	800bbb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	7bfa      	ldrb	r2, [r7, #15]
 800bb78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 ff79 	bl	800ca78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fa8d 	bl	800c0a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d004      	beq.n	800bb9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2202      	movs	r2, #2
 800bb96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9a:	e009      	b.n	800bbb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba4:	e004      	b.n	800bbb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f99e 	bl	800beea <USBD_CtlError>
  }
}
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	885b      	ldrh	r3, [r3, #2]
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b4e      	ldr	r3, [pc, #312]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bbce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbd0:	4b4d      	ldr	r3, [pc, #308]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d905      	bls.n	800bbe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f985 	bl	800beea <USBD_CtlError>
    return USBD_FAIL;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e08c      	b.n	800bcfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d002      	beq.n	800bbf6 <USBD_SetConfig+0x3e>
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d029      	beq.n	800bc48 <USBD_SetConfig+0x90>
 800bbf4:	e075      	b.n	800bce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbf6:	4b44      	ldr	r3, [pc, #272]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d020      	beq.n	800bc40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbfe:	4b42      	ldr	r3, [pc, #264]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc08:	4b3f      	ldr	r3, [pc, #252]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fe ffcf 	bl	800abb2 <USBD_SetClassConfig>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d008      	beq.n	800bc30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f962 	bl	800beea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc2e:	e065      	b.n	800bcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fa38 	bl	800c0a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2203      	movs	r2, #3
 800bc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc3e:	e05d      	b.n	800bcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa30 	bl	800c0a6 <USBD_CtlSendStatus>
      break;
 800bc46:	e059      	b.n	800bcfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc48:	4b2f      	ldr	r3, [pc, #188]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d112      	bne.n	800bc76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2202      	movs	r2, #2
 800bc54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bc58:	4b2b      	ldr	r3, [pc, #172]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc62:	4b29      	ldr	r3, [pc, #164]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7fe ffbe 	bl	800abea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa19 	bl	800c0a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc74:	e042      	b.n	800bcfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc76:	4b24      	ldr	r3, [pc, #144]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d02a      	beq.n	800bcda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fe ffac 	bl	800abea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc92:	4b1d      	ldr	r3, [pc, #116]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7fe ff85 	bl	800abb2 <USBD_SetClassConfig>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00f      	beq.n	800bcd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f918 	bl	800beea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7fe ff91 	bl	800abea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bcd0:	e014      	b.n	800bcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f9e7 	bl	800c0a6 <USBD_CtlSendStatus>
      break;
 800bcd8:	e010      	b.n	800bcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f9e3 	bl	800c0a6 <USBD_CtlSendStatus>
      break;
 800bce0:	e00c      	b.n	800bcfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f900 	bl	800beea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <USBD_SetConfig+0x150>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7fe ff7a 	bl	800abea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcfa:	bf00      	nop
  }

  return ret;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20001300 	.word	0x20001300

0800bd0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	88db      	ldrh	r3, [r3, #6]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d004      	beq.n	800bd28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f8e2 	bl	800beea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd26:	e023      	b.n	800bd70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	dc02      	bgt.n	800bd3a <USBD_GetConfig+0x2e>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dc03      	bgt.n	800bd40 <USBD_GetConfig+0x34>
 800bd38:	e015      	b.n	800bd66 <USBD_GetConfig+0x5a>
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d00b      	beq.n	800bd56 <USBD_GetConfig+0x4a>
 800bd3e:	e012      	b.n	800bd66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	3308      	adds	r3, #8
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f948 	bl	800bfe4 <USBD_CtlSendData>
        break;
 800bd54:	e00c      	b.n	800bd70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f940 	bl	800bfe4 <USBD_CtlSendData>
        break;
 800bd64:	e004      	b.n	800bd70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f8be 	bl	800beea <USBD_CtlError>
        break;
 800bd6e:	bf00      	nop
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d81e      	bhi.n	800bdce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	88db      	ldrh	r3, [r3, #6]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d004      	beq.n	800bda2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8a5 	bl	800beea <USBD_CtlError>
        break;
 800bda0:	e01a      	b.n	800bdd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d005      	beq.n	800bdbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f043 0202 	orr.w	r2, r3, #2
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	330c      	adds	r3, #12
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f90c 	bl	800bfe4 <USBD_CtlSendData>
      break;
 800bdcc:	e004      	b.n	800bdd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f88a 	bl	800beea <USBD_CtlError>
      break;
 800bdd6:	bf00      	nop
  }
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	885b      	ldrh	r3, [r3, #2]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d107      	bne.n	800be02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f953 	bl	800c0a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800be00:	e013      	b.n	800be2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	885b      	ldrh	r3, [r3, #2]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d10b      	bne.n	800be22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	889b      	ldrh	r3, [r3, #4]
 800be0e:	0a1b      	lsrs	r3, r3, #8
 800be10:	b29b      	uxth	r3, r3
 800be12:	b2da      	uxtb	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f943 	bl	800c0a6 <USBD_CtlSendStatus>
}
 800be20:	e003      	b.n	800be2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f860 	bl	800beea <USBD_CtlError>
}
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b082      	sub	sp, #8
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be42:	b2db      	uxtb	r3, r3
 800be44:	3b01      	subs	r3, #1
 800be46:	2b02      	cmp	r3, #2
 800be48:	d80b      	bhi.n	800be62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	885b      	ldrh	r3, [r3, #2]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d10c      	bne.n	800be6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f923 	bl	800c0a6 <USBD_CtlSendStatus>
      }
      break;
 800be60:	e004      	b.n	800be6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f840 	bl	800beea <USBD_CtlError>
      break;
 800be6a:	e000      	b.n	800be6e <USBD_ClrFeature+0x3c>
      break;
 800be6c:	bf00      	nop
  }
}
 800be6e:	bf00      	nop
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3301      	adds	r3, #1
 800be90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	781a      	ldrb	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3301      	adds	r3, #1
 800be9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff fa3f 	bl	800b324 <SWAPBYTE>
 800bea6:	4603      	mov	r3, r0
 800bea8:	461a      	mov	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	3301      	adds	r3, #1
 800beb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff fa32 	bl	800b324 <SWAPBYTE>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3301      	adds	r3, #1
 800bed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fa25 	bl	800b324 <SWAPBYTE>
 800beda:	4603      	mov	r3, r0
 800bedc:	461a      	mov	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	80da      	strh	r2, [r3, #6]
}
 800bee2:	bf00      	nop
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b082      	sub	sp, #8
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bef4:	2180      	movs	r1, #128	@ 0x80
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fd54 	bl	800c9a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800befc:	2100      	movs	r1, #0
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fd50 	bl	800c9a4 <USBD_LL_StallEP>
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d042      	beq.n	800bfa8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bf26:	6938      	ldr	r0, [r7, #16]
 800bf28:	f000 f842 	bl	800bfb0 <USBD_GetLen>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	3301      	adds	r3, #1
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf36:	d808      	bhi.n	800bf4a <USBD_GetString+0x3e>
 800bf38:	6938      	ldr	r0, [r7, #16]
 800bf3a:	f000 f839 	bl	800bfb0 <USBD_GetLen>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	3301      	adds	r3, #1
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	e001      	b.n	800bf4e <USBD_GetString+0x42>
 800bf4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	4413      	add	r3, r2
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	7812      	ldrb	r2, [r2, #0]
 800bf5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	3301      	adds	r3, #1
 800bf62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	4413      	add	r3, r2
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	3301      	adds	r3, #1
 800bf72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf74:	e013      	b.n	800bf9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	7812      	ldrb	r2, [r2, #0]
 800bf80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3301      	adds	r3, #1
 800bf86:	613b      	str	r3, [r7, #16]
    idx++;
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	4413      	add	r3, r2
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e7      	bne.n	800bf76 <USBD_GetString+0x6a>
 800bfa6:	e000      	b.n	800bfaa <USBD_GetString+0x9e>
    return;
 800bfa8:	bf00      	nop
  }
}
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfc0:	e005      	b.n	800bfce <USBD_GetLen+0x1e>
  {
    len++;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f5      	bne.n	800bfc2 <USBD_GetLen+0x12>
  }

  return len;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	2100      	movs	r1, #0
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f000 fd50 	bl	800cab6 <USBD_LL_Transmit>

  return USBD_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	2100      	movs	r1, #0
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 fd3f 	bl	800cab6 <USBD_LL_Transmit>

  return USBD_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2203      	movs	r2, #3
 800c052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	2100      	movs	r1, #0
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 fd3f 	bl	800caf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	2100      	movs	r1, #0
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 fd2e 	bl	800caf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2204      	movs	r2, #4
 800c0b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fcfa 	bl	800cab6 <USBD_LL_Transmit>

  return USBD_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fd08 	bl	800caf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
	...

0800c0f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4912      	ldr	r1, [pc, #72]	@ (800c144 <MX_USB_DEVICE_Init+0x50>)
 800c0fc:	4812      	ldr	r0, [pc, #72]	@ (800c148 <MX_USB_DEVICE_Init+0x54>)
 800c0fe:	f7fe fcdb 	bl	800aab8 <USBD_Init>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c108:	f7f5 f880 	bl	800120c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c10c:	490f      	ldr	r1, [pc, #60]	@ (800c14c <MX_USB_DEVICE_Init+0x58>)
 800c10e:	480e      	ldr	r0, [pc, #56]	@ (800c148 <MX_USB_DEVICE_Init+0x54>)
 800c110:	f7fe fd02 	bl	800ab18 <USBD_RegisterClass>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c11a:	f7f5 f877 	bl	800120c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c11e:	490c      	ldr	r1, [pc, #48]	@ (800c150 <MX_USB_DEVICE_Init+0x5c>)
 800c120:	4809      	ldr	r0, [pc, #36]	@ (800c148 <MX_USB_DEVICE_Init+0x54>)
 800c122:	f7fe fbf9 	bl	800a918 <USBD_CDC_RegisterInterface>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c12c:	f7f5 f86e 	bl	800120c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c130:	4805      	ldr	r0, [pc, #20]	@ (800c148 <MX_USB_DEVICE_Init+0x54>)
 800c132:	f7fe fd27 	bl	800ab84 <USBD_Start>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c13c:	f7f5 f866 	bl	800120c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c140:	bf00      	nop
 800c142:	bd80      	pop	{r7, pc}
 800c144:	200000e8 	.word	0x200000e8
 800c148:	20001304 	.word	0x20001304
 800c14c:	20000054 	.word	0x20000054
 800c150:	200000d4 	.word	0x200000d4

0800c154 <CDC_Init_FS>:
/* Functions -----------------------------------------------------------------*/
/**
  * @brief  Initializes the CDC media low layer
  */
static int8_t CDC_Init_FS(void)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c158:	2200      	movs	r2, #0
 800c15a:	4909      	ldr	r1, [pc, #36]	@ (800c180 <CDC_Init_FS+0x2c>)
 800c15c:	4809      	ldr	r0, [pc, #36]	@ (800c184 <CDC_Init_FS+0x30>)
 800c15e:	f7fe fbf5 	bl	800a94c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c162:	4909      	ldr	r1, [pc, #36]	@ (800c188 <CDC_Init_FS+0x34>)
 800c164:	4807      	ldr	r0, [pc, #28]	@ (800c184 <CDC_Init_FS+0x30>)
 800c166:	f7fe fc13 	bl	800a990 <USBD_CDC_SetRxBuffer>

  pCDC = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c16a:	4b06      	ldr	r3, [pc, #24]	@ (800c184 <CDC_Init_FS+0x30>)
 800c16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c170:	4a06      	ldr	r2, [pc, #24]	@ (800c18c <CDC_Init_FS+0x38>)
 800c172:	6013      	str	r3, [r2, #0]
  s_linepos = 0;
 800c174:	4b06      	ldr	r3, [pc, #24]	@ (800c190 <CDC_Init_FS+0x3c>)
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20001e68 	.word	0x20001e68
 800c184:	20001304 	.word	0x20001304
 800c188:	20001668 	.word	0x20001668
 800c18c:	20002668 	.word	0x20002668
 800c190:	200026ec 	.word	0x200026ec

0800c194 <CDC_DeInit_FS>:

/**
  * @brief  DeInitializes the CDC media low layer
  */
static int8_t CDC_DeInit_FS(void)
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
  pCDC = NULL;
 800c198:	4b04      	ldr	r3, [pc, #16]	@ (800c1ac <CDC_DeInit_FS+0x18>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	20002668 	.word	0x20002668

0800c1b0 <CDC_Control_FS>:

/**
  * @brief  Manage the CDC class requests
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	80bb      	strh	r3, [r7, #4]
  (void)cmd; (void)pbuf; (void)length;
  return (USBD_OK);
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
	...

0800c1d0 <CDC_Receive_FS>:
  *         Se a aplicação estiver em "modo binário", os bytes são
  *         encaminhados crus ao hook CDC_OnRxData(). Caso contrário,
  *         montamos uma linha até '\n' ou '\r' e sinalizamos o parser.
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  if (*Len == 0) goto rearm;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d05f      	beq.n	800c2a2 <CDC_Receive_FS+0xd2>

  if (App_IsBinaryMode())
 800c1e2:	f7f5 fcfd 	bl	8001be0 <App_IsBinaryMode>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d006      	beq.n	800c1fa <CDC_Receive_FS+0x2a>
  {
    CDC_OnRxData(Buf, *Len);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7f5 fcb2 	bl	8001b5c <CDC_OnRxData>
 800c1f8:	e054      	b.n	800c2a4 <CDC_Receive_FS+0xd4>
  }
  else
  {
    for (uint32_t i = 0; i < *Len; i++)
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]
 800c1fe:	e04a      	b.n	800c296 <CDC_Receive_FS+0xc6>
    {
      uint8_t c = Buf[i];
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	4413      	add	r3, r2
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	73fb      	strb	r3, [r7, #15]
      if (c == '\n' || c == '\r')
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	2b0a      	cmp	r3, #10
 800c20e:	d002      	beq.n	800c216 <CDC_Receive_FS+0x46>
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b0d      	cmp	r3, #13
 800c214:	d130      	bne.n	800c278 <CDC_Receive_FS+0xa8>
      {
        if (s_linepos > 0 && !cdc_cmd_ready)
 800c216:	4b29      	ldr	r3, [pc, #164]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d028      	beq.n	800c270 <CDC_Receive_FS+0xa0>
 800c21e:	4b28      	ldr	r3, [pc, #160]	@ (800c2c0 <CDC_Receive_FS+0xf0>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d123      	bne.n	800c270 <CDC_Receive_FS+0xa0>
        {
          uint32_t n = (s_linepos >= RX_LINE_BUF_SZ-1) ? (RX_LINE_BUF_SZ-1) : s_linepos;
 800c228:	4b24      	ldr	r3, [pc, #144]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c22e:	bf28      	it	cs
 800c230:	237f      	movcs	r3, #127	@ 0x7f
 800c232:	60bb      	str	r3, [r7, #8]
          for (uint32_t k=0; k<n; k++) cdc_cmd_buffer[k] = s_linebuf[k];
 800c234:	2300      	movs	r3, #0
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	e00b      	b.n	800c252 <CDC_Receive_FS+0x82>
 800c23a:	4a22      	ldr	r2, [pc, #136]	@ (800c2c4 <CDC_Receive_FS+0xf4>)
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	4413      	add	r3, r2
 800c240:	7819      	ldrb	r1, [r3, #0]
 800c242:	4a21      	ldr	r2, [pc, #132]	@ (800c2c8 <CDC_Receive_FS+0xf8>)
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	460a      	mov	r2, r1
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	3301      	adds	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	429a      	cmp	r2, r3
 800c258:	d3ef      	bcc.n	800c23a <CDC_Receive_FS+0x6a>
          cdc_cmd_buffer[n] = 0;
 800c25a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2c8 <CDC_Receive_FS+0xf8>)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4413      	add	r3, r2
 800c260:	2200      	movs	r2, #0
 800c262:	701a      	strb	r2, [r3, #0]
          cdc_cmd_length = n;
 800c264:	4a19      	ldr	r2, [pc, #100]	@ (800c2cc <CDC_Receive_FS+0xfc>)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6013      	str	r3, [r2, #0]
          cdc_cmd_ready  = 1;
 800c26a:	4b15      	ldr	r3, [pc, #84]	@ (800c2c0 <CDC_Receive_FS+0xf0>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]
        }
        s_linepos = 0;
 800c270:	4b12      	ldr	r3, [pc, #72]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	e00b      	b.n	800c290 <CDC_Receive_FS+0xc0>
      }
      else
      {
        if (s_linepos < RX_LINE_BUF_SZ-1)
 800c278:	4b10      	ldr	r3, [pc, #64]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b7e      	cmp	r3, #126	@ 0x7e
 800c27e:	d807      	bhi.n	800c290 <CDC_Receive_FS+0xc0>
          s_linebuf[s_linepos++] = c;
 800c280:	4b0e      	ldr	r3, [pc, #56]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	490d      	ldr	r1, [pc, #52]	@ (800c2bc <CDC_Receive_FS+0xec>)
 800c288:	600a      	str	r2, [r1, #0]
 800c28a:	490e      	ldr	r1, [pc, #56]	@ (800c2c4 <CDC_Receive_FS+0xf4>)
 800c28c:	7bfa      	ldrb	r2, [r7, #15]
 800c28e:	54ca      	strb	r2, [r1, r3]
    for (uint32_t i = 0; i < *Len; i++)
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	3301      	adds	r3, #1
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d3af      	bcc.n	800c200 <CDC_Receive_FS+0x30>
      }
    }
  }

rearm:
 800c2a0:	e000      	b.n	800c2a4 <CDC_Receive_FS+0xd4>
  if (*Len == 0) goto rearm;
 800c2a2:	bf00      	nop
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	480a      	ldr	r0, [pc, #40]	@ (800c2d0 <CDC_Receive_FS+0x100>)
 800c2a8:	f7fe fb72 	bl	800a990 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c2ac:	4808      	ldr	r0, [pc, #32]	@ (800c2d0 <CDC_Receive_FS+0x100>)
 800c2ae:	f7fe fbcd 	bl	800aa4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	200026ec 	.word	0x200026ec
 800c2c0:	20001664 	.word	0x20001664
 800c2c4:	2000266c 	.word	0x2000266c
 800c2c8:	200015e0 	.word	0x200015e0
 800c2cc:	20001660 	.word	0x20001660
 800c2d0:	20001304 	.word	0x20001304

0800c2d4 <CDC_TransmitCplt_FS>:

/**
  * @brief  Tx complete callback
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	71fb      	strb	r3, [r7, #7]
  (void)Buf; (void)Len; (void)epnum;
  return (USBD_OK);
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <_write>:

/* ===================== Retarget printf ==================================== */
/* Envia payload por CDC com timeout (não travar em IRQ nem loop infinito).   */
int _write(int file, char *ptr, int len)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  (void)file;

  if (len <= 0 || hUsbDeviceFS.pClassData == NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dd04      	ble.n	800c30c <_write+0x1c>
 800c302:	4b25      	ldr	r3, [pc, #148]	@ (800c398 <_write+0xa8>)
 800c304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <_write+0x20>
    return 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	e03f      	b.n	800c390 <_write+0xa0>

  /* NUNCA transmitir de contexto de interrupção */
  if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)
 800c310:	4b22      	ldr	r3, [pc, #136]	@ (800c39c <_write+0xac>)
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <_write+0x30>
    return len; /* descarta silenciosamente em IRQ */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	e037      	b.n	800c390 <_write+0xa0>

  uint32_t t0 = HAL_GetTick();
 800c320:	f7f7 f93a 	bl	8003598 <HAL_GetTick>
 800c324:	6178      	str	r0, [r7, #20]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c326:	4b1c      	ldr	r3, [pc, #112]	@ (800c398 <_write+0xa8>)
 800c328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c32c:	613b      	str	r3, [r7, #16]

  while (hcdc->TxState != 0)
 800c32e:	e008      	b.n	800c342 <_write+0x52>
  {
    if ((HAL_GetTick() - t0) > TX_TIMEOUT_MS) return 0; /* timeout */
 800c330:	f7f7 f932 	bl	8003598 <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2b19      	cmp	r3, #25
 800c33c:	d901      	bls.n	800c342 <_write+0x52>
 800c33e:	2300      	movs	r3, #0
 800c340:	e026      	b.n	800c390 <_write+0xa0>
  while (hcdc->TxState != 0)
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1f1      	bne.n	800c330 <_write+0x40>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)ptr, (uint16_t)len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	4810      	ldr	r0, [pc, #64]	@ (800c398 <_write+0xa8>)
 800c356:	f7fe faf9 	bl	800a94c <USBD_CDC_SetTxBuffer>
  if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK) return 0;
 800c35a:	480f      	ldr	r0, [pc, #60]	@ (800c398 <_write+0xa8>)
 800c35c:	f7fe fb36 	bl	800a9cc <USBD_CDC_TransmitPacket>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <_write+0x7a>
 800c366:	2300      	movs	r3, #0
 800c368:	e012      	b.n	800c390 <_write+0xa0>

  /* aguarda a DMA/USB pegar o buffer (TxState zerar) com timeout curto */
  t0 = HAL_GetTick();
 800c36a:	f7f7 f915 	bl	8003598 <HAL_GetTick>
 800c36e:	6178      	str	r0, [r7, #20]
  while (hcdc->TxState != 0)
 800c370:	e006      	b.n	800c380 <_write+0x90>
  {
    if ((HAL_GetTick() - t0) > TX_TIMEOUT_MS) break;
 800c372:	f7f7 f911 	bl	8003598 <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b19      	cmp	r3, #25
 800c37e:	d805      	bhi.n	800c38c <_write+0x9c>
  while (hcdc->TxState != 0)
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1f3      	bne.n	800c372 <_write+0x82>
 800c38a:	e000      	b.n	800c38e <_write+0x9e>
    if ((HAL_GetTick() - t0) > TX_TIMEOUT_MS) break;
 800c38c:	bf00      	nop
  }
  return len;
 800c38e:	687b      	ldr	r3, [r7, #4]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	20001304 	.word	0x20001304
 800c39c:	e000ed00 	.word	0xe000ed00

0800c3a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	6039      	str	r1, [r7, #0]
 800c3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2212      	movs	r2, #18
 800c3b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3b2:	4b03      	ldr	r3, [pc, #12]	@ (800c3c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	20000104 	.word	0x20000104

0800c3c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	6039      	str	r1, [r7, #0]
 800c3ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2204      	movs	r2, #4
 800c3d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3d6:	4b03      	ldr	r3, [pc, #12]	@ (800c3e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	20000118 	.word	0x20000118

0800c3e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	6039      	str	r1, [r7, #0]
 800c3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d105      	bne.n	800c406 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	4907      	ldr	r1, [pc, #28]	@ (800c41c <USBD_FS_ProductStrDescriptor+0x34>)
 800c3fe:	4808      	ldr	r0, [pc, #32]	@ (800c420 <USBD_FS_ProductStrDescriptor+0x38>)
 800c400:	f7ff fd84 	bl	800bf0c <USBD_GetString>
 800c404:	e004      	b.n	800c410 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	4904      	ldr	r1, [pc, #16]	@ (800c41c <USBD_FS_ProductStrDescriptor+0x34>)
 800c40a:	4805      	ldr	r0, [pc, #20]	@ (800c420 <USBD_FS_ProductStrDescriptor+0x38>)
 800c40c:	f7ff fd7e 	bl	800bf0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c410:	4b02      	ldr	r3, [pc, #8]	@ (800c41c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	200026f0 	.word	0x200026f0
 800c420:	08010ed8 	.word	0x08010ed8

0800c424 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	6039      	str	r1, [r7, #0]
 800c42e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	4904      	ldr	r1, [pc, #16]	@ (800c444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c434:	4804      	ldr	r0, [pc, #16]	@ (800c448 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c436:	f7ff fd69 	bl	800bf0c <USBD_GetString>
  return USBD_StrDesc;
 800c43a:	4b02      	ldr	r3, [pc, #8]	@ (800c444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	200026f0 	.word	0x200026f0
 800c448:	08010ef0 	.word	0x08010ef0

0800c44c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	6039      	str	r1, [r7, #0]
 800c456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	221a      	movs	r2, #26
 800c45c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c45e:	f000 f843 	bl	800c4e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c462:	4b02      	ldr	r3, [pc, #8]	@ (800c46c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	2000011c 	.word	0x2000011c

0800c470 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d105      	bne.n	800c48e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	4907      	ldr	r1, [pc, #28]	@ (800c4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c486:	4808      	ldr	r0, [pc, #32]	@ (800c4a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c488:	f7ff fd40 	bl	800bf0c <USBD_GetString>
 800c48c:	e004      	b.n	800c498 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	4904      	ldr	r1, [pc, #16]	@ (800c4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c492:	4805      	ldr	r0, [pc, #20]	@ (800c4a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c494:	f7ff fd3a 	bl	800bf0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c498:	4b02      	ldr	r3, [pc, #8]	@ (800c4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	200026f0 	.word	0x200026f0
 800c4a8:	08010f04 	.word	0x08010f04

0800c4ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	6039      	str	r1, [r7, #0]
 800c4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d105      	bne.n	800c4ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	4907      	ldr	r1, [pc, #28]	@ (800c4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4c2:	4808      	ldr	r0, [pc, #32]	@ (800c4e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4c4:	f7ff fd22 	bl	800bf0c <USBD_GetString>
 800c4c8:	e004      	b.n	800c4d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	4904      	ldr	r1, [pc, #16]	@ (800c4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4ce:	4805      	ldr	r0, [pc, #20]	@ (800c4e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4d0:	f7ff fd1c 	bl	800bf0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4d4:	4b02      	ldr	r3, [pc, #8]	@ (800c4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	200026f0 	.word	0x200026f0
 800c4e4:	08010f10 	.word	0x08010f10

0800c4e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c52c <Get_SerialNum+0x44>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c530 <Get_SerialNum+0x48>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <Get_SerialNum+0x4c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4413      	add	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d009      	beq.n	800c522 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c50e:	2208      	movs	r2, #8
 800c510:	4909      	ldr	r1, [pc, #36]	@ (800c538 <Get_SerialNum+0x50>)
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 f814 	bl	800c540 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c518:	2204      	movs	r2, #4
 800c51a:	4908      	ldr	r1, [pc, #32]	@ (800c53c <Get_SerialNum+0x54>)
 800c51c:	68b8      	ldr	r0, [r7, #8]
 800c51e:	f000 f80f 	bl	800c540 <IntToUnicode>
  }
}
 800c522:	bf00      	nop
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	1fff7a10 	.word	0x1fff7a10
 800c530:	1fff7a14 	.word	0x1fff7a14
 800c534:	1fff7a18 	.word	0x1fff7a18
 800c538:	2000011e 	.word	0x2000011e
 800c53c:	2000012e 	.word	0x2000012e

0800c540 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c540:	b480      	push	{r7}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	4613      	mov	r3, r2
 800c54c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
 800c556:	e027      	b.n	800c5a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	0f1b      	lsrs	r3, r3, #28
 800c55c:	2b09      	cmp	r3, #9
 800c55e:	d80b      	bhi.n	800c578 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	0f1b      	lsrs	r3, r3, #28
 800c564:	b2da      	uxtb	r2, r3
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	4619      	mov	r1, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	440b      	add	r3, r1
 800c570:	3230      	adds	r2, #48	@ 0x30
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	e00a      	b.n	800c58e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	0f1b      	lsrs	r3, r3, #28
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4619      	mov	r1, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	440b      	add	r3, r1
 800c588:	3237      	adds	r2, #55	@ 0x37
 800c58a:	b2d2      	uxtb	r2, r2
 800c58c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	3301      	adds	r3, #1
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	75fb      	strb	r3, [r7, #23]
 800c5a8:	7dfa      	ldrb	r2, [r7, #23]
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d3d3      	bcc.n	800c558 <IntToUnicode+0x18>
  }
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
	...

0800c5c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5c8:	f107 0314 	add.w	r3, r7, #20
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	605a      	str	r2, [r3, #4]
 800c5d2:	609a      	str	r2, [r3, #8]
 800c5d4:	60da      	str	r2, [r3, #12]
 800c5d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5e0:	d13a      	bne.n	800c658 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	613b      	str	r3, [r7, #16]
 800c5e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c5ec:	f043 0301 	orr.w	r3, r3, #1
 800c5f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c5f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c604:	2302      	movs	r3, #2
 800c606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c60c:	2303      	movs	r3, #3
 800c60e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c610:	230a      	movs	r3, #10
 800c612:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	4619      	mov	r1, r3
 800c61a:	4812      	ldr	r0, [pc, #72]	@ (800c664 <HAL_PCD_MspInit+0xa4>)
 800c61c:	f7f7 ff54 	bl	80044c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c620:	4b0f      	ldr	r3, [pc, #60]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c624:	4a0e      	ldr	r2, [pc, #56]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c62a:	6353      	str	r3, [r2, #52]	@ 0x34
 800c62c:	2300      	movs	r3, #0
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	4b0b      	ldr	r3, [pc, #44]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c634:	4a0a      	ldr	r2, [pc, #40]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c63a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c63c:	4b08      	ldr	r3, [pc, #32]	@ (800c660 <HAL_PCD_MspInit+0xa0>)
 800c63e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c648:	2200      	movs	r2, #0
 800c64a:	2100      	movs	r1, #0
 800c64c:	2043      	movs	r0, #67	@ 0x43
 800c64e:	f7f7 f8ae 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c652:	2043      	movs	r0, #67	@ 0x43
 800c654:	f7f7 f8c7 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c658:	bf00      	nop
 800c65a:	3728      	adds	r7, #40	@ 0x28
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	40023800 	.word	0x40023800
 800c664:	40020000 	.word	0x40020000

0800c668 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c67c:	4619      	mov	r1, r3
 800c67e:	4610      	mov	r0, r2
 800c680:	f7fe facd 	bl	800ac1e <USBD_LL_SetupStage>
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c69e:	78fa      	ldrb	r2, [r7, #3]
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	440b      	add	r3, r1
 800c6ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f7fe fb07 	bl	800acc8 <USBD_LL_DataOutStage>
}
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b082      	sub	sp, #8
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6d4:	78fa      	ldrb	r2, [r7, #3]
 800c6d6:	6879      	ldr	r1, [r7, #4]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	440b      	add	r3, r1
 800c6e2:	3320      	adds	r3, #32
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	78fb      	ldrb	r3, [r7, #3]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f7fe fba9 	bl	800ae40 <USBD_LL_DataInStage>
}
 800c6ee:	bf00      	nop
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c704:	4618      	mov	r0, r3
 800c706:	f7fe fced 	bl	800b0e4 <USBD_LL_SOF>
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c71a:	2301      	movs	r3, #1
 800c71c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	79db      	ldrb	r3, [r3, #7]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d102      	bne.n	800c72c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c726:	2300      	movs	r3, #0
 800c728:	73fb      	strb	r3, [r7, #15]
 800c72a:	e008      	b.n	800c73e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	79db      	ldrb	r3, [r3, #7]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d102      	bne.n	800c73a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c734:	2301      	movs	r3, #1
 800c736:	73fb      	strb	r3, [r7, #15]
 800c738:	e001      	b.n	800c73e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c73a:	f7f4 fd67 	bl	800120c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c744:	7bfa      	ldrb	r2, [r7, #15]
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fe fc87 	bl	800b05c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe fc2e 	bl	800afb6 <USBD_LL_Reset>
}
 800c75a:	bf00      	nop
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
	...

0800c764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe fc82 	bl	800b07c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c78a:	f043 0301 	orr.w	r3, r3, #1
 800c78e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7adb      	ldrb	r3, [r3, #11]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c798:	4b04      	ldr	r3, [pc, #16]	@ (800c7ac <HAL_PCD_SuspendCallback+0x48>)
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	4a03      	ldr	r2, [pc, #12]	@ (800c7ac <HAL_PCD_SuspendCallback+0x48>)
 800c79e:	f043 0306 	orr.w	r3, r3, #6
 800c7a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	e000ed00 	.word	0xe000ed00

0800c7b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe fc78 	bl	800b0b4 <USBD_LL_Resume>
}
 800c7c4:	bf00      	nop
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7de:	78fa      	ldrb	r2, [r7, #3]
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fcd0 	bl	800b188 <USBD_LL_IsoOUTIncomplete>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c802:	78fa      	ldrb	r2, [r7, #3]
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fc8c 	bl	800b124 <USBD_LL_IsoINIncomplete>
}
 800c80c:	bf00      	nop
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fce2 	bl	800b1ec <USBD_LL_DevConnected>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe fcdf 	bl	800b202 <USBD_LL_DevDisconnected>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d13c      	bne.n	800c8d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c85c:	4a20      	ldr	r2, [pc, #128]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a1e      	ldr	r2, [pc, #120]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c868:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c86c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c86e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c874:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c876:	2204      	movs	r2, #4
 800c878:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c87a:	4b19      	ldr	r3, [pc, #100]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c87c:	2202      	movs	r2, #2
 800c87e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c880:	4b17      	ldr	r3, [pc, #92]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c882:	2200      	movs	r2, #0
 800c884:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c886:	4b16      	ldr	r3, [pc, #88]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c888:	2202      	movs	r2, #2
 800c88a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c88c:	4b14      	ldr	r3, [pc, #80]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c88e:	2200      	movs	r2, #0
 800c890:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c892:	4b13      	ldr	r3, [pc, #76]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c894:	2200      	movs	r2, #0
 800c896:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c898:	4b11      	ldr	r3, [pc, #68]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c89e:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c8a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c8aa:	480d      	ldr	r0, [pc, #52]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8ac:	f7f9 f952 	bl	8005b54 <HAL_PCD_Init>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c8b6:	f7f4 fca9 	bl	800120c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c8ba:	2180      	movs	r1, #128	@ 0x80
 800c8bc:	4808      	ldr	r0, [pc, #32]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8be:	f7fa fb7e 	bl	8006fbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c8c2:	2240      	movs	r2, #64	@ 0x40
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	4806      	ldr	r0, [pc, #24]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8c8:	f7fa fb32 	bl	8006f30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8cc:	2280      	movs	r2, #128	@ 0x80
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	4803      	ldr	r0, [pc, #12]	@ (800c8e0 <USBD_LL_Init+0x94>)
 800c8d2:	f7fa fb2d 	bl	8006f30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200028f0 	.word	0x200028f0

0800c8e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7f9 fa39 	bl	8005d72 <HAL_PCD_Start>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f942 	bl	800cb90 <USBD_Get_USB_Status>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c910:	7bbb      	ldrb	r3, [r7, #14]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	4608      	mov	r0, r1
 800c924:	4611      	mov	r1, r2
 800c926:	461a      	mov	r2, r3
 800c928:	4603      	mov	r3, r0
 800c92a:	70fb      	strb	r3, [r7, #3]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70bb      	strb	r3, [r7, #2]
 800c930:	4613      	mov	r3, r2
 800c932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c942:	78bb      	ldrb	r3, [r7, #2]
 800c944:	883a      	ldrh	r2, [r7, #0]
 800c946:	78f9      	ldrb	r1, [r7, #3]
 800c948:	f7f9 ff0d 	bl	8006766 <HAL_PCD_EP_Open>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 f91c 	bl	800cb90 <USBD_Get_USB_Status>
 800c958:	4603      	mov	r3, r0
 800c95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	460b      	mov	r3, r1
 800c970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c980:	78fa      	ldrb	r2, [r7, #3]
 800c982:	4611      	mov	r1, r2
 800c984:	4618      	mov	r0, r3
 800c986:	f7f9 ff58 	bl	800683a <HAL_PCD_EP_Close>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	4618      	mov	r0, r3
 800c992:	f000 f8fd 	bl	800cb90 <USBD_Get_USB_Status>
 800c996:	4603      	mov	r3, r0
 800c998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9be:	78fa      	ldrb	r2, [r7, #3]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fa f810 	bl	80069e8 <HAL_PCD_EP_SetStall>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f8de 	bl	800cb90 <USBD_Get_USB_Status>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9fc:	78fa      	ldrb	r2, [r7, #3]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fa f854 	bl	8006aae <HAL_PCD_EP_ClrStall>
 800ca06:	4603      	mov	r3, r0
 800ca08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 f8bf 	bl	800cb90 <USBD_Get_USB_Status>
 800ca12:	4603      	mov	r3, r0
 800ca14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	da0b      	bge.n	800ca54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca42:	68f9      	ldr	r1, [r7, #12]
 800ca44:	4613      	mov	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	440b      	add	r3, r1
 800ca4e:	3316      	adds	r3, #22
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	e00b      	b.n	800ca6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca54:	78fb      	ldrb	r3, [r7, #3]
 800ca56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca5a:	68f9      	ldr	r1, [r7, #12]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	4413      	add	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	440b      	add	r3, r1
 800ca66:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ca6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	4611      	mov	r1, r2
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f9 fe41 	bl	800671e <HAL_PCD_SetAddress>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 f874 	bl	800cb90 <USBD_Get_USB_Status>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caac:	7bbb      	ldrb	r3, [r7, #14]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
 800cac2:	460b      	mov	r3, r1
 800cac4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cad4:	7af9      	ldrb	r1, [r7, #11]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	f7f9 ff4b 	bl	8006974 <HAL_PCD_EP_Transmit>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 f853 	bl	800cb90 <USBD_Get_USB_Status>
 800caea:	4603      	mov	r3, r0
 800caec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caee:	7dbb      	ldrb	r3, [r7, #22]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3718      	adds	r7, #24
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	607a      	str	r2, [r7, #4]
 800cb02:	603b      	str	r3, [r7, #0]
 800cb04:	460b      	mov	r3, r1
 800cb06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb16:	7af9      	ldrb	r1, [r7, #11]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	f7f9 fed7 	bl	80068ce <HAL_PCD_EP_Receive>
 800cb20:	4603      	mov	r3, r0
 800cb22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f832 	bl	800cb90 <USBD_Get_USB_Status>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb30:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	460b      	mov	r3, r1
 800cb44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb4c:	78fa      	ldrb	r2, [r7, #3]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f9 fef7 	bl	8006944 <HAL_PCD_EP_GetRxCount>
 800cb56:	4603      	mov	r3, r0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb68:	4b03      	ldr	r3, [pc, #12]	@ (800cb78 <USBD_static_malloc+0x18>)
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	20002dd4 	.word	0x20002dd4

0800cb7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]

}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d817      	bhi.n	800cbd4 <USBD_Get_USB_Status+0x44>
 800cba4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbac <USBD_Get_USB_Status+0x1c>)
 800cba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbaa:	bf00      	nop
 800cbac:	0800cbbd 	.word	0x0800cbbd
 800cbb0:	0800cbc3 	.word	0x0800cbc3
 800cbb4:	0800cbc9 	.word	0x0800cbc9
 800cbb8:	0800cbcf 	.word	0x0800cbcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc0:	e00b      	b.n	800cbda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc6:	e008      	b.n	800cbda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	73fb      	strb	r3, [r7, #15]
    break;
 800cbcc:	e005      	b.n	800cbda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd2:	e002      	b.n	800cbda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd8:	bf00      	nop
  }
  return usb_status;
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <cosf>:
 800cbe8:	ee10 3a10 	vmov	r3, s0
 800cbec:	b507      	push	{r0, r1, r2, lr}
 800cbee:	4a1e      	ldr	r2, [pc, #120]	@ (800cc68 <cosf+0x80>)
 800cbf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d806      	bhi.n	800cc06 <cosf+0x1e>
 800cbf8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800cc6c <cosf+0x84>
 800cbfc:	b003      	add	sp, #12
 800cbfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc02:	f000 b8bb 	b.w	800cd7c <__kernel_cosf>
 800cc06:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cc0a:	d304      	bcc.n	800cc16 <cosf+0x2e>
 800cc0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cc10:	b003      	add	sp, #12
 800cc12:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc16:	4668      	mov	r0, sp
 800cc18:	f000 f950 	bl	800cebc <__ieee754_rem_pio2f>
 800cc1c:	f000 0003 	and.w	r0, r0, #3
 800cc20:	2801      	cmp	r0, #1
 800cc22:	d009      	beq.n	800cc38 <cosf+0x50>
 800cc24:	2802      	cmp	r0, #2
 800cc26:	d010      	beq.n	800cc4a <cosf+0x62>
 800cc28:	b9b0      	cbnz	r0, 800cc58 <cosf+0x70>
 800cc2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc2e:	ed9d 0a00 	vldr	s0, [sp]
 800cc32:	f000 f8a3 	bl	800cd7c <__kernel_cosf>
 800cc36:	e7eb      	b.n	800cc10 <cosf+0x28>
 800cc38:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc3c:	ed9d 0a00 	vldr	s0, [sp]
 800cc40:	f000 f8f4 	bl	800ce2c <__kernel_sinf>
 800cc44:	eeb1 0a40 	vneg.f32	s0, s0
 800cc48:	e7e2      	b.n	800cc10 <cosf+0x28>
 800cc4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc4e:	ed9d 0a00 	vldr	s0, [sp]
 800cc52:	f000 f893 	bl	800cd7c <__kernel_cosf>
 800cc56:	e7f5      	b.n	800cc44 <cosf+0x5c>
 800cc58:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc5c:	ed9d 0a00 	vldr	s0, [sp]
 800cc60:	2001      	movs	r0, #1
 800cc62:	f000 f8e3 	bl	800ce2c <__kernel_sinf>
 800cc66:	e7d3      	b.n	800cc10 <cosf+0x28>
 800cc68:	3f490fd8 	.word	0x3f490fd8
 800cc6c:	00000000 	.word	0x00000000

0800cc70 <sinf>:
 800cc70:	ee10 3a10 	vmov	r3, s0
 800cc74:	b507      	push	{r0, r1, r2, lr}
 800cc76:	4a1f      	ldr	r2, [pc, #124]	@ (800ccf4 <sinf+0x84>)
 800cc78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d807      	bhi.n	800cc90 <sinf+0x20>
 800cc80:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ccf8 <sinf+0x88>
 800cc84:	2000      	movs	r0, #0
 800cc86:	b003      	add	sp, #12
 800cc88:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc8c:	f000 b8ce 	b.w	800ce2c <__kernel_sinf>
 800cc90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cc94:	d304      	bcc.n	800cca0 <sinf+0x30>
 800cc96:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cc9a:	b003      	add	sp, #12
 800cc9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cca0:	4668      	mov	r0, sp
 800cca2:	f000 f90b 	bl	800cebc <__ieee754_rem_pio2f>
 800cca6:	f000 0003 	and.w	r0, r0, #3
 800ccaa:	2801      	cmp	r0, #1
 800ccac:	d00a      	beq.n	800ccc4 <sinf+0x54>
 800ccae:	2802      	cmp	r0, #2
 800ccb0:	d00f      	beq.n	800ccd2 <sinf+0x62>
 800ccb2:	b9c0      	cbnz	r0, 800cce6 <sinf+0x76>
 800ccb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ccb8:	ed9d 0a00 	vldr	s0, [sp]
 800ccbc:	2001      	movs	r0, #1
 800ccbe:	f000 f8b5 	bl	800ce2c <__kernel_sinf>
 800ccc2:	e7ea      	b.n	800cc9a <sinf+0x2a>
 800ccc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ccc8:	ed9d 0a00 	vldr	s0, [sp]
 800cccc:	f000 f856 	bl	800cd7c <__kernel_cosf>
 800ccd0:	e7e3      	b.n	800cc9a <sinf+0x2a>
 800ccd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800ccd6:	ed9d 0a00 	vldr	s0, [sp]
 800ccda:	2001      	movs	r0, #1
 800ccdc:	f000 f8a6 	bl	800ce2c <__kernel_sinf>
 800cce0:	eeb1 0a40 	vneg.f32	s0, s0
 800cce4:	e7d9      	b.n	800cc9a <sinf+0x2a>
 800cce6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ccea:	ed9d 0a00 	vldr	s0, [sp]
 800ccee:	f000 f845 	bl	800cd7c <__kernel_cosf>
 800ccf2:	e7f5      	b.n	800cce0 <sinf+0x70>
 800ccf4:	3f490fd8 	.word	0x3f490fd8
 800ccf8:	00000000 	.word	0x00000000

0800ccfc <lrintf>:
 800ccfc:	ee10 3a10 	vmov	r3, s0
 800cd00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cd04:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800cd08:	281e      	cmp	r0, #30
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	dc2f      	bgt.n	800cd6e <lrintf+0x72>
 800cd0e:	1c41      	adds	r1, r0, #1
 800cd10:	da02      	bge.n	800cd18 <lrintf+0x1c>
 800cd12:	2000      	movs	r0, #0
 800cd14:	b002      	add	sp, #8
 800cd16:	4770      	bx	lr
 800cd18:	2816      	cmp	r0, #22
 800cd1a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800cd1e:	dd0a      	ble.n	800cd36 <lrintf+0x3a>
 800cd20:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cd24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cd28:	3a96      	subs	r2, #150	@ 0x96
 800cd2a:	fa03 f002 	lsl.w	r0, r3, r2
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	d0f0      	beq.n	800cd14 <lrintf+0x18>
 800cd32:	4240      	negs	r0, r0
 800cd34:	e7ee      	b.n	800cd14 <lrintf+0x18>
 800cd36:	4b10      	ldr	r3, [pc, #64]	@ (800cd78 <lrintf+0x7c>)
 800cd38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd3c:	ed93 7a00 	vldr	s14, [r3]
 800cd40:	ee37 0a00 	vadd.f32	s0, s14, s0
 800cd44:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cd48:	eddd 7a01 	vldr	s15, [sp, #4]
 800cd4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd50:	ee17 3a90 	vmov	r3, s15
 800cd54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cd58:	d0db      	beq.n	800cd12 <lrintf+0x16>
 800cd5a:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cd5e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800cd62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800cd66:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800cd6a:	40d8      	lsrs	r0, r3
 800cd6c:	e7df      	b.n	800cd2e <lrintf+0x32>
 800cd6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cd72:	ee17 0a90 	vmov	r0, s15
 800cd76:	e7cd      	b.n	800cd14 <lrintf+0x18>
 800cd78:	08011030 	.word	0x08011030

0800cd7c <__kernel_cosf>:
 800cd7c:	ee10 3a10 	vmov	r3, s0
 800cd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd84:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cd88:	eef0 6a40 	vmov.f32	s13, s0
 800cd8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cd90:	d204      	bcs.n	800cd9c <__kernel_cosf+0x20>
 800cd92:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cd96:	ee17 2a90 	vmov	r2, s15
 800cd9a:	b342      	cbz	r2, 800cdee <__kernel_cosf+0x72>
 800cd9c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cda0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ce0c <__kernel_cosf+0x90>
 800cda4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ce10 <__kernel_cosf+0x94>
 800cda8:	4a1a      	ldr	r2, [pc, #104]	@ (800ce14 <__kernel_cosf+0x98>)
 800cdaa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ce18 <__kernel_cosf+0x9c>
 800cdb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cdb8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ce1c <__kernel_cosf+0xa0>
 800cdbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cdc0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ce20 <__kernel_cosf+0xa4>
 800cdc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cdc8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ce24 <__kernel_cosf+0xa8>
 800cdcc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cdd0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800cdd4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800cdd8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cddc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800cde0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde4:	d804      	bhi.n	800cdf0 <__kernel_cosf+0x74>
 800cde6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cdea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cdee:	4770      	bx	lr
 800cdf0:	4a0d      	ldr	r2, [pc, #52]	@ (800ce28 <__kernel_cosf+0xac>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	bf9a      	itte	ls
 800cdf6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800cdfa:	ee07 3a10 	vmovls	s14, r3
 800cdfe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ce02:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ce06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce0a:	e7ec      	b.n	800cde6 <__kernel_cosf+0x6a>
 800ce0c:	ad47d74e 	.word	0xad47d74e
 800ce10:	310f74f6 	.word	0x310f74f6
 800ce14:	3e999999 	.word	0x3e999999
 800ce18:	b493f27c 	.word	0xb493f27c
 800ce1c:	37d00d01 	.word	0x37d00d01
 800ce20:	bab60b61 	.word	0xbab60b61
 800ce24:	3d2aaaab 	.word	0x3d2aaaab
 800ce28:	3f480000 	.word	0x3f480000

0800ce2c <__kernel_sinf>:
 800ce2c:	ee10 3a10 	vmov	r3, s0
 800ce30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce34:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ce38:	d204      	bcs.n	800ce44 <__kernel_sinf+0x18>
 800ce3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ce3e:	ee17 3a90 	vmov	r3, s15
 800ce42:	b35b      	cbz	r3, 800ce9c <__kernel_sinf+0x70>
 800ce44:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ce48:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cea0 <__kernel_sinf+0x74>
 800ce4c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800cea4 <__kernel_sinf+0x78>
 800ce50:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce54:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800cea8 <__kernel_sinf+0x7c>
 800ce58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ce5c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ceac <__kernel_sinf+0x80>
 800ce60:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ce64:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ceb0 <__kernel_sinf+0x84>
 800ce68:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ce6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ce70:	b930      	cbnz	r0, 800ce80 <__kernel_sinf+0x54>
 800ce72:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ceb4 <__kernel_sinf+0x88>
 800ce76:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce7a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ce7e:	4770      	bx	lr
 800ce80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce84:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ce88:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ce8c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ce90:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ceb8 <__kernel_sinf+0x8c>
 800ce94:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ce98:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	2f2ec9d3 	.word	0x2f2ec9d3
 800cea4:	b2d72f34 	.word	0xb2d72f34
 800cea8:	3638ef1b 	.word	0x3638ef1b
 800ceac:	b9500d01 	.word	0xb9500d01
 800ceb0:	3c088889 	.word	0x3c088889
 800ceb4:	be2aaaab 	.word	0xbe2aaaab
 800ceb8:	3e2aaaab 	.word	0x3e2aaaab

0800cebc <__ieee754_rem_pio2f>:
 800cebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cebe:	ee10 6a10 	vmov	r6, s0
 800cec2:	4b88      	ldr	r3, [pc, #544]	@ (800d0e4 <__ieee754_rem_pio2f+0x228>)
 800cec4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cec8:	429d      	cmp	r5, r3
 800ceca:	b087      	sub	sp, #28
 800cecc:	4604      	mov	r4, r0
 800cece:	d805      	bhi.n	800cedc <__ieee754_rem_pio2f+0x20>
 800ced0:	2300      	movs	r3, #0
 800ced2:	ed80 0a00 	vstr	s0, [r0]
 800ced6:	6043      	str	r3, [r0, #4]
 800ced8:	2000      	movs	r0, #0
 800ceda:	e022      	b.n	800cf22 <__ieee754_rem_pio2f+0x66>
 800cedc:	4b82      	ldr	r3, [pc, #520]	@ (800d0e8 <__ieee754_rem_pio2f+0x22c>)
 800cede:	429d      	cmp	r5, r3
 800cee0:	d83a      	bhi.n	800cf58 <__ieee754_rem_pio2f+0x9c>
 800cee2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d0ec <__ieee754_rem_pio2f+0x230>
 800ceec:	4a80      	ldr	r2, [pc, #512]	@ (800d0f0 <__ieee754_rem_pio2f+0x234>)
 800ceee:	f023 030f 	bic.w	r3, r3, #15
 800cef2:	dd18      	ble.n	800cf26 <__ieee754_rem_pio2f+0x6a>
 800cef4:	4293      	cmp	r3, r2
 800cef6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cefa:	bf09      	itett	eq
 800cefc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d0f4 <__ieee754_rem_pio2f+0x238>
 800cf00:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d0f8 <__ieee754_rem_pio2f+0x23c>
 800cf04:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d0fc <__ieee754_rem_pio2f+0x240>
 800cf08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cf0c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cf10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf14:	ed80 7a00 	vstr	s14, [r0]
 800cf18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf1c:	edc0 7a01 	vstr	s15, [r0, #4]
 800cf20:	2001      	movs	r0, #1
 800cf22:	b007      	add	sp, #28
 800cf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf26:	4293      	cmp	r3, r2
 800cf28:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cf2c:	bf09      	itett	eq
 800cf2e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d0f4 <__ieee754_rem_pio2f+0x238>
 800cf32:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d0f8 <__ieee754_rem_pio2f+0x23c>
 800cf36:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d0fc <__ieee754_rem_pio2f+0x240>
 800cf3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cf3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf46:	ed80 7a00 	vstr	s14, [r0]
 800cf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4e:	edc0 7a01 	vstr	s15, [r0, #4]
 800cf52:	f04f 30ff 	mov.w	r0, #4294967295
 800cf56:	e7e4      	b.n	800cf22 <__ieee754_rem_pio2f+0x66>
 800cf58:	4b69      	ldr	r3, [pc, #420]	@ (800d100 <__ieee754_rem_pio2f+0x244>)
 800cf5a:	429d      	cmp	r5, r3
 800cf5c:	d873      	bhi.n	800d046 <__ieee754_rem_pio2f+0x18a>
 800cf5e:	f000 f8dd 	bl	800d11c <fabsf>
 800cf62:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d104 <__ieee754_rem_pio2f+0x248>
 800cf66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cf6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cf6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf76:	ee17 0a90 	vmov	r0, s15
 800cf7a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d0ec <__ieee754_rem_pio2f+0x230>
 800cf7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cf82:	281f      	cmp	r0, #31
 800cf84:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d0f8 <__ieee754_rem_pio2f+0x23c>
 800cf88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8c:	eeb1 6a47 	vneg.f32	s12, s14
 800cf90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cf94:	ee16 1a90 	vmov	r1, s13
 800cf98:	dc09      	bgt.n	800cfae <__ieee754_rem_pio2f+0xf2>
 800cf9a:	4a5b      	ldr	r2, [pc, #364]	@ (800d108 <__ieee754_rem_pio2f+0x24c>)
 800cf9c:	1e47      	subs	r7, r0, #1
 800cf9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cfa2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cfa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d107      	bne.n	800cfbe <__ieee754_rem_pio2f+0x102>
 800cfae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800cfb2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800cfb6:	2a08      	cmp	r2, #8
 800cfb8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cfbc:	dc14      	bgt.n	800cfe8 <__ieee754_rem_pio2f+0x12c>
 800cfbe:	6021      	str	r1, [r4, #0]
 800cfc0:	ed94 7a00 	vldr	s14, [r4]
 800cfc4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cfc8:	2e00      	cmp	r6, #0
 800cfca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cfce:	ed84 0a01 	vstr	s0, [r4, #4]
 800cfd2:	daa6      	bge.n	800cf22 <__ieee754_rem_pio2f+0x66>
 800cfd4:	eeb1 7a47 	vneg.f32	s14, s14
 800cfd8:	eeb1 0a40 	vneg.f32	s0, s0
 800cfdc:	ed84 7a00 	vstr	s14, [r4]
 800cfe0:	ed84 0a01 	vstr	s0, [r4, #4]
 800cfe4:	4240      	negs	r0, r0
 800cfe6:	e79c      	b.n	800cf22 <__ieee754_rem_pio2f+0x66>
 800cfe8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d0f4 <__ieee754_rem_pio2f+0x238>
 800cfec:	eef0 6a40 	vmov.f32	s13, s0
 800cff0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cff4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cff8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cffc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d0fc <__ieee754_rem_pio2f+0x240>
 800d000:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d004:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d008:	ee15 2a90 	vmov	r2, s11
 800d00c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d010:	1a5b      	subs	r3, r3, r1
 800d012:	2b19      	cmp	r3, #25
 800d014:	dc04      	bgt.n	800d020 <__ieee754_rem_pio2f+0x164>
 800d016:	edc4 5a00 	vstr	s11, [r4]
 800d01a:	eeb0 0a66 	vmov.f32	s0, s13
 800d01e:	e7cf      	b.n	800cfc0 <__ieee754_rem_pio2f+0x104>
 800d020:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d10c <__ieee754_rem_pio2f+0x250>
 800d024:	eeb0 0a66 	vmov.f32	s0, s13
 800d028:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d02c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d030:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d110 <__ieee754_rem_pio2f+0x254>
 800d034:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d038:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d03c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d040:	ed84 7a00 	vstr	s14, [r4]
 800d044:	e7bc      	b.n	800cfc0 <__ieee754_rem_pio2f+0x104>
 800d046:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d04a:	d306      	bcc.n	800d05a <__ieee754_rem_pio2f+0x19e>
 800d04c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d050:	edc0 7a01 	vstr	s15, [r0, #4]
 800d054:	edc0 7a00 	vstr	s15, [r0]
 800d058:	e73e      	b.n	800ced8 <__ieee754_rem_pio2f+0x1c>
 800d05a:	15ea      	asrs	r2, r5, #23
 800d05c:	3a86      	subs	r2, #134	@ 0x86
 800d05e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d06a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d114 <__ieee754_rem_pio2f+0x258>
 800d06e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d076:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d07a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d07e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d082:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d08a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d08e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d092:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09a:	edcd 7a05 	vstr	s15, [sp, #20]
 800d09e:	d11e      	bne.n	800d0de <__ieee754_rem_pio2f+0x222>
 800d0a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a8:	bf0c      	ite	eq
 800d0aa:	2301      	moveq	r3, #1
 800d0ac:	2302      	movne	r3, #2
 800d0ae:	491a      	ldr	r1, [pc, #104]	@ (800d118 <__ieee754_rem_pio2f+0x25c>)
 800d0b0:	9101      	str	r1, [sp, #4]
 800d0b2:	2102      	movs	r1, #2
 800d0b4:	9100      	str	r1, [sp, #0]
 800d0b6:	a803      	add	r0, sp, #12
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f000 f837 	bl	800d12c <__kernel_rem_pio2f>
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	f6bf af2f 	bge.w	800cf22 <__ieee754_rem_pio2f+0x66>
 800d0c4:	edd4 7a00 	vldr	s15, [r4]
 800d0c8:	eef1 7a67 	vneg.f32	s15, s15
 800d0cc:	edc4 7a00 	vstr	s15, [r4]
 800d0d0:	edd4 7a01 	vldr	s15, [r4, #4]
 800d0d4:	eef1 7a67 	vneg.f32	s15, s15
 800d0d8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d0dc:	e782      	b.n	800cfe4 <__ieee754_rem_pio2f+0x128>
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e7e5      	b.n	800d0ae <__ieee754_rem_pio2f+0x1f2>
 800d0e2:	bf00      	nop
 800d0e4:	3f490fd8 	.word	0x3f490fd8
 800d0e8:	4016cbe3 	.word	0x4016cbe3
 800d0ec:	3fc90f80 	.word	0x3fc90f80
 800d0f0:	3fc90fd0 	.word	0x3fc90fd0
 800d0f4:	37354400 	.word	0x37354400
 800d0f8:	37354443 	.word	0x37354443
 800d0fc:	2e85a308 	.word	0x2e85a308
 800d100:	43490f80 	.word	0x43490f80
 800d104:	3f22f984 	.word	0x3f22f984
 800d108:	08011038 	.word	0x08011038
 800d10c:	2e85a300 	.word	0x2e85a300
 800d110:	248d3132 	.word	0x248d3132
 800d114:	43800000 	.word	0x43800000
 800d118:	080110b8 	.word	0x080110b8

0800d11c <fabsf>:
 800d11c:	ee10 3a10 	vmov	r3, s0
 800d120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d124:	ee00 3a10 	vmov	s0, r3
 800d128:	4770      	bx	lr
	...

0800d12c <__kernel_rem_pio2f>:
 800d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	ed2d 8b04 	vpush	{d8-d9}
 800d134:	b0d9      	sub	sp, #356	@ 0x164
 800d136:	4690      	mov	r8, r2
 800d138:	9001      	str	r0, [sp, #4]
 800d13a:	4ab9      	ldr	r2, [pc, #740]	@ (800d420 <__kernel_rem_pio2f+0x2f4>)
 800d13c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d13e:	f118 0f04 	cmn.w	r8, #4
 800d142:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d146:	460f      	mov	r7, r1
 800d148:	f103 3bff 	add.w	fp, r3, #4294967295
 800d14c:	db27      	blt.n	800d19e <__kernel_rem_pio2f+0x72>
 800d14e:	f1b8 0203 	subs.w	r2, r8, #3
 800d152:	bf48      	it	mi
 800d154:	f108 0204 	addmi.w	r2, r8, #4
 800d158:	10d2      	asrs	r2, r2, #3
 800d15a:	1c55      	adds	r5, r2, #1
 800d15c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d15e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d162:	00e8      	lsls	r0, r5, #3
 800d164:	eba2 060b 	sub.w	r6, r2, fp
 800d168:	9002      	str	r0, [sp, #8]
 800d16a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d16e:	eb0a 0c0b 	add.w	ip, sl, fp
 800d172:	ac1c      	add	r4, sp, #112	@ 0x70
 800d174:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d178:	2000      	movs	r0, #0
 800d17a:	4560      	cmp	r0, ip
 800d17c:	dd11      	ble.n	800d1a2 <__kernel_rem_pio2f+0x76>
 800d17e:	a91c      	add	r1, sp, #112	@ 0x70
 800d180:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d184:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d188:	f04f 0c00 	mov.w	ip, #0
 800d18c:	45d4      	cmp	ip, sl
 800d18e:	dc27      	bgt.n	800d1e0 <__kernel_rem_pio2f+0xb4>
 800d190:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d194:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d198:	4606      	mov	r6, r0
 800d19a:	2400      	movs	r4, #0
 800d19c:	e016      	b.n	800d1cc <__kernel_rem_pio2f+0xa0>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	e7db      	b.n	800d15a <__kernel_rem_pio2f+0x2e>
 800d1a2:	42c6      	cmn	r6, r0
 800d1a4:	bf5d      	ittte	pl
 800d1a6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d1aa:	ee07 1a90 	vmovpl	s15, r1
 800d1ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d1b2:	eef0 7a47 	vmovmi.f32	s15, s14
 800d1b6:	ece4 7a01 	vstmia	r4!, {s15}
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	e7dd      	b.n	800d17a <__kernel_rem_pio2f+0x4e>
 800d1be:	ecfe 6a01 	vldmia	lr!, {s13}
 800d1c2:	ed96 7a00 	vldr	s14, [r6]
 800d1c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d1ca:	3401      	adds	r4, #1
 800d1cc:	455c      	cmp	r4, fp
 800d1ce:	f1a6 0604 	sub.w	r6, r6, #4
 800d1d2:	ddf4      	ble.n	800d1be <__kernel_rem_pio2f+0x92>
 800d1d4:	ece9 7a01 	vstmia	r9!, {s15}
 800d1d8:	f10c 0c01 	add.w	ip, ip, #1
 800d1dc:	3004      	adds	r0, #4
 800d1de:	e7d5      	b.n	800d18c <__kernel_rem_pio2f+0x60>
 800d1e0:	a908      	add	r1, sp, #32
 800d1e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1e6:	9104      	str	r1, [sp, #16]
 800d1e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d1ea:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d42c <__kernel_rem_pio2f+0x300>
 800d1ee:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d428 <__kernel_rem_pio2f+0x2fc>
 800d1f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d1f6:	9203      	str	r2, [sp, #12]
 800d1f8:	4654      	mov	r4, sl
 800d1fa:	00a2      	lsls	r2, r4, #2
 800d1fc:	9205      	str	r2, [sp, #20]
 800d1fe:	aa58      	add	r2, sp, #352	@ 0x160
 800d200:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d204:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d208:	a944      	add	r1, sp, #272	@ 0x110
 800d20a:	aa08      	add	r2, sp, #32
 800d20c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d210:	4694      	mov	ip, r2
 800d212:	4626      	mov	r6, r4
 800d214:	2e00      	cmp	r6, #0
 800d216:	f1a0 0004 	sub.w	r0, r0, #4
 800d21a:	dc4c      	bgt.n	800d2b6 <__kernel_rem_pio2f+0x18a>
 800d21c:	4628      	mov	r0, r5
 800d21e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d222:	f000 f9f5 	bl	800d610 <scalbnf>
 800d226:	eeb0 8a40 	vmov.f32	s16, s0
 800d22a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d22e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d232:	f000 fa53 	bl	800d6dc <floorf>
 800d236:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d23a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d23e:	2d00      	cmp	r5, #0
 800d240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d244:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d248:	ee17 9a90 	vmov	r9, s15
 800d24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d250:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d254:	dd41      	ble.n	800d2da <__kernel_rem_pio2f+0x1ae>
 800d256:	f104 3cff 	add.w	ip, r4, #4294967295
 800d25a:	a908      	add	r1, sp, #32
 800d25c:	f1c5 0e08 	rsb	lr, r5, #8
 800d260:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d264:	fa46 f00e 	asr.w	r0, r6, lr
 800d268:	4481      	add	r9, r0
 800d26a:	fa00 f00e 	lsl.w	r0, r0, lr
 800d26e:	1a36      	subs	r6, r6, r0
 800d270:	f1c5 0007 	rsb	r0, r5, #7
 800d274:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d278:	4106      	asrs	r6, r0
 800d27a:	2e00      	cmp	r6, #0
 800d27c:	dd3c      	ble.n	800d2f8 <__kernel_rem_pio2f+0x1cc>
 800d27e:	f04f 0e00 	mov.w	lr, #0
 800d282:	f109 0901 	add.w	r9, r9, #1
 800d286:	4670      	mov	r0, lr
 800d288:	4574      	cmp	r4, lr
 800d28a:	dc68      	bgt.n	800d35e <__kernel_rem_pio2f+0x232>
 800d28c:	2d00      	cmp	r5, #0
 800d28e:	dd03      	ble.n	800d298 <__kernel_rem_pio2f+0x16c>
 800d290:	2d01      	cmp	r5, #1
 800d292:	d074      	beq.n	800d37e <__kernel_rem_pio2f+0x252>
 800d294:	2d02      	cmp	r5, #2
 800d296:	d07d      	beq.n	800d394 <__kernel_rem_pio2f+0x268>
 800d298:	2e02      	cmp	r6, #2
 800d29a:	d12d      	bne.n	800d2f8 <__kernel_rem_pio2f+0x1cc>
 800d29c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d2a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d2a4:	b340      	cbz	r0, 800d2f8 <__kernel_rem_pio2f+0x1cc>
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	9306      	str	r3, [sp, #24]
 800d2aa:	f000 f9b1 	bl	800d610 <scalbnf>
 800d2ae:	9b06      	ldr	r3, [sp, #24]
 800d2b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d2b4:	e020      	b.n	800d2f8 <__kernel_rem_pio2f+0x1cc>
 800d2b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d2ba:	3e01      	subs	r6, #1
 800d2bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d2c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d2cc:	ecac 0a01 	vstmia	ip!, {s0}
 800d2d0:	ed90 0a00 	vldr	s0, [r0]
 800d2d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d2d8:	e79c      	b.n	800d214 <__kernel_rem_pio2f+0xe8>
 800d2da:	d105      	bne.n	800d2e8 <__kernel_rem_pio2f+0x1bc>
 800d2dc:	1e60      	subs	r0, r4, #1
 800d2de:	a908      	add	r1, sp, #32
 800d2e0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d2e4:	11f6      	asrs	r6, r6, #7
 800d2e6:	e7c8      	b.n	800d27a <__kernel_rem_pio2f+0x14e>
 800d2e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f4:	da31      	bge.n	800d35a <__kernel_rem_pio2f+0x22e>
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d300:	f040 8098 	bne.w	800d434 <__kernel_rem_pio2f+0x308>
 800d304:	1e60      	subs	r0, r4, #1
 800d306:	2200      	movs	r2, #0
 800d308:	4550      	cmp	r0, sl
 800d30a:	da4b      	bge.n	800d3a4 <__kernel_rem_pio2f+0x278>
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	d065      	beq.n	800d3dc <__kernel_rem_pio2f+0x2b0>
 800d310:	3c01      	subs	r4, #1
 800d312:	ab08      	add	r3, sp, #32
 800d314:	3d08      	subs	r5, #8
 800d316:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0f8      	beq.n	800d310 <__kernel_rem_pio2f+0x1e4>
 800d31e:	4628      	mov	r0, r5
 800d320:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d324:	f000 f974 	bl	800d610 <scalbnf>
 800d328:	1c63      	adds	r3, r4, #1
 800d32a:	aa44      	add	r2, sp, #272	@ 0x110
 800d32c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d42c <__kernel_rem_pio2f+0x300>
 800d330:	0099      	lsls	r1, r3, #2
 800d332:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d336:	4623      	mov	r3, r4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f280 80a9 	bge.w	800d490 <__kernel_rem_pio2f+0x364>
 800d33e:	4623      	mov	r3, r4
 800d340:	2b00      	cmp	r3, #0
 800d342:	f2c0 80c7 	blt.w	800d4d4 <__kernel_rem_pio2f+0x3a8>
 800d346:	aa44      	add	r2, sp, #272	@ 0x110
 800d348:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d34c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d424 <__kernel_rem_pio2f+0x2f8>
 800d350:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d354:	2000      	movs	r0, #0
 800d356:	1ae2      	subs	r2, r4, r3
 800d358:	e0b1      	b.n	800d4be <__kernel_rem_pio2f+0x392>
 800d35a:	2602      	movs	r6, #2
 800d35c:	e78f      	b.n	800d27e <__kernel_rem_pio2f+0x152>
 800d35e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d362:	b948      	cbnz	r0, 800d378 <__kernel_rem_pio2f+0x24c>
 800d364:	b121      	cbz	r1, 800d370 <__kernel_rem_pio2f+0x244>
 800d366:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d36a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d36e:	2101      	movs	r1, #1
 800d370:	f10e 0e01 	add.w	lr, lr, #1
 800d374:	4608      	mov	r0, r1
 800d376:	e787      	b.n	800d288 <__kernel_rem_pio2f+0x15c>
 800d378:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d37c:	e7f5      	b.n	800d36a <__kernel_rem_pio2f+0x23e>
 800d37e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d382:	aa08      	add	r2, sp, #32
 800d384:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d388:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d38c:	a908      	add	r1, sp, #32
 800d38e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d392:	e781      	b.n	800d298 <__kernel_rem_pio2f+0x16c>
 800d394:	f104 3cff 	add.w	ip, r4, #4294967295
 800d398:	aa08      	add	r2, sp, #32
 800d39a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d39e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d3a2:	e7f3      	b.n	800d38c <__kernel_rem_pio2f+0x260>
 800d3a4:	a908      	add	r1, sp, #32
 800d3a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d3aa:	3801      	subs	r0, #1
 800d3ac:	430a      	orrs	r2, r1
 800d3ae:	e7ab      	b.n	800d308 <__kernel_rem_pio2f+0x1dc>
 800d3b0:	3201      	adds	r2, #1
 800d3b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d3b6:	2e00      	cmp	r6, #0
 800d3b8:	d0fa      	beq.n	800d3b0 <__kernel_rem_pio2f+0x284>
 800d3ba:	9905      	ldr	r1, [sp, #20]
 800d3bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d3c0:	eb0d 0001 	add.w	r0, sp, r1
 800d3c4:	18e6      	adds	r6, r4, r3
 800d3c6:	a91c      	add	r1, sp, #112	@ 0x70
 800d3c8:	f104 0c01 	add.w	ip, r4, #1
 800d3cc:	384c      	subs	r0, #76	@ 0x4c
 800d3ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d3d2:	4422      	add	r2, r4
 800d3d4:	4562      	cmp	r2, ip
 800d3d6:	da04      	bge.n	800d3e2 <__kernel_rem_pio2f+0x2b6>
 800d3d8:	4614      	mov	r4, r2
 800d3da:	e70e      	b.n	800d1fa <__kernel_rem_pio2f+0xce>
 800d3dc:	9804      	ldr	r0, [sp, #16]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	e7e7      	b.n	800d3b2 <__kernel_rem_pio2f+0x286>
 800d3e2:	9903      	ldr	r1, [sp, #12]
 800d3e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d3e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d3ec:	9105      	str	r1, [sp, #20]
 800d3ee:	ee07 1a90 	vmov	s15, r1
 800d3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3f6:	2400      	movs	r4, #0
 800d3f8:	ece6 7a01 	vstmia	r6!, {s15}
 800d3fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d400:	46b1      	mov	r9, r6
 800d402:	455c      	cmp	r4, fp
 800d404:	dd04      	ble.n	800d410 <__kernel_rem_pio2f+0x2e4>
 800d406:	ece0 7a01 	vstmia	r0!, {s15}
 800d40a:	f10c 0c01 	add.w	ip, ip, #1
 800d40e:	e7e1      	b.n	800d3d4 <__kernel_rem_pio2f+0x2a8>
 800d410:	ecfe 6a01 	vldmia	lr!, {s13}
 800d414:	ed39 7a01 	vldmdb	r9!, {s14}
 800d418:	3401      	adds	r4, #1
 800d41a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d41e:	e7f0      	b.n	800d402 <__kernel_rem_pio2f+0x2d6>
 800d420:	080113fc 	.word	0x080113fc
 800d424:	080113d0 	.word	0x080113d0
 800d428:	43800000 	.word	0x43800000
 800d42c:	3b800000 	.word	0x3b800000
 800d430:	00000000 	.word	0x00000000
 800d434:	9b02      	ldr	r3, [sp, #8]
 800d436:	eeb0 0a48 	vmov.f32	s0, s16
 800d43a:	eba3 0008 	sub.w	r0, r3, r8
 800d43e:	f000 f8e7 	bl	800d610 <scalbnf>
 800d442:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d428 <__kernel_rem_pio2f+0x2fc>
 800d446:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44e:	db19      	blt.n	800d484 <__kernel_rem_pio2f+0x358>
 800d450:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d42c <__kernel_rem_pio2f+0x300>
 800d454:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d458:	aa08      	add	r2, sp, #32
 800d45a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d45e:	3508      	adds	r5, #8
 800d460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d464:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d46c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d470:	ee10 3a10 	vmov	r3, s0
 800d474:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d478:	ee17 3a90 	vmov	r3, s15
 800d47c:	3401      	adds	r4, #1
 800d47e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d482:	e74c      	b.n	800d31e <__kernel_rem_pio2f+0x1f2>
 800d484:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d488:	aa08      	add	r2, sp, #32
 800d48a:	ee10 3a10 	vmov	r3, s0
 800d48e:	e7f6      	b.n	800d47e <__kernel_rem_pio2f+0x352>
 800d490:	a808      	add	r0, sp, #32
 800d492:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d496:	9001      	str	r0, [sp, #4]
 800d498:	ee07 0a90 	vmov	s15, r0
 800d49c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d4a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d4aa:	ed62 7a01 	vstmdb	r2!, {s15}
 800d4ae:	e743      	b.n	800d338 <__kernel_rem_pio2f+0x20c>
 800d4b0:	ecfc 6a01 	vldmia	ip!, {s13}
 800d4b4:	ecb5 7a01 	vldmia	r5!, {s14}
 800d4b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4bc:	3001      	adds	r0, #1
 800d4be:	4550      	cmp	r0, sl
 800d4c0:	dc01      	bgt.n	800d4c6 <__kernel_rem_pio2f+0x39a>
 800d4c2:	4282      	cmp	r2, r0
 800d4c4:	daf4      	bge.n	800d4b0 <__kernel_rem_pio2f+0x384>
 800d4c6:	a858      	add	r0, sp, #352	@ 0x160
 800d4c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d4cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	e735      	b.n	800d340 <__kernel_rem_pio2f+0x214>
 800d4d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	dc09      	bgt.n	800d4ee <__kernel_rem_pio2f+0x3c2>
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dc2b      	bgt.n	800d536 <__kernel_rem_pio2f+0x40a>
 800d4de:	d044      	beq.n	800d56a <__kernel_rem_pio2f+0x43e>
 800d4e0:	f009 0007 	and.w	r0, r9, #7
 800d4e4:	b059      	add	sp, #356	@ 0x164
 800d4e6:	ecbd 8b04 	vpop	{d8-d9}
 800d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d1f5      	bne.n	800d4e0 <__kernel_rem_pio2f+0x3b4>
 800d4f4:	aa30      	add	r2, sp, #192	@ 0xc0
 800d4f6:	1f0b      	subs	r3, r1, #4
 800d4f8:	4413      	add	r3, r2
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f1a2 0204 	sub.w	r2, r2, #4
 800d504:	dc52      	bgt.n	800d5ac <__kernel_rem_pio2f+0x480>
 800d506:	4622      	mov	r2, r4
 800d508:	2a01      	cmp	r2, #1
 800d50a:	f1a3 0304 	sub.w	r3, r3, #4
 800d50e:	dc5d      	bgt.n	800d5cc <__kernel_rem_pio2f+0x4a0>
 800d510:	ab30      	add	r3, sp, #192	@ 0xc0
 800d512:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d516:	440b      	add	r3, r1
 800d518:	2c01      	cmp	r4, #1
 800d51a:	dc67      	bgt.n	800d5ec <__kernel_rem_pio2f+0x4c0>
 800d51c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d520:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d524:	2e00      	cmp	r6, #0
 800d526:	d167      	bne.n	800d5f8 <__kernel_rem_pio2f+0x4cc>
 800d528:	edc7 6a00 	vstr	s13, [r7]
 800d52c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d530:	edc7 7a02 	vstr	s15, [r7, #8]
 800d534:	e7d4      	b.n	800d4e0 <__kernel_rem_pio2f+0x3b4>
 800d536:	ab30      	add	r3, sp, #192	@ 0xc0
 800d538:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d53c:	440b      	add	r3, r1
 800d53e:	4622      	mov	r2, r4
 800d540:	2a00      	cmp	r2, #0
 800d542:	da24      	bge.n	800d58e <__kernel_rem_pio2f+0x462>
 800d544:	b34e      	cbz	r6, 800d59a <__kernel_rem_pio2f+0x46e>
 800d546:	eef1 7a47 	vneg.f32	s15, s14
 800d54a:	edc7 7a00 	vstr	s15, [r7]
 800d54e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d556:	aa31      	add	r2, sp, #196	@ 0xc4
 800d558:	2301      	movs	r3, #1
 800d55a:	429c      	cmp	r4, r3
 800d55c:	da20      	bge.n	800d5a0 <__kernel_rem_pio2f+0x474>
 800d55e:	b10e      	cbz	r6, 800d564 <__kernel_rem_pio2f+0x438>
 800d560:	eef1 7a67 	vneg.f32	s15, s15
 800d564:	edc7 7a01 	vstr	s15, [r7, #4]
 800d568:	e7ba      	b.n	800d4e0 <__kernel_rem_pio2f+0x3b4>
 800d56a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d56c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d430 <__kernel_rem_pio2f+0x304>
 800d570:	440b      	add	r3, r1
 800d572:	2c00      	cmp	r4, #0
 800d574:	da05      	bge.n	800d582 <__kernel_rem_pio2f+0x456>
 800d576:	b10e      	cbz	r6, 800d57c <__kernel_rem_pio2f+0x450>
 800d578:	eef1 7a67 	vneg.f32	s15, s15
 800d57c:	edc7 7a00 	vstr	s15, [r7]
 800d580:	e7ae      	b.n	800d4e0 <__kernel_rem_pio2f+0x3b4>
 800d582:	ed33 7a01 	vldmdb	r3!, {s14}
 800d586:	3c01      	subs	r4, #1
 800d588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d58c:	e7f1      	b.n	800d572 <__kernel_rem_pio2f+0x446>
 800d58e:	ed73 7a01 	vldmdb	r3!, {s15}
 800d592:	3a01      	subs	r2, #1
 800d594:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d598:	e7d2      	b.n	800d540 <__kernel_rem_pio2f+0x414>
 800d59a:	eef0 7a47 	vmov.f32	s15, s14
 800d59e:	e7d4      	b.n	800d54a <__kernel_rem_pio2f+0x41e>
 800d5a0:	ecb2 7a01 	vldmia	r2!, {s14}
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5aa:	e7d6      	b.n	800d55a <__kernel_rem_pio2f+0x42e>
 800d5ac:	edd2 7a00 	vldr	s15, [r2]
 800d5b0:	edd2 6a01 	vldr	s13, [r2, #4]
 800d5b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d5b8:	3801      	subs	r0, #1
 800d5ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5be:	ed82 7a00 	vstr	s14, [r2]
 800d5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c6:	edc2 7a01 	vstr	s15, [r2, #4]
 800d5ca:	e798      	b.n	800d4fe <__kernel_rem_pio2f+0x3d2>
 800d5cc:	edd3 7a00 	vldr	s15, [r3]
 800d5d0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d5d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d5d8:	3a01      	subs	r2, #1
 800d5da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5de:	ed83 7a00 	vstr	s14, [r3]
 800d5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e6:	edc3 7a01 	vstr	s15, [r3, #4]
 800d5ea:	e78d      	b.n	800d508 <__kernel_rem_pio2f+0x3dc>
 800d5ec:	ed33 7a01 	vldmdb	r3!, {s14}
 800d5f0:	3c01      	subs	r4, #1
 800d5f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5f6:	e78f      	b.n	800d518 <__kernel_rem_pio2f+0x3ec>
 800d5f8:	eef1 6a66 	vneg.f32	s13, s13
 800d5fc:	eeb1 7a47 	vneg.f32	s14, s14
 800d600:	edc7 6a00 	vstr	s13, [r7]
 800d604:	ed87 7a01 	vstr	s14, [r7, #4]
 800d608:	eef1 7a67 	vneg.f32	s15, s15
 800d60c:	e790      	b.n	800d530 <__kernel_rem_pio2f+0x404>
 800d60e:	bf00      	nop

0800d610 <scalbnf>:
 800d610:	ee10 3a10 	vmov	r3, s0
 800d614:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d618:	d02b      	beq.n	800d672 <scalbnf+0x62>
 800d61a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d61e:	d302      	bcc.n	800d626 <scalbnf+0x16>
 800d620:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d624:	4770      	bx	lr
 800d626:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d62a:	d123      	bne.n	800d674 <scalbnf+0x64>
 800d62c:	4b24      	ldr	r3, [pc, #144]	@ (800d6c0 <scalbnf+0xb0>)
 800d62e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d6c4 <scalbnf+0xb4>
 800d632:	4298      	cmp	r0, r3
 800d634:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d638:	db17      	blt.n	800d66a <scalbnf+0x5a>
 800d63a:	ee10 3a10 	vmov	r3, s0
 800d63e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d642:	3a19      	subs	r2, #25
 800d644:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d648:	4288      	cmp	r0, r1
 800d64a:	dd15      	ble.n	800d678 <scalbnf+0x68>
 800d64c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d6c8 <scalbnf+0xb8>
 800d650:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d6cc <scalbnf+0xbc>
 800d654:	ee10 3a10 	vmov	r3, s0
 800d658:	eeb0 7a67 	vmov.f32	s14, s15
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bfb8      	it	lt
 800d660:	eef0 7a66 	vmovlt.f32	s15, s13
 800d664:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d668:	4770      	bx	lr
 800d66a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d6d0 <scalbnf+0xc0>
 800d66e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d672:	4770      	bx	lr
 800d674:	0dd2      	lsrs	r2, r2, #23
 800d676:	e7e5      	b.n	800d644 <scalbnf+0x34>
 800d678:	4410      	add	r0, r2
 800d67a:	28fe      	cmp	r0, #254	@ 0xfe
 800d67c:	dce6      	bgt.n	800d64c <scalbnf+0x3c>
 800d67e:	2800      	cmp	r0, #0
 800d680:	dd06      	ble.n	800d690 <scalbnf+0x80>
 800d682:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d686:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d68a:	ee00 3a10 	vmov	s0, r3
 800d68e:	4770      	bx	lr
 800d690:	f110 0f16 	cmn.w	r0, #22
 800d694:	da09      	bge.n	800d6aa <scalbnf+0x9a>
 800d696:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d6d0 <scalbnf+0xc0>
 800d69a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d6d4 <scalbnf+0xc4>
 800d69e:	ee10 3a10 	vmov	r3, s0
 800d6a2:	eeb0 7a67 	vmov.f32	s14, s15
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	e7d9      	b.n	800d65e <scalbnf+0x4e>
 800d6aa:	3019      	adds	r0, #25
 800d6ac:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d6b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d6b4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d6d8 <scalbnf+0xc8>
 800d6b8:	ee07 3a90 	vmov	s15, r3
 800d6bc:	e7d7      	b.n	800d66e <scalbnf+0x5e>
 800d6be:	bf00      	nop
 800d6c0:	ffff3cb0 	.word	0xffff3cb0
 800d6c4:	4c000000 	.word	0x4c000000
 800d6c8:	7149f2ca 	.word	0x7149f2ca
 800d6cc:	f149f2ca 	.word	0xf149f2ca
 800d6d0:	0da24260 	.word	0x0da24260
 800d6d4:	8da24260 	.word	0x8da24260
 800d6d8:	33000000 	.word	0x33000000

0800d6dc <floorf>:
 800d6dc:	ee10 3a10 	vmov	r3, s0
 800d6e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6e4:	3a7f      	subs	r2, #127	@ 0x7f
 800d6e6:	2a16      	cmp	r2, #22
 800d6e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6ec:	dc2b      	bgt.n	800d746 <floorf+0x6a>
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	da12      	bge.n	800d718 <floorf+0x3c>
 800d6f2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d758 <floorf+0x7c>
 800d6f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d6fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d702:	dd06      	ble.n	800d712 <floorf+0x36>
 800d704:	2b00      	cmp	r3, #0
 800d706:	da24      	bge.n	800d752 <floorf+0x76>
 800d708:	2900      	cmp	r1, #0
 800d70a:	4b14      	ldr	r3, [pc, #80]	@ (800d75c <floorf+0x80>)
 800d70c:	bf08      	it	eq
 800d70e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d712:	ee00 3a10 	vmov	s0, r3
 800d716:	4770      	bx	lr
 800d718:	4911      	ldr	r1, [pc, #68]	@ (800d760 <floorf+0x84>)
 800d71a:	4111      	asrs	r1, r2
 800d71c:	420b      	tst	r3, r1
 800d71e:	d0fa      	beq.n	800d716 <floorf+0x3a>
 800d720:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d758 <floorf+0x7c>
 800d724:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d728:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d730:	ddef      	ble.n	800d712 <floorf+0x36>
 800d732:	2b00      	cmp	r3, #0
 800d734:	bfbe      	ittt	lt
 800d736:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d73a:	fa40 f202 	asrlt.w	r2, r0, r2
 800d73e:	189b      	addlt	r3, r3, r2
 800d740:	ea23 0301 	bic.w	r3, r3, r1
 800d744:	e7e5      	b.n	800d712 <floorf+0x36>
 800d746:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d74a:	d3e4      	bcc.n	800d716 <floorf+0x3a>
 800d74c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d750:	4770      	bx	lr
 800d752:	2300      	movs	r3, #0
 800d754:	e7dd      	b.n	800d712 <floorf+0x36>
 800d756:	bf00      	nop
 800d758:	7149f2ca 	.word	0x7149f2ca
 800d75c:	bf800000 	.word	0xbf800000
 800d760:	007fffff 	.word	0x007fffff

0800d764 <atoi>:
 800d764:	220a      	movs	r2, #10
 800d766:	2100      	movs	r1, #0
 800d768:	f000 bee0 	b.w	800e52c <strtol>

0800d76c <sulp>:
 800d76c:	b570      	push	{r4, r5, r6, lr}
 800d76e:	4604      	mov	r4, r0
 800d770:	460d      	mov	r5, r1
 800d772:	ec45 4b10 	vmov	d0, r4, r5
 800d776:	4616      	mov	r6, r2
 800d778:	f002 fa5e 	bl	800fc38 <__ulp>
 800d77c:	ec51 0b10 	vmov	r0, r1, d0
 800d780:	b17e      	cbz	r6, 800d7a2 <sulp+0x36>
 800d782:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d786:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd09      	ble.n	800d7a2 <sulp+0x36>
 800d78e:	051b      	lsls	r3, r3, #20
 800d790:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d794:	2400      	movs	r4, #0
 800d796:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 ff33 	bl	8000608 <__aeabi_dmul>
 800d7a2:	ec41 0b10 	vmov	d0, r0, r1
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}

0800d7a8 <_strtod_l>:
 800d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ac:	b09f      	sub	sp, #124	@ 0x7c
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d7b6:	9005      	str	r0, [sp, #20]
 800d7b8:	f04f 0a00 	mov.w	sl, #0
 800d7bc:	f04f 0b00 	mov.w	fp, #0
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7c4:	7811      	ldrb	r1, [r2, #0]
 800d7c6:	292b      	cmp	r1, #43	@ 0x2b
 800d7c8:	d04a      	beq.n	800d860 <_strtod_l+0xb8>
 800d7ca:	d838      	bhi.n	800d83e <_strtod_l+0x96>
 800d7cc:	290d      	cmp	r1, #13
 800d7ce:	d832      	bhi.n	800d836 <_strtod_l+0x8e>
 800d7d0:	2908      	cmp	r1, #8
 800d7d2:	d832      	bhi.n	800d83a <_strtod_l+0x92>
 800d7d4:	2900      	cmp	r1, #0
 800d7d6:	d03b      	beq.n	800d850 <_strtod_l+0xa8>
 800d7d8:	2200      	movs	r2, #0
 800d7da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d7de:	782a      	ldrb	r2, [r5, #0]
 800d7e0:	2a30      	cmp	r2, #48	@ 0x30
 800d7e2:	f040 80b3 	bne.w	800d94c <_strtod_l+0x1a4>
 800d7e6:	786a      	ldrb	r2, [r5, #1]
 800d7e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d7ec:	2a58      	cmp	r2, #88	@ 0x58
 800d7ee:	d16e      	bne.n	800d8ce <_strtod_l+0x126>
 800d7f0:	9302      	str	r3, [sp, #8]
 800d7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	4a8e      	ldr	r2, [pc, #568]	@ (800da34 <_strtod_l+0x28c>)
 800d7fc:	9805      	ldr	r0, [sp, #20]
 800d7fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d800:	a919      	add	r1, sp, #100	@ 0x64
 800d802:	f001 fb0b 	bl	800ee1c <__gethex>
 800d806:	f010 060f 	ands.w	r6, r0, #15
 800d80a:	4604      	mov	r4, r0
 800d80c:	d005      	beq.n	800d81a <_strtod_l+0x72>
 800d80e:	2e06      	cmp	r6, #6
 800d810:	d128      	bne.n	800d864 <_strtod_l+0xbc>
 800d812:	3501      	adds	r5, #1
 800d814:	2300      	movs	r3, #0
 800d816:	9519      	str	r5, [sp, #100]	@ 0x64
 800d818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d81a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 858e 	bne.w	800e33e <_strtod_l+0xb96>
 800d822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d824:	b1cb      	cbz	r3, 800d85a <_strtod_l+0xb2>
 800d826:	4652      	mov	r2, sl
 800d828:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d82c:	ec43 2b10 	vmov	d0, r2, r3
 800d830:	b01f      	add	sp, #124	@ 0x7c
 800d832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d836:	2920      	cmp	r1, #32
 800d838:	d1ce      	bne.n	800d7d8 <_strtod_l+0x30>
 800d83a:	3201      	adds	r2, #1
 800d83c:	e7c1      	b.n	800d7c2 <_strtod_l+0x1a>
 800d83e:	292d      	cmp	r1, #45	@ 0x2d
 800d840:	d1ca      	bne.n	800d7d8 <_strtod_l+0x30>
 800d842:	2101      	movs	r1, #1
 800d844:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d846:	1c51      	adds	r1, r2, #1
 800d848:	9119      	str	r1, [sp, #100]	@ 0x64
 800d84a:	7852      	ldrb	r2, [r2, #1]
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d1c5      	bne.n	800d7dc <_strtod_l+0x34>
 800d850:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d852:	9419      	str	r4, [sp, #100]	@ 0x64
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 8570 	bne.w	800e33a <_strtod_l+0xb92>
 800d85a:	4652      	mov	r2, sl
 800d85c:	465b      	mov	r3, fp
 800d85e:	e7e5      	b.n	800d82c <_strtod_l+0x84>
 800d860:	2100      	movs	r1, #0
 800d862:	e7ef      	b.n	800d844 <_strtod_l+0x9c>
 800d864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d866:	b13a      	cbz	r2, 800d878 <_strtod_l+0xd0>
 800d868:	2135      	movs	r1, #53	@ 0x35
 800d86a:	a81c      	add	r0, sp, #112	@ 0x70
 800d86c:	f002 fade 	bl	800fe2c <__copybits>
 800d870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d872:	9805      	ldr	r0, [sp, #20]
 800d874:	f001 feac 	bl	800f5d0 <_Bfree>
 800d878:	3e01      	subs	r6, #1
 800d87a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d87c:	2e04      	cmp	r6, #4
 800d87e:	d806      	bhi.n	800d88e <_strtod_l+0xe6>
 800d880:	e8df f006 	tbb	[pc, r6]
 800d884:	201d0314 	.word	0x201d0314
 800d888:	14          	.byte	0x14
 800d889:	00          	.byte	0x00
 800d88a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d88e:	05e1      	lsls	r1, r4, #23
 800d890:	bf48      	it	mi
 800d892:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d89a:	0d1b      	lsrs	r3, r3, #20
 800d89c:	051b      	lsls	r3, r3, #20
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1bb      	bne.n	800d81a <_strtod_l+0x72>
 800d8a2:	f001 f99f 	bl	800ebe4 <__errno>
 800d8a6:	2322      	movs	r3, #34	@ 0x22
 800d8a8:	6003      	str	r3, [r0, #0]
 800d8aa:	e7b6      	b.n	800d81a <_strtod_l+0x72>
 800d8ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d8b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d8b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d8b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8bc:	e7e7      	b.n	800d88e <_strtod_l+0xe6>
 800d8be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800da3c <_strtod_l+0x294>
 800d8c2:	e7e4      	b.n	800d88e <_strtod_l+0xe6>
 800d8c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d8c8:	f04f 3aff 	mov.w	sl, #4294967295
 800d8cc:	e7df      	b.n	800d88e <_strtod_l+0xe6>
 800d8ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b30      	cmp	r3, #48	@ 0x30
 800d8d8:	d0f9      	beq.n	800d8ce <_strtod_l+0x126>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d09d      	beq.n	800d81a <_strtod_l+0x72>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9308      	str	r3, [sp, #32]
 800d8ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8ec:	461f      	mov	r7, r3
 800d8ee:	220a      	movs	r2, #10
 800d8f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d8f2:	7805      	ldrb	r5, [r0, #0]
 800d8f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d8f8:	b2d9      	uxtb	r1, r3
 800d8fa:	2909      	cmp	r1, #9
 800d8fc:	d928      	bls.n	800d950 <_strtod_l+0x1a8>
 800d8fe:	494e      	ldr	r1, [pc, #312]	@ (800da38 <_strtod_l+0x290>)
 800d900:	2201      	movs	r2, #1
 800d902:	f001 f8a7 	bl	800ea54 <strncmp>
 800d906:	2800      	cmp	r0, #0
 800d908:	d032      	beq.n	800d970 <_strtod_l+0x1c8>
 800d90a:	2000      	movs	r0, #0
 800d90c:	462a      	mov	r2, r5
 800d90e:	4681      	mov	r9, r0
 800d910:	463d      	mov	r5, r7
 800d912:	4603      	mov	r3, r0
 800d914:	2a65      	cmp	r2, #101	@ 0x65
 800d916:	d001      	beq.n	800d91c <_strtod_l+0x174>
 800d918:	2a45      	cmp	r2, #69	@ 0x45
 800d91a:	d114      	bne.n	800d946 <_strtod_l+0x19e>
 800d91c:	b91d      	cbnz	r5, 800d926 <_strtod_l+0x17e>
 800d91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d920:	4302      	orrs	r2, r0
 800d922:	d095      	beq.n	800d850 <_strtod_l+0xa8>
 800d924:	2500      	movs	r5, #0
 800d926:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d928:	1c62      	adds	r2, r4, #1
 800d92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d92c:	7862      	ldrb	r2, [r4, #1]
 800d92e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d930:	d077      	beq.n	800da22 <_strtod_l+0x27a>
 800d932:	2a2d      	cmp	r2, #45	@ 0x2d
 800d934:	d07b      	beq.n	800da2e <_strtod_l+0x286>
 800d936:	f04f 0c00 	mov.w	ip, #0
 800d93a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d93e:	2909      	cmp	r1, #9
 800d940:	f240 8082 	bls.w	800da48 <_strtod_l+0x2a0>
 800d944:	9419      	str	r4, [sp, #100]	@ 0x64
 800d946:	f04f 0800 	mov.w	r8, #0
 800d94a:	e0a2      	b.n	800da92 <_strtod_l+0x2ea>
 800d94c:	2300      	movs	r3, #0
 800d94e:	e7c7      	b.n	800d8e0 <_strtod_l+0x138>
 800d950:	2f08      	cmp	r7, #8
 800d952:	bfd5      	itete	le
 800d954:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d956:	9908      	ldrgt	r1, [sp, #32]
 800d958:	fb02 3301 	mlale	r3, r2, r1, r3
 800d95c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d960:	f100 0001 	add.w	r0, r0, #1
 800d964:	bfd4      	ite	le
 800d966:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d968:	9308      	strgt	r3, [sp, #32]
 800d96a:	3701      	adds	r7, #1
 800d96c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d96e:	e7bf      	b.n	800d8f0 <_strtod_l+0x148>
 800d970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	9219      	str	r2, [sp, #100]	@ 0x64
 800d976:	785a      	ldrb	r2, [r3, #1]
 800d978:	b37f      	cbz	r7, 800d9da <_strtod_l+0x232>
 800d97a:	4681      	mov	r9, r0
 800d97c:	463d      	mov	r5, r7
 800d97e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d982:	2b09      	cmp	r3, #9
 800d984:	d912      	bls.n	800d9ac <_strtod_l+0x204>
 800d986:	2301      	movs	r3, #1
 800d988:	e7c4      	b.n	800d914 <_strtod_l+0x16c>
 800d98a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d98c:	1c5a      	adds	r2, r3, #1
 800d98e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d990:	785a      	ldrb	r2, [r3, #1]
 800d992:	3001      	adds	r0, #1
 800d994:	2a30      	cmp	r2, #48	@ 0x30
 800d996:	d0f8      	beq.n	800d98a <_strtod_l+0x1e2>
 800d998:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d99c:	2b08      	cmp	r3, #8
 800d99e:	f200 84d3 	bhi.w	800e348 <_strtod_l+0xba0>
 800d9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9a6:	4681      	mov	r9, r0
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	3a30      	subs	r2, #48	@ 0x30
 800d9ae:	f100 0301 	add.w	r3, r0, #1
 800d9b2:	d02a      	beq.n	800da0a <_strtod_l+0x262>
 800d9b4:	4499      	add	r9, r3
 800d9b6:	eb00 0c05 	add.w	ip, r0, r5
 800d9ba:	462b      	mov	r3, r5
 800d9bc:	210a      	movs	r1, #10
 800d9be:	4563      	cmp	r3, ip
 800d9c0:	d10d      	bne.n	800d9de <_strtod_l+0x236>
 800d9c2:	1c69      	adds	r1, r5, #1
 800d9c4:	4401      	add	r1, r0
 800d9c6:	4428      	add	r0, r5
 800d9c8:	2808      	cmp	r0, #8
 800d9ca:	dc16      	bgt.n	800d9fa <_strtod_l+0x252>
 800d9cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d9ce:	230a      	movs	r3, #10
 800d9d0:	fb03 2300 	mla	r3, r3, r0, r2
 800d9d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e018      	b.n	800da0c <_strtod_l+0x264>
 800d9da:	4638      	mov	r0, r7
 800d9dc:	e7da      	b.n	800d994 <_strtod_l+0x1ec>
 800d9de:	2b08      	cmp	r3, #8
 800d9e0:	f103 0301 	add.w	r3, r3, #1
 800d9e4:	dc03      	bgt.n	800d9ee <_strtod_l+0x246>
 800d9e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d9e8:	434e      	muls	r6, r1
 800d9ea:	960a      	str	r6, [sp, #40]	@ 0x28
 800d9ec:	e7e7      	b.n	800d9be <_strtod_l+0x216>
 800d9ee:	2b10      	cmp	r3, #16
 800d9f0:	bfde      	ittt	le
 800d9f2:	9e08      	ldrle	r6, [sp, #32]
 800d9f4:	434e      	mulle	r6, r1
 800d9f6:	9608      	strle	r6, [sp, #32]
 800d9f8:	e7e1      	b.n	800d9be <_strtod_l+0x216>
 800d9fa:	280f      	cmp	r0, #15
 800d9fc:	dceb      	bgt.n	800d9d6 <_strtod_l+0x22e>
 800d9fe:	9808      	ldr	r0, [sp, #32]
 800da00:	230a      	movs	r3, #10
 800da02:	fb03 2300 	mla	r3, r3, r0, r2
 800da06:	9308      	str	r3, [sp, #32]
 800da08:	e7e5      	b.n	800d9d6 <_strtod_l+0x22e>
 800da0a:	4629      	mov	r1, r5
 800da0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da0e:	1c50      	adds	r0, r2, #1
 800da10:	9019      	str	r0, [sp, #100]	@ 0x64
 800da12:	7852      	ldrb	r2, [r2, #1]
 800da14:	4618      	mov	r0, r3
 800da16:	460d      	mov	r5, r1
 800da18:	e7b1      	b.n	800d97e <_strtod_l+0x1d6>
 800da1a:	f04f 0900 	mov.w	r9, #0
 800da1e:	2301      	movs	r3, #1
 800da20:	e77d      	b.n	800d91e <_strtod_l+0x176>
 800da22:	f04f 0c00 	mov.w	ip, #0
 800da26:	1ca2      	adds	r2, r4, #2
 800da28:	9219      	str	r2, [sp, #100]	@ 0x64
 800da2a:	78a2      	ldrb	r2, [r4, #2]
 800da2c:	e785      	b.n	800d93a <_strtod_l+0x192>
 800da2e:	f04f 0c01 	mov.w	ip, #1
 800da32:	e7f8      	b.n	800da26 <_strtod_l+0x27e>
 800da34:	0801142c 	.word	0x0801142c
 800da38:	08011408 	.word	0x08011408
 800da3c:	7ff00000 	.word	0x7ff00000
 800da40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da42:	1c51      	adds	r1, r2, #1
 800da44:	9119      	str	r1, [sp, #100]	@ 0x64
 800da46:	7852      	ldrb	r2, [r2, #1]
 800da48:	2a30      	cmp	r2, #48	@ 0x30
 800da4a:	d0f9      	beq.n	800da40 <_strtod_l+0x298>
 800da4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800da50:	2908      	cmp	r1, #8
 800da52:	f63f af78 	bhi.w	800d946 <_strtod_l+0x19e>
 800da56:	3a30      	subs	r2, #48	@ 0x30
 800da58:	920e      	str	r2, [sp, #56]	@ 0x38
 800da5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800da5e:	f04f 080a 	mov.w	r8, #10
 800da62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da64:	1c56      	adds	r6, r2, #1
 800da66:	9619      	str	r6, [sp, #100]	@ 0x64
 800da68:	7852      	ldrb	r2, [r2, #1]
 800da6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800da6e:	f1be 0f09 	cmp.w	lr, #9
 800da72:	d939      	bls.n	800dae8 <_strtod_l+0x340>
 800da74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da76:	1a76      	subs	r6, r6, r1
 800da78:	2e08      	cmp	r6, #8
 800da7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800da7e:	dc03      	bgt.n	800da88 <_strtod_l+0x2e0>
 800da80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800da82:	4588      	cmp	r8, r1
 800da84:	bfa8      	it	ge
 800da86:	4688      	movge	r8, r1
 800da88:	f1bc 0f00 	cmp.w	ip, #0
 800da8c:	d001      	beq.n	800da92 <_strtod_l+0x2ea>
 800da8e:	f1c8 0800 	rsb	r8, r8, #0
 800da92:	2d00      	cmp	r5, #0
 800da94:	d14e      	bne.n	800db34 <_strtod_l+0x38c>
 800da96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da98:	4308      	orrs	r0, r1
 800da9a:	f47f aebe 	bne.w	800d81a <_strtod_l+0x72>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f47f aed6 	bne.w	800d850 <_strtod_l+0xa8>
 800daa4:	2a69      	cmp	r2, #105	@ 0x69
 800daa6:	d028      	beq.n	800dafa <_strtod_l+0x352>
 800daa8:	dc25      	bgt.n	800daf6 <_strtod_l+0x34e>
 800daaa:	2a49      	cmp	r2, #73	@ 0x49
 800daac:	d025      	beq.n	800dafa <_strtod_l+0x352>
 800daae:	2a4e      	cmp	r2, #78	@ 0x4e
 800dab0:	f47f aece 	bne.w	800d850 <_strtod_l+0xa8>
 800dab4:	499b      	ldr	r1, [pc, #620]	@ (800dd24 <_strtod_l+0x57c>)
 800dab6:	a819      	add	r0, sp, #100	@ 0x64
 800dab8:	f001 fbd2 	bl	800f260 <__match>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f43f aec7 	beq.w	800d850 <_strtod_l+0xa8>
 800dac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b28      	cmp	r3, #40	@ 0x28
 800dac8:	d12e      	bne.n	800db28 <_strtod_l+0x380>
 800daca:	4997      	ldr	r1, [pc, #604]	@ (800dd28 <_strtod_l+0x580>)
 800dacc:	aa1c      	add	r2, sp, #112	@ 0x70
 800dace:	a819      	add	r0, sp, #100	@ 0x64
 800dad0:	f001 fbda 	bl	800f288 <__hexnan>
 800dad4:	2805      	cmp	r0, #5
 800dad6:	d127      	bne.n	800db28 <_strtod_l+0x380>
 800dad8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dada:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dade:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dae2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dae6:	e698      	b.n	800d81a <_strtod_l+0x72>
 800dae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800daea:	fb08 2101 	mla	r1, r8, r1, r2
 800daee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800daf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800daf4:	e7b5      	b.n	800da62 <_strtod_l+0x2ba>
 800daf6:	2a6e      	cmp	r2, #110	@ 0x6e
 800daf8:	e7da      	b.n	800dab0 <_strtod_l+0x308>
 800dafa:	498c      	ldr	r1, [pc, #560]	@ (800dd2c <_strtod_l+0x584>)
 800dafc:	a819      	add	r0, sp, #100	@ 0x64
 800dafe:	f001 fbaf 	bl	800f260 <__match>
 800db02:	2800      	cmp	r0, #0
 800db04:	f43f aea4 	beq.w	800d850 <_strtod_l+0xa8>
 800db08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db0a:	4989      	ldr	r1, [pc, #548]	@ (800dd30 <_strtod_l+0x588>)
 800db0c:	3b01      	subs	r3, #1
 800db0e:	a819      	add	r0, sp, #100	@ 0x64
 800db10:	9319      	str	r3, [sp, #100]	@ 0x64
 800db12:	f001 fba5 	bl	800f260 <__match>
 800db16:	b910      	cbnz	r0, 800db1e <_strtod_l+0x376>
 800db18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db1a:	3301      	adds	r3, #1
 800db1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800db1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dd40 <_strtod_l+0x598>
 800db22:	f04f 0a00 	mov.w	sl, #0
 800db26:	e678      	b.n	800d81a <_strtod_l+0x72>
 800db28:	4882      	ldr	r0, [pc, #520]	@ (800dd34 <_strtod_l+0x58c>)
 800db2a:	f001 f899 	bl	800ec60 <nan>
 800db2e:	ec5b ab10 	vmov	sl, fp, d0
 800db32:	e672      	b.n	800d81a <_strtod_l+0x72>
 800db34:	eba8 0309 	sub.w	r3, r8, r9
 800db38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db3c:	2f00      	cmp	r7, #0
 800db3e:	bf08      	it	eq
 800db40:	462f      	moveq	r7, r5
 800db42:	2d10      	cmp	r5, #16
 800db44:	462c      	mov	r4, r5
 800db46:	bfa8      	it	ge
 800db48:	2410      	movge	r4, #16
 800db4a:	f7f2 fce3 	bl	8000514 <__aeabi_ui2d>
 800db4e:	2d09      	cmp	r5, #9
 800db50:	4682      	mov	sl, r0
 800db52:	468b      	mov	fp, r1
 800db54:	dc13      	bgt.n	800db7e <_strtod_l+0x3d6>
 800db56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f ae5e 	beq.w	800d81a <_strtod_l+0x72>
 800db5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db60:	dd78      	ble.n	800dc54 <_strtod_l+0x4ac>
 800db62:	2b16      	cmp	r3, #22
 800db64:	dc5f      	bgt.n	800dc26 <_strtod_l+0x47e>
 800db66:	4974      	ldr	r1, [pc, #464]	@ (800dd38 <_strtod_l+0x590>)
 800db68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db70:	4652      	mov	r2, sl
 800db72:	465b      	mov	r3, fp
 800db74:	f7f2 fd48 	bl	8000608 <__aeabi_dmul>
 800db78:	4682      	mov	sl, r0
 800db7a:	468b      	mov	fp, r1
 800db7c:	e64d      	b.n	800d81a <_strtod_l+0x72>
 800db7e:	4b6e      	ldr	r3, [pc, #440]	@ (800dd38 <_strtod_l+0x590>)
 800db80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800db88:	f7f2 fd3e 	bl	8000608 <__aeabi_dmul>
 800db8c:	4682      	mov	sl, r0
 800db8e:	9808      	ldr	r0, [sp, #32]
 800db90:	468b      	mov	fp, r1
 800db92:	f7f2 fcbf 	bl	8000514 <__aeabi_ui2d>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4650      	mov	r0, sl
 800db9c:	4659      	mov	r1, fp
 800db9e:	f7f2 fb7d 	bl	800029c <__adddf3>
 800dba2:	2d0f      	cmp	r5, #15
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	ddd5      	ble.n	800db56 <_strtod_l+0x3ae>
 800dbaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbac:	1b2c      	subs	r4, r5, r4
 800dbae:	441c      	add	r4, r3
 800dbb0:	2c00      	cmp	r4, #0
 800dbb2:	f340 8096 	ble.w	800dce2 <_strtod_l+0x53a>
 800dbb6:	f014 030f 	ands.w	r3, r4, #15
 800dbba:	d00a      	beq.n	800dbd2 <_strtod_l+0x42a>
 800dbbc:	495e      	ldr	r1, [pc, #376]	@ (800dd38 <_strtod_l+0x590>)
 800dbbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbc2:	4652      	mov	r2, sl
 800dbc4:	465b      	mov	r3, fp
 800dbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbca:	f7f2 fd1d 	bl	8000608 <__aeabi_dmul>
 800dbce:	4682      	mov	sl, r0
 800dbd0:	468b      	mov	fp, r1
 800dbd2:	f034 040f 	bics.w	r4, r4, #15
 800dbd6:	d073      	beq.n	800dcc0 <_strtod_l+0x518>
 800dbd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dbdc:	dd48      	ble.n	800dc70 <_strtod_l+0x4c8>
 800dbde:	2400      	movs	r4, #0
 800dbe0:	46a0      	mov	r8, r4
 800dbe2:	940a      	str	r4, [sp, #40]	@ 0x28
 800dbe4:	46a1      	mov	r9, r4
 800dbe6:	9a05      	ldr	r2, [sp, #20]
 800dbe8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dd40 <_strtod_l+0x598>
 800dbec:	2322      	movs	r3, #34	@ 0x22
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	f04f 0a00 	mov.w	sl, #0
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f43f ae0f 	beq.w	800d81a <_strtod_l+0x72>
 800dbfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbfe:	9805      	ldr	r0, [sp, #20]
 800dc00:	f001 fce6 	bl	800f5d0 <_Bfree>
 800dc04:	9805      	ldr	r0, [sp, #20]
 800dc06:	4649      	mov	r1, r9
 800dc08:	f001 fce2 	bl	800f5d0 <_Bfree>
 800dc0c:	9805      	ldr	r0, [sp, #20]
 800dc0e:	4641      	mov	r1, r8
 800dc10:	f001 fcde 	bl	800f5d0 <_Bfree>
 800dc14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc16:	9805      	ldr	r0, [sp, #20]
 800dc18:	f001 fcda 	bl	800f5d0 <_Bfree>
 800dc1c:	9805      	ldr	r0, [sp, #20]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f001 fcd6 	bl	800f5d0 <_Bfree>
 800dc24:	e5f9      	b.n	800d81a <_strtod_l+0x72>
 800dc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	dbbc      	blt.n	800dbaa <_strtod_l+0x402>
 800dc30:	4c41      	ldr	r4, [pc, #260]	@ (800dd38 <_strtod_l+0x590>)
 800dc32:	f1c5 050f 	rsb	r5, r5, #15
 800dc36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc3a:	4652      	mov	r2, sl
 800dc3c:	465b      	mov	r3, fp
 800dc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc42:	f7f2 fce1 	bl	8000608 <__aeabi_dmul>
 800dc46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc48:	1b5d      	subs	r5, r3, r5
 800dc4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc52:	e78f      	b.n	800db74 <_strtod_l+0x3cc>
 800dc54:	3316      	adds	r3, #22
 800dc56:	dba8      	blt.n	800dbaa <_strtod_l+0x402>
 800dc58:	4b37      	ldr	r3, [pc, #220]	@ (800dd38 <_strtod_l+0x590>)
 800dc5a:	eba9 0808 	sub.w	r8, r9, r8
 800dc5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dc62:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dc66:	4650      	mov	r0, sl
 800dc68:	4659      	mov	r1, fp
 800dc6a:	f7f2 fdf7 	bl	800085c <__aeabi_ddiv>
 800dc6e:	e783      	b.n	800db78 <_strtod_l+0x3d0>
 800dc70:	4b32      	ldr	r3, [pc, #200]	@ (800dd3c <_strtod_l+0x594>)
 800dc72:	9308      	str	r3, [sp, #32]
 800dc74:	2300      	movs	r3, #0
 800dc76:	1124      	asrs	r4, r4, #4
 800dc78:	4650      	mov	r0, sl
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	461e      	mov	r6, r3
 800dc7e:	2c01      	cmp	r4, #1
 800dc80:	dc21      	bgt.n	800dcc6 <_strtod_l+0x51e>
 800dc82:	b10b      	cbz	r3, 800dc88 <_strtod_l+0x4e0>
 800dc84:	4682      	mov	sl, r0
 800dc86:	468b      	mov	fp, r1
 800dc88:	492c      	ldr	r1, [pc, #176]	@ (800dd3c <_strtod_l+0x594>)
 800dc8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dc8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dc92:	4652      	mov	r2, sl
 800dc94:	465b      	mov	r3, fp
 800dc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc9a:	f7f2 fcb5 	bl	8000608 <__aeabi_dmul>
 800dc9e:	4b28      	ldr	r3, [pc, #160]	@ (800dd40 <_strtod_l+0x598>)
 800dca0:	460a      	mov	r2, r1
 800dca2:	400b      	ands	r3, r1
 800dca4:	4927      	ldr	r1, [pc, #156]	@ (800dd44 <_strtod_l+0x59c>)
 800dca6:	428b      	cmp	r3, r1
 800dca8:	4682      	mov	sl, r0
 800dcaa:	d898      	bhi.n	800dbde <_strtod_l+0x436>
 800dcac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	bf86      	itte	hi
 800dcb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dd48 <_strtod_l+0x5a0>
 800dcb8:	f04f 3aff 	movhi.w	sl, #4294967295
 800dcbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9308      	str	r3, [sp, #32]
 800dcc4:	e07a      	b.n	800ddbc <_strtod_l+0x614>
 800dcc6:	07e2      	lsls	r2, r4, #31
 800dcc8:	d505      	bpl.n	800dcd6 <_strtod_l+0x52e>
 800dcca:	9b08      	ldr	r3, [sp, #32]
 800dccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd0:	f7f2 fc9a 	bl	8000608 <__aeabi_dmul>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	9a08      	ldr	r2, [sp, #32]
 800dcd8:	3208      	adds	r2, #8
 800dcda:	3601      	adds	r6, #1
 800dcdc:	1064      	asrs	r4, r4, #1
 800dcde:	9208      	str	r2, [sp, #32]
 800dce0:	e7cd      	b.n	800dc7e <_strtod_l+0x4d6>
 800dce2:	d0ed      	beq.n	800dcc0 <_strtod_l+0x518>
 800dce4:	4264      	negs	r4, r4
 800dce6:	f014 020f 	ands.w	r2, r4, #15
 800dcea:	d00a      	beq.n	800dd02 <_strtod_l+0x55a>
 800dcec:	4b12      	ldr	r3, [pc, #72]	@ (800dd38 <_strtod_l+0x590>)
 800dcee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	4659      	mov	r1, fp
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 fdaf 	bl	800085c <__aeabi_ddiv>
 800dcfe:	4682      	mov	sl, r0
 800dd00:	468b      	mov	fp, r1
 800dd02:	1124      	asrs	r4, r4, #4
 800dd04:	d0dc      	beq.n	800dcc0 <_strtod_l+0x518>
 800dd06:	2c1f      	cmp	r4, #31
 800dd08:	dd20      	ble.n	800dd4c <_strtod_l+0x5a4>
 800dd0a:	2400      	movs	r4, #0
 800dd0c:	46a0      	mov	r8, r4
 800dd0e:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd10:	46a1      	mov	r9, r4
 800dd12:	9a05      	ldr	r2, [sp, #20]
 800dd14:	2322      	movs	r3, #34	@ 0x22
 800dd16:	f04f 0a00 	mov.w	sl, #0
 800dd1a:	f04f 0b00 	mov.w	fp, #0
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	e768      	b.n	800dbf4 <_strtod_l+0x44c>
 800dd22:	bf00      	nop
 800dd24:	08011413 	.word	0x08011413
 800dd28:	08011418 	.word	0x08011418
 800dd2c:	0801140a 	.word	0x0801140a
 800dd30:	0801140d 	.word	0x0801140d
 800dd34:	0801161d 	.word	0x0801161d
 800dd38:	08011720 	.word	0x08011720
 800dd3c:	080116f8 	.word	0x080116f8
 800dd40:	7ff00000 	.word	0x7ff00000
 800dd44:	7ca00000 	.word	0x7ca00000
 800dd48:	7fefffff 	.word	0x7fefffff
 800dd4c:	f014 0310 	ands.w	r3, r4, #16
 800dd50:	bf18      	it	ne
 800dd52:	236a      	movne	r3, #106	@ 0x6a
 800dd54:	4ea9      	ldr	r6, [pc, #676]	@ (800dffc <_strtod_l+0x854>)
 800dd56:	9308      	str	r3, [sp, #32]
 800dd58:	4650      	mov	r0, sl
 800dd5a:	4659      	mov	r1, fp
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	07e2      	lsls	r2, r4, #31
 800dd60:	d504      	bpl.n	800dd6c <_strtod_l+0x5c4>
 800dd62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd66:	f7f2 fc4f 	bl	8000608 <__aeabi_dmul>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	1064      	asrs	r4, r4, #1
 800dd6e:	f106 0608 	add.w	r6, r6, #8
 800dd72:	d1f4      	bne.n	800dd5e <_strtod_l+0x5b6>
 800dd74:	b10b      	cbz	r3, 800dd7a <_strtod_l+0x5d2>
 800dd76:	4682      	mov	sl, r0
 800dd78:	468b      	mov	fp, r1
 800dd7a:	9b08      	ldr	r3, [sp, #32]
 800dd7c:	b1b3      	cbz	r3, 800ddac <_strtod_l+0x604>
 800dd7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dd82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	4659      	mov	r1, fp
 800dd8a:	dd0f      	ble.n	800ddac <_strtod_l+0x604>
 800dd8c:	2b1f      	cmp	r3, #31
 800dd8e:	dd55      	ble.n	800de3c <_strtod_l+0x694>
 800dd90:	2b34      	cmp	r3, #52	@ 0x34
 800dd92:	bfde      	ittt	le
 800dd94:	f04f 33ff 	movle.w	r3, #4294967295
 800dd98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dd9c:	4093      	lslle	r3, r2
 800dd9e:	f04f 0a00 	mov.w	sl, #0
 800dda2:	bfcc      	ite	gt
 800dda4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dda8:	ea03 0b01 	andle.w	fp, r3, r1
 800ddac:	2200      	movs	r2, #0
 800ddae:	2300      	movs	r3, #0
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	4659      	mov	r1, fp
 800ddb4:	f7f2 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d1a6      	bne.n	800dd0a <_strtod_l+0x562>
 800ddbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ddc2:	9805      	ldr	r0, [sp, #20]
 800ddc4:	462b      	mov	r3, r5
 800ddc6:	463a      	mov	r2, r7
 800ddc8:	f001 fc6a 	bl	800f6a0 <__s2b>
 800ddcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f43f af05 	beq.w	800dbde <_strtod_l+0x436>
 800ddd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddd6:	2a00      	cmp	r2, #0
 800ddd8:	eba9 0308 	sub.w	r3, r9, r8
 800dddc:	bfa8      	it	ge
 800ddde:	2300      	movge	r3, #0
 800dde0:	9312      	str	r3, [sp, #72]	@ 0x48
 800dde2:	2400      	movs	r4, #0
 800dde4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dde8:	9316      	str	r3, [sp, #88]	@ 0x58
 800ddea:	46a0      	mov	r8, r4
 800ddec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddee:	9805      	ldr	r0, [sp, #20]
 800ddf0:	6859      	ldr	r1, [r3, #4]
 800ddf2:	f001 fbad 	bl	800f550 <_Balloc>
 800ddf6:	4681      	mov	r9, r0
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f43f aef4 	beq.w	800dbe6 <_strtod_l+0x43e>
 800ddfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de00:	691a      	ldr	r2, [r3, #16]
 800de02:	3202      	adds	r2, #2
 800de04:	f103 010c 	add.w	r1, r3, #12
 800de08:	0092      	lsls	r2, r2, #2
 800de0a:	300c      	adds	r0, #12
 800de0c:	f000 ff17 	bl	800ec3e <memcpy>
 800de10:	ec4b ab10 	vmov	d0, sl, fp
 800de14:	9805      	ldr	r0, [sp, #20]
 800de16:	aa1c      	add	r2, sp, #112	@ 0x70
 800de18:	a91b      	add	r1, sp, #108	@ 0x6c
 800de1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de1e:	f001 ff7b 	bl	800fd18 <__d2b>
 800de22:	901a      	str	r0, [sp, #104]	@ 0x68
 800de24:	2800      	cmp	r0, #0
 800de26:	f43f aede 	beq.w	800dbe6 <_strtod_l+0x43e>
 800de2a:	9805      	ldr	r0, [sp, #20]
 800de2c:	2101      	movs	r1, #1
 800de2e:	f001 fccd 	bl	800f7cc <__i2b>
 800de32:	4680      	mov	r8, r0
 800de34:	b948      	cbnz	r0, 800de4a <_strtod_l+0x6a2>
 800de36:	f04f 0800 	mov.w	r8, #0
 800de3a:	e6d4      	b.n	800dbe6 <_strtod_l+0x43e>
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	fa02 f303 	lsl.w	r3, r2, r3
 800de44:	ea03 0a0a 	and.w	sl, r3, sl
 800de48:	e7b0      	b.n	800ddac <_strtod_l+0x604>
 800de4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800de4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800de4e:	2d00      	cmp	r5, #0
 800de50:	bfab      	itete	ge
 800de52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800de54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800de56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800de58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800de5a:	bfac      	ite	ge
 800de5c:	18ef      	addge	r7, r5, r3
 800de5e:	1b5e      	sublt	r6, r3, r5
 800de60:	9b08      	ldr	r3, [sp, #32]
 800de62:	1aed      	subs	r5, r5, r3
 800de64:	4415      	add	r5, r2
 800de66:	4b66      	ldr	r3, [pc, #408]	@ (800e000 <_strtod_l+0x858>)
 800de68:	3d01      	subs	r5, #1
 800de6a:	429d      	cmp	r5, r3
 800de6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800de70:	da50      	bge.n	800df14 <_strtod_l+0x76c>
 800de72:	1b5b      	subs	r3, r3, r5
 800de74:	2b1f      	cmp	r3, #31
 800de76:	eba2 0203 	sub.w	r2, r2, r3
 800de7a:	f04f 0101 	mov.w	r1, #1
 800de7e:	dc3d      	bgt.n	800defc <_strtod_l+0x754>
 800de80:	fa01 f303 	lsl.w	r3, r1, r3
 800de84:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de86:	2300      	movs	r3, #0
 800de88:	9310      	str	r3, [sp, #64]	@ 0x40
 800de8a:	18bd      	adds	r5, r7, r2
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	42af      	cmp	r7, r5
 800de90:	4416      	add	r6, r2
 800de92:	441e      	add	r6, r3
 800de94:	463b      	mov	r3, r7
 800de96:	bfa8      	it	ge
 800de98:	462b      	movge	r3, r5
 800de9a:	42b3      	cmp	r3, r6
 800de9c:	bfa8      	it	ge
 800de9e:	4633      	movge	r3, r6
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bfc2      	ittt	gt
 800dea4:	1aed      	subgt	r5, r5, r3
 800dea6:	1af6      	subgt	r6, r6, r3
 800dea8:	1aff      	subgt	r7, r7, r3
 800deaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800deac:	2b00      	cmp	r3, #0
 800deae:	dd16      	ble.n	800dede <_strtod_l+0x736>
 800deb0:	4641      	mov	r1, r8
 800deb2:	9805      	ldr	r0, [sp, #20]
 800deb4:	461a      	mov	r2, r3
 800deb6:	f001 fd49 	bl	800f94c <__pow5mult>
 800deba:	4680      	mov	r8, r0
 800debc:	2800      	cmp	r0, #0
 800debe:	d0ba      	beq.n	800de36 <_strtod_l+0x68e>
 800dec0:	4601      	mov	r1, r0
 800dec2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dec4:	9805      	ldr	r0, [sp, #20]
 800dec6:	f001 fc97 	bl	800f7f8 <__multiply>
 800deca:	900e      	str	r0, [sp, #56]	@ 0x38
 800decc:	2800      	cmp	r0, #0
 800dece:	f43f ae8a 	beq.w	800dbe6 <_strtod_l+0x43e>
 800ded2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ded4:	9805      	ldr	r0, [sp, #20]
 800ded6:	f001 fb7b 	bl	800f5d0 <_Bfree>
 800deda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dedc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dede:	2d00      	cmp	r5, #0
 800dee0:	dc1d      	bgt.n	800df1e <_strtod_l+0x776>
 800dee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd23      	ble.n	800df30 <_strtod_l+0x788>
 800dee8:	4649      	mov	r1, r9
 800deea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800deec:	9805      	ldr	r0, [sp, #20]
 800deee:	f001 fd2d 	bl	800f94c <__pow5mult>
 800def2:	4681      	mov	r9, r0
 800def4:	b9e0      	cbnz	r0, 800df30 <_strtod_l+0x788>
 800def6:	f04f 0900 	mov.w	r9, #0
 800defa:	e674      	b.n	800dbe6 <_strtod_l+0x43e>
 800defc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df08:	35e2      	adds	r5, #226	@ 0xe2
 800df0a:	fa01 f305 	lsl.w	r3, r1, r5
 800df0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df10:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df12:	e7ba      	b.n	800de8a <_strtod_l+0x6e2>
 800df14:	2300      	movs	r3, #0
 800df16:	9310      	str	r3, [sp, #64]	@ 0x40
 800df18:	2301      	movs	r3, #1
 800df1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df1c:	e7b5      	b.n	800de8a <_strtod_l+0x6e2>
 800df1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df20:	9805      	ldr	r0, [sp, #20]
 800df22:	462a      	mov	r2, r5
 800df24:	f001 fd6c 	bl	800fa00 <__lshift>
 800df28:	901a      	str	r0, [sp, #104]	@ 0x68
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d1d9      	bne.n	800dee2 <_strtod_l+0x73a>
 800df2e:	e65a      	b.n	800dbe6 <_strtod_l+0x43e>
 800df30:	2e00      	cmp	r6, #0
 800df32:	dd07      	ble.n	800df44 <_strtod_l+0x79c>
 800df34:	4649      	mov	r1, r9
 800df36:	9805      	ldr	r0, [sp, #20]
 800df38:	4632      	mov	r2, r6
 800df3a:	f001 fd61 	bl	800fa00 <__lshift>
 800df3e:	4681      	mov	r9, r0
 800df40:	2800      	cmp	r0, #0
 800df42:	d0d8      	beq.n	800def6 <_strtod_l+0x74e>
 800df44:	2f00      	cmp	r7, #0
 800df46:	dd08      	ble.n	800df5a <_strtod_l+0x7b2>
 800df48:	4641      	mov	r1, r8
 800df4a:	9805      	ldr	r0, [sp, #20]
 800df4c:	463a      	mov	r2, r7
 800df4e:	f001 fd57 	bl	800fa00 <__lshift>
 800df52:	4680      	mov	r8, r0
 800df54:	2800      	cmp	r0, #0
 800df56:	f43f ae46 	beq.w	800dbe6 <_strtod_l+0x43e>
 800df5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df5c:	9805      	ldr	r0, [sp, #20]
 800df5e:	464a      	mov	r2, r9
 800df60:	f001 fdd6 	bl	800fb10 <__mdiff>
 800df64:	4604      	mov	r4, r0
 800df66:	2800      	cmp	r0, #0
 800df68:	f43f ae3d 	beq.w	800dbe6 <_strtod_l+0x43e>
 800df6c:	68c3      	ldr	r3, [r0, #12]
 800df6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df70:	2300      	movs	r3, #0
 800df72:	60c3      	str	r3, [r0, #12]
 800df74:	4641      	mov	r1, r8
 800df76:	f001 fdaf 	bl	800fad8 <__mcmp>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	da46      	bge.n	800e00c <_strtod_l+0x864>
 800df7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df80:	ea53 030a 	orrs.w	r3, r3, sl
 800df84:	d16c      	bne.n	800e060 <_strtod_l+0x8b8>
 800df86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d168      	bne.n	800e060 <_strtod_l+0x8b8>
 800df8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df92:	0d1b      	lsrs	r3, r3, #20
 800df94:	051b      	lsls	r3, r3, #20
 800df96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df9a:	d961      	bls.n	800e060 <_strtod_l+0x8b8>
 800df9c:	6963      	ldr	r3, [r4, #20]
 800df9e:	b913      	cbnz	r3, 800dfa6 <_strtod_l+0x7fe>
 800dfa0:	6923      	ldr	r3, [r4, #16]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	dd5c      	ble.n	800e060 <_strtod_l+0x8b8>
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	9805      	ldr	r0, [sp, #20]
 800dfac:	f001 fd28 	bl	800fa00 <__lshift>
 800dfb0:	4641      	mov	r1, r8
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	f001 fd90 	bl	800fad8 <__mcmp>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	dd51      	ble.n	800e060 <_strtod_l+0x8b8>
 800dfbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfc0:	9a08      	ldr	r2, [sp, #32]
 800dfc2:	0d1b      	lsrs	r3, r3, #20
 800dfc4:	051b      	lsls	r3, r3, #20
 800dfc6:	2a00      	cmp	r2, #0
 800dfc8:	d06b      	beq.n	800e0a2 <_strtod_l+0x8fa>
 800dfca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfce:	d868      	bhi.n	800e0a2 <_strtod_l+0x8fa>
 800dfd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dfd4:	f67f ae9d 	bls.w	800dd12 <_strtod_l+0x56a>
 800dfd8:	4b0a      	ldr	r3, [pc, #40]	@ (800e004 <_strtod_l+0x85c>)
 800dfda:	4650      	mov	r0, sl
 800dfdc:	4659      	mov	r1, fp
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f7f2 fb12 	bl	8000608 <__aeabi_dmul>
 800dfe4:	4b08      	ldr	r3, [pc, #32]	@ (800e008 <_strtod_l+0x860>)
 800dfe6:	400b      	ands	r3, r1
 800dfe8:	4682      	mov	sl, r0
 800dfea:	468b      	mov	fp, r1
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f47f ae05 	bne.w	800dbfc <_strtod_l+0x454>
 800dff2:	9a05      	ldr	r2, [sp, #20]
 800dff4:	2322      	movs	r3, #34	@ 0x22
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	e600      	b.n	800dbfc <_strtod_l+0x454>
 800dffa:	bf00      	nop
 800dffc:	08011440 	.word	0x08011440
 800e000:	fffffc02 	.word	0xfffffc02
 800e004:	39500000 	.word	0x39500000
 800e008:	7ff00000 	.word	0x7ff00000
 800e00c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e010:	d165      	bne.n	800e0de <_strtod_l+0x936>
 800e012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e018:	b35a      	cbz	r2, 800e072 <_strtod_l+0x8ca>
 800e01a:	4a9f      	ldr	r2, [pc, #636]	@ (800e298 <_strtod_l+0xaf0>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d12b      	bne.n	800e078 <_strtod_l+0x8d0>
 800e020:	9b08      	ldr	r3, [sp, #32]
 800e022:	4651      	mov	r1, sl
 800e024:	b303      	cbz	r3, 800e068 <_strtod_l+0x8c0>
 800e026:	4b9d      	ldr	r3, [pc, #628]	@ (800e29c <_strtod_l+0xaf4>)
 800e028:	465a      	mov	r2, fp
 800e02a:	4013      	ands	r3, r2
 800e02c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e030:	f04f 32ff 	mov.w	r2, #4294967295
 800e034:	d81b      	bhi.n	800e06e <_strtod_l+0x8c6>
 800e036:	0d1b      	lsrs	r3, r3, #20
 800e038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e03c:	fa02 f303 	lsl.w	r3, r2, r3
 800e040:	4299      	cmp	r1, r3
 800e042:	d119      	bne.n	800e078 <_strtod_l+0x8d0>
 800e044:	4b96      	ldr	r3, [pc, #600]	@ (800e2a0 <_strtod_l+0xaf8>)
 800e046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e048:	429a      	cmp	r2, r3
 800e04a:	d102      	bne.n	800e052 <_strtod_l+0x8aa>
 800e04c:	3101      	adds	r1, #1
 800e04e:	f43f adca 	beq.w	800dbe6 <_strtod_l+0x43e>
 800e052:	4b92      	ldr	r3, [pc, #584]	@ (800e29c <_strtod_l+0xaf4>)
 800e054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e056:	401a      	ands	r2, r3
 800e058:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e05c:	f04f 0a00 	mov.w	sl, #0
 800e060:	9b08      	ldr	r3, [sp, #32]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1b8      	bne.n	800dfd8 <_strtod_l+0x830>
 800e066:	e5c9      	b.n	800dbfc <_strtod_l+0x454>
 800e068:	f04f 33ff 	mov.w	r3, #4294967295
 800e06c:	e7e8      	b.n	800e040 <_strtod_l+0x898>
 800e06e:	4613      	mov	r3, r2
 800e070:	e7e6      	b.n	800e040 <_strtod_l+0x898>
 800e072:	ea53 030a 	orrs.w	r3, r3, sl
 800e076:	d0a1      	beq.n	800dfbc <_strtod_l+0x814>
 800e078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e07a:	b1db      	cbz	r3, 800e0b4 <_strtod_l+0x90c>
 800e07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e07e:	4213      	tst	r3, r2
 800e080:	d0ee      	beq.n	800e060 <_strtod_l+0x8b8>
 800e082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e084:	9a08      	ldr	r2, [sp, #32]
 800e086:	4650      	mov	r0, sl
 800e088:	4659      	mov	r1, fp
 800e08a:	b1bb      	cbz	r3, 800e0bc <_strtod_l+0x914>
 800e08c:	f7ff fb6e 	bl	800d76c <sulp>
 800e090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e094:	ec53 2b10 	vmov	r2, r3, d0
 800e098:	f7f2 f900 	bl	800029c <__adddf3>
 800e09c:	4682      	mov	sl, r0
 800e09e:	468b      	mov	fp, r1
 800e0a0:	e7de      	b.n	800e060 <_strtod_l+0x8b8>
 800e0a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e0a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e0aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e0ae:	f04f 3aff 	mov.w	sl, #4294967295
 800e0b2:	e7d5      	b.n	800e060 <_strtod_l+0x8b8>
 800e0b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0b6:	ea13 0f0a 	tst.w	r3, sl
 800e0ba:	e7e1      	b.n	800e080 <_strtod_l+0x8d8>
 800e0bc:	f7ff fb56 	bl	800d76c <sulp>
 800e0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0c4:	ec53 2b10 	vmov	r2, r3, d0
 800e0c8:	f7f2 f8e6 	bl	8000298 <__aeabi_dsub>
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4682      	mov	sl, r0
 800e0d2:	468b      	mov	fp, r1
 800e0d4:	f7f2 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d0c1      	beq.n	800e060 <_strtod_l+0x8b8>
 800e0dc:	e619      	b.n	800dd12 <_strtod_l+0x56a>
 800e0de:	4641      	mov	r1, r8
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f001 fe71 	bl	800fdc8 <__ratio>
 800e0e6:	ec57 6b10 	vmov	r6, r7, d0
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 fd04 	bl	8000b00 <__aeabi_dcmple>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d06f      	beq.n	800e1dc <_strtod_l+0xa34>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d17a      	bne.n	800e1f8 <_strtod_l+0xa50>
 800e102:	f1ba 0f00 	cmp.w	sl, #0
 800e106:	d158      	bne.n	800e1ba <_strtod_l+0xa12>
 800e108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e10a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d15a      	bne.n	800e1c8 <_strtod_l+0xa20>
 800e112:	4b64      	ldr	r3, [pc, #400]	@ (800e2a4 <_strtod_l+0xafc>)
 800e114:	2200      	movs	r2, #0
 800e116:	4630      	mov	r0, r6
 800e118:	4639      	mov	r1, r7
 800e11a:	f7f2 fce7 	bl	8000aec <__aeabi_dcmplt>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d159      	bne.n	800e1d6 <_strtod_l+0xa2e>
 800e122:	4630      	mov	r0, r6
 800e124:	4639      	mov	r1, r7
 800e126:	4b60      	ldr	r3, [pc, #384]	@ (800e2a8 <_strtod_l+0xb00>)
 800e128:	2200      	movs	r2, #0
 800e12a:	f7f2 fa6d 	bl	8000608 <__aeabi_dmul>
 800e12e:	4606      	mov	r6, r0
 800e130:	460f      	mov	r7, r1
 800e132:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e136:	9606      	str	r6, [sp, #24]
 800e138:	9307      	str	r3, [sp, #28]
 800e13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e13e:	4d57      	ldr	r5, [pc, #348]	@ (800e29c <_strtod_l+0xaf4>)
 800e140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e146:	401d      	ands	r5, r3
 800e148:	4b58      	ldr	r3, [pc, #352]	@ (800e2ac <_strtod_l+0xb04>)
 800e14a:	429d      	cmp	r5, r3
 800e14c:	f040 80b2 	bne.w	800e2b4 <_strtod_l+0xb0c>
 800e150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e152:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e156:	ec4b ab10 	vmov	d0, sl, fp
 800e15a:	f001 fd6d 	bl	800fc38 <__ulp>
 800e15e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e162:	ec51 0b10 	vmov	r0, r1, d0
 800e166:	f7f2 fa4f 	bl	8000608 <__aeabi_dmul>
 800e16a:	4652      	mov	r2, sl
 800e16c:	465b      	mov	r3, fp
 800e16e:	f7f2 f895 	bl	800029c <__adddf3>
 800e172:	460b      	mov	r3, r1
 800e174:	4949      	ldr	r1, [pc, #292]	@ (800e29c <_strtod_l+0xaf4>)
 800e176:	4a4e      	ldr	r2, [pc, #312]	@ (800e2b0 <_strtod_l+0xb08>)
 800e178:	4019      	ands	r1, r3
 800e17a:	4291      	cmp	r1, r2
 800e17c:	4682      	mov	sl, r0
 800e17e:	d942      	bls.n	800e206 <_strtod_l+0xa5e>
 800e180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e182:	4b47      	ldr	r3, [pc, #284]	@ (800e2a0 <_strtod_l+0xaf8>)
 800e184:	429a      	cmp	r2, r3
 800e186:	d103      	bne.n	800e190 <_strtod_l+0x9e8>
 800e188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e18a:	3301      	adds	r3, #1
 800e18c:	f43f ad2b 	beq.w	800dbe6 <_strtod_l+0x43e>
 800e190:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e2a0 <_strtod_l+0xaf8>
 800e194:	f04f 3aff 	mov.w	sl, #4294967295
 800e198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e19a:	9805      	ldr	r0, [sp, #20]
 800e19c:	f001 fa18 	bl	800f5d0 <_Bfree>
 800e1a0:	9805      	ldr	r0, [sp, #20]
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	f001 fa14 	bl	800f5d0 <_Bfree>
 800e1a8:	9805      	ldr	r0, [sp, #20]
 800e1aa:	4641      	mov	r1, r8
 800e1ac:	f001 fa10 	bl	800f5d0 <_Bfree>
 800e1b0:	9805      	ldr	r0, [sp, #20]
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	f001 fa0c 	bl	800f5d0 <_Bfree>
 800e1b8:	e618      	b.n	800ddec <_strtod_l+0x644>
 800e1ba:	f1ba 0f01 	cmp.w	sl, #1
 800e1be:	d103      	bne.n	800e1c8 <_strtod_l+0xa20>
 800e1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f43f ada5 	beq.w	800dd12 <_strtod_l+0x56a>
 800e1c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e278 <_strtod_l+0xad0>
 800e1cc:	4f35      	ldr	r7, [pc, #212]	@ (800e2a4 <_strtod_l+0xafc>)
 800e1ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1d2:	2600      	movs	r6, #0
 800e1d4:	e7b1      	b.n	800e13a <_strtod_l+0x992>
 800e1d6:	4f34      	ldr	r7, [pc, #208]	@ (800e2a8 <_strtod_l+0xb00>)
 800e1d8:	2600      	movs	r6, #0
 800e1da:	e7aa      	b.n	800e132 <_strtod_l+0x98a>
 800e1dc:	4b32      	ldr	r3, [pc, #200]	@ (800e2a8 <_strtod_l+0xb00>)
 800e1de:	4630      	mov	r0, r6
 800e1e0:	4639      	mov	r1, r7
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f7f2 fa10 	bl	8000608 <__aeabi_dmul>
 800e1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	460f      	mov	r7, r1
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d09f      	beq.n	800e132 <_strtod_l+0x98a>
 800e1f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e1f6:	e7a0      	b.n	800e13a <_strtod_l+0x992>
 800e1f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e280 <_strtod_l+0xad8>
 800e1fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e200:	ec57 6b17 	vmov	r6, r7, d7
 800e204:	e799      	b.n	800e13a <_strtod_l+0x992>
 800e206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e20a:	9b08      	ldr	r3, [sp, #32]
 800e20c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1c1      	bne.n	800e198 <_strtod_l+0x9f0>
 800e214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e218:	0d1b      	lsrs	r3, r3, #20
 800e21a:	051b      	lsls	r3, r3, #20
 800e21c:	429d      	cmp	r5, r3
 800e21e:	d1bb      	bne.n	800e198 <_strtod_l+0x9f0>
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 fd28 	bl	8000c78 <__aeabi_d2lz>
 800e228:	f7f2 f9c0 	bl	80005ac <__aeabi_l2d>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 f830 	bl	8000298 <__aeabi_dsub>
 800e238:	460b      	mov	r3, r1
 800e23a:	4602      	mov	r2, r0
 800e23c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e240:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e246:	ea46 060a 	orr.w	r6, r6, sl
 800e24a:	431e      	orrs	r6, r3
 800e24c:	d06f      	beq.n	800e32e <_strtod_l+0xb86>
 800e24e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e288 <_strtod_l+0xae0>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 fc4a 	bl	8000aec <__aeabi_dcmplt>
 800e258:	2800      	cmp	r0, #0
 800e25a:	f47f accf 	bne.w	800dbfc <_strtod_l+0x454>
 800e25e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e290 <_strtod_l+0xae8>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e268:	f7f2 fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d093      	beq.n	800e198 <_strtod_l+0x9f0>
 800e270:	e4c4      	b.n	800dbfc <_strtod_l+0x454>
 800e272:	bf00      	nop
 800e274:	f3af 8000 	nop.w
 800e278:	00000000 	.word	0x00000000
 800e27c:	bff00000 	.word	0xbff00000
 800e280:	00000000 	.word	0x00000000
 800e284:	3ff00000 	.word	0x3ff00000
 800e288:	94a03595 	.word	0x94a03595
 800e28c:	3fdfffff 	.word	0x3fdfffff
 800e290:	35afe535 	.word	0x35afe535
 800e294:	3fe00000 	.word	0x3fe00000
 800e298:	000fffff 	.word	0x000fffff
 800e29c:	7ff00000 	.word	0x7ff00000
 800e2a0:	7fefffff 	.word	0x7fefffff
 800e2a4:	3ff00000 	.word	0x3ff00000
 800e2a8:	3fe00000 	.word	0x3fe00000
 800e2ac:	7fe00000 	.word	0x7fe00000
 800e2b0:	7c9fffff 	.word	0x7c9fffff
 800e2b4:	9b08      	ldr	r3, [sp, #32]
 800e2b6:	b323      	cbz	r3, 800e302 <_strtod_l+0xb5a>
 800e2b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e2bc:	d821      	bhi.n	800e302 <_strtod_l+0xb5a>
 800e2be:	a328      	add	r3, pc, #160	@ (adr r3, 800e360 <_strtod_l+0xbb8>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 fc1a 	bl	8000b00 <__aeabi_dcmple>
 800e2cc:	b1a0      	cbz	r0, 800e2f8 <_strtod_l+0xb50>
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7f2 fc49 	bl	8000b68 <__aeabi_d2uiz>
 800e2d6:	2801      	cmp	r0, #1
 800e2d8:	bf38      	it	cc
 800e2da:	2001      	movcc	r0, #1
 800e2dc:	f7f2 f91a 	bl	8000514 <__aeabi_ui2d>
 800e2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	b9fb      	cbnz	r3, 800e328 <_strtod_l+0xb80>
 800e2e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2ec:	9014      	str	r0, [sp, #80]	@ 0x50
 800e2ee:	9315      	str	r3, [sp, #84]	@ 0x54
 800e2f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e2f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e2f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e2fe:	1b5b      	subs	r3, r3, r5
 800e300:	9311      	str	r3, [sp, #68]	@ 0x44
 800e302:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e306:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e30a:	f001 fc95 	bl	800fc38 <__ulp>
 800e30e:	4650      	mov	r0, sl
 800e310:	ec53 2b10 	vmov	r2, r3, d0
 800e314:	4659      	mov	r1, fp
 800e316:	f7f2 f977 	bl	8000608 <__aeabi_dmul>
 800e31a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e31e:	f7f1 ffbd 	bl	800029c <__adddf3>
 800e322:	4682      	mov	sl, r0
 800e324:	468b      	mov	fp, r1
 800e326:	e770      	b.n	800e20a <_strtod_l+0xa62>
 800e328:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e32c:	e7e0      	b.n	800e2f0 <_strtod_l+0xb48>
 800e32e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e368 <_strtod_l+0xbc0>)
 800e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e334:	f7f2 fbda 	bl	8000aec <__aeabi_dcmplt>
 800e338:	e798      	b.n	800e26c <_strtod_l+0xac4>
 800e33a:	2300      	movs	r3, #0
 800e33c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e33e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	f7ff ba6d 	b.w	800d822 <_strtod_l+0x7a>
 800e348:	2a65      	cmp	r2, #101	@ 0x65
 800e34a:	f43f ab66 	beq.w	800da1a <_strtod_l+0x272>
 800e34e:	2a45      	cmp	r2, #69	@ 0x45
 800e350:	f43f ab63 	beq.w	800da1a <_strtod_l+0x272>
 800e354:	2301      	movs	r3, #1
 800e356:	f7ff bb9e 	b.w	800da96 <_strtod_l+0x2ee>
 800e35a:	bf00      	nop
 800e35c:	f3af 8000 	nop.w
 800e360:	ffc00000 	.word	0xffc00000
 800e364:	41dfffff 	.word	0x41dfffff
 800e368:	94a03595 	.word	0x94a03595
 800e36c:	3fcfffff 	.word	0x3fcfffff

0800e370 <strtof>:
 800e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e374:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800e434 <strtof+0xc4>
 800e378:	4b29      	ldr	r3, [pc, #164]	@ (800e420 <strtof+0xb0>)
 800e37a:	460a      	mov	r2, r1
 800e37c:	ed2d 8b02 	vpush	{d8}
 800e380:	4601      	mov	r1, r0
 800e382:	f8d8 0000 	ldr.w	r0, [r8]
 800e386:	f7ff fa0f 	bl	800d7a8 <_strtod_l>
 800e38a:	ec55 4b10 	vmov	r4, r5, d0
 800e38e:	4622      	mov	r2, r4
 800e390:	462b      	mov	r3, r5
 800e392:	4620      	mov	r0, r4
 800e394:	4629      	mov	r1, r5
 800e396:	f7f2 fbd1 	bl	8000b3c <__aeabi_dcmpun>
 800e39a:	b190      	cbz	r0, 800e3c2 <strtof+0x52>
 800e39c:	2d00      	cmp	r5, #0
 800e39e:	4821      	ldr	r0, [pc, #132]	@ (800e424 <strtof+0xb4>)
 800e3a0:	da09      	bge.n	800e3b6 <strtof+0x46>
 800e3a2:	f000 fc65 	bl	800ec70 <nanf>
 800e3a6:	eeb1 8a40 	vneg.f32	s16, s0
 800e3aa:	eeb0 0a48 	vmov.f32	s0, s16
 800e3ae:	ecbd 8b02 	vpop	{d8}
 800e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b6:	ecbd 8b02 	vpop	{d8}
 800e3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3be:	f000 bc57 	b.w	800ec70 <nanf>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	f7f2 fbef 	bl	8000ba8 <__aeabi_d2f>
 800e3ca:	ee08 0a10 	vmov	s16, r0
 800e3ce:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800e428 <strtof+0xb8>
 800e3d2:	eeb0 7ac8 	vabs.f32	s14, s16
 800e3d6:	eeb4 7a67 	vcmp.f32	s14, s15
 800e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3de:	dd11      	ble.n	800e404 <strtof+0x94>
 800e3e0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e3e4:	4b11      	ldr	r3, [pc, #68]	@ (800e42c <strtof+0xbc>)
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	f7f2 fba5 	bl	8000b3c <__aeabi_dcmpun>
 800e3f2:	b980      	cbnz	r0, 800e416 <strtof+0xa6>
 800e3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800e42c <strtof+0xbc>)
 800e3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	f7f2 fb7f 	bl	8000b00 <__aeabi_dcmple>
 800e402:	b940      	cbnz	r0, 800e416 <strtof+0xa6>
 800e404:	ee18 3a10 	vmov	r3, s16
 800e408:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e40c:	d1cd      	bne.n	800e3aa <strtof+0x3a>
 800e40e:	4b08      	ldr	r3, [pc, #32]	@ (800e430 <strtof+0xc0>)
 800e410:	402b      	ands	r3, r5
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0c9      	beq.n	800e3aa <strtof+0x3a>
 800e416:	f8d8 3000 	ldr.w	r3, [r8]
 800e41a:	2222      	movs	r2, #34	@ 0x22
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	e7c4      	b.n	800e3aa <strtof+0x3a>
 800e420:	20000144 	.word	0x20000144
 800e424:	0801161d 	.word	0x0801161d
 800e428:	7f7fffff 	.word	0x7f7fffff
 800e42c:	7fefffff 	.word	0x7fefffff
 800e430:	7ff00000 	.word	0x7ff00000
 800e434:	200002b0 	.word	0x200002b0

0800e438 <_strtol_l.constprop.0>:
 800e438:	2b24      	cmp	r3, #36	@ 0x24
 800e43a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e43e:	4686      	mov	lr, r0
 800e440:	4690      	mov	r8, r2
 800e442:	d801      	bhi.n	800e448 <_strtol_l.constprop.0+0x10>
 800e444:	2b01      	cmp	r3, #1
 800e446:	d106      	bne.n	800e456 <_strtol_l.constprop.0+0x1e>
 800e448:	f000 fbcc 	bl	800ebe4 <__errno>
 800e44c:	2316      	movs	r3, #22
 800e44e:	6003      	str	r3, [r0, #0]
 800e450:	2000      	movs	r0, #0
 800e452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e456:	4834      	ldr	r0, [pc, #208]	@ (800e528 <_strtol_l.constprop.0+0xf0>)
 800e458:	460d      	mov	r5, r1
 800e45a:	462a      	mov	r2, r5
 800e45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e460:	5d06      	ldrb	r6, [r0, r4]
 800e462:	f016 0608 	ands.w	r6, r6, #8
 800e466:	d1f8      	bne.n	800e45a <_strtol_l.constprop.0+0x22>
 800e468:	2c2d      	cmp	r4, #45	@ 0x2d
 800e46a:	d12d      	bne.n	800e4c8 <_strtol_l.constprop.0+0x90>
 800e46c:	782c      	ldrb	r4, [r5, #0]
 800e46e:	2601      	movs	r6, #1
 800e470:	1c95      	adds	r5, r2, #2
 800e472:	f033 0210 	bics.w	r2, r3, #16
 800e476:	d109      	bne.n	800e48c <_strtol_l.constprop.0+0x54>
 800e478:	2c30      	cmp	r4, #48	@ 0x30
 800e47a:	d12a      	bne.n	800e4d2 <_strtol_l.constprop.0+0x9a>
 800e47c:	782a      	ldrb	r2, [r5, #0]
 800e47e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e482:	2a58      	cmp	r2, #88	@ 0x58
 800e484:	d125      	bne.n	800e4d2 <_strtol_l.constprop.0+0x9a>
 800e486:	786c      	ldrb	r4, [r5, #1]
 800e488:	2310      	movs	r3, #16
 800e48a:	3502      	adds	r5, #2
 800e48c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e490:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e494:	2200      	movs	r2, #0
 800e496:	fbbc f9f3 	udiv	r9, ip, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e4a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e4a4:	2f09      	cmp	r7, #9
 800e4a6:	d81b      	bhi.n	800e4e0 <_strtol_l.constprop.0+0xa8>
 800e4a8:	463c      	mov	r4, r7
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	dd27      	ble.n	800e4fe <_strtol_l.constprop.0+0xc6>
 800e4ae:	1c57      	adds	r7, r2, #1
 800e4b0:	d007      	beq.n	800e4c2 <_strtol_l.constprop.0+0x8a>
 800e4b2:	4581      	cmp	r9, r0
 800e4b4:	d320      	bcc.n	800e4f8 <_strtol_l.constprop.0+0xc0>
 800e4b6:	d101      	bne.n	800e4bc <_strtol_l.constprop.0+0x84>
 800e4b8:	45a2      	cmp	sl, r4
 800e4ba:	db1d      	blt.n	800e4f8 <_strtol_l.constprop.0+0xc0>
 800e4bc:	fb00 4003 	mla	r0, r0, r3, r4
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4c6:	e7eb      	b.n	800e4a0 <_strtol_l.constprop.0+0x68>
 800e4c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4ca:	bf04      	itt	eq
 800e4cc:	782c      	ldrbeq	r4, [r5, #0]
 800e4ce:	1c95      	addeq	r5, r2, #2
 800e4d0:	e7cf      	b.n	800e472 <_strtol_l.constprop.0+0x3a>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1da      	bne.n	800e48c <_strtol_l.constprop.0+0x54>
 800e4d6:	2c30      	cmp	r4, #48	@ 0x30
 800e4d8:	bf0c      	ite	eq
 800e4da:	2308      	moveq	r3, #8
 800e4dc:	230a      	movne	r3, #10
 800e4de:	e7d5      	b.n	800e48c <_strtol_l.constprop.0+0x54>
 800e4e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4e4:	2f19      	cmp	r7, #25
 800e4e6:	d801      	bhi.n	800e4ec <_strtol_l.constprop.0+0xb4>
 800e4e8:	3c37      	subs	r4, #55	@ 0x37
 800e4ea:	e7de      	b.n	800e4aa <_strtol_l.constprop.0+0x72>
 800e4ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4f0:	2f19      	cmp	r7, #25
 800e4f2:	d804      	bhi.n	800e4fe <_strtol_l.constprop.0+0xc6>
 800e4f4:	3c57      	subs	r4, #87	@ 0x57
 800e4f6:	e7d8      	b.n	800e4aa <_strtol_l.constprop.0+0x72>
 800e4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fc:	e7e1      	b.n	800e4c2 <_strtol_l.constprop.0+0x8a>
 800e4fe:	1c53      	adds	r3, r2, #1
 800e500:	d108      	bne.n	800e514 <_strtol_l.constprop.0+0xdc>
 800e502:	2322      	movs	r3, #34	@ 0x22
 800e504:	f8ce 3000 	str.w	r3, [lr]
 800e508:	4660      	mov	r0, ip
 800e50a:	f1b8 0f00 	cmp.w	r8, #0
 800e50e:	d0a0      	beq.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e510:	1e69      	subs	r1, r5, #1
 800e512:	e006      	b.n	800e522 <_strtol_l.constprop.0+0xea>
 800e514:	b106      	cbz	r6, 800e518 <_strtol_l.constprop.0+0xe0>
 800e516:	4240      	negs	r0, r0
 800e518:	f1b8 0f00 	cmp.w	r8, #0
 800e51c:	d099      	beq.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e51e:	2a00      	cmp	r2, #0
 800e520:	d1f6      	bne.n	800e510 <_strtol_l.constprop.0+0xd8>
 800e522:	f8c8 1000 	str.w	r1, [r8]
 800e526:	e794      	b.n	800e452 <_strtol_l.constprop.0+0x1a>
 800e528:	08011469 	.word	0x08011469

0800e52c <strtol>:
 800e52c:	4613      	mov	r3, r2
 800e52e:	460a      	mov	r2, r1
 800e530:	4601      	mov	r1, r0
 800e532:	4802      	ldr	r0, [pc, #8]	@ (800e53c <strtol+0x10>)
 800e534:	6800      	ldr	r0, [r0, #0]
 800e536:	f7ff bf7f 	b.w	800e438 <_strtol_l.constprop.0>
 800e53a:	bf00      	nop
 800e53c:	200002b0 	.word	0x200002b0

0800e540 <_strtoul_l.constprop.0>:
 800e540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e544:	4e34      	ldr	r6, [pc, #208]	@ (800e618 <_strtoul_l.constprop.0+0xd8>)
 800e546:	4686      	mov	lr, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	4628      	mov	r0, r5
 800e54c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e550:	5d37      	ldrb	r7, [r6, r4]
 800e552:	f017 0708 	ands.w	r7, r7, #8
 800e556:	d1f8      	bne.n	800e54a <_strtoul_l.constprop.0+0xa>
 800e558:	2c2d      	cmp	r4, #45	@ 0x2d
 800e55a:	d12f      	bne.n	800e5bc <_strtoul_l.constprop.0+0x7c>
 800e55c:	782c      	ldrb	r4, [r5, #0]
 800e55e:	2701      	movs	r7, #1
 800e560:	1c85      	adds	r5, r0, #2
 800e562:	f033 0010 	bics.w	r0, r3, #16
 800e566:	d109      	bne.n	800e57c <_strtoul_l.constprop.0+0x3c>
 800e568:	2c30      	cmp	r4, #48	@ 0x30
 800e56a:	d12c      	bne.n	800e5c6 <_strtoul_l.constprop.0+0x86>
 800e56c:	7828      	ldrb	r0, [r5, #0]
 800e56e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e572:	2858      	cmp	r0, #88	@ 0x58
 800e574:	d127      	bne.n	800e5c6 <_strtoul_l.constprop.0+0x86>
 800e576:	786c      	ldrb	r4, [r5, #1]
 800e578:	2310      	movs	r3, #16
 800e57a:	3502      	adds	r5, #2
 800e57c:	f04f 38ff 	mov.w	r8, #4294967295
 800e580:	2600      	movs	r6, #0
 800e582:	fbb8 f8f3 	udiv	r8, r8, r3
 800e586:	fb03 f908 	mul.w	r9, r3, r8
 800e58a:	ea6f 0909 	mvn.w	r9, r9
 800e58e:	4630      	mov	r0, r6
 800e590:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e594:	f1bc 0f09 	cmp.w	ip, #9
 800e598:	d81c      	bhi.n	800e5d4 <_strtoul_l.constprop.0+0x94>
 800e59a:	4664      	mov	r4, ip
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	dd2a      	ble.n	800e5f6 <_strtoul_l.constprop.0+0xb6>
 800e5a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e5a4:	d007      	beq.n	800e5b6 <_strtoul_l.constprop.0+0x76>
 800e5a6:	4580      	cmp	r8, r0
 800e5a8:	d322      	bcc.n	800e5f0 <_strtoul_l.constprop.0+0xb0>
 800e5aa:	d101      	bne.n	800e5b0 <_strtoul_l.constprop.0+0x70>
 800e5ac:	45a1      	cmp	r9, r4
 800e5ae:	db1f      	blt.n	800e5f0 <_strtoul_l.constprop.0+0xb0>
 800e5b0:	fb00 4003 	mla	r0, r0, r3, r4
 800e5b4:	2601      	movs	r6, #1
 800e5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5ba:	e7e9      	b.n	800e590 <_strtoul_l.constprop.0+0x50>
 800e5bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800e5be:	bf04      	itt	eq
 800e5c0:	782c      	ldrbeq	r4, [r5, #0]
 800e5c2:	1c85      	addeq	r5, r0, #2
 800e5c4:	e7cd      	b.n	800e562 <_strtoul_l.constprop.0+0x22>
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1d8      	bne.n	800e57c <_strtoul_l.constprop.0+0x3c>
 800e5ca:	2c30      	cmp	r4, #48	@ 0x30
 800e5cc:	bf0c      	ite	eq
 800e5ce:	2308      	moveq	r3, #8
 800e5d0:	230a      	movne	r3, #10
 800e5d2:	e7d3      	b.n	800e57c <_strtoul_l.constprop.0+0x3c>
 800e5d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e5d8:	f1bc 0f19 	cmp.w	ip, #25
 800e5dc:	d801      	bhi.n	800e5e2 <_strtoul_l.constprop.0+0xa2>
 800e5de:	3c37      	subs	r4, #55	@ 0x37
 800e5e0:	e7dc      	b.n	800e59c <_strtoul_l.constprop.0+0x5c>
 800e5e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e5e6:	f1bc 0f19 	cmp.w	ip, #25
 800e5ea:	d804      	bhi.n	800e5f6 <_strtoul_l.constprop.0+0xb6>
 800e5ec:	3c57      	subs	r4, #87	@ 0x57
 800e5ee:	e7d5      	b.n	800e59c <_strtoul_l.constprop.0+0x5c>
 800e5f0:	f04f 36ff 	mov.w	r6, #4294967295
 800e5f4:	e7df      	b.n	800e5b6 <_strtoul_l.constprop.0+0x76>
 800e5f6:	1c73      	adds	r3, r6, #1
 800e5f8:	d106      	bne.n	800e608 <_strtoul_l.constprop.0+0xc8>
 800e5fa:	2322      	movs	r3, #34	@ 0x22
 800e5fc:	f8ce 3000 	str.w	r3, [lr]
 800e600:	4630      	mov	r0, r6
 800e602:	b932      	cbnz	r2, 800e612 <_strtoul_l.constprop.0+0xd2>
 800e604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e608:	b107      	cbz	r7, 800e60c <_strtoul_l.constprop.0+0xcc>
 800e60a:	4240      	negs	r0, r0
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	d0f9      	beq.n	800e604 <_strtoul_l.constprop.0+0xc4>
 800e610:	b106      	cbz	r6, 800e614 <_strtoul_l.constprop.0+0xd4>
 800e612:	1e69      	subs	r1, r5, #1
 800e614:	6011      	str	r1, [r2, #0]
 800e616:	e7f5      	b.n	800e604 <_strtoul_l.constprop.0+0xc4>
 800e618:	08011469 	.word	0x08011469

0800e61c <strtoul>:
 800e61c:	4613      	mov	r3, r2
 800e61e:	460a      	mov	r2, r1
 800e620:	4601      	mov	r1, r0
 800e622:	4802      	ldr	r0, [pc, #8]	@ (800e62c <strtoul+0x10>)
 800e624:	6800      	ldr	r0, [r0, #0]
 800e626:	f7ff bf8b 	b.w	800e540 <_strtoul_l.constprop.0>
 800e62a:	bf00      	nop
 800e62c:	200002b0 	.word	0x200002b0

0800e630 <std>:
 800e630:	2300      	movs	r3, #0
 800e632:	b510      	push	{r4, lr}
 800e634:	4604      	mov	r4, r0
 800e636:	e9c0 3300 	strd	r3, r3, [r0]
 800e63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e63e:	6083      	str	r3, [r0, #8]
 800e640:	8181      	strh	r1, [r0, #12]
 800e642:	6643      	str	r3, [r0, #100]	@ 0x64
 800e644:	81c2      	strh	r2, [r0, #14]
 800e646:	6183      	str	r3, [r0, #24]
 800e648:	4619      	mov	r1, r3
 800e64a:	2208      	movs	r2, #8
 800e64c:	305c      	adds	r0, #92	@ 0x5c
 800e64e:	f000 f9f9 	bl	800ea44 <memset>
 800e652:	4b0d      	ldr	r3, [pc, #52]	@ (800e688 <std+0x58>)
 800e654:	6263      	str	r3, [r4, #36]	@ 0x24
 800e656:	4b0d      	ldr	r3, [pc, #52]	@ (800e68c <std+0x5c>)
 800e658:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e65a:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <std+0x60>)
 800e65c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e65e:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <std+0x64>)
 800e660:	6323      	str	r3, [r4, #48]	@ 0x30
 800e662:	4b0d      	ldr	r3, [pc, #52]	@ (800e698 <std+0x68>)
 800e664:	6224      	str	r4, [r4, #32]
 800e666:	429c      	cmp	r4, r3
 800e668:	d006      	beq.n	800e678 <std+0x48>
 800e66a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e66e:	4294      	cmp	r4, r2
 800e670:	d002      	beq.n	800e678 <std+0x48>
 800e672:	33d0      	adds	r3, #208	@ 0xd0
 800e674:	429c      	cmp	r4, r3
 800e676:	d105      	bne.n	800e684 <std+0x54>
 800e678:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e680:	f000 bada 	b.w	800ec38 <__retarget_lock_init_recursive>
 800e684:	bd10      	pop	{r4, pc}
 800e686:	bf00      	nop
 800e688:	0800e895 	.word	0x0800e895
 800e68c:	0800e8b7 	.word	0x0800e8b7
 800e690:	0800e8ef 	.word	0x0800e8ef
 800e694:	0800e913 	.word	0x0800e913
 800e698:	20002ff4 	.word	0x20002ff4

0800e69c <stdio_exit_handler>:
 800e69c:	4a02      	ldr	r2, [pc, #8]	@ (800e6a8 <stdio_exit_handler+0xc>)
 800e69e:	4903      	ldr	r1, [pc, #12]	@ (800e6ac <stdio_exit_handler+0x10>)
 800e6a0:	4803      	ldr	r0, [pc, #12]	@ (800e6b0 <stdio_exit_handler+0x14>)
 800e6a2:	f000 b869 	b.w	800e778 <_fwalk_sglue>
 800e6a6:	bf00      	nop
 800e6a8:	20000138 	.word	0x20000138
 800e6ac:	08010575 	.word	0x08010575
 800e6b0:	200002b4 	.word	0x200002b4

0800e6b4 <cleanup_stdio>:
 800e6b4:	6841      	ldr	r1, [r0, #4]
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e8 <cleanup_stdio+0x34>)
 800e6b8:	4299      	cmp	r1, r3
 800e6ba:	b510      	push	{r4, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	d001      	beq.n	800e6c4 <cleanup_stdio+0x10>
 800e6c0:	f001 ff58 	bl	8010574 <_fflush_r>
 800e6c4:	68a1      	ldr	r1, [r4, #8]
 800e6c6:	4b09      	ldr	r3, [pc, #36]	@ (800e6ec <cleanup_stdio+0x38>)
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	d002      	beq.n	800e6d2 <cleanup_stdio+0x1e>
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f001 ff51 	bl	8010574 <_fflush_r>
 800e6d2:	68e1      	ldr	r1, [r4, #12]
 800e6d4:	4b06      	ldr	r3, [pc, #24]	@ (800e6f0 <cleanup_stdio+0x3c>)
 800e6d6:	4299      	cmp	r1, r3
 800e6d8:	d004      	beq.n	800e6e4 <cleanup_stdio+0x30>
 800e6da:	4620      	mov	r0, r4
 800e6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e0:	f001 bf48 	b.w	8010574 <_fflush_r>
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20002ff4 	.word	0x20002ff4
 800e6ec:	2000305c 	.word	0x2000305c
 800e6f0:	200030c4 	.word	0x200030c4

0800e6f4 <global_stdio_init.part.0>:
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800e724 <global_stdio_init.part.0+0x30>)
 800e6f8:	4c0b      	ldr	r4, [pc, #44]	@ (800e728 <global_stdio_init.part.0+0x34>)
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e72c <global_stdio_init.part.0+0x38>)
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	4620      	mov	r0, r4
 800e700:	2200      	movs	r2, #0
 800e702:	2104      	movs	r1, #4
 800e704:	f7ff ff94 	bl	800e630 <std>
 800e708:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e70c:	2201      	movs	r2, #1
 800e70e:	2109      	movs	r1, #9
 800e710:	f7ff ff8e 	bl	800e630 <std>
 800e714:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e718:	2202      	movs	r2, #2
 800e71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e71e:	2112      	movs	r1, #18
 800e720:	f7ff bf86 	b.w	800e630 <std>
 800e724:	2000312c 	.word	0x2000312c
 800e728:	20002ff4 	.word	0x20002ff4
 800e72c:	0800e69d 	.word	0x0800e69d

0800e730 <__sfp_lock_acquire>:
 800e730:	4801      	ldr	r0, [pc, #4]	@ (800e738 <__sfp_lock_acquire+0x8>)
 800e732:	f000 ba82 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800e736:	bf00      	nop
 800e738:	20003135 	.word	0x20003135

0800e73c <__sfp_lock_release>:
 800e73c:	4801      	ldr	r0, [pc, #4]	@ (800e744 <__sfp_lock_release+0x8>)
 800e73e:	f000 ba7d 	b.w	800ec3c <__retarget_lock_release_recursive>
 800e742:	bf00      	nop
 800e744:	20003135 	.word	0x20003135

0800e748 <__sinit>:
 800e748:	b510      	push	{r4, lr}
 800e74a:	4604      	mov	r4, r0
 800e74c:	f7ff fff0 	bl	800e730 <__sfp_lock_acquire>
 800e750:	6a23      	ldr	r3, [r4, #32]
 800e752:	b11b      	cbz	r3, 800e75c <__sinit+0x14>
 800e754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e758:	f7ff bff0 	b.w	800e73c <__sfp_lock_release>
 800e75c:	4b04      	ldr	r3, [pc, #16]	@ (800e770 <__sinit+0x28>)
 800e75e:	6223      	str	r3, [r4, #32]
 800e760:	4b04      	ldr	r3, [pc, #16]	@ (800e774 <__sinit+0x2c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1f5      	bne.n	800e754 <__sinit+0xc>
 800e768:	f7ff ffc4 	bl	800e6f4 <global_stdio_init.part.0>
 800e76c:	e7f2      	b.n	800e754 <__sinit+0xc>
 800e76e:	bf00      	nop
 800e770:	0800e6b5 	.word	0x0800e6b5
 800e774:	2000312c 	.word	0x2000312c

0800e778 <_fwalk_sglue>:
 800e778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e77c:	4607      	mov	r7, r0
 800e77e:	4688      	mov	r8, r1
 800e780:	4614      	mov	r4, r2
 800e782:	2600      	movs	r6, #0
 800e784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e788:	f1b9 0901 	subs.w	r9, r9, #1
 800e78c:	d505      	bpl.n	800e79a <_fwalk_sglue+0x22>
 800e78e:	6824      	ldr	r4, [r4, #0]
 800e790:	2c00      	cmp	r4, #0
 800e792:	d1f7      	bne.n	800e784 <_fwalk_sglue+0xc>
 800e794:	4630      	mov	r0, r6
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d907      	bls.n	800e7b0 <_fwalk_sglue+0x38>
 800e7a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	d003      	beq.n	800e7b0 <_fwalk_sglue+0x38>
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	47c0      	blx	r8
 800e7ae:	4306      	orrs	r6, r0
 800e7b0:	3568      	adds	r5, #104	@ 0x68
 800e7b2:	e7e9      	b.n	800e788 <_fwalk_sglue+0x10>

0800e7b4 <iprintf>:
 800e7b4:	b40f      	push	{r0, r1, r2, r3}
 800e7b6:	b507      	push	{r0, r1, r2, lr}
 800e7b8:	4906      	ldr	r1, [pc, #24]	@ (800e7d4 <iprintf+0x20>)
 800e7ba:	ab04      	add	r3, sp, #16
 800e7bc:	6808      	ldr	r0, [r1, #0]
 800e7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7c2:	6881      	ldr	r1, [r0, #8]
 800e7c4:	9301      	str	r3, [sp, #4]
 800e7c6:	f001 fbab 	bl	800ff20 <_vfiprintf_r>
 800e7ca:	b003      	add	sp, #12
 800e7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7d0:	b004      	add	sp, #16
 800e7d2:	4770      	bx	lr
 800e7d4:	200002b0 	.word	0x200002b0

0800e7d8 <_puts_r>:
 800e7d8:	6a03      	ldr	r3, [r0, #32]
 800e7da:	b570      	push	{r4, r5, r6, lr}
 800e7dc:	6884      	ldr	r4, [r0, #8]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	460e      	mov	r6, r1
 800e7e2:	b90b      	cbnz	r3, 800e7e8 <_puts_r+0x10>
 800e7e4:	f7ff ffb0 	bl	800e748 <__sinit>
 800e7e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7ea:	07db      	lsls	r3, r3, #31
 800e7ec:	d405      	bmi.n	800e7fa <_puts_r+0x22>
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	0598      	lsls	r0, r3, #22
 800e7f2:	d402      	bmi.n	800e7fa <_puts_r+0x22>
 800e7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7f6:	f000 fa20 	bl	800ec3a <__retarget_lock_acquire_recursive>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	0719      	lsls	r1, r3, #28
 800e7fe:	d502      	bpl.n	800e806 <_puts_r+0x2e>
 800e800:	6923      	ldr	r3, [r4, #16]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d135      	bne.n	800e872 <_puts_r+0x9a>
 800e806:	4621      	mov	r1, r4
 800e808:	4628      	mov	r0, r5
 800e80a:	f000 f8c5 	bl	800e998 <__swsetup_r>
 800e80e:	b380      	cbz	r0, 800e872 <_puts_r+0x9a>
 800e810:	f04f 35ff 	mov.w	r5, #4294967295
 800e814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e816:	07da      	lsls	r2, r3, #31
 800e818:	d405      	bmi.n	800e826 <_puts_r+0x4e>
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	059b      	lsls	r3, r3, #22
 800e81e:	d402      	bmi.n	800e826 <_puts_r+0x4e>
 800e820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e822:	f000 fa0b 	bl	800ec3c <__retarget_lock_release_recursive>
 800e826:	4628      	mov	r0, r5
 800e828:	bd70      	pop	{r4, r5, r6, pc}
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	da04      	bge.n	800e838 <_puts_r+0x60>
 800e82e:	69a2      	ldr	r2, [r4, #24]
 800e830:	429a      	cmp	r2, r3
 800e832:	dc17      	bgt.n	800e864 <_puts_r+0x8c>
 800e834:	290a      	cmp	r1, #10
 800e836:	d015      	beq.n	800e864 <_puts_r+0x8c>
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	6022      	str	r2, [r4, #0]
 800e83e:	7019      	strb	r1, [r3, #0]
 800e840:	68a3      	ldr	r3, [r4, #8]
 800e842:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e846:	3b01      	subs	r3, #1
 800e848:	60a3      	str	r3, [r4, #8]
 800e84a:	2900      	cmp	r1, #0
 800e84c:	d1ed      	bne.n	800e82a <_puts_r+0x52>
 800e84e:	2b00      	cmp	r3, #0
 800e850:	da11      	bge.n	800e876 <_puts_r+0x9e>
 800e852:	4622      	mov	r2, r4
 800e854:	210a      	movs	r1, #10
 800e856:	4628      	mov	r0, r5
 800e858:	f000 f85f 	bl	800e91a <__swbuf_r>
 800e85c:	3001      	adds	r0, #1
 800e85e:	d0d7      	beq.n	800e810 <_puts_r+0x38>
 800e860:	250a      	movs	r5, #10
 800e862:	e7d7      	b.n	800e814 <_puts_r+0x3c>
 800e864:	4622      	mov	r2, r4
 800e866:	4628      	mov	r0, r5
 800e868:	f000 f857 	bl	800e91a <__swbuf_r>
 800e86c:	3001      	adds	r0, #1
 800e86e:	d1e7      	bne.n	800e840 <_puts_r+0x68>
 800e870:	e7ce      	b.n	800e810 <_puts_r+0x38>
 800e872:	3e01      	subs	r6, #1
 800e874:	e7e4      	b.n	800e840 <_puts_r+0x68>
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	6022      	str	r2, [r4, #0]
 800e87c:	220a      	movs	r2, #10
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	e7ee      	b.n	800e860 <_puts_r+0x88>
	...

0800e884 <puts>:
 800e884:	4b02      	ldr	r3, [pc, #8]	@ (800e890 <puts+0xc>)
 800e886:	4601      	mov	r1, r0
 800e888:	6818      	ldr	r0, [r3, #0]
 800e88a:	f7ff bfa5 	b.w	800e7d8 <_puts_r>
 800e88e:	bf00      	nop
 800e890:	200002b0 	.word	0x200002b0

0800e894 <__sread>:
 800e894:	b510      	push	{r4, lr}
 800e896:	460c      	mov	r4, r1
 800e898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e89c:	f000 f97e 	bl	800eb9c <_read_r>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	bfab      	itete	ge
 800e8a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e8a8:	181b      	addge	r3, r3, r0
 800e8aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8ae:	bfac      	ite	ge
 800e8b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8b2:	81a3      	strhlt	r3, [r4, #12]
 800e8b4:	bd10      	pop	{r4, pc}

0800e8b6 <__swrite>:
 800e8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ba:	461f      	mov	r7, r3
 800e8bc:	898b      	ldrh	r3, [r1, #12]
 800e8be:	05db      	lsls	r3, r3, #23
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	d505      	bpl.n	800e8d4 <__swrite+0x1e>
 800e8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f000 f952 	bl	800eb78 <_lseek_r>
 800e8d4:	89a3      	ldrh	r3, [r4, #12]
 800e8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8de:	81a3      	strh	r3, [r4, #12]
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ea:	f000 b969 	b.w	800ebc0 <_write_r>

0800e8ee <__sseek>:
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f6:	f000 f93f 	bl	800eb78 <_lseek_r>
 800e8fa:	1c43      	adds	r3, r0, #1
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	bf15      	itete	ne
 800e900:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e90a:	81a3      	strheq	r3, [r4, #12]
 800e90c:	bf18      	it	ne
 800e90e:	81a3      	strhne	r3, [r4, #12]
 800e910:	bd10      	pop	{r4, pc}

0800e912 <__sclose>:
 800e912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e916:	f000 b91f 	b.w	800eb58 <_close_r>

0800e91a <__swbuf_r>:
 800e91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91c:	460e      	mov	r6, r1
 800e91e:	4614      	mov	r4, r2
 800e920:	4605      	mov	r5, r0
 800e922:	b118      	cbz	r0, 800e92c <__swbuf_r+0x12>
 800e924:	6a03      	ldr	r3, [r0, #32]
 800e926:	b90b      	cbnz	r3, 800e92c <__swbuf_r+0x12>
 800e928:	f7ff ff0e 	bl	800e748 <__sinit>
 800e92c:	69a3      	ldr	r3, [r4, #24]
 800e92e:	60a3      	str	r3, [r4, #8]
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	071a      	lsls	r2, r3, #28
 800e934:	d501      	bpl.n	800e93a <__swbuf_r+0x20>
 800e936:	6923      	ldr	r3, [r4, #16]
 800e938:	b943      	cbnz	r3, 800e94c <__swbuf_r+0x32>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f000 f82b 	bl	800e998 <__swsetup_r>
 800e942:	b118      	cbz	r0, 800e94c <__swbuf_r+0x32>
 800e944:	f04f 37ff 	mov.w	r7, #4294967295
 800e948:	4638      	mov	r0, r7
 800e94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	6922      	ldr	r2, [r4, #16]
 800e950:	1a98      	subs	r0, r3, r2
 800e952:	6963      	ldr	r3, [r4, #20]
 800e954:	b2f6      	uxtb	r6, r6
 800e956:	4283      	cmp	r3, r0
 800e958:	4637      	mov	r7, r6
 800e95a:	dc05      	bgt.n	800e968 <__swbuf_r+0x4e>
 800e95c:	4621      	mov	r1, r4
 800e95e:	4628      	mov	r0, r5
 800e960:	f001 fe08 	bl	8010574 <_fflush_r>
 800e964:	2800      	cmp	r0, #0
 800e966:	d1ed      	bne.n	800e944 <__swbuf_r+0x2a>
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	3b01      	subs	r3, #1
 800e96c:	60a3      	str	r3, [r4, #8]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	6022      	str	r2, [r4, #0]
 800e974:	701e      	strb	r6, [r3, #0]
 800e976:	6962      	ldr	r2, [r4, #20]
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d004      	beq.n	800e988 <__swbuf_r+0x6e>
 800e97e:	89a3      	ldrh	r3, [r4, #12]
 800e980:	07db      	lsls	r3, r3, #31
 800e982:	d5e1      	bpl.n	800e948 <__swbuf_r+0x2e>
 800e984:	2e0a      	cmp	r6, #10
 800e986:	d1df      	bne.n	800e948 <__swbuf_r+0x2e>
 800e988:	4621      	mov	r1, r4
 800e98a:	4628      	mov	r0, r5
 800e98c:	f001 fdf2 	bl	8010574 <_fflush_r>
 800e990:	2800      	cmp	r0, #0
 800e992:	d0d9      	beq.n	800e948 <__swbuf_r+0x2e>
 800e994:	e7d6      	b.n	800e944 <__swbuf_r+0x2a>
	...

0800e998 <__swsetup_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4b29      	ldr	r3, [pc, #164]	@ (800ea40 <__swsetup_r+0xa8>)
 800e99c:	4605      	mov	r5, r0
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	b118      	cbz	r0, 800e9ac <__swsetup_r+0x14>
 800e9a4:	6a03      	ldr	r3, [r0, #32]
 800e9a6:	b90b      	cbnz	r3, 800e9ac <__swsetup_r+0x14>
 800e9a8:	f7ff fece 	bl	800e748 <__sinit>
 800e9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b0:	0719      	lsls	r1, r3, #28
 800e9b2:	d422      	bmi.n	800e9fa <__swsetup_r+0x62>
 800e9b4:	06da      	lsls	r2, r3, #27
 800e9b6:	d407      	bmi.n	800e9c8 <__swsetup_r+0x30>
 800e9b8:	2209      	movs	r2, #9
 800e9ba:	602a      	str	r2, [r5, #0]
 800e9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9c0:	81a3      	strh	r3, [r4, #12]
 800e9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c6:	e033      	b.n	800ea30 <__swsetup_r+0x98>
 800e9c8:	0758      	lsls	r0, r3, #29
 800e9ca:	d512      	bpl.n	800e9f2 <__swsetup_r+0x5a>
 800e9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e9ce:	b141      	cbz	r1, 800e9e2 <__swsetup_r+0x4a>
 800e9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e9d4:	4299      	cmp	r1, r3
 800e9d6:	d002      	beq.n	800e9de <__swsetup_r+0x46>
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f000 f96d 	bl	800ecb8 <_free_r>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e9e2:	89a3      	ldrh	r3, [r4, #12]
 800e9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e9e8:	81a3      	strh	r3, [r4, #12]
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	6063      	str	r3, [r4, #4]
 800e9ee:	6923      	ldr	r3, [r4, #16]
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	89a3      	ldrh	r3, [r4, #12]
 800e9f4:	f043 0308 	orr.w	r3, r3, #8
 800e9f8:	81a3      	strh	r3, [r4, #12]
 800e9fa:	6923      	ldr	r3, [r4, #16]
 800e9fc:	b94b      	cbnz	r3, 800ea12 <__swsetup_r+0x7a>
 800e9fe:	89a3      	ldrh	r3, [r4, #12]
 800ea00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea08:	d003      	beq.n	800ea12 <__swsetup_r+0x7a>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	f001 fe11 	bl	8010634 <__smakebuf_r>
 800ea12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea16:	f013 0201 	ands.w	r2, r3, #1
 800ea1a:	d00a      	beq.n	800ea32 <__swsetup_r+0x9a>
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	60a2      	str	r2, [r4, #8]
 800ea20:	6962      	ldr	r2, [r4, #20]
 800ea22:	4252      	negs	r2, r2
 800ea24:	61a2      	str	r2, [r4, #24]
 800ea26:	6922      	ldr	r2, [r4, #16]
 800ea28:	b942      	cbnz	r2, 800ea3c <__swsetup_r+0xa4>
 800ea2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea2e:	d1c5      	bne.n	800e9bc <__swsetup_r+0x24>
 800ea30:	bd38      	pop	{r3, r4, r5, pc}
 800ea32:	0799      	lsls	r1, r3, #30
 800ea34:	bf58      	it	pl
 800ea36:	6962      	ldrpl	r2, [r4, #20]
 800ea38:	60a2      	str	r2, [r4, #8]
 800ea3a:	e7f4      	b.n	800ea26 <__swsetup_r+0x8e>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	e7f7      	b.n	800ea30 <__swsetup_r+0x98>
 800ea40:	200002b0 	.word	0x200002b0

0800ea44 <memset>:
 800ea44:	4402      	add	r2, r0
 800ea46:	4603      	mov	r3, r0
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d100      	bne.n	800ea4e <memset+0xa>
 800ea4c:	4770      	bx	lr
 800ea4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ea52:	e7f9      	b.n	800ea48 <memset+0x4>

0800ea54 <strncmp>:
 800ea54:	b510      	push	{r4, lr}
 800ea56:	b16a      	cbz	r2, 800ea74 <strncmp+0x20>
 800ea58:	3901      	subs	r1, #1
 800ea5a:	1884      	adds	r4, r0, r2
 800ea5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d103      	bne.n	800ea70 <strncmp+0x1c>
 800ea68:	42a0      	cmp	r0, r4
 800ea6a:	d001      	beq.n	800ea70 <strncmp+0x1c>
 800ea6c:	2a00      	cmp	r2, #0
 800ea6e:	d1f5      	bne.n	800ea5c <strncmp+0x8>
 800ea70:	1ad0      	subs	r0, r2, r3
 800ea72:	bd10      	pop	{r4, pc}
 800ea74:	4610      	mov	r0, r2
 800ea76:	e7fc      	b.n	800ea72 <strncmp+0x1e>

0800ea78 <strncpy>:
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	3901      	subs	r1, #1
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	b132      	cbz	r2, 800ea8e <strncpy+0x16>
 800ea80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea84:	f803 4b01 	strb.w	r4, [r3], #1
 800ea88:	3a01      	subs	r2, #1
 800ea8a:	2c00      	cmp	r4, #0
 800ea8c:	d1f7      	bne.n	800ea7e <strncpy+0x6>
 800ea8e:	441a      	add	r2, r3
 800ea90:	2100      	movs	r1, #0
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d100      	bne.n	800ea98 <strncpy+0x20>
 800ea96:	bd10      	pop	{r4, pc}
 800ea98:	f803 1b01 	strb.w	r1, [r3], #1
 800ea9c:	e7f9      	b.n	800ea92 <strncpy+0x1a>
	...

0800eaa0 <strtok>:
 800eaa0:	4b16      	ldr	r3, [pc, #88]	@ (800eafc <strtok+0x5c>)
 800eaa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa6:	681f      	ldr	r7, [r3, #0]
 800eaa8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800eaaa:	4605      	mov	r5, r0
 800eaac:	460e      	mov	r6, r1
 800eaae:	b9ec      	cbnz	r4, 800eaec <strtok+0x4c>
 800eab0:	2050      	movs	r0, #80	@ 0x50
 800eab2:	f000 fc85 	bl	800f3c0 <malloc>
 800eab6:	4602      	mov	r2, r0
 800eab8:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaba:	b920      	cbnz	r0, 800eac6 <strtok+0x26>
 800eabc:	4b10      	ldr	r3, [pc, #64]	@ (800eb00 <strtok+0x60>)
 800eabe:	4811      	ldr	r0, [pc, #68]	@ (800eb04 <strtok+0x64>)
 800eac0:	215b      	movs	r1, #91	@ 0x5b
 800eac2:	f000 f8db 	bl	800ec7c <__assert_func>
 800eac6:	e9c0 4400 	strd	r4, r4, [r0]
 800eaca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800eace:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ead2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ead6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800eada:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800eade:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800eae2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800eae6:	6184      	str	r4, [r0, #24]
 800eae8:	7704      	strb	r4, [r0, #28]
 800eaea:	6244      	str	r4, [r0, #36]	@ 0x24
 800eaec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaee:	4631      	mov	r1, r6
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf8:	f000 b806 	b.w	800eb08 <__strtok_r>
 800eafc:	200002b0 	.word	0x200002b0
 800eb00:	08011569 	.word	0x08011569
 800eb04:	08011580 	.word	0x08011580

0800eb08 <__strtok_r>:
 800eb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	b908      	cbnz	r0, 800eb12 <__strtok_r+0xa>
 800eb0e:	6814      	ldr	r4, [r2, #0]
 800eb10:	b144      	cbz	r4, 800eb24 <__strtok_r+0x1c>
 800eb12:	4620      	mov	r0, r4
 800eb14:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eb18:	460f      	mov	r7, r1
 800eb1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eb1e:	b91e      	cbnz	r6, 800eb28 <__strtok_r+0x20>
 800eb20:	b965      	cbnz	r5, 800eb3c <__strtok_r+0x34>
 800eb22:	6015      	str	r5, [r2, #0]
 800eb24:	2000      	movs	r0, #0
 800eb26:	e005      	b.n	800eb34 <__strtok_r+0x2c>
 800eb28:	42b5      	cmp	r5, r6
 800eb2a:	d1f6      	bne.n	800eb1a <__strtok_r+0x12>
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1f0      	bne.n	800eb12 <__strtok_r+0xa>
 800eb30:	6014      	str	r4, [r2, #0]
 800eb32:	7003      	strb	r3, [r0, #0]
 800eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb36:	461c      	mov	r4, r3
 800eb38:	e00c      	b.n	800eb54 <__strtok_r+0x4c>
 800eb3a:	b915      	cbnz	r5, 800eb42 <__strtok_r+0x3a>
 800eb3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb40:	460e      	mov	r6, r1
 800eb42:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eb46:	42ab      	cmp	r3, r5
 800eb48:	d1f7      	bne.n	800eb3a <__strtok_r+0x32>
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0f3      	beq.n	800eb36 <__strtok_r+0x2e>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eb54:	6014      	str	r4, [r2, #0]
 800eb56:	e7ed      	b.n	800eb34 <__strtok_r+0x2c>

0800eb58 <_close_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4d06      	ldr	r5, [pc, #24]	@ (800eb74 <_close_r+0x1c>)
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4604      	mov	r4, r0
 800eb60:	4608      	mov	r0, r1
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	f7f4 fc0c 	bl	8003380 <_close>
 800eb68:	1c43      	adds	r3, r0, #1
 800eb6a:	d102      	bne.n	800eb72 <_close_r+0x1a>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	b103      	cbz	r3, 800eb72 <_close_r+0x1a>
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	bd38      	pop	{r3, r4, r5, pc}
 800eb74:	20003130 	.word	0x20003130

0800eb78 <_lseek_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4d07      	ldr	r5, [pc, #28]	@ (800eb98 <_lseek_r+0x20>)
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	4608      	mov	r0, r1
 800eb80:	4611      	mov	r1, r2
 800eb82:	2200      	movs	r2, #0
 800eb84:	602a      	str	r2, [r5, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	f7f4 fc21 	bl	80033ce <_lseek>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	d102      	bne.n	800eb96 <_lseek_r+0x1e>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	b103      	cbz	r3, 800eb96 <_lseek_r+0x1e>
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
 800eb98:	20003130 	.word	0x20003130

0800eb9c <_read_r>:
 800eb9c:	b538      	push	{r3, r4, r5, lr}
 800eb9e:	4d07      	ldr	r5, [pc, #28]	@ (800ebbc <_read_r+0x20>)
 800eba0:	4604      	mov	r4, r0
 800eba2:	4608      	mov	r0, r1
 800eba4:	4611      	mov	r1, r2
 800eba6:	2200      	movs	r2, #0
 800eba8:	602a      	str	r2, [r5, #0]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	f7f4 fbcb 	bl	8003346 <_read>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_read_r+0x1e>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_read_r+0x1e>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	20003130 	.word	0x20003130

0800ebc0 <_write_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	@ (800ebe0 <_write_r+0x20>)
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4611      	mov	r1, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f7fd fb8e 	bl	800c2f0 <_write>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_write_r+0x1e>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_write_r+0x1e>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20003130 	.word	0x20003130

0800ebe4 <__errno>:
 800ebe4:	4b01      	ldr	r3, [pc, #4]	@ (800ebec <__errno+0x8>)
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	200002b0 	.word	0x200002b0

0800ebf0 <__libc_init_array>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ec28 <__libc_init_array+0x38>)
 800ebf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ec2c <__libc_init_array+0x3c>)
 800ebf6:	1b64      	subs	r4, r4, r5
 800ebf8:	10a4      	asrs	r4, r4, #2
 800ebfa:	2600      	movs	r6, #0
 800ebfc:	42a6      	cmp	r6, r4
 800ebfe:	d109      	bne.n	800ec14 <__libc_init_array+0x24>
 800ec00:	4d0b      	ldr	r5, [pc, #44]	@ (800ec30 <__libc_init_array+0x40>)
 800ec02:	4c0c      	ldr	r4, [pc, #48]	@ (800ec34 <__libc_init_array+0x44>)
 800ec04:	f001 fde4 	bl	80107d0 <_init>
 800ec08:	1b64      	subs	r4, r4, r5
 800ec0a:	10a4      	asrs	r4, r4, #2
 800ec0c:	2600      	movs	r6, #0
 800ec0e:	42a6      	cmp	r6, r4
 800ec10:	d105      	bne.n	800ec1e <__libc_init_array+0x2e>
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec18:	4798      	blx	r3
 800ec1a:	3601      	adds	r6, #1
 800ec1c:	e7ee      	b.n	800ebfc <__libc_init_array+0xc>
 800ec1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec22:	4798      	blx	r3
 800ec24:	3601      	adds	r6, #1
 800ec26:	e7f2      	b.n	800ec0e <__libc_init_array+0x1e>
 800ec28:	08011824 	.word	0x08011824
 800ec2c:	08011824 	.word	0x08011824
 800ec30:	08011824 	.word	0x08011824
 800ec34:	08011828 	.word	0x08011828

0800ec38 <__retarget_lock_init_recursive>:
 800ec38:	4770      	bx	lr

0800ec3a <__retarget_lock_acquire_recursive>:
 800ec3a:	4770      	bx	lr

0800ec3c <__retarget_lock_release_recursive>:
 800ec3c:	4770      	bx	lr

0800ec3e <memcpy>:
 800ec3e:	440a      	add	r2, r1
 800ec40:	4291      	cmp	r1, r2
 800ec42:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec46:	d100      	bne.n	800ec4a <memcpy+0xc>
 800ec48:	4770      	bx	lr
 800ec4a:	b510      	push	{r4, lr}
 800ec4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec54:	4291      	cmp	r1, r2
 800ec56:	d1f9      	bne.n	800ec4c <memcpy+0xe>
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	0000      	movs	r0, r0
 800ec5c:	0000      	movs	r0, r0
	...

0800ec60 <nan>:
 800ec60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec68 <nan+0x8>
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	00000000 	.word	0x00000000
 800ec6c:	7ff80000 	.word	0x7ff80000

0800ec70 <nanf>:
 800ec70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ec78 <nanf+0x8>
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	7fc00000 	.word	0x7fc00000

0800ec7c <__assert_func>:
 800ec7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec7e:	4614      	mov	r4, r2
 800ec80:	461a      	mov	r2, r3
 800ec82:	4b09      	ldr	r3, [pc, #36]	@ (800eca8 <__assert_func+0x2c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4605      	mov	r5, r0
 800ec88:	68d8      	ldr	r0, [r3, #12]
 800ec8a:	b954      	cbnz	r4, 800eca2 <__assert_func+0x26>
 800ec8c:	4b07      	ldr	r3, [pc, #28]	@ (800ecac <__assert_func+0x30>)
 800ec8e:	461c      	mov	r4, r3
 800ec90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec94:	9100      	str	r1, [sp, #0]
 800ec96:	462b      	mov	r3, r5
 800ec98:	4905      	ldr	r1, [pc, #20]	@ (800ecb0 <__assert_func+0x34>)
 800ec9a:	f001 fc93 	bl	80105c4 <fiprintf>
 800ec9e:	f001 fd37 	bl	8010710 <abort>
 800eca2:	4b04      	ldr	r3, [pc, #16]	@ (800ecb4 <__assert_func+0x38>)
 800eca4:	e7f4      	b.n	800ec90 <__assert_func+0x14>
 800eca6:	bf00      	nop
 800eca8:	200002b0 	.word	0x200002b0
 800ecac:	0801161d 	.word	0x0801161d
 800ecb0:	080115ef 	.word	0x080115ef
 800ecb4:	080115e2 	.word	0x080115e2

0800ecb8 <_free_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4605      	mov	r5, r0
 800ecbc:	2900      	cmp	r1, #0
 800ecbe:	d041      	beq.n	800ed44 <_free_r+0x8c>
 800ecc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc4:	1f0c      	subs	r4, r1, #4
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	bfb8      	it	lt
 800ecca:	18e4      	addlt	r4, r4, r3
 800eccc:	f000 fc34 	bl	800f538 <__malloc_lock>
 800ecd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ed48 <_free_r+0x90>)
 800ecd2:	6813      	ldr	r3, [r2, #0]
 800ecd4:	b933      	cbnz	r3, 800ece4 <_free_r+0x2c>
 800ecd6:	6063      	str	r3, [r4, #4]
 800ecd8:	6014      	str	r4, [r2, #0]
 800ecda:	4628      	mov	r0, r5
 800ecdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ece0:	f000 bc30 	b.w	800f544 <__malloc_unlock>
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	d908      	bls.n	800ecfa <_free_r+0x42>
 800ece8:	6820      	ldr	r0, [r4, #0]
 800ecea:	1821      	adds	r1, r4, r0
 800ecec:	428b      	cmp	r3, r1
 800ecee:	bf01      	itttt	eq
 800ecf0:	6819      	ldreq	r1, [r3, #0]
 800ecf2:	685b      	ldreq	r3, [r3, #4]
 800ecf4:	1809      	addeq	r1, r1, r0
 800ecf6:	6021      	streq	r1, [r4, #0]
 800ecf8:	e7ed      	b.n	800ecd6 <_free_r+0x1e>
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	b10b      	cbz	r3, 800ed04 <_free_r+0x4c>
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	d9fa      	bls.n	800ecfa <_free_r+0x42>
 800ed04:	6811      	ldr	r1, [r2, #0]
 800ed06:	1850      	adds	r0, r2, r1
 800ed08:	42a0      	cmp	r0, r4
 800ed0a:	d10b      	bne.n	800ed24 <_free_r+0x6c>
 800ed0c:	6820      	ldr	r0, [r4, #0]
 800ed0e:	4401      	add	r1, r0
 800ed10:	1850      	adds	r0, r2, r1
 800ed12:	4283      	cmp	r3, r0
 800ed14:	6011      	str	r1, [r2, #0]
 800ed16:	d1e0      	bne.n	800ecda <_free_r+0x22>
 800ed18:	6818      	ldr	r0, [r3, #0]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	6053      	str	r3, [r2, #4]
 800ed1e:	4408      	add	r0, r1
 800ed20:	6010      	str	r0, [r2, #0]
 800ed22:	e7da      	b.n	800ecda <_free_r+0x22>
 800ed24:	d902      	bls.n	800ed2c <_free_r+0x74>
 800ed26:	230c      	movs	r3, #12
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	e7d6      	b.n	800ecda <_free_r+0x22>
 800ed2c:	6820      	ldr	r0, [r4, #0]
 800ed2e:	1821      	adds	r1, r4, r0
 800ed30:	428b      	cmp	r3, r1
 800ed32:	bf04      	itt	eq
 800ed34:	6819      	ldreq	r1, [r3, #0]
 800ed36:	685b      	ldreq	r3, [r3, #4]
 800ed38:	6063      	str	r3, [r4, #4]
 800ed3a:	bf04      	itt	eq
 800ed3c:	1809      	addeq	r1, r1, r0
 800ed3e:	6021      	streq	r1, [r4, #0]
 800ed40:	6054      	str	r4, [r2, #4]
 800ed42:	e7ca      	b.n	800ecda <_free_r+0x22>
 800ed44:	bd38      	pop	{r3, r4, r5, pc}
 800ed46:	bf00      	nop
 800ed48:	2000313c 	.word	0x2000313c

0800ed4c <rshift>:
 800ed4c:	6903      	ldr	r3, [r0, #16]
 800ed4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed5a:	f100 0414 	add.w	r4, r0, #20
 800ed5e:	dd45      	ble.n	800edec <rshift+0xa0>
 800ed60:	f011 011f 	ands.w	r1, r1, #31
 800ed64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed6c:	d10c      	bne.n	800ed88 <rshift+0x3c>
 800ed6e:	f100 0710 	add.w	r7, r0, #16
 800ed72:	4629      	mov	r1, r5
 800ed74:	42b1      	cmp	r1, r6
 800ed76:	d334      	bcc.n	800ede2 <rshift+0x96>
 800ed78:	1a9b      	subs	r3, r3, r2
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	1eea      	subs	r2, r5, #3
 800ed7e:	4296      	cmp	r6, r2
 800ed80:	bf38      	it	cc
 800ed82:	2300      	movcc	r3, #0
 800ed84:	4423      	add	r3, r4
 800ed86:	e015      	b.n	800edb4 <rshift+0x68>
 800ed88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed8c:	f1c1 0820 	rsb	r8, r1, #32
 800ed90:	40cf      	lsrs	r7, r1
 800ed92:	f105 0e04 	add.w	lr, r5, #4
 800ed96:	46a1      	mov	r9, r4
 800ed98:	4576      	cmp	r6, lr
 800ed9a:	46f4      	mov	ip, lr
 800ed9c:	d815      	bhi.n	800edca <rshift+0x7e>
 800ed9e:	1a9a      	subs	r2, r3, r2
 800eda0:	0092      	lsls	r2, r2, #2
 800eda2:	3a04      	subs	r2, #4
 800eda4:	3501      	adds	r5, #1
 800eda6:	42ae      	cmp	r6, r5
 800eda8:	bf38      	it	cc
 800edaa:	2200      	movcc	r2, #0
 800edac:	18a3      	adds	r3, r4, r2
 800edae:	50a7      	str	r7, [r4, r2]
 800edb0:	b107      	cbz	r7, 800edb4 <rshift+0x68>
 800edb2:	3304      	adds	r3, #4
 800edb4:	1b1a      	subs	r2, r3, r4
 800edb6:	42a3      	cmp	r3, r4
 800edb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edbc:	bf08      	it	eq
 800edbe:	2300      	moveq	r3, #0
 800edc0:	6102      	str	r2, [r0, #16]
 800edc2:	bf08      	it	eq
 800edc4:	6143      	streq	r3, [r0, #20]
 800edc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edca:	f8dc c000 	ldr.w	ip, [ip]
 800edce:	fa0c fc08 	lsl.w	ip, ip, r8
 800edd2:	ea4c 0707 	orr.w	r7, ip, r7
 800edd6:	f849 7b04 	str.w	r7, [r9], #4
 800edda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edde:	40cf      	lsrs	r7, r1
 800ede0:	e7da      	b.n	800ed98 <rshift+0x4c>
 800ede2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ede6:	f847 cf04 	str.w	ip, [r7, #4]!
 800edea:	e7c3      	b.n	800ed74 <rshift+0x28>
 800edec:	4623      	mov	r3, r4
 800edee:	e7e1      	b.n	800edb4 <rshift+0x68>

0800edf0 <__hexdig_fun>:
 800edf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800edf4:	2b09      	cmp	r3, #9
 800edf6:	d802      	bhi.n	800edfe <__hexdig_fun+0xe>
 800edf8:	3820      	subs	r0, #32
 800edfa:	b2c0      	uxtb	r0, r0
 800edfc:	4770      	bx	lr
 800edfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee02:	2b05      	cmp	r3, #5
 800ee04:	d801      	bhi.n	800ee0a <__hexdig_fun+0x1a>
 800ee06:	3847      	subs	r0, #71	@ 0x47
 800ee08:	e7f7      	b.n	800edfa <__hexdig_fun+0xa>
 800ee0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee0e:	2b05      	cmp	r3, #5
 800ee10:	d801      	bhi.n	800ee16 <__hexdig_fun+0x26>
 800ee12:	3827      	subs	r0, #39	@ 0x27
 800ee14:	e7f1      	b.n	800edfa <__hexdig_fun+0xa>
 800ee16:	2000      	movs	r0, #0
 800ee18:	4770      	bx	lr
	...

0800ee1c <__gethex>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	b085      	sub	sp, #20
 800ee22:	468a      	mov	sl, r1
 800ee24:	9302      	str	r3, [sp, #8]
 800ee26:	680b      	ldr	r3, [r1, #0]
 800ee28:	9001      	str	r0, [sp, #4]
 800ee2a:	4690      	mov	r8, r2
 800ee2c:	1c9c      	adds	r4, r3, #2
 800ee2e:	46a1      	mov	r9, r4
 800ee30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee34:	2830      	cmp	r0, #48	@ 0x30
 800ee36:	d0fa      	beq.n	800ee2e <__gethex+0x12>
 800ee38:	eba9 0303 	sub.w	r3, r9, r3
 800ee3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee40:	f7ff ffd6 	bl	800edf0 <__hexdig_fun>
 800ee44:	4605      	mov	r5, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d168      	bne.n	800ef1c <__gethex+0x100>
 800ee4a:	49a0      	ldr	r1, [pc, #640]	@ (800f0cc <__gethex+0x2b0>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	4648      	mov	r0, r9
 800ee50:	f7ff fe00 	bl	800ea54 <strncmp>
 800ee54:	4607      	mov	r7, r0
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d167      	bne.n	800ef2a <__gethex+0x10e>
 800ee5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee5e:	4626      	mov	r6, r4
 800ee60:	f7ff ffc6 	bl	800edf0 <__hexdig_fun>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d062      	beq.n	800ef2e <__gethex+0x112>
 800ee68:	4623      	mov	r3, r4
 800ee6a:	7818      	ldrb	r0, [r3, #0]
 800ee6c:	2830      	cmp	r0, #48	@ 0x30
 800ee6e:	4699      	mov	r9, r3
 800ee70:	f103 0301 	add.w	r3, r3, #1
 800ee74:	d0f9      	beq.n	800ee6a <__gethex+0x4e>
 800ee76:	f7ff ffbb 	bl	800edf0 <__hexdig_fun>
 800ee7a:	fab0 f580 	clz	r5, r0
 800ee7e:	096d      	lsrs	r5, r5, #5
 800ee80:	f04f 0b01 	mov.w	fp, #1
 800ee84:	464a      	mov	r2, r9
 800ee86:	4616      	mov	r6, r2
 800ee88:	3201      	adds	r2, #1
 800ee8a:	7830      	ldrb	r0, [r6, #0]
 800ee8c:	f7ff ffb0 	bl	800edf0 <__hexdig_fun>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d1f8      	bne.n	800ee86 <__gethex+0x6a>
 800ee94:	498d      	ldr	r1, [pc, #564]	@ (800f0cc <__gethex+0x2b0>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff fddb 	bl	800ea54 <strncmp>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d13f      	bne.n	800ef22 <__gethex+0x106>
 800eea2:	b944      	cbnz	r4, 800eeb6 <__gethex+0x9a>
 800eea4:	1c74      	adds	r4, r6, #1
 800eea6:	4622      	mov	r2, r4
 800eea8:	4616      	mov	r6, r2
 800eeaa:	3201      	adds	r2, #1
 800eeac:	7830      	ldrb	r0, [r6, #0]
 800eeae:	f7ff ff9f 	bl	800edf0 <__hexdig_fun>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1f8      	bne.n	800eea8 <__gethex+0x8c>
 800eeb6:	1ba4      	subs	r4, r4, r6
 800eeb8:	00a7      	lsls	r7, r4, #2
 800eeba:	7833      	ldrb	r3, [r6, #0]
 800eebc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eec0:	2b50      	cmp	r3, #80	@ 0x50
 800eec2:	d13e      	bne.n	800ef42 <__gethex+0x126>
 800eec4:	7873      	ldrb	r3, [r6, #1]
 800eec6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eec8:	d033      	beq.n	800ef32 <__gethex+0x116>
 800eeca:	2b2d      	cmp	r3, #45	@ 0x2d
 800eecc:	d034      	beq.n	800ef38 <__gethex+0x11c>
 800eece:	1c71      	adds	r1, r6, #1
 800eed0:	2400      	movs	r4, #0
 800eed2:	7808      	ldrb	r0, [r1, #0]
 800eed4:	f7ff ff8c 	bl	800edf0 <__hexdig_fun>
 800eed8:	1e43      	subs	r3, r0, #1
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b18      	cmp	r3, #24
 800eede:	d830      	bhi.n	800ef42 <__gethex+0x126>
 800eee0:	f1a0 0210 	sub.w	r2, r0, #16
 800eee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eee8:	f7ff ff82 	bl	800edf0 <__hexdig_fun>
 800eeec:	f100 3cff 	add.w	ip, r0, #4294967295
 800eef0:	fa5f fc8c 	uxtb.w	ip, ip
 800eef4:	f1bc 0f18 	cmp.w	ip, #24
 800eef8:	f04f 030a 	mov.w	r3, #10
 800eefc:	d91e      	bls.n	800ef3c <__gethex+0x120>
 800eefe:	b104      	cbz	r4, 800ef02 <__gethex+0xe6>
 800ef00:	4252      	negs	r2, r2
 800ef02:	4417      	add	r7, r2
 800ef04:	f8ca 1000 	str.w	r1, [sl]
 800ef08:	b1ed      	cbz	r5, 800ef46 <__gethex+0x12a>
 800ef0a:	f1bb 0f00 	cmp.w	fp, #0
 800ef0e:	bf0c      	ite	eq
 800ef10:	2506      	moveq	r5, #6
 800ef12:	2500      	movne	r5, #0
 800ef14:	4628      	mov	r0, r5
 800ef16:	b005      	add	sp, #20
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1c:	2500      	movs	r5, #0
 800ef1e:	462c      	mov	r4, r5
 800ef20:	e7b0      	b.n	800ee84 <__gethex+0x68>
 800ef22:	2c00      	cmp	r4, #0
 800ef24:	d1c7      	bne.n	800eeb6 <__gethex+0x9a>
 800ef26:	4627      	mov	r7, r4
 800ef28:	e7c7      	b.n	800eeba <__gethex+0x9e>
 800ef2a:	464e      	mov	r6, r9
 800ef2c:	462f      	mov	r7, r5
 800ef2e:	2501      	movs	r5, #1
 800ef30:	e7c3      	b.n	800eeba <__gethex+0x9e>
 800ef32:	2400      	movs	r4, #0
 800ef34:	1cb1      	adds	r1, r6, #2
 800ef36:	e7cc      	b.n	800eed2 <__gethex+0xb6>
 800ef38:	2401      	movs	r4, #1
 800ef3a:	e7fb      	b.n	800ef34 <__gethex+0x118>
 800ef3c:	fb03 0002 	mla	r0, r3, r2, r0
 800ef40:	e7ce      	b.n	800eee0 <__gethex+0xc4>
 800ef42:	4631      	mov	r1, r6
 800ef44:	e7de      	b.n	800ef04 <__gethex+0xe8>
 800ef46:	eba6 0309 	sub.w	r3, r6, r9
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	2b07      	cmp	r3, #7
 800ef50:	dc0a      	bgt.n	800ef68 <__gethex+0x14c>
 800ef52:	9801      	ldr	r0, [sp, #4]
 800ef54:	f000 fafc 	bl	800f550 <_Balloc>
 800ef58:	4604      	mov	r4, r0
 800ef5a:	b940      	cbnz	r0, 800ef6e <__gethex+0x152>
 800ef5c:	4b5c      	ldr	r3, [pc, #368]	@ (800f0d0 <__gethex+0x2b4>)
 800ef5e:	4602      	mov	r2, r0
 800ef60:	21e4      	movs	r1, #228	@ 0xe4
 800ef62:	485c      	ldr	r0, [pc, #368]	@ (800f0d4 <__gethex+0x2b8>)
 800ef64:	f7ff fe8a 	bl	800ec7c <__assert_func>
 800ef68:	3101      	adds	r1, #1
 800ef6a:	105b      	asrs	r3, r3, #1
 800ef6c:	e7ef      	b.n	800ef4e <__gethex+0x132>
 800ef6e:	f100 0a14 	add.w	sl, r0, #20
 800ef72:	2300      	movs	r3, #0
 800ef74:	4655      	mov	r5, sl
 800ef76:	469b      	mov	fp, r3
 800ef78:	45b1      	cmp	r9, r6
 800ef7a:	d337      	bcc.n	800efec <__gethex+0x1d0>
 800ef7c:	f845 bb04 	str.w	fp, [r5], #4
 800ef80:	eba5 050a 	sub.w	r5, r5, sl
 800ef84:	10ad      	asrs	r5, r5, #2
 800ef86:	6125      	str	r5, [r4, #16]
 800ef88:	4658      	mov	r0, fp
 800ef8a:	f000 fbd3 	bl	800f734 <__hi0bits>
 800ef8e:	016d      	lsls	r5, r5, #5
 800ef90:	f8d8 6000 	ldr.w	r6, [r8]
 800ef94:	1a2d      	subs	r5, r5, r0
 800ef96:	42b5      	cmp	r5, r6
 800ef98:	dd54      	ble.n	800f044 <__gethex+0x228>
 800ef9a:	1bad      	subs	r5, r5, r6
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 ff67 	bl	800fe72 <__any_on>
 800efa4:	4681      	mov	r9, r0
 800efa6:	b178      	cbz	r0, 800efc8 <__gethex+0x1ac>
 800efa8:	1e6b      	subs	r3, r5, #1
 800efaa:	1159      	asrs	r1, r3, #5
 800efac:	f003 021f 	and.w	r2, r3, #31
 800efb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efb4:	f04f 0901 	mov.w	r9, #1
 800efb8:	fa09 f202 	lsl.w	r2, r9, r2
 800efbc:	420a      	tst	r2, r1
 800efbe:	d003      	beq.n	800efc8 <__gethex+0x1ac>
 800efc0:	454b      	cmp	r3, r9
 800efc2:	dc36      	bgt.n	800f032 <__gethex+0x216>
 800efc4:	f04f 0902 	mov.w	r9, #2
 800efc8:	4629      	mov	r1, r5
 800efca:	4620      	mov	r0, r4
 800efcc:	f7ff febe 	bl	800ed4c <rshift>
 800efd0:	442f      	add	r7, r5
 800efd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efd6:	42bb      	cmp	r3, r7
 800efd8:	da42      	bge.n	800f060 <__gethex+0x244>
 800efda:	9801      	ldr	r0, [sp, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	f000 faf7 	bl	800f5d0 <_Bfree>
 800efe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efe4:	2300      	movs	r3, #0
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	25a3      	movs	r5, #163	@ 0xa3
 800efea:	e793      	b.n	800ef14 <__gethex+0xf8>
 800efec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eff0:	2a2e      	cmp	r2, #46	@ 0x2e
 800eff2:	d012      	beq.n	800f01a <__gethex+0x1fe>
 800eff4:	2b20      	cmp	r3, #32
 800eff6:	d104      	bne.n	800f002 <__gethex+0x1e6>
 800eff8:	f845 bb04 	str.w	fp, [r5], #4
 800effc:	f04f 0b00 	mov.w	fp, #0
 800f000:	465b      	mov	r3, fp
 800f002:	7830      	ldrb	r0, [r6, #0]
 800f004:	9303      	str	r3, [sp, #12]
 800f006:	f7ff fef3 	bl	800edf0 <__hexdig_fun>
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	f000 000f 	and.w	r0, r0, #15
 800f010:	4098      	lsls	r0, r3
 800f012:	ea4b 0b00 	orr.w	fp, fp, r0
 800f016:	3304      	adds	r3, #4
 800f018:	e7ae      	b.n	800ef78 <__gethex+0x15c>
 800f01a:	45b1      	cmp	r9, r6
 800f01c:	d8ea      	bhi.n	800eff4 <__gethex+0x1d8>
 800f01e:	492b      	ldr	r1, [pc, #172]	@ (800f0cc <__gethex+0x2b0>)
 800f020:	9303      	str	r3, [sp, #12]
 800f022:	2201      	movs	r2, #1
 800f024:	4630      	mov	r0, r6
 800f026:	f7ff fd15 	bl	800ea54 <strncmp>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d1e1      	bne.n	800eff4 <__gethex+0x1d8>
 800f030:	e7a2      	b.n	800ef78 <__gethex+0x15c>
 800f032:	1ea9      	subs	r1, r5, #2
 800f034:	4620      	mov	r0, r4
 800f036:	f000 ff1c 	bl	800fe72 <__any_on>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d0c2      	beq.n	800efc4 <__gethex+0x1a8>
 800f03e:	f04f 0903 	mov.w	r9, #3
 800f042:	e7c1      	b.n	800efc8 <__gethex+0x1ac>
 800f044:	da09      	bge.n	800f05a <__gethex+0x23e>
 800f046:	1b75      	subs	r5, r6, r5
 800f048:	4621      	mov	r1, r4
 800f04a:	9801      	ldr	r0, [sp, #4]
 800f04c:	462a      	mov	r2, r5
 800f04e:	f000 fcd7 	bl	800fa00 <__lshift>
 800f052:	1b7f      	subs	r7, r7, r5
 800f054:	4604      	mov	r4, r0
 800f056:	f100 0a14 	add.w	sl, r0, #20
 800f05a:	f04f 0900 	mov.w	r9, #0
 800f05e:	e7b8      	b.n	800efd2 <__gethex+0x1b6>
 800f060:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f064:	42bd      	cmp	r5, r7
 800f066:	dd6f      	ble.n	800f148 <__gethex+0x32c>
 800f068:	1bed      	subs	r5, r5, r7
 800f06a:	42ae      	cmp	r6, r5
 800f06c:	dc34      	bgt.n	800f0d8 <__gethex+0x2bc>
 800f06e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f072:	2b02      	cmp	r3, #2
 800f074:	d022      	beq.n	800f0bc <__gethex+0x2a0>
 800f076:	2b03      	cmp	r3, #3
 800f078:	d024      	beq.n	800f0c4 <__gethex+0x2a8>
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d115      	bne.n	800f0aa <__gethex+0x28e>
 800f07e:	42ae      	cmp	r6, r5
 800f080:	d113      	bne.n	800f0aa <__gethex+0x28e>
 800f082:	2e01      	cmp	r6, #1
 800f084:	d10b      	bne.n	800f09e <__gethex+0x282>
 800f086:	9a02      	ldr	r2, [sp, #8]
 800f088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	2301      	movs	r3, #1
 800f090:	6123      	str	r3, [r4, #16]
 800f092:	f8ca 3000 	str.w	r3, [sl]
 800f096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f098:	2562      	movs	r5, #98	@ 0x62
 800f09a:	601c      	str	r4, [r3, #0]
 800f09c:	e73a      	b.n	800ef14 <__gethex+0xf8>
 800f09e:	1e71      	subs	r1, r6, #1
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f000 fee6 	bl	800fe72 <__any_on>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d1ed      	bne.n	800f086 <__gethex+0x26a>
 800f0aa:	9801      	ldr	r0, [sp, #4]
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	f000 fa8f 	bl	800f5d0 <_Bfree>
 800f0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	6013      	str	r3, [r2, #0]
 800f0b8:	2550      	movs	r5, #80	@ 0x50
 800f0ba:	e72b      	b.n	800ef14 <__gethex+0xf8>
 800f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1f3      	bne.n	800f0aa <__gethex+0x28e>
 800f0c2:	e7e0      	b.n	800f086 <__gethex+0x26a>
 800f0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1dd      	bne.n	800f086 <__gethex+0x26a>
 800f0ca:	e7ee      	b.n	800f0aa <__gethex+0x28e>
 800f0cc:	08011408 	.word	0x08011408
 800f0d0:	0801161e 	.word	0x0801161e
 800f0d4:	0801162f 	.word	0x0801162f
 800f0d8:	1e6f      	subs	r7, r5, #1
 800f0da:	f1b9 0f00 	cmp.w	r9, #0
 800f0de:	d130      	bne.n	800f142 <__gethex+0x326>
 800f0e0:	b127      	cbz	r7, 800f0ec <__gethex+0x2d0>
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f000 fec4 	bl	800fe72 <__any_on>
 800f0ea:	4681      	mov	r9, r0
 800f0ec:	117a      	asrs	r2, r7, #5
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0f4:	f007 071f 	and.w	r7, r7, #31
 800f0f8:	40bb      	lsls	r3, r7
 800f0fa:	4213      	tst	r3, r2
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4620      	mov	r0, r4
 800f100:	bf18      	it	ne
 800f102:	f049 0902 	orrne.w	r9, r9, #2
 800f106:	f7ff fe21 	bl	800ed4c <rshift>
 800f10a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f10e:	1b76      	subs	r6, r6, r5
 800f110:	2502      	movs	r5, #2
 800f112:	f1b9 0f00 	cmp.w	r9, #0
 800f116:	d047      	beq.n	800f1a8 <__gethex+0x38c>
 800f118:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d015      	beq.n	800f14c <__gethex+0x330>
 800f120:	2b03      	cmp	r3, #3
 800f122:	d017      	beq.n	800f154 <__gethex+0x338>
 800f124:	2b01      	cmp	r3, #1
 800f126:	d109      	bne.n	800f13c <__gethex+0x320>
 800f128:	f019 0f02 	tst.w	r9, #2
 800f12c:	d006      	beq.n	800f13c <__gethex+0x320>
 800f12e:	f8da 3000 	ldr.w	r3, [sl]
 800f132:	ea49 0903 	orr.w	r9, r9, r3
 800f136:	f019 0f01 	tst.w	r9, #1
 800f13a:	d10e      	bne.n	800f15a <__gethex+0x33e>
 800f13c:	f045 0510 	orr.w	r5, r5, #16
 800f140:	e032      	b.n	800f1a8 <__gethex+0x38c>
 800f142:	f04f 0901 	mov.w	r9, #1
 800f146:	e7d1      	b.n	800f0ec <__gethex+0x2d0>
 800f148:	2501      	movs	r5, #1
 800f14a:	e7e2      	b.n	800f112 <__gethex+0x2f6>
 800f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14e:	f1c3 0301 	rsb	r3, r3, #1
 800f152:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0f0      	beq.n	800f13c <__gethex+0x320>
 800f15a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f15e:	f104 0314 	add.w	r3, r4, #20
 800f162:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f166:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f16a:	f04f 0c00 	mov.w	ip, #0
 800f16e:	4618      	mov	r0, r3
 800f170:	f853 2b04 	ldr.w	r2, [r3], #4
 800f174:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f178:	d01b      	beq.n	800f1b2 <__gethex+0x396>
 800f17a:	3201      	adds	r2, #1
 800f17c:	6002      	str	r2, [r0, #0]
 800f17e:	2d02      	cmp	r5, #2
 800f180:	f104 0314 	add.w	r3, r4, #20
 800f184:	d13c      	bne.n	800f200 <__gethex+0x3e4>
 800f186:	f8d8 2000 	ldr.w	r2, [r8]
 800f18a:	3a01      	subs	r2, #1
 800f18c:	42b2      	cmp	r2, r6
 800f18e:	d109      	bne.n	800f1a4 <__gethex+0x388>
 800f190:	1171      	asrs	r1, r6, #5
 800f192:	2201      	movs	r2, #1
 800f194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f198:	f006 061f 	and.w	r6, r6, #31
 800f19c:	fa02 f606 	lsl.w	r6, r2, r6
 800f1a0:	421e      	tst	r6, r3
 800f1a2:	d13a      	bne.n	800f21a <__gethex+0x3fe>
 800f1a4:	f045 0520 	orr.w	r5, r5, #32
 800f1a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1aa:	601c      	str	r4, [r3, #0]
 800f1ac:	9b02      	ldr	r3, [sp, #8]
 800f1ae:	601f      	str	r7, [r3, #0]
 800f1b0:	e6b0      	b.n	800ef14 <__gethex+0xf8>
 800f1b2:	4299      	cmp	r1, r3
 800f1b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1b8:	d8d9      	bhi.n	800f16e <__gethex+0x352>
 800f1ba:	68a3      	ldr	r3, [r4, #8]
 800f1bc:	459b      	cmp	fp, r3
 800f1be:	db17      	blt.n	800f1f0 <__gethex+0x3d4>
 800f1c0:	6861      	ldr	r1, [r4, #4]
 800f1c2:	9801      	ldr	r0, [sp, #4]
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	f000 f9c3 	bl	800f550 <_Balloc>
 800f1ca:	4681      	mov	r9, r0
 800f1cc:	b918      	cbnz	r0, 800f1d6 <__gethex+0x3ba>
 800f1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f238 <__gethex+0x41c>)
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	2184      	movs	r1, #132	@ 0x84
 800f1d4:	e6c5      	b.n	800ef62 <__gethex+0x146>
 800f1d6:	6922      	ldr	r2, [r4, #16]
 800f1d8:	3202      	adds	r2, #2
 800f1da:	f104 010c 	add.w	r1, r4, #12
 800f1de:	0092      	lsls	r2, r2, #2
 800f1e0:	300c      	adds	r0, #12
 800f1e2:	f7ff fd2c 	bl	800ec3e <memcpy>
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	9801      	ldr	r0, [sp, #4]
 800f1ea:	f000 f9f1 	bl	800f5d0 <_Bfree>
 800f1ee:	464c      	mov	r4, r9
 800f1f0:	6923      	ldr	r3, [r4, #16]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1f8:	6122      	str	r2, [r4, #16]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	615a      	str	r2, [r3, #20]
 800f1fe:	e7be      	b.n	800f17e <__gethex+0x362>
 800f200:	6922      	ldr	r2, [r4, #16]
 800f202:	455a      	cmp	r2, fp
 800f204:	dd0b      	ble.n	800f21e <__gethex+0x402>
 800f206:	2101      	movs	r1, #1
 800f208:	4620      	mov	r0, r4
 800f20a:	f7ff fd9f 	bl	800ed4c <rshift>
 800f20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f212:	3701      	adds	r7, #1
 800f214:	42bb      	cmp	r3, r7
 800f216:	f6ff aee0 	blt.w	800efda <__gethex+0x1be>
 800f21a:	2501      	movs	r5, #1
 800f21c:	e7c2      	b.n	800f1a4 <__gethex+0x388>
 800f21e:	f016 061f 	ands.w	r6, r6, #31
 800f222:	d0fa      	beq.n	800f21a <__gethex+0x3fe>
 800f224:	4453      	add	r3, sl
 800f226:	f1c6 0620 	rsb	r6, r6, #32
 800f22a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f22e:	f000 fa81 	bl	800f734 <__hi0bits>
 800f232:	42b0      	cmp	r0, r6
 800f234:	dbe7      	blt.n	800f206 <__gethex+0x3ea>
 800f236:	e7f0      	b.n	800f21a <__gethex+0x3fe>
 800f238:	0801161e 	.word	0x0801161e

0800f23c <L_shift>:
 800f23c:	f1c2 0208 	rsb	r2, r2, #8
 800f240:	0092      	lsls	r2, r2, #2
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	f1c2 0620 	rsb	r6, r2, #32
 800f248:	6843      	ldr	r3, [r0, #4]
 800f24a:	6804      	ldr	r4, [r0, #0]
 800f24c:	fa03 f506 	lsl.w	r5, r3, r6
 800f250:	432c      	orrs	r4, r5
 800f252:	40d3      	lsrs	r3, r2
 800f254:	6004      	str	r4, [r0, #0]
 800f256:	f840 3f04 	str.w	r3, [r0, #4]!
 800f25a:	4288      	cmp	r0, r1
 800f25c:	d3f4      	bcc.n	800f248 <L_shift+0xc>
 800f25e:	bd70      	pop	{r4, r5, r6, pc}

0800f260 <__match>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	6803      	ldr	r3, [r0, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f26a:	b914      	cbnz	r4, 800f272 <__match+0x12>
 800f26c:	6003      	str	r3, [r0, #0]
 800f26e:	2001      	movs	r0, #1
 800f270:	bd30      	pop	{r4, r5, pc}
 800f272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f276:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f27a:	2d19      	cmp	r5, #25
 800f27c:	bf98      	it	ls
 800f27e:	3220      	addls	r2, #32
 800f280:	42a2      	cmp	r2, r4
 800f282:	d0f0      	beq.n	800f266 <__match+0x6>
 800f284:	2000      	movs	r0, #0
 800f286:	e7f3      	b.n	800f270 <__match+0x10>

0800f288 <__hexnan>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	680b      	ldr	r3, [r1, #0]
 800f28e:	6801      	ldr	r1, [r0, #0]
 800f290:	115e      	asrs	r6, r3, #5
 800f292:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f296:	f013 031f 	ands.w	r3, r3, #31
 800f29a:	b087      	sub	sp, #28
 800f29c:	bf18      	it	ne
 800f29e:	3604      	addne	r6, #4
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	1f37      	subs	r7, r6, #4
 800f2a4:	4682      	mov	sl, r0
 800f2a6:	4690      	mov	r8, r2
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2ae:	46b9      	mov	r9, r7
 800f2b0:	463c      	mov	r4, r7
 800f2b2:	9502      	str	r5, [sp, #8]
 800f2b4:	46ab      	mov	fp, r5
 800f2b6:	784a      	ldrb	r2, [r1, #1]
 800f2b8:	1c4b      	adds	r3, r1, #1
 800f2ba:	9303      	str	r3, [sp, #12]
 800f2bc:	b342      	cbz	r2, 800f310 <__hexnan+0x88>
 800f2be:	4610      	mov	r0, r2
 800f2c0:	9105      	str	r1, [sp, #20]
 800f2c2:	9204      	str	r2, [sp, #16]
 800f2c4:	f7ff fd94 	bl	800edf0 <__hexdig_fun>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d151      	bne.n	800f370 <__hexnan+0xe8>
 800f2cc:	9a04      	ldr	r2, [sp, #16]
 800f2ce:	9905      	ldr	r1, [sp, #20]
 800f2d0:	2a20      	cmp	r2, #32
 800f2d2:	d818      	bhi.n	800f306 <__hexnan+0x7e>
 800f2d4:	9b02      	ldr	r3, [sp, #8]
 800f2d6:	459b      	cmp	fp, r3
 800f2d8:	dd13      	ble.n	800f302 <__hexnan+0x7a>
 800f2da:	454c      	cmp	r4, r9
 800f2dc:	d206      	bcs.n	800f2ec <__hexnan+0x64>
 800f2de:	2d07      	cmp	r5, #7
 800f2e0:	dc04      	bgt.n	800f2ec <__hexnan+0x64>
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7ff ffa8 	bl	800f23c <L_shift>
 800f2ec:	4544      	cmp	r4, r8
 800f2ee:	d952      	bls.n	800f396 <__hexnan+0x10e>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2fa:	f8cd b008 	str.w	fp, [sp, #8]
 800f2fe:	464c      	mov	r4, r9
 800f300:	461d      	mov	r5, r3
 800f302:	9903      	ldr	r1, [sp, #12]
 800f304:	e7d7      	b.n	800f2b6 <__hexnan+0x2e>
 800f306:	2a29      	cmp	r2, #41	@ 0x29
 800f308:	d157      	bne.n	800f3ba <__hexnan+0x132>
 800f30a:	3102      	adds	r1, #2
 800f30c:	f8ca 1000 	str.w	r1, [sl]
 800f310:	f1bb 0f00 	cmp.w	fp, #0
 800f314:	d051      	beq.n	800f3ba <__hexnan+0x132>
 800f316:	454c      	cmp	r4, r9
 800f318:	d206      	bcs.n	800f328 <__hexnan+0xa0>
 800f31a:	2d07      	cmp	r5, #7
 800f31c:	dc04      	bgt.n	800f328 <__hexnan+0xa0>
 800f31e:	462a      	mov	r2, r5
 800f320:	4649      	mov	r1, r9
 800f322:	4620      	mov	r0, r4
 800f324:	f7ff ff8a 	bl	800f23c <L_shift>
 800f328:	4544      	cmp	r4, r8
 800f32a:	d936      	bls.n	800f39a <__hexnan+0x112>
 800f32c:	f1a8 0204 	sub.w	r2, r8, #4
 800f330:	4623      	mov	r3, r4
 800f332:	f853 1b04 	ldr.w	r1, [r3], #4
 800f336:	f842 1f04 	str.w	r1, [r2, #4]!
 800f33a:	429f      	cmp	r7, r3
 800f33c:	d2f9      	bcs.n	800f332 <__hexnan+0xaa>
 800f33e:	1b3b      	subs	r3, r7, r4
 800f340:	f023 0303 	bic.w	r3, r3, #3
 800f344:	3304      	adds	r3, #4
 800f346:	3401      	adds	r4, #1
 800f348:	3e03      	subs	r6, #3
 800f34a:	42b4      	cmp	r4, r6
 800f34c:	bf88      	it	hi
 800f34e:	2304      	movhi	r3, #4
 800f350:	4443      	add	r3, r8
 800f352:	2200      	movs	r2, #0
 800f354:	f843 2b04 	str.w	r2, [r3], #4
 800f358:	429f      	cmp	r7, r3
 800f35a:	d2fb      	bcs.n	800f354 <__hexnan+0xcc>
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	b91b      	cbnz	r3, 800f368 <__hexnan+0xe0>
 800f360:	4547      	cmp	r7, r8
 800f362:	d128      	bne.n	800f3b6 <__hexnan+0x12e>
 800f364:	2301      	movs	r3, #1
 800f366:	603b      	str	r3, [r7, #0]
 800f368:	2005      	movs	r0, #5
 800f36a:	b007      	add	sp, #28
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f370:	3501      	adds	r5, #1
 800f372:	2d08      	cmp	r5, #8
 800f374:	f10b 0b01 	add.w	fp, fp, #1
 800f378:	dd06      	ble.n	800f388 <__hexnan+0x100>
 800f37a:	4544      	cmp	r4, r8
 800f37c:	d9c1      	bls.n	800f302 <__hexnan+0x7a>
 800f37e:	2300      	movs	r3, #0
 800f380:	f844 3c04 	str.w	r3, [r4, #-4]
 800f384:	2501      	movs	r5, #1
 800f386:	3c04      	subs	r4, #4
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	f000 000f 	and.w	r0, r0, #15
 800f38e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f392:	6020      	str	r0, [r4, #0]
 800f394:	e7b5      	b.n	800f302 <__hexnan+0x7a>
 800f396:	2508      	movs	r5, #8
 800f398:	e7b3      	b.n	800f302 <__hexnan+0x7a>
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d0dd      	beq.n	800f35c <__hexnan+0xd4>
 800f3a0:	f1c3 0320 	rsb	r3, r3, #32
 800f3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a8:	40da      	lsrs	r2, r3
 800f3aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3ae:	4013      	ands	r3, r2
 800f3b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3b4:	e7d2      	b.n	800f35c <__hexnan+0xd4>
 800f3b6:	3f04      	subs	r7, #4
 800f3b8:	e7d0      	b.n	800f35c <__hexnan+0xd4>
 800f3ba:	2004      	movs	r0, #4
 800f3bc:	e7d5      	b.n	800f36a <__hexnan+0xe2>
	...

0800f3c0 <malloc>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	@ (800f3cc <malloc+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f000 b825 	b.w	800f414 <_malloc_r>
 800f3ca:	bf00      	nop
 800f3cc:	200002b0 	.word	0x200002b0

0800f3d0 <sbrk_aligned>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4e0f      	ldr	r6, [pc, #60]	@ (800f410 <sbrk_aligned+0x40>)
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	6831      	ldr	r1, [r6, #0]
 800f3d8:	4605      	mov	r5, r0
 800f3da:	b911      	cbnz	r1, 800f3e2 <sbrk_aligned+0x12>
 800f3dc:	f001 f988 	bl	80106f0 <_sbrk_r>
 800f3e0:	6030      	str	r0, [r6, #0]
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f001 f983 	bl	80106f0 <_sbrk_r>
 800f3ea:	1c43      	adds	r3, r0, #1
 800f3ec:	d103      	bne.n	800f3f6 <sbrk_aligned+0x26>
 800f3ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	bd70      	pop	{r4, r5, r6, pc}
 800f3f6:	1cc4      	adds	r4, r0, #3
 800f3f8:	f024 0403 	bic.w	r4, r4, #3
 800f3fc:	42a0      	cmp	r0, r4
 800f3fe:	d0f8      	beq.n	800f3f2 <sbrk_aligned+0x22>
 800f400:	1a21      	subs	r1, r4, r0
 800f402:	4628      	mov	r0, r5
 800f404:	f001 f974 	bl	80106f0 <_sbrk_r>
 800f408:	3001      	adds	r0, #1
 800f40a:	d1f2      	bne.n	800f3f2 <sbrk_aligned+0x22>
 800f40c:	e7ef      	b.n	800f3ee <sbrk_aligned+0x1e>
 800f40e:	bf00      	nop
 800f410:	20003138 	.word	0x20003138

0800f414 <_malloc_r>:
 800f414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f418:	1ccd      	adds	r5, r1, #3
 800f41a:	f025 0503 	bic.w	r5, r5, #3
 800f41e:	3508      	adds	r5, #8
 800f420:	2d0c      	cmp	r5, #12
 800f422:	bf38      	it	cc
 800f424:	250c      	movcc	r5, #12
 800f426:	2d00      	cmp	r5, #0
 800f428:	4606      	mov	r6, r0
 800f42a:	db01      	blt.n	800f430 <_malloc_r+0x1c>
 800f42c:	42a9      	cmp	r1, r5
 800f42e:	d904      	bls.n	800f43a <_malloc_r+0x26>
 800f430:	230c      	movs	r3, #12
 800f432:	6033      	str	r3, [r6, #0]
 800f434:	2000      	movs	r0, #0
 800f436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f43a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f510 <_malloc_r+0xfc>
 800f43e:	f000 f87b 	bl	800f538 <__malloc_lock>
 800f442:	f8d8 3000 	ldr.w	r3, [r8]
 800f446:	461c      	mov	r4, r3
 800f448:	bb44      	cbnz	r4, 800f49c <_malloc_r+0x88>
 800f44a:	4629      	mov	r1, r5
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff ffbf 	bl	800f3d0 <sbrk_aligned>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	4604      	mov	r4, r0
 800f456:	d158      	bne.n	800f50a <_malloc_r+0xf6>
 800f458:	f8d8 4000 	ldr.w	r4, [r8]
 800f45c:	4627      	mov	r7, r4
 800f45e:	2f00      	cmp	r7, #0
 800f460:	d143      	bne.n	800f4ea <_malloc_r+0xd6>
 800f462:	2c00      	cmp	r4, #0
 800f464:	d04b      	beq.n	800f4fe <_malloc_r+0xea>
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	4639      	mov	r1, r7
 800f46a:	4630      	mov	r0, r6
 800f46c:	eb04 0903 	add.w	r9, r4, r3
 800f470:	f001 f93e 	bl	80106f0 <_sbrk_r>
 800f474:	4581      	cmp	r9, r0
 800f476:	d142      	bne.n	800f4fe <_malloc_r+0xea>
 800f478:	6821      	ldr	r1, [r4, #0]
 800f47a:	1a6d      	subs	r5, r5, r1
 800f47c:	4629      	mov	r1, r5
 800f47e:	4630      	mov	r0, r6
 800f480:	f7ff ffa6 	bl	800f3d0 <sbrk_aligned>
 800f484:	3001      	adds	r0, #1
 800f486:	d03a      	beq.n	800f4fe <_malloc_r+0xea>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	442b      	add	r3, r5
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	f8d8 3000 	ldr.w	r3, [r8]
 800f492:	685a      	ldr	r2, [r3, #4]
 800f494:	bb62      	cbnz	r2, 800f4f0 <_malloc_r+0xdc>
 800f496:	f8c8 7000 	str.w	r7, [r8]
 800f49a:	e00f      	b.n	800f4bc <_malloc_r+0xa8>
 800f49c:	6822      	ldr	r2, [r4, #0]
 800f49e:	1b52      	subs	r2, r2, r5
 800f4a0:	d420      	bmi.n	800f4e4 <_malloc_r+0xd0>
 800f4a2:	2a0b      	cmp	r2, #11
 800f4a4:	d917      	bls.n	800f4d6 <_malloc_r+0xc2>
 800f4a6:	1961      	adds	r1, r4, r5
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	6025      	str	r5, [r4, #0]
 800f4ac:	bf18      	it	ne
 800f4ae:	6059      	strne	r1, [r3, #4]
 800f4b0:	6863      	ldr	r3, [r4, #4]
 800f4b2:	bf08      	it	eq
 800f4b4:	f8c8 1000 	streq.w	r1, [r8]
 800f4b8:	5162      	str	r2, [r4, r5]
 800f4ba:	604b      	str	r3, [r1, #4]
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f000 f841 	bl	800f544 <__malloc_unlock>
 800f4c2:	f104 000b 	add.w	r0, r4, #11
 800f4c6:	1d23      	adds	r3, r4, #4
 800f4c8:	f020 0007 	bic.w	r0, r0, #7
 800f4cc:	1ac2      	subs	r2, r0, r3
 800f4ce:	bf1c      	itt	ne
 800f4d0:	1a1b      	subne	r3, r3, r0
 800f4d2:	50a3      	strne	r3, [r4, r2]
 800f4d4:	e7af      	b.n	800f436 <_malloc_r+0x22>
 800f4d6:	6862      	ldr	r2, [r4, #4]
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	bf0c      	ite	eq
 800f4dc:	f8c8 2000 	streq.w	r2, [r8]
 800f4e0:	605a      	strne	r2, [r3, #4]
 800f4e2:	e7eb      	b.n	800f4bc <_malloc_r+0xa8>
 800f4e4:	4623      	mov	r3, r4
 800f4e6:	6864      	ldr	r4, [r4, #4]
 800f4e8:	e7ae      	b.n	800f448 <_malloc_r+0x34>
 800f4ea:	463c      	mov	r4, r7
 800f4ec:	687f      	ldr	r7, [r7, #4]
 800f4ee:	e7b6      	b.n	800f45e <_malloc_r+0x4a>
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	d1fb      	bne.n	800f4f0 <_malloc_r+0xdc>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	6053      	str	r3, [r2, #4]
 800f4fc:	e7de      	b.n	800f4bc <_malloc_r+0xa8>
 800f4fe:	230c      	movs	r3, #12
 800f500:	6033      	str	r3, [r6, #0]
 800f502:	4630      	mov	r0, r6
 800f504:	f000 f81e 	bl	800f544 <__malloc_unlock>
 800f508:	e794      	b.n	800f434 <_malloc_r+0x20>
 800f50a:	6005      	str	r5, [r0, #0]
 800f50c:	e7d6      	b.n	800f4bc <_malloc_r+0xa8>
 800f50e:	bf00      	nop
 800f510:	2000313c 	.word	0x2000313c

0800f514 <__ascii_mbtowc>:
 800f514:	b082      	sub	sp, #8
 800f516:	b901      	cbnz	r1, 800f51a <__ascii_mbtowc+0x6>
 800f518:	a901      	add	r1, sp, #4
 800f51a:	b142      	cbz	r2, 800f52e <__ascii_mbtowc+0x1a>
 800f51c:	b14b      	cbz	r3, 800f532 <__ascii_mbtowc+0x1e>
 800f51e:	7813      	ldrb	r3, [r2, #0]
 800f520:	600b      	str	r3, [r1, #0]
 800f522:	7812      	ldrb	r2, [r2, #0]
 800f524:	1e10      	subs	r0, r2, #0
 800f526:	bf18      	it	ne
 800f528:	2001      	movne	r0, #1
 800f52a:	b002      	add	sp, #8
 800f52c:	4770      	bx	lr
 800f52e:	4610      	mov	r0, r2
 800f530:	e7fb      	b.n	800f52a <__ascii_mbtowc+0x16>
 800f532:	f06f 0001 	mvn.w	r0, #1
 800f536:	e7f8      	b.n	800f52a <__ascii_mbtowc+0x16>

0800f538 <__malloc_lock>:
 800f538:	4801      	ldr	r0, [pc, #4]	@ (800f540 <__malloc_lock+0x8>)
 800f53a:	f7ff bb7e 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800f53e:	bf00      	nop
 800f540:	20003134 	.word	0x20003134

0800f544 <__malloc_unlock>:
 800f544:	4801      	ldr	r0, [pc, #4]	@ (800f54c <__malloc_unlock+0x8>)
 800f546:	f7ff bb79 	b.w	800ec3c <__retarget_lock_release_recursive>
 800f54a:	bf00      	nop
 800f54c:	20003134 	.word	0x20003134

0800f550 <_Balloc>:
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	69c6      	ldr	r6, [r0, #28]
 800f554:	4604      	mov	r4, r0
 800f556:	460d      	mov	r5, r1
 800f558:	b976      	cbnz	r6, 800f578 <_Balloc+0x28>
 800f55a:	2010      	movs	r0, #16
 800f55c:	f7ff ff30 	bl	800f3c0 <malloc>
 800f560:	4602      	mov	r2, r0
 800f562:	61e0      	str	r0, [r4, #28]
 800f564:	b920      	cbnz	r0, 800f570 <_Balloc+0x20>
 800f566:	4b18      	ldr	r3, [pc, #96]	@ (800f5c8 <_Balloc+0x78>)
 800f568:	4818      	ldr	r0, [pc, #96]	@ (800f5cc <_Balloc+0x7c>)
 800f56a:	216b      	movs	r1, #107	@ 0x6b
 800f56c:	f7ff fb86 	bl	800ec7c <__assert_func>
 800f570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f574:	6006      	str	r6, [r0, #0]
 800f576:	60c6      	str	r6, [r0, #12]
 800f578:	69e6      	ldr	r6, [r4, #28]
 800f57a:	68f3      	ldr	r3, [r6, #12]
 800f57c:	b183      	cbz	r3, 800f5a0 <_Balloc+0x50>
 800f57e:	69e3      	ldr	r3, [r4, #28]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f586:	b9b8      	cbnz	r0, 800f5b8 <_Balloc+0x68>
 800f588:	2101      	movs	r1, #1
 800f58a:	fa01 f605 	lsl.w	r6, r1, r5
 800f58e:	1d72      	adds	r2, r6, #5
 800f590:	0092      	lsls	r2, r2, #2
 800f592:	4620      	mov	r0, r4
 800f594:	f001 f8c3 	bl	801071e <_calloc_r>
 800f598:	b160      	cbz	r0, 800f5b4 <_Balloc+0x64>
 800f59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f59e:	e00e      	b.n	800f5be <_Balloc+0x6e>
 800f5a0:	2221      	movs	r2, #33	@ 0x21
 800f5a2:	2104      	movs	r1, #4
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f001 f8ba 	bl	801071e <_calloc_r>
 800f5aa:	69e3      	ldr	r3, [r4, #28]
 800f5ac:	60f0      	str	r0, [r6, #12]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1e4      	bne.n	800f57e <_Balloc+0x2e>
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
 800f5b8:	6802      	ldr	r2, [r0, #0]
 800f5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5c4:	e7f7      	b.n	800f5b6 <_Balloc+0x66>
 800f5c6:	bf00      	nop
 800f5c8:	08011569 	.word	0x08011569
 800f5cc:	0801168f 	.word	0x0801168f

0800f5d0 <_Bfree>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	69c6      	ldr	r6, [r0, #28]
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	b976      	cbnz	r6, 800f5f8 <_Bfree+0x28>
 800f5da:	2010      	movs	r0, #16
 800f5dc:	f7ff fef0 	bl	800f3c0 <malloc>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	61e8      	str	r0, [r5, #28]
 800f5e4:	b920      	cbnz	r0, 800f5f0 <_Bfree+0x20>
 800f5e6:	4b09      	ldr	r3, [pc, #36]	@ (800f60c <_Bfree+0x3c>)
 800f5e8:	4809      	ldr	r0, [pc, #36]	@ (800f610 <_Bfree+0x40>)
 800f5ea:	218f      	movs	r1, #143	@ 0x8f
 800f5ec:	f7ff fb46 	bl	800ec7c <__assert_func>
 800f5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5f4:	6006      	str	r6, [r0, #0]
 800f5f6:	60c6      	str	r6, [r0, #12]
 800f5f8:	b13c      	cbz	r4, 800f60a <_Bfree+0x3a>
 800f5fa:	69eb      	ldr	r3, [r5, #28]
 800f5fc:	6862      	ldr	r2, [r4, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f604:	6021      	str	r1, [r4, #0]
 800f606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f60a:	bd70      	pop	{r4, r5, r6, pc}
 800f60c:	08011569 	.word	0x08011569
 800f610:	0801168f 	.word	0x0801168f

0800f614 <__multadd>:
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	690d      	ldr	r5, [r1, #16]
 800f61a:	4607      	mov	r7, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	461e      	mov	r6, r3
 800f620:	f101 0c14 	add.w	ip, r1, #20
 800f624:	2000      	movs	r0, #0
 800f626:	f8dc 3000 	ldr.w	r3, [ip]
 800f62a:	b299      	uxth	r1, r3
 800f62c:	fb02 6101 	mla	r1, r2, r1, r6
 800f630:	0c1e      	lsrs	r6, r3, #16
 800f632:	0c0b      	lsrs	r3, r1, #16
 800f634:	fb02 3306 	mla	r3, r2, r6, r3
 800f638:	b289      	uxth	r1, r1
 800f63a:	3001      	adds	r0, #1
 800f63c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f640:	4285      	cmp	r5, r0
 800f642:	f84c 1b04 	str.w	r1, [ip], #4
 800f646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f64a:	dcec      	bgt.n	800f626 <__multadd+0x12>
 800f64c:	b30e      	cbz	r6, 800f692 <__multadd+0x7e>
 800f64e:	68a3      	ldr	r3, [r4, #8]
 800f650:	42ab      	cmp	r3, r5
 800f652:	dc19      	bgt.n	800f688 <__multadd+0x74>
 800f654:	6861      	ldr	r1, [r4, #4]
 800f656:	4638      	mov	r0, r7
 800f658:	3101      	adds	r1, #1
 800f65a:	f7ff ff79 	bl	800f550 <_Balloc>
 800f65e:	4680      	mov	r8, r0
 800f660:	b928      	cbnz	r0, 800f66e <__multadd+0x5a>
 800f662:	4602      	mov	r2, r0
 800f664:	4b0c      	ldr	r3, [pc, #48]	@ (800f698 <__multadd+0x84>)
 800f666:	480d      	ldr	r0, [pc, #52]	@ (800f69c <__multadd+0x88>)
 800f668:	21ba      	movs	r1, #186	@ 0xba
 800f66a:	f7ff fb07 	bl	800ec7c <__assert_func>
 800f66e:	6922      	ldr	r2, [r4, #16]
 800f670:	3202      	adds	r2, #2
 800f672:	f104 010c 	add.w	r1, r4, #12
 800f676:	0092      	lsls	r2, r2, #2
 800f678:	300c      	adds	r0, #12
 800f67a:	f7ff fae0 	bl	800ec3e <memcpy>
 800f67e:	4621      	mov	r1, r4
 800f680:	4638      	mov	r0, r7
 800f682:	f7ff ffa5 	bl	800f5d0 <_Bfree>
 800f686:	4644      	mov	r4, r8
 800f688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f68c:	3501      	adds	r5, #1
 800f68e:	615e      	str	r6, [r3, #20]
 800f690:	6125      	str	r5, [r4, #16]
 800f692:	4620      	mov	r0, r4
 800f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f698:	0801161e 	.word	0x0801161e
 800f69c:	0801168f 	.word	0x0801168f

0800f6a0 <__s2b>:
 800f6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a4:	460c      	mov	r4, r1
 800f6a6:	4615      	mov	r5, r2
 800f6a8:	461f      	mov	r7, r3
 800f6aa:	2209      	movs	r2, #9
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	db09      	blt.n	800f6d0 <__s2b+0x30>
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f7ff ff47 	bl	800f550 <_Balloc>
 800f6c2:	b940      	cbnz	r0, 800f6d6 <__s2b+0x36>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	4b19      	ldr	r3, [pc, #100]	@ (800f72c <__s2b+0x8c>)
 800f6c8:	4819      	ldr	r0, [pc, #100]	@ (800f730 <__s2b+0x90>)
 800f6ca:	21d3      	movs	r1, #211	@ 0xd3
 800f6cc:	f7ff fad6 	bl	800ec7c <__assert_func>
 800f6d0:	0052      	lsls	r2, r2, #1
 800f6d2:	3101      	adds	r1, #1
 800f6d4:	e7f0      	b.n	800f6b8 <__s2b+0x18>
 800f6d6:	9b08      	ldr	r3, [sp, #32]
 800f6d8:	6143      	str	r3, [r0, #20]
 800f6da:	2d09      	cmp	r5, #9
 800f6dc:	f04f 0301 	mov.w	r3, #1
 800f6e0:	6103      	str	r3, [r0, #16]
 800f6e2:	dd16      	ble.n	800f712 <__s2b+0x72>
 800f6e4:	f104 0909 	add.w	r9, r4, #9
 800f6e8:	46c8      	mov	r8, r9
 800f6ea:	442c      	add	r4, r5
 800f6ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f6f0:	4601      	mov	r1, r0
 800f6f2:	3b30      	subs	r3, #48	@ 0x30
 800f6f4:	220a      	movs	r2, #10
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f7ff ff8c 	bl	800f614 <__multadd>
 800f6fc:	45a0      	cmp	r8, r4
 800f6fe:	d1f5      	bne.n	800f6ec <__s2b+0x4c>
 800f700:	f1a5 0408 	sub.w	r4, r5, #8
 800f704:	444c      	add	r4, r9
 800f706:	1b2d      	subs	r5, r5, r4
 800f708:	1963      	adds	r3, r4, r5
 800f70a:	42bb      	cmp	r3, r7
 800f70c:	db04      	blt.n	800f718 <__s2b+0x78>
 800f70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f712:	340a      	adds	r4, #10
 800f714:	2509      	movs	r5, #9
 800f716:	e7f6      	b.n	800f706 <__s2b+0x66>
 800f718:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f71c:	4601      	mov	r1, r0
 800f71e:	3b30      	subs	r3, #48	@ 0x30
 800f720:	220a      	movs	r2, #10
 800f722:	4630      	mov	r0, r6
 800f724:	f7ff ff76 	bl	800f614 <__multadd>
 800f728:	e7ee      	b.n	800f708 <__s2b+0x68>
 800f72a:	bf00      	nop
 800f72c:	0801161e 	.word	0x0801161e
 800f730:	0801168f 	.word	0x0801168f

0800f734 <__hi0bits>:
 800f734:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f738:	4603      	mov	r3, r0
 800f73a:	bf36      	itet	cc
 800f73c:	0403      	lslcc	r3, r0, #16
 800f73e:	2000      	movcs	r0, #0
 800f740:	2010      	movcc	r0, #16
 800f742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f746:	bf3c      	itt	cc
 800f748:	021b      	lslcc	r3, r3, #8
 800f74a:	3008      	addcc	r0, #8
 800f74c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f750:	bf3c      	itt	cc
 800f752:	011b      	lslcc	r3, r3, #4
 800f754:	3004      	addcc	r0, #4
 800f756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f75a:	bf3c      	itt	cc
 800f75c:	009b      	lslcc	r3, r3, #2
 800f75e:	3002      	addcc	r0, #2
 800f760:	2b00      	cmp	r3, #0
 800f762:	db05      	blt.n	800f770 <__hi0bits+0x3c>
 800f764:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f768:	f100 0001 	add.w	r0, r0, #1
 800f76c:	bf08      	it	eq
 800f76e:	2020      	moveq	r0, #32
 800f770:	4770      	bx	lr

0800f772 <__lo0bits>:
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	4602      	mov	r2, r0
 800f776:	f013 0007 	ands.w	r0, r3, #7
 800f77a:	d00b      	beq.n	800f794 <__lo0bits+0x22>
 800f77c:	07d9      	lsls	r1, r3, #31
 800f77e:	d421      	bmi.n	800f7c4 <__lo0bits+0x52>
 800f780:	0798      	lsls	r0, r3, #30
 800f782:	bf49      	itett	mi
 800f784:	085b      	lsrmi	r3, r3, #1
 800f786:	089b      	lsrpl	r3, r3, #2
 800f788:	2001      	movmi	r0, #1
 800f78a:	6013      	strmi	r3, [r2, #0]
 800f78c:	bf5c      	itt	pl
 800f78e:	6013      	strpl	r3, [r2, #0]
 800f790:	2002      	movpl	r0, #2
 800f792:	4770      	bx	lr
 800f794:	b299      	uxth	r1, r3
 800f796:	b909      	cbnz	r1, 800f79c <__lo0bits+0x2a>
 800f798:	0c1b      	lsrs	r3, r3, #16
 800f79a:	2010      	movs	r0, #16
 800f79c:	b2d9      	uxtb	r1, r3
 800f79e:	b909      	cbnz	r1, 800f7a4 <__lo0bits+0x32>
 800f7a0:	3008      	adds	r0, #8
 800f7a2:	0a1b      	lsrs	r3, r3, #8
 800f7a4:	0719      	lsls	r1, r3, #28
 800f7a6:	bf04      	itt	eq
 800f7a8:	091b      	lsreq	r3, r3, #4
 800f7aa:	3004      	addeq	r0, #4
 800f7ac:	0799      	lsls	r1, r3, #30
 800f7ae:	bf04      	itt	eq
 800f7b0:	089b      	lsreq	r3, r3, #2
 800f7b2:	3002      	addeq	r0, #2
 800f7b4:	07d9      	lsls	r1, r3, #31
 800f7b6:	d403      	bmi.n	800f7c0 <__lo0bits+0x4e>
 800f7b8:	085b      	lsrs	r3, r3, #1
 800f7ba:	f100 0001 	add.w	r0, r0, #1
 800f7be:	d003      	beq.n	800f7c8 <__lo0bits+0x56>
 800f7c0:	6013      	str	r3, [r2, #0]
 800f7c2:	4770      	bx	lr
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	4770      	bx	lr
 800f7c8:	2020      	movs	r0, #32
 800f7ca:	4770      	bx	lr

0800f7cc <__i2b>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	f7ff febd 	bl	800f550 <_Balloc>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	b928      	cbnz	r0, 800f7e6 <__i2b+0x1a>
 800f7da:	4b05      	ldr	r3, [pc, #20]	@ (800f7f0 <__i2b+0x24>)
 800f7dc:	4805      	ldr	r0, [pc, #20]	@ (800f7f4 <__i2b+0x28>)
 800f7de:	f240 1145 	movw	r1, #325	@ 0x145
 800f7e2:	f7ff fa4b 	bl	800ec7c <__assert_func>
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	6144      	str	r4, [r0, #20]
 800f7ea:	6103      	str	r3, [r0, #16]
 800f7ec:	bd10      	pop	{r4, pc}
 800f7ee:	bf00      	nop
 800f7f0:	0801161e 	.word	0x0801161e
 800f7f4:	0801168f 	.word	0x0801168f

0800f7f8 <__multiply>:
 800f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	4614      	mov	r4, r2
 800f7fe:	690a      	ldr	r2, [r1, #16]
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	429a      	cmp	r2, r3
 800f804:	bfa8      	it	ge
 800f806:	4623      	movge	r3, r4
 800f808:	460f      	mov	r7, r1
 800f80a:	bfa4      	itt	ge
 800f80c:	460c      	movge	r4, r1
 800f80e:	461f      	movge	r7, r3
 800f810:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f814:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f818:	68a3      	ldr	r3, [r4, #8]
 800f81a:	6861      	ldr	r1, [r4, #4]
 800f81c:	eb0a 0609 	add.w	r6, sl, r9
 800f820:	42b3      	cmp	r3, r6
 800f822:	b085      	sub	sp, #20
 800f824:	bfb8      	it	lt
 800f826:	3101      	addlt	r1, #1
 800f828:	f7ff fe92 	bl	800f550 <_Balloc>
 800f82c:	b930      	cbnz	r0, 800f83c <__multiply+0x44>
 800f82e:	4602      	mov	r2, r0
 800f830:	4b44      	ldr	r3, [pc, #272]	@ (800f944 <__multiply+0x14c>)
 800f832:	4845      	ldr	r0, [pc, #276]	@ (800f948 <__multiply+0x150>)
 800f834:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f838:	f7ff fa20 	bl	800ec7c <__assert_func>
 800f83c:	f100 0514 	add.w	r5, r0, #20
 800f840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f844:	462b      	mov	r3, r5
 800f846:	2200      	movs	r2, #0
 800f848:	4543      	cmp	r3, r8
 800f84a:	d321      	bcc.n	800f890 <__multiply+0x98>
 800f84c:	f107 0114 	add.w	r1, r7, #20
 800f850:	f104 0214 	add.w	r2, r4, #20
 800f854:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f858:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f85c:	9302      	str	r3, [sp, #8]
 800f85e:	1b13      	subs	r3, r2, r4
 800f860:	3b15      	subs	r3, #21
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	3304      	adds	r3, #4
 800f868:	f104 0715 	add.w	r7, r4, #21
 800f86c:	42ba      	cmp	r2, r7
 800f86e:	bf38      	it	cc
 800f870:	2304      	movcc	r3, #4
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	9b02      	ldr	r3, [sp, #8]
 800f876:	9103      	str	r1, [sp, #12]
 800f878:	428b      	cmp	r3, r1
 800f87a:	d80c      	bhi.n	800f896 <__multiply+0x9e>
 800f87c:	2e00      	cmp	r6, #0
 800f87e:	dd03      	ble.n	800f888 <__multiply+0x90>
 800f880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f884:	2b00      	cmp	r3, #0
 800f886:	d05b      	beq.n	800f940 <__multiply+0x148>
 800f888:	6106      	str	r6, [r0, #16]
 800f88a:	b005      	add	sp, #20
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f890:	f843 2b04 	str.w	r2, [r3], #4
 800f894:	e7d8      	b.n	800f848 <__multiply+0x50>
 800f896:	f8b1 a000 	ldrh.w	sl, [r1]
 800f89a:	f1ba 0f00 	cmp.w	sl, #0
 800f89e:	d024      	beq.n	800f8ea <__multiply+0xf2>
 800f8a0:	f104 0e14 	add.w	lr, r4, #20
 800f8a4:	46a9      	mov	r9, r5
 800f8a6:	f04f 0c00 	mov.w	ip, #0
 800f8aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f8ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f8b2:	fa1f fb87 	uxth.w	fp, r7
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f8bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f8c0:	f8d9 7000 	ldr.w	r7, [r9]
 800f8c4:	4463      	add	r3, ip
 800f8c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f8ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800f8ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f8d8:	4572      	cmp	r2, lr
 800f8da:	f849 3b04 	str.w	r3, [r9], #4
 800f8de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f8e2:	d8e2      	bhi.n	800f8aa <__multiply+0xb2>
 800f8e4:	9b01      	ldr	r3, [sp, #4]
 800f8e6:	f845 c003 	str.w	ip, [r5, r3]
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f8f0:	3104      	adds	r1, #4
 800f8f2:	f1b9 0f00 	cmp.w	r9, #0
 800f8f6:	d021      	beq.n	800f93c <__multiply+0x144>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	f104 0c14 	add.w	ip, r4, #20
 800f8fe:	46ae      	mov	lr, r5
 800f900:	f04f 0a00 	mov.w	sl, #0
 800f904:	f8bc b000 	ldrh.w	fp, [ip]
 800f908:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f90c:	fb09 770b 	mla	r7, r9, fp, r7
 800f910:	4457      	add	r7, sl
 800f912:	b29b      	uxth	r3, r3
 800f914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f918:	f84e 3b04 	str.w	r3, [lr], #4
 800f91c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f924:	f8be 3000 	ldrh.w	r3, [lr]
 800f928:	fb09 330a 	mla	r3, r9, sl, r3
 800f92c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f930:	4562      	cmp	r2, ip
 800f932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f936:	d8e5      	bhi.n	800f904 <__multiply+0x10c>
 800f938:	9f01      	ldr	r7, [sp, #4]
 800f93a:	51eb      	str	r3, [r5, r7]
 800f93c:	3504      	adds	r5, #4
 800f93e:	e799      	b.n	800f874 <__multiply+0x7c>
 800f940:	3e01      	subs	r6, #1
 800f942:	e79b      	b.n	800f87c <__multiply+0x84>
 800f944:	0801161e 	.word	0x0801161e
 800f948:	0801168f 	.word	0x0801168f

0800f94c <__pow5mult>:
 800f94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f950:	4615      	mov	r5, r2
 800f952:	f012 0203 	ands.w	r2, r2, #3
 800f956:	4607      	mov	r7, r0
 800f958:	460e      	mov	r6, r1
 800f95a:	d007      	beq.n	800f96c <__pow5mult+0x20>
 800f95c:	4c25      	ldr	r4, [pc, #148]	@ (800f9f4 <__pow5mult+0xa8>)
 800f95e:	3a01      	subs	r2, #1
 800f960:	2300      	movs	r3, #0
 800f962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f966:	f7ff fe55 	bl	800f614 <__multadd>
 800f96a:	4606      	mov	r6, r0
 800f96c:	10ad      	asrs	r5, r5, #2
 800f96e:	d03d      	beq.n	800f9ec <__pow5mult+0xa0>
 800f970:	69fc      	ldr	r4, [r7, #28]
 800f972:	b97c      	cbnz	r4, 800f994 <__pow5mult+0x48>
 800f974:	2010      	movs	r0, #16
 800f976:	f7ff fd23 	bl	800f3c0 <malloc>
 800f97a:	4602      	mov	r2, r0
 800f97c:	61f8      	str	r0, [r7, #28]
 800f97e:	b928      	cbnz	r0, 800f98c <__pow5mult+0x40>
 800f980:	4b1d      	ldr	r3, [pc, #116]	@ (800f9f8 <__pow5mult+0xac>)
 800f982:	481e      	ldr	r0, [pc, #120]	@ (800f9fc <__pow5mult+0xb0>)
 800f984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f988:	f7ff f978 	bl	800ec7c <__assert_func>
 800f98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f990:	6004      	str	r4, [r0, #0]
 800f992:	60c4      	str	r4, [r0, #12]
 800f994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f99c:	b94c      	cbnz	r4, 800f9b2 <__pow5mult+0x66>
 800f99e:	f240 2171 	movw	r1, #625	@ 0x271
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	f7ff ff12 	bl	800f7cc <__i2b>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	6003      	str	r3, [r0, #0]
 800f9b2:	f04f 0900 	mov.w	r9, #0
 800f9b6:	07eb      	lsls	r3, r5, #31
 800f9b8:	d50a      	bpl.n	800f9d0 <__pow5mult+0x84>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4622      	mov	r2, r4
 800f9be:	4638      	mov	r0, r7
 800f9c0:	f7ff ff1a 	bl	800f7f8 <__multiply>
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4680      	mov	r8, r0
 800f9c8:	4638      	mov	r0, r7
 800f9ca:	f7ff fe01 	bl	800f5d0 <_Bfree>
 800f9ce:	4646      	mov	r6, r8
 800f9d0:	106d      	asrs	r5, r5, #1
 800f9d2:	d00b      	beq.n	800f9ec <__pow5mult+0xa0>
 800f9d4:	6820      	ldr	r0, [r4, #0]
 800f9d6:	b938      	cbnz	r0, 800f9e8 <__pow5mult+0x9c>
 800f9d8:	4622      	mov	r2, r4
 800f9da:	4621      	mov	r1, r4
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f7ff ff0b 	bl	800f7f8 <__multiply>
 800f9e2:	6020      	str	r0, [r4, #0]
 800f9e4:	f8c0 9000 	str.w	r9, [r0]
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	e7e4      	b.n	800f9b6 <__pow5mult+0x6a>
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9f2:	bf00      	nop
 800f9f4:	080116e8 	.word	0x080116e8
 800f9f8:	08011569 	.word	0x08011569
 800f9fc:	0801168f 	.word	0x0801168f

0800fa00 <__lshift>:
 800fa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa04:	460c      	mov	r4, r1
 800fa06:	6849      	ldr	r1, [r1, #4]
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa0e:	68a3      	ldr	r3, [r4, #8]
 800fa10:	4607      	mov	r7, r0
 800fa12:	4691      	mov	r9, r2
 800fa14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa18:	f108 0601 	add.w	r6, r8, #1
 800fa1c:	42b3      	cmp	r3, r6
 800fa1e:	db0b      	blt.n	800fa38 <__lshift+0x38>
 800fa20:	4638      	mov	r0, r7
 800fa22:	f7ff fd95 	bl	800f550 <_Balloc>
 800fa26:	4605      	mov	r5, r0
 800fa28:	b948      	cbnz	r0, 800fa3e <__lshift+0x3e>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	4b28      	ldr	r3, [pc, #160]	@ (800fad0 <__lshift+0xd0>)
 800fa2e:	4829      	ldr	r0, [pc, #164]	@ (800fad4 <__lshift+0xd4>)
 800fa30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fa34:	f7ff f922 	bl	800ec7c <__assert_func>
 800fa38:	3101      	adds	r1, #1
 800fa3a:	005b      	lsls	r3, r3, #1
 800fa3c:	e7ee      	b.n	800fa1c <__lshift+0x1c>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f100 0114 	add.w	r1, r0, #20
 800fa44:	f100 0210 	add.w	r2, r0, #16
 800fa48:	4618      	mov	r0, r3
 800fa4a:	4553      	cmp	r3, sl
 800fa4c:	db33      	blt.n	800fab6 <__lshift+0xb6>
 800fa4e:	6920      	ldr	r0, [r4, #16]
 800fa50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa54:	f104 0314 	add.w	r3, r4, #20
 800fa58:	f019 091f 	ands.w	r9, r9, #31
 800fa5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa64:	d02b      	beq.n	800fabe <__lshift+0xbe>
 800fa66:	f1c9 0e20 	rsb	lr, r9, #32
 800fa6a:	468a      	mov	sl, r1
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	6818      	ldr	r0, [r3, #0]
 800fa70:	fa00 f009 	lsl.w	r0, r0, r9
 800fa74:	4310      	orrs	r0, r2
 800fa76:	f84a 0b04 	str.w	r0, [sl], #4
 800fa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa7e:	459c      	cmp	ip, r3
 800fa80:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa84:	d8f3      	bhi.n	800fa6e <__lshift+0x6e>
 800fa86:	ebac 0304 	sub.w	r3, ip, r4
 800fa8a:	3b15      	subs	r3, #21
 800fa8c:	f023 0303 	bic.w	r3, r3, #3
 800fa90:	3304      	adds	r3, #4
 800fa92:	f104 0015 	add.w	r0, r4, #21
 800fa96:	4584      	cmp	ip, r0
 800fa98:	bf38      	it	cc
 800fa9a:	2304      	movcc	r3, #4
 800fa9c:	50ca      	str	r2, [r1, r3]
 800fa9e:	b10a      	cbz	r2, 800faa4 <__lshift+0xa4>
 800faa0:	f108 0602 	add.w	r6, r8, #2
 800faa4:	3e01      	subs	r6, #1
 800faa6:	4638      	mov	r0, r7
 800faa8:	612e      	str	r6, [r5, #16]
 800faaa:	4621      	mov	r1, r4
 800faac:	f7ff fd90 	bl	800f5d0 <_Bfree>
 800fab0:	4628      	mov	r0, r5
 800fab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab6:	f842 0f04 	str.w	r0, [r2, #4]!
 800faba:	3301      	adds	r3, #1
 800fabc:	e7c5      	b.n	800fa4a <__lshift+0x4a>
 800fabe:	3904      	subs	r1, #4
 800fac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fac4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fac8:	459c      	cmp	ip, r3
 800faca:	d8f9      	bhi.n	800fac0 <__lshift+0xc0>
 800facc:	e7ea      	b.n	800faa4 <__lshift+0xa4>
 800face:	bf00      	nop
 800fad0:	0801161e 	.word	0x0801161e
 800fad4:	0801168f 	.word	0x0801168f

0800fad8 <__mcmp>:
 800fad8:	690a      	ldr	r2, [r1, #16]
 800fada:	4603      	mov	r3, r0
 800fadc:	6900      	ldr	r0, [r0, #16]
 800fade:	1a80      	subs	r0, r0, r2
 800fae0:	b530      	push	{r4, r5, lr}
 800fae2:	d10e      	bne.n	800fb02 <__mcmp+0x2a>
 800fae4:	3314      	adds	r3, #20
 800fae6:	3114      	adds	r1, #20
 800fae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800faec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800faf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800faf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800faf8:	4295      	cmp	r5, r2
 800fafa:	d003      	beq.n	800fb04 <__mcmp+0x2c>
 800fafc:	d205      	bcs.n	800fb0a <__mcmp+0x32>
 800fafe:	f04f 30ff 	mov.w	r0, #4294967295
 800fb02:	bd30      	pop	{r4, r5, pc}
 800fb04:	42a3      	cmp	r3, r4
 800fb06:	d3f3      	bcc.n	800faf0 <__mcmp+0x18>
 800fb08:	e7fb      	b.n	800fb02 <__mcmp+0x2a>
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	e7f9      	b.n	800fb02 <__mcmp+0x2a>
	...

0800fb10 <__mdiff>:
 800fb10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb14:	4689      	mov	r9, r1
 800fb16:	4606      	mov	r6, r0
 800fb18:	4611      	mov	r1, r2
 800fb1a:	4648      	mov	r0, r9
 800fb1c:	4614      	mov	r4, r2
 800fb1e:	f7ff ffdb 	bl	800fad8 <__mcmp>
 800fb22:	1e05      	subs	r5, r0, #0
 800fb24:	d112      	bne.n	800fb4c <__mdiff+0x3c>
 800fb26:	4629      	mov	r1, r5
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f7ff fd11 	bl	800f550 <_Balloc>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	b928      	cbnz	r0, 800fb3e <__mdiff+0x2e>
 800fb32:	4b3f      	ldr	r3, [pc, #252]	@ (800fc30 <__mdiff+0x120>)
 800fb34:	f240 2137 	movw	r1, #567	@ 0x237
 800fb38:	483e      	ldr	r0, [pc, #248]	@ (800fc34 <__mdiff+0x124>)
 800fb3a:	f7ff f89f 	bl	800ec7c <__assert_func>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb44:	4610      	mov	r0, r2
 800fb46:	b003      	add	sp, #12
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	bfbc      	itt	lt
 800fb4e:	464b      	movlt	r3, r9
 800fb50:	46a1      	movlt	r9, r4
 800fb52:	4630      	mov	r0, r6
 800fb54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fb58:	bfba      	itte	lt
 800fb5a:	461c      	movlt	r4, r3
 800fb5c:	2501      	movlt	r5, #1
 800fb5e:	2500      	movge	r5, #0
 800fb60:	f7ff fcf6 	bl	800f550 <_Balloc>
 800fb64:	4602      	mov	r2, r0
 800fb66:	b918      	cbnz	r0, 800fb70 <__mdiff+0x60>
 800fb68:	4b31      	ldr	r3, [pc, #196]	@ (800fc30 <__mdiff+0x120>)
 800fb6a:	f240 2145 	movw	r1, #581	@ 0x245
 800fb6e:	e7e3      	b.n	800fb38 <__mdiff+0x28>
 800fb70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fb74:	6926      	ldr	r6, [r4, #16]
 800fb76:	60c5      	str	r5, [r0, #12]
 800fb78:	f109 0310 	add.w	r3, r9, #16
 800fb7c:	f109 0514 	add.w	r5, r9, #20
 800fb80:	f104 0e14 	add.w	lr, r4, #20
 800fb84:	f100 0b14 	add.w	fp, r0, #20
 800fb88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fb8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	46d9      	mov	r9, fp
 800fb94:	f04f 0c00 	mov.w	ip, #0
 800fb98:	9b01      	ldr	r3, [sp, #4]
 800fb9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fb9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	fa1f f38a 	uxth.w	r3, sl
 800fba8:	4619      	mov	r1, r3
 800fbaa:	b283      	uxth	r3, r0
 800fbac:	1acb      	subs	r3, r1, r3
 800fbae:	0c00      	lsrs	r0, r0, #16
 800fbb0:	4463      	add	r3, ip
 800fbb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fbb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fbc0:	4576      	cmp	r6, lr
 800fbc2:	f849 3b04 	str.w	r3, [r9], #4
 800fbc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fbca:	d8e5      	bhi.n	800fb98 <__mdiff+0x88>
 800fbcc:	1b33      	subs	r3, r6, r4
 800fbce:	3b15      	subs	r3, #21
 800fbd0:	f023 0303 	bic.w	r3, r3, #3
 800fbd4:	3415      	adds	r4, #21
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	42a6      	cmp	r6, r4
 800fbda:	bf38      	it	cc
 800fbdc:	2304      	movcc	r3, #4
 800fbde:	441d      	add	r5, r3
 800fbe0:	445b      	add	r3, fp
 800fbe2:	461e      	mov	r6, r3
 800fbe4:	462c      	mov	r4, r5
 800fbe6:	4544      	cmp	r4, r8
 800fbe8:	d30e      	bcc.n	800fc08 <__mdiff+0xf8>
 800fbea:	f108 0103 	add.w	r1, r8, #3
 800fbee:	1b49      	subs	r1, r1, r5
 800fbf0:	f021 0103 	bic.w	r1, r1, #3
 800fbf4:	3d03      	subs	r5, #3
 800fbf6:	45a8      	cmp	r8, r5
 800fbf8:	bf38      	it	cc
 800fbfa:	2100      	movcc	r1, #0
 800fbfc:	440b      	add	r3, r1
 800fbfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc02:	b191      	cbz	r1, 800fc2a <__mdiff+0x11a>
 800fc04:	6117      	str	r7, [r2, #16]
 800fc06:	e79d      	b.n	800fb44 <__mdiff+0x34>
 800fc08:	f854 1b04 	ldr.w	r1, [r4], #4
 800fc0c:	46e6      	mov	lr, ip
 800fc0e:	0c08      	lsrs	r0, r1, #16
 800fc10:	fa1c fc81 	uxtah	ip, ip, r1
 800fc14:	4471      	add	r1, lr
 800fc16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fc1a:	b289      	uxth	r1, r1
 800fc1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fc20:	f846 1b04 	str.w	r1, [r6], #4
 800fc24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc28:	e7dd      	b.n	800fbe6 <__mdiff+0xd6>
 800fc2a:	3f01      	subs	r7, #1
 800fc2c:	e7e7      	b.n	800fbfe <__mdiff+0xee>
 800fc2e:	bf00      	nop
 800fc30:	0801161e 	.word	0x0801161e
 800fc34:	0801168f 	.word	0x0801168f

0800fc38 <__ulp>:
 800fc38:	b082      	sub	sp, #8
 800fc3a:	ed8d 0b00 	vstr	d0, [sp]
 800fc3e:	9a01      	ldr	r2, [sp, #4]
 800fc40:	4b0f      	ldr	r3, [pc, #60]	@ (800fc80 <__ulp+0x48>)
 800fc42:	4013      	ands	r3, r2
 800fc44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dc08      	bgt.n	800fc5e <__ulp+0x26>
 800fc4c:	425b      	negs	r3, r3
 800fc4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fc52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc56:	da04      	bge.n	800fc62 <__ulp+0x2a>
 800fc58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fc5c:	4113      	asrs	r3, r2
 800fc5e:	2200      	movs	r2, #0
 800fc60:	e008      	b.n	800fc74 <__ulp+0x3c>
 800fc62:	f1a2 0314 	sub.w	r3, r2, #20
 800fc66:	2b1e      	cmp	r3, #30
 800fc68:	bfda      	itte	le
 800fc6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fc6e:	40da      	lsrle	r2, r3
 800fc70:	2201      	movgt	r2, #1
 800fc72:	2300      	movs	r3, #0
 800fc74:	4619      	mov	r1, r3
 800fc76:	4610      	mov	r0, r2
 800fc78:	ec41 0b10 	vmov	d0, r0, r1
 800fc7c:	b002      	add	sp, #8
 800fc7e:	4770      	bx	lr
 800fc80:	7ff00000 	.word	0x7ff00000

0800fc84 <__b2d>:
 800fc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc88:	6906      	ldr	r6, [r0, #16]
 800fc8a:	f100 0814 	add.w	r8, r0, #20
 800fc8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fc92:	1f37      	subs	r7, r6, #4
 800fc94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc98:	4610      	mov	r0, r2
 800fc9a:	f7ff fd4b 	bl	800f734 <__hi0bits>
 800fc9e:	f1c0 0320 	rsb	r3, r0, #32
 800fca2:	280a      	cmp	r0, #10
 800fca4:	600b      	str	r3, [r1, #0]
 800fca6:	491b      	ldr	r1, [pc, #108]	@ (800fd14 <__b2d+0x90>)
 800fca8:	dc15      	bgt.n	800fcd6 <__b2d+0x52>
 800fcaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800fcae:	fa22 f30c 	lsr.w	r3, r2, ip
 800fcb2:	45b8      	cmp	r8, r7
 800fcb4:	ea43 0501 	orr.w	r5, r3, r1
 800fcb8:	bf34      	ite	cc
 800fcba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcbe:	2300      	movcs	r3, #0
 800fcc0:	3015      	adds	r0, #21
 800fcc2:	fa02 f000 	lsl.w	r0, r2, r0
 800fcc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800fcca:	4303      	orrs	r3, r0
 800fccc:	461c      	mov	r4, r3
 800fcce:	ec45 4b10 	vmov	d0, r4, r5
 800fcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd6:	45b8      	cmp	r8, r7
 800fcd8:	bf3a      	itte	cc
 800fcda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcde:	f1a6 0708 	subcc.w	r7, r6, #8
 800fce2:	2300      	movcs	r3, #0
 800fce4:	380b      	subs	r0, #11
 800fce6:	d012      	beq.n	800fd0e <__b2d+0x8a>
 800fce8:	f1c0 0120 	rsb	r1, r0, #32
 800fcec:	fa23 f401 	lsr.w	r4, r3, r1
 800fcf0:	4082      	lsls	r2, r0
 800fcf2:	4322      	orrs	r2, r4
 800fcf4:	4547      	cmp	r7, r8
 800fcf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fcfa:	bf8c      	ite	hi
 800fcfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fd00:	2200      	movls	r2, #0
 800fd02:	4083      	lsls	r3, r0
 800fd04:	40ca      	lsrs	r2, r1
 800fd06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	e7de      	b.n	800fccc <__b2d+0x48>
 800fd0e:	ea42 0501 	orr.w	r5, r2, r1
 800fd12:	e7db      	b.n	800fccc <__b2d+0x48>
 800fd14:	3ff00000 	.word	0x3ff00000

0800fd18 <__d2b>:
 800fd18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd1c:	460f      	mov	r7, r1
 800fd1e:	2101      	movs	r1, #1
 800fd20:	ec59 8b10 	vmov	r8, r9, d0
 800fd24:	4616      	mov	r6, r2
 800fd26:	f7ff fc13 	bl	800f550 <_Balloc>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	b930      	cbnz	r0, 800fd3c <__d2b+0x24>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	4b23      	ldr	r3, [pc, #140]	@ (800fdc0 <__d2b+0xa8>)
 800fd32:	4824      	ldr	r0, [pc, #144]	@ (800fdc4 <__d2b+0xac>)
 800fd34:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd38:	f7fe ffa0 	bl	800ec7c <__assert_func>
 800fd3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd44:	b10d      	cbz	r5, 800fd4a <__d2b+0x32>
 800fd46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	f1b8 0300 	subs.w	r3, r8, #0
 800fd50:	d023      	beq.n	800fd9a <__d2b+0x82>
 800fd52:	4668      	mov	r0, sp
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	f7ff fd0c 	bl	800f772 <__lo0bits>
 800fd5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd5e:	b1d0      	cbz	r0, 800fd96 <__d2b+0x7e>
 800fd60:	f1c0 0320 	rsb	r3, r0, #32
 800fd64:	fa02 f303 	lsl.w	r3, r2, r3
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	40c2      	lsrs	r2, r0
 800fd6c:	6163      	str	r3, [r4, #20]
 800fd6e:	9201      	str	r2, [sp, #4]
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	61a3      	str	r3, [r4, #24]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	bf0c      	ite	eq
 800fd78:	2201      	moveq	r2, #1
 800fd7a:	2202      	movne	r2, #2
 800fd7c:	6122      	str	r2, [r4, #16]
 800fd7e:	b1a5      	cbz	r5, 800fdaa <__d2b+0x92>
 800fd80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fd84:	4405      	add	r5, r0
 800fd86:	603d      	str	r5, [r7, #0]
 800fd88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fd8c:	6030      	str	r0, [r6, #0]
 800fd8e:	4620      	mov	r0, r4
 800fd90:	b003      	add	sp, #12
 800fd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd96:	6161      	str	r1, [r4, #20]
 800fd98:	e7ea      	b.n	800fd70 <__d2b+0x58>
 800fd9a:	a801      	add	r0, sp, #4
 800fd9c:	f7ff fce9 	bl	800f772 <__lo0bits>
 800fda0:	9b01      	ldr	r3, [sp, #4]
 800fda2:	6163      	str	r3, [r4, #20]
 800fda4:	3020      	adds	r0, #32
 800fda6:	2201      	movs	r2, #1
 800fda8:	e7e8      	b.n	800fd7c <__d2b+0x64>
 800fdaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fdb2:	6038      	str	r0, [r7, #0]
 800fdb4:	6918      	ldr	r0, [r3, #16]
 800fdb6:	f7ff fcbd 	bl	800f734 <__hi0bits>
 800fdba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdbe:	e7e5      	b.n	800fd8c <__d2b+0x74>
 800fdc0:	0801161e 	.word	0x0801161e
 800fdc4:	0801168f 	.word	0x0801168f

0800fdc8 <__ratio>:
 800fdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdcc:	b085      	sub	sp, #20
 800fdce:	e9cd 1000 	strd	r1, r0, [sp]
 800fdd2:	a902      	add	r1, sp, #8
 800fdd4:	f7ff ff56 	bl	800fc84 <__b2d>
 800fdd8:	9800      	ldr	r0, [sp, #0]
 800fdda:	a903      	add	r1, sp, #12
 800fddc:	ec55 4b10 	vmov	r4, r5, d0
 800fde0:	f7ff ff50 	bl	800fc84 <__b2d>
 800fde4:	9b01      	ldr	r3, [sp, #4]
 800fde6:	6919      	ldr	r1, [r3, #16]
 800fde8:	9b00      	ldr	r3, [sp, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	1ac9      	subs	r1, r1, r3
 800fdee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fdf2:	1a9b      	subs	r3, r3, r2
 800fdf4:	ec5b ab10 	vmov	sl, fp, d0
 800fdf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	bfce      	itee	gt
 800fe00:	462a      	movgt	r2, r5
 800fe02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe06:	465a      	movle	r2, fp
 800fe08:	462f      	mov	r7, r5
 800fe0a:	46d9      	mov	r9, fp
 800fe0c:	bfcc      	ite	gt
 800fe0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fe16:	464b      	mov	r3, r9
 800fe18:	4652      	mov	r2, sl
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	4639      	mov	r1, r7
 800fe1e:	f7f0 fd1d 	bl	800085c <__aeabi_ddiv>
 800fe22:	ec41 0b10 	vmov	d0, r0, r1
 800fe26:	b005      	add	sp, #20
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe2c <__copybits>:
 800fe2c:	3901      	subs	r1, #1
 800fe2e:	b570      	push	{r4, r5, r6, lr}
 800fe30:	1149      	asrs	r1, r1, #5
 800fe32:	6914      	ldr	r4, [r2, #16]
 800fe34:	3101      	adds	r1, #1
 800fe36:	f102 0314 	add.w	r3, r2, #20
 800fe3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe42:	1f05      	subs	r5, r0, #4
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d30c      	bcc.n	800fe62 <__copybits+0x36>
 800fe48:	1aa3      	subs	r3, r4, r2
 800fe4a:	3b11      	subs	r3, #17
 800fe4c:	f023 0303 	bic.w	r3, r3, #3
 800fe50:	3211      	adds	r2, #17
 800fe52:	42a2      	cmp	r2, r4
 800fe54:	bf88      	it	hi
 800fe56:	2300      	movhi	r3, #0
 800fe58:	4418      	add	r0, r3
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4288      	cmp	r0, r1
 800fe5e:	d305      	bcc.n	800fe6c <__copybits+0x40>
 800fe60:	bd70      	pop	{r4, r5, r6, pc}
 800fe62:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe66:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe6a:	e7eb      	b.n	800fe44 <__copybits+0x18>
 800fe6c:	f840 3b04 	str.w	r3, [r0], #4
 800fe70:	e7f4      	b.n	800fe5c <__copybits+0x30>

0800fe72 <__any_on>:
 800fe72:	f100 0214 	add.w	r2, r0, #20
 800fe76:	6900      	ldr	r0, [r0, #16]
 800fe78:	114b      	asrs	r3, r1, #5
 800fe7a:	4298      	cmp	r0, r3
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	db11      	blt.n	800fea4 <__any_on+0x32>
 800fe80:	dd0a      	ble.n	800fe98 <__any_on+0x26>
 800fe82:	f011 011f 	ands.w	r1, r1, #31
 800fe86:	d007      	beq.n	800fe98 <__any_on+0x26>
 800fe88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe8c:	fa24 f001 	lsr.w	r0, r4, r1
 800fe90:	fa00 f101 	lsl.w	r1, r0, r1
 800fe94:	428c      	cmp	r4, r1
 800fe96:	d10b      	bne.n	800feb0 <__any_on+0x3e>
 800fe98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d803      	bhi.n	800fea8 <__any_on+0x36>
 800fea0:	2000      	movs	r0, #0
 800fea2:	bd10      	pop	{r4, pc}
 800fea4:	4603      	mov	r3, r0
 800fea6:	e7f7      	b.n	800fe98 <__any_on+0x26>
 800fea8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800feac:	2900      	cmp	r1, #0
 800feae:	d0f5      	beq.n	800fe9c <__any_on+0x2a>
 800feb0:	2001      	movs	r0, #1
 800feb2:	e7f6      	b.n	800fea2 <__any_on+0x30>

0800feb4 <__ascii_wctomb>:
 800feb4:	4603      	mov	r3, r0
 800feb6:	4608      	mov	r0, r1
 800feb8:	b141      	cbz	r1, 800fecc <__ascii_wctomb+0x18>
 800feba:	2aff      	cmp	r2, #255	@ 0xff
 800febc:	d904      	bls.n	800fec8 <__ascii_wctomb+0x14>
 800febe:	228a      	movs	r2, #138	@ 0x8a
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	4770      	bx	lr
 800fec8:	700a      	strb	r2, [r1, #0]
 800feca:	2001      	movs	r0, #1
 800fecc:	4770      	bx	lr

0800fece <__sfputc_r>:
 800fece:	6893      	ldr	r3, [r2, #8]
 800fed0:	3b01      	subs	r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	b410      	push	{r4}
 800fed6:	6093      	str	r3, [r2, #8]
 800fed8:	da08      	bge.n	800feec <__sfputc_r+0x1e>
 800feda:	6994      	ldr	r4, [r2, #24]
 800fedc:	42a3      	cmp	r3, r4
 800fede:	db01      	blt.n	800fee4 <__sfputc_r+0x16>
 800fee0:	290a      	cmp	r1, #10
 800fee2:	d103      	bne.n	800feec <__sfputc_r+0x1e>
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee8:	f7fe bd17 	b.w	800e91a <__swbuf_r>
 800feec:	6813      	ldr	r3, [r2, #0]
 800feee:	1c58      	adds	r0, r3, #1
 800fef0:	6010      	str	r0, [r2, #0]
 800fef2:	7019      	strb	r1, [r3, #0]
 800fef4:	4608      	mov	r0, r1
 800fef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <__sfputs_r>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	4606      	mov	r6, r0
 800ff00:	460f      	mov	r7, r1
 800ff02:	4614      	mov	r4, r2
 800ff04:	18d5      	adds	r5, r2, r3
 800ff06:	42ac      	cmp	r4, r5
 800ff08:	d101      	bne.n	800ff0e <__sfputs_r+0x12>
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	e007      	b.n	800ff1e <__sfputs_r+0x22>
 800ff0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff12:	463a      	mov	r2, r7
 800ff14:	4630      	mov	r0, r6
 800ff16:	f7ff ffda 	bl	800fece <__sfputc_r>
 800ff1a:	1c43      	adds	r3, r0, #1
 800ff1c:	d1f3      	bne.n	800ff06 <__sfputs_r+0xa>
 800ff1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff20 <_vfiprintf_r>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	460d      	mov	r5, r1
 800ff26:	b09d      	sub	sp, #116	@ 0x74
 800ff28:	4614      	mov	r4, r2
 800ff2a:	4698      	mov	r8, r3
 800ff2c:	4606      	mov	r6, r0
 800ff2e:	b118      	cbz	r0, 800ff38 <_vfiprintf_r+0x18>
 800ff30:	6a03      	ldr	r3, [r0, #32]
 800ff32:	b90b      	cbnz	r3, 800ff38 <_vfiprintf_r+0x18>
 800ff34:	f7fe fc08 	bl	800e748 <__sinit>
 800ff38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff3a:	07d9      	lsls	r1, r3, #31
 800ff3c:	d405      	bmi.n	800ff4a <_vfiprintf_r+0x2a>
 800ff3e:	89ab      	ldrh	r3, [r5, #12]
 800ff40:	059a      	lsls	r2, r3, #22
 800ff42:	d402      	bmi.n	800ff4a <_vfiprintf_r+0x2a>
 800ff44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff46:	f7fe fe78 	bl	800ec3a <__retarget_lock_acquire_recursive>
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	071b      	lsls	r3, r3, #28
 800ff4e:	d501      	bpl.n	800ff54 <_vfiprintf_r+0x34>
 800ff50:	692b      	ldr	r3, [r5, #16]
 800ff52:	b99b      	cbnz	r3, 800ff7c <_vfiprintf_r+0x5c>
 800ff54:	4629      	mov	r1, r5
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7fe fd1e 	bl	800e998 <__swsetup_r>
 800ff5c:	b170      	cbz	r0, 800ff7c <_vfiprintf_r+0x5c>
 800ff5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff60:	07dc      	lsls	r4, r3, #31
 800ff62:	d504      	bpl.n	800ff6e <_vfiprintf_r+0x4e>
 800ff64:	f04f 30ff 	mov.w	r0, #4294967295
 800ff68:	b01d      	add	sp, #116	@ 0x74
 800ff6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6e:	89ab      	ldrh	r3, [r5, #12]
 800ff70:	0598      	lsls	r0, r3, #22
 800ff72:	d4f7      	bmi.n	800ff64 <_vfiprintf_r+0x44>
 800ff74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff76:	f7fe fe61 	bl	800ec3c <__retarget_lock_release_recursive>
 800ff7a:	e7f3      	b.n	800ff64 <_vfiprintf_r+0x44>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff80:	2320      	movs	r3, #32
 800ff82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff8a:	2330      	movs	r3, #48	@ 0x30
 800ff8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801013c <_vfiprintf_r+0x21c>
 800ff90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff94:	f04f 0901 	mov.w	r9, #1
 800ff98:	4623      	mov	r3, r4
 800ff9a:	469a      	mov	sl, r3
 800ff9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffa0:	b10a      	cbz	r2, 800ffa6 <_vfiprintf_r+0x86>
 800ffa2:	2a25      	cmp	r2, #37	@ 0x25
 800ffa4:	d1f9      	bne.n	800ff9a <_vfiprintf_r+0x7a>
 800ffa6:	ebba 0b04 	subs.w	fp, sl, r4
 800ffaa:	d00b      	beq.n	800ffc4 <_vfiprintf_r+0xa4>
 800ffac:	465b      	mov	r3, fp
 800ffae:	4622      	mov	r2, r4
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	f7ff ffa2 	bl	800fefc <__sfputs_r>
 800ffb8:	3001      	adds	r0, #1
 800ffba:	f000 80a7 	beq.w	801010c <_vfiprintf_r+0x1ec>
 800ffbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffc0:	445a      	add	r2, fp
 800ffc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f000 809f 	beq.w	801010c <_vfiprintf_r+0x1ec>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffd8:	f10a 0a01 	add.w	sl, sl, #1
 800ffdc:	9304      	str	r3, [sp, #16]
 800ffde:	9307      	str	r3, [sp, #28]
 800ffe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffe4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffe6:	4654      	mov	r4, sl
 800ffe8:	2205      	movs	r2, #5
 800ffea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffee:	4853      	ldr	r0, [pc, #332]	@ (801013c <_vfiprintf_r+0x21c>)
 800fff0:	f7f0 f8fe 	bl	80001f0 <memchr>
 800fff4:	9a04      	ldr	r2, [sp, #16]
 800fff6:	b9d8      	cbnz	r0, 8010030 <_vfiprintf_r+0x110>
 800fff8:	06d1      	lsls	r1, r2, #27
 800fffa:	bf44      	itt	mi
 800fffc:	2320      	movmi	r3, #32
 800fffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010002:	0713      	lsls	r3, r2, #28
 8010004:	bf44      	itt	mi
 8010006:	232b      	movmi	r3, #43	@ 0x2b
 8010008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801000c:	f89a 3000 	ldrb.w	r3, [sl]
 8010010:	2b2a      	cmp	r3, #42	@ 0x2a
 8010012:	d015      	beq.n	8010040 <_vfiprintf_r+0x120>
 8010014:	9a07      	ldr	r2, [sp, #28]
 8010016:	4654      	mov	r4, sl
 8010018:	2000      	movs	r0, #0
 801001a:	f04f 0c0a 	mov.w	ip, #10
 801001e:	4621      	mov	r1, r4
 8010020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010024:	3b30      	subs	r3, #48	@ 0x30
 8010026:	2b09      	cmp	r3, #9
 8010028:	d94b      	bls.n	80100c2 <_vfiprintf_r+0x1a2>
 801002a:	b1b0      	cbz	r0, 801005a <_vfiprintf_r+0x13a>
 801002c:	9207      	str	r2, [sp, #28]
 801002e:	e014      	b.n	801005a <_vfiprintf_r+0x13a>
 8010030:	eba0 0308 	sub.w	r3, r0, r8
 8010034:	fa09 f303 	lsl.w	r3, r9, r3
 8010038:	4313      	orrs	r3, r2
 801003a:	9304      	str	r3, [sp, #16]
 801003c:	46a2      	mov	sl, r4
 801003e:	e7d2      	b.n	800ffe6 <_vfiprintf_r+0xc6>
 8010040:	9b03      	ldr	r3, [sp, #12]
 8010042:	1d19      	adds	r1, r3, #4
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	9103      	str	r1, [sp, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	bfbb      	ittet	lt
 801004c:	425b      	neglt	r3, r3
 801004e:	f042 0202 	orrlt.w	r2, r2, #2
 8010052:	9307      	strge	r3, [sp, #28]
 8010054:	9307      	strlt	r3, [sp, #28]
 8010056:	bfb8      	it	lt
 8010058:	9204      	strlt	r2, [sp, #16]
 801005a:	7823      	ldrb	r3, [r4, #0]
 801005c:	2b2e      	cmp	r3, #46	@ 0x2e
 801005e:	d10a      	bne.n	8010076 <_vfiprintf_r+0x156>
 8010060:	7863      	ldrb	r3, [r4, #1]
 8010062:	2b2a      	cmp	r3, #42	@ 0x2a
 8010064:	d132      	bne.n	80100cc <_vfiprintf_r+0x1ac>
 8010066:	9b03      	ldr	r3, [sp, #12]
 8010068:	1d1a      	adds	r2, r3, #4
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	9203      	str	r2, [sp, #12]
 801006e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010072:	3402      	adds	r4, #2
 8010074:	9305      	str	r3, [sp, #20]
 8010076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801014c <_vfiprintf_r+0x22c>
 801007a:	7821      	ldrb	r1, [r4, #0]
 801007c:	2203      	movs	r2, #3
 801007e:	4650      	mov	r0, sl
 8010080:	f7f0 f8b6 	bl	80001f0 <memchr>
 8010084:	b138      	cbz	r0, 8010096 <_vfiprintf_r+0x176>
 8010086:	9b04      	ldr	r3, [sp, #16]
 8010088:	eba0 000a 	sub.w	r0, r0, sl
 801008c:	2240      	movs	r2, #64	@ 0x40
 801008e:	4082      	lsls	r2, r0
 8010090:	4313      	orrs	r3, r2
 8010092:	3401      	adds	r4, #1
 8010094:	9304      	str	r3, [sp, #16]
 8010096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801009a:	4829      	ldr	r0, [pc, #164]	@ (8010140 <_vfiprintf_r+0x220>)
 801009c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100a0:	2206      	movs	r2, #6
 80100a2:	f7f0 f8a5 	bl	80001f0 <memchr>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d03f      	beq.n	801012a <_vfiprintf_r+0x20a>
 80100aa:	4b26      	ldr	r3, [pc, #152]	@ (8010144 <_vfiprintf_r+0x224>)
 80100ac:	bb1b      	cbnz	r3, 80100f6 <_vfiprintf_r+0x1d6>
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	3307      	adds	r3, #7
 80100b2:	f023 0307 	bic.w	r3, r3, #7
 80100b6:	3308      	adds	r3, #8
 80100b8:	9303      	str	r3, [sp, #12]
 80100ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100bc:	443b      	add	r3, r7
 80100be:	9309      	str	r3, [sp, #36]	@ 0x24
 80100c0:	e76a      	b.n	800ff98 <_vfiprintf_r+0x78>
 80100c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80100c6:	460c      	mov	r4, r1
 80100c8:	2001      	movs	r0, #1
 80100ca:	e7a8      	b.n	801001e <_vfiprintf_r+0xfe>
 80100cc:	2300      	movs	r3, #0
 80100ce:	3401      	adds	r4, #1
 80100d0:	9305      	str	r3, [sp, #20]
 80100d2:	4619      	mov	r1, r3
 80100d4:	f04f 0c0a 	mov.w	ip, #10
 80100d8:	4620      	mov	r0, r4
 80100da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100de:	3a30      	subs	r2, #48	@ 0x30
 80100e0:	2a09      	cmp	r2, #9
 80100e2:	d903      	bls.n	80100ec <_vfiprintf_r+0x1cc>
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d0c6      	beq.n	8010076 <_vfiprintf_r+0x156>
 80100e8:	9105      	str	r1, [sp, #20]
 80100ea:	e7c4      	b.n	8010076 <_vfiprintf_r+0x156>
 80100ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80100f0:	4604      	mov	r4, r0
 80100f2:	2301      	movs	r3, #1
 80100f4:	e7f0      	b.n	80100d8 <_vfiprintf_r+0x1b8>
 80100f6:	ab03      	add	r3, sp, #12
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	462a      	mov	r2, r5
 80100fc:	4b12      	ldr	r3, [pc, #72]	@ (8010148 <_vfiprintf_r+0x228>)
 80100fe:	a904      	add	r1, sp, #16
 8010100:	4630      	mov	r0, r6
 8010102:	f3af 8000 	nop.w
 8010106:	4607      	mov	r7, r0
 8010108:	1c78      	adds	r0, r7, #1
 801010a:	d1d6      	bne.n	80100ba <_vfiprintf_r+0x19a>
 801010c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801010e:	07d9      	lsls	r1, r3, #31
 8010110:	d405      	bmi.n	801011e <_vfiprintf_r+0x1fe>
 8010112:	89ab      	ldrh	r3, [r5, #12]
 8010114:	059a      	lsls	r2, r3, #22
 8010116:	d402      	bmi.n	801011e <_vfiprintf_r+0x1fe>
 8010118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801011a:	f7fe fd8f 	bl	800ec3c <__retarget_lock_release_recursive>
 801011e:	89ab      	ldrh	r3, [r5, #12]
 8010120:	065b      	lsls	r3, r3, #25
 8010122:	f53f af1f 	bmi.w	800ff64 <_vfiprintf_r+0x44>
 8010126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010128:	e71e      	b.n	800ff68 <_vfiprintf_r+0x48>
 801012a:	ab03      	add	r3, sp, #12
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	462a      	mov	r2, r5
 8010130:	4b05      	ldr	r3, [pc, #20]	@ (8010148 <_vfiprintf_r+0x228>)
 8010132:	a904      	add	r1, sp, #16
 8010134:	4630      	mov	r0, r6
 8010136:	f000 f879 	bl	801022c <_printf_i>
 801013a:	e7e4      	b.n	8010106 <_vfiprintf_r+0x1e6>
 801013c:	080117e8 	.word	0x080117e8
 8010140:	080117f2 	.word	0x080117f2
 8010144:	00000000 	.word	0x00000000
 8010148:	0800fefd 	.word	0x0800fefd
 801014c:	080117ee 	.word	0x080117ee

08010150 <_printf_common>:
 8010150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010154:	4616      	mov	r6, r2
 8010156:	4698      	mov	r8, r3
 8010158:	688a      	ldr	r2, [r1, #8]
 801015a:	690b      	ldr	r3, [r1, #16]
 801015c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010160:	4293      	cmp	r3, r2
 8010162:	bfb8      	it	lt
 8010164:	4613      	movlt	r3, r2
 8010166:	6033      	str	r3, [r6, #0]
 8010168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801016c:	4607      	mov	r7, r0
 801016e:	460c      	mov	r4, r1
 8010170:	b10a      	cbz	r2, 8010176 <_printf_common+0x26>
 8010172:	3301      	adds	r3, #1
 8010174:	6033      	str	r3, [r6, #0]
 8010176:	6823      	ldr	r3, [r4, #0]
 8010178:	0699      	lsls	r1, r3, #26
 801017a:	bf42      	ittt	mi
 801017c:	6833      	ldrmi	r3, [r6, #0]
 801017e:	3302      	addmi	r3, #2
 8010180:	6033      	strmi	r3, [r6, #0]
 8010182:	6825      	ldr	r5, [r4, #0]
 8010184:	f015 0506 	ands.w	r5, r5, #6
 8010188:	d106      	bne.n	8010198 <_printf_common+0x48>
 801018a:	f104 0a19 	add.w	sl, r4, #25
 801018e:	68e3      	ldr	r3, [r4, #12]
 8010190:	6832      	ldr	r2, [r6, #0]
 8010192:	1a9b      	subs	r3, r3, r2
 8010194:	42ab      	cmp	r3, r5
 8010196:	dc26      	bgt.n	80101e6 <_printf_common+0x96>
 8010198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801019c:	6822      	ldr	r2, [r4, #0]
 801019e:	3b00      	subs	r3, #0
 80101a0:	bf18      	it	ne
 80101a2:	2301      	movne	r3, #1
 80101a4:	0692      	lsls	r2, r2, #26
 80101a6:	d42b      	bmi.n	8010200 <_printf_common+0xb0>
 80101a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101ac:	4641      	mov	r1, r8
 80101ae:	4638      	mov	r0, r7
 80101b0:	47c8      	blx	r9
 80101b2:	3001      	adds	r0, #1
 80101b4:	d01e      	beq.n	80101f4 <_printf_common+0xa4>
 80101b6:	6823      	ldr	r3, [r4, #0]
 80101b8:	6922      	ldr	r2, [r4, #16]
 80101ba:	f003 0306 	and.w	r3, r3, #6
 80101be:	2b04      	cmp	r3, #4
 80101c0:	bf02      	ittt	eq
 80101c2:	68e5      	ldreq	r5, [r4, #12]
 80101c4:	6833      	ldreq	r3, [r6, #0]
 80101c6:	1aed      	subeq	r5, r5, r3
 80101c8:	68a3      	ldr	r3, [r4, #8]
 80101ca:	bf0c      	ite	eq
 80101cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101d0:	2500      	movne	r5, #0
 80101d2:	4293      	cmp	r3, r2
 80101d4:	bfc4      	itt	gt
 80101d6:	1a9b      	subgt	r3, r3, r2
 80101d8:	18ed      	addgt	r5, r5, r3
 80101da:	2600      	movs	r6, #0
 80101dc:	341a      	adds	r4, #26
 80101de:	42b5      	cmp	r5, r6
 80101e0:	d11a      	bne.n	8010218 <_printf_common+0xc8>
 80101e2:	2000      	movs	r0, #0
 80101e4:	e008      	b.n	80101f8 <_printf_common+0xa8>
 80101e6:	2301      	movs	r3, #1
 80101e8:	4652      	mov	r2, sl
 80101ea:	4641      	mov	r1, r8
 80101ec:	4638      	mov	r0, r7
 80101ee:	47c8      	blx	r9
 80101f0:	3001      	adds	r0, #1
 80101f2:	d103      	bne.n	80101fc <_printf_common+0xac>
 80101f4:	f04f 30ff 	mov.w	r0, #4294967295
 80101f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fc:	3501      	adds	r5, #1
 80101fe:	e7c6      	b.n	801018e <_printf_common+0x3e>
 8010200:	18e1      	adds	r1, r4, r3
 8010202:	1c5a      	adds	r2, r3, #1
 8010204:	2030      	movs	r0, #48	@ 0x30
 8010206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801020a:	4422      	add	r2, r4
 801020c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010214:	3302      	adds	r3, #2
 8010216:	e7c7      	b.n	80101a8 <_printf_common+0x58>
 8010218:	2301      	movs	r3, #1
 801021a:	4622      	mov	r2, r4
 801021c:	4641      	mov	r1, r8
 801021e:	4638      	mov	r0, r7
 8010220:	47c8      	blx	r9
 8010222:	3001      	adds	r0, #1
 8010224:	d0e6      	beq.n	80101f4 <_printf_common+0xa4>
 8010226:	3601      	adds	r6, #1
 8010228:	e7d9      	b.n	80101de <_printf_common+0x8e>
	...

0801022c <_printf_i>:
 801022c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010230:	7e0f      	ldrb	r7, [r1, #24]
 8010232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010234:	2f78      	cmp	r7, #120	@ 0x78
 8010236:	4691      	mov	r9, r2
 8010238:	4680      	mov	r8, r0
 801023a:	460c      	mov	r4, r1
 801023c:	469a      	mov	sl, r3
 801023e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010242:	d807      	bhi.n	8010254 <_printf_i+0x28>
 8010244:	2f62      	cmp	r7, #98	@ 0x62
 8010246:	d80a      	bhi.n	801025e <_printf_i+0x32>
 8010248:	2f00      	cmp	r7, #0
 801024a:	f000 80d2 	beq.w	80103f2 <_printf_i+0x1c6>
 801024e:	2f58      	cmp	r7, #88	@ 0x58
 8010250:	f000 80b9 	beq.w	80103c6 <_printf_i+0x19a>
 8010254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801025c:	e03a      	b.n	80102d4 <_printf_i+0xa8>
 801025e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010262:	2b15      	cmp	r3, #21
 8010264:	d8f6      	bhi.n	8010254 <_printf_i+0x28>
 8010266:	a101      	add	r1, pc, #4	@ (adr r1, 801026c <_printf_i+0x40>)
 8010268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801026c:	080102c5 	.word	0x080102c5
 8010270:	080102d9 	.word	0x080102d9
 8010274:	08010255 	.word	0x08010255
 8010278:	08010255 	.word	0x08010255
 801027c:	08010255 	.word	0x08010255
 8010280:	08010255 	.word	0x08010255
 8010284:	080102d9 	.word	0x080102d9
 8010288:	08010255 	.word	0x08010255
 801028c:	08010255 	.word	0x08010255
 8010290:	08010255 	.word	0x08010255
 8010294:	08010255 	.word	0x08010255
 8010298:	080103d9 	.word	0x080103d9
 801029c:	08010303 	.word	0x08010303
 80102a0:	08010393 	.word	0x08010393
 80102a4:	08010255 	.word	0x08010255
 80102a8:	08010255 	.word	0x08010255
 80102ac:	080103fb 	.word	0x080103fb
 80102b0:	08010255 	.word	0x08010255
 80102b4:	08010303 	.word	0x08010303
 80102b8:	08010255 	.word	0x08010255
 80102bc:	08010255 	.word	0x08010255
 80102c0:	0801039b 	.word	0x0801039b
 80102c4:	6833      	ldr	r3, [r6, #0]
 80102c6:	1d1a      	adds	r2, r3, #4
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	6032      	str	r2, [r6, #0]
 80102cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102d4:	2301      	movs	r3, #1
 80102d6:	e09d      	b.n	8010414 <_printf_i+0x1e8>
 80102d8:	6833      	ldr	r3, [r6, #0]
 80102da:	6820      	ldr	r0, [r4, #0]
 80102dc:	1d19      	adds	r1, r3, #4
 80102de:	6031      	str	r1, [r6, #0]
 80102e0:	0606      	lsls	r6, r0, #24
 80102e2:	d501      	bpl.n	80102e8 <_printf_i+0xbc>
 80102e4:	681d      	ldr	r5, [r3, #0]
 80102e6:	e003      	b.n	80102f0 <_printf_i+0xc4>
 80102e8:	0645      	lsls	r5, r0, #25
 80102ea:	d5fb      	bpl.n	80102e4 <_printf_i+0xb8>
 80102ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80102f0:	2d00      	cmp	r5, #0
 80102f2:	da03      	bge.n	80102fc <_printf_i+0xd0>
 80102f4:	232d      	movs	r3, #45	@ 0x2d
 80102f6:	426d      	negs	r5, r5
 80102f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102fc:	4859      	ldr	r0, [pc, #356]	@ (8010464 <_printf_i+0x238>)
 80102fe:	230a      	movs	r3, #10
 8010300:	e011      	b.n	8010326 <_printf_i+0xfa>
 8010302:	6821      	ldr	r1, [r4, #0]
 8010304:	6833      	ldr	r3, [r6, #0]
 8010306:	0608      	lsls	r0, r1, #24
 8010308:	f853 5b04 	ldr.w	r5, [r3], #4
 801030c:	d402      	bmi.n	8010314 <_printf_i+0xe8>
 801030e:	0649      	lsls	r1, r1, #25
 8010310:	bf48      	it	mi
 8010312:	b2ad      	uxthmi	r5, r5
 8010314:	2f6f      	cmp	r7, #111	@ 0x6f
 8010316:	4853      	ldr	r0, [pc, #332]	@ (8010464 <_printf_i+0x238>)
 8010318:	6033      	str	r3, [r6, #0]
 801031a:	bf14      	ite	ne
 801031c:	230a      	movne	r3, #10
 801031e:	2308      	moveq	r3, #8
 8010320:	2100      	movs	r1, #0
 8010322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010326:	6866      	ldr	r6, [r4, #4]
 8010328:	60a6      	str	r6, [r4, #8]
 801032a:	2e00      	cmp	r6, #0
 801032c:	bfa2      	ittt	ge
 801032e:	6821      	ldrge	r1, [r4, #0]
 8010330:	f021 0104 	bicge.w	r1, r1, #4
 8010334:	6021      	strge	r1, [r4, #0]
 8010336:	b90d      	cbnz	r5, 801033c <_printf_i+0x110>
 8010338:	2e00      	cmp	r6, #0
 801033a:	d04b      	beq.n	80103d4 <_printf_i+0x1a8>
 801033c:	4616      	mov	r6, r2
 801033e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010342:	fb03 5711 	mls	r7, r3, r1, r5
 8010346:	5dc7      	ldrb	r7, [r0, r7]
 8010348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801034c:	462f      	mov	r7, r5
 801034e:	42bb      	cmp	r3, r7
 8010350:	460d      	mov	r5, r1
 8010352:	d9f4      	bls.n	801033e <_printf_i+0x112>
 8010354:	2b08      	cmp	r3, #8
 8010356:	d10b      	bne.n	8010370 <_printf_i+0x144>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	07df      	lsls	r7, r3, #31
 801035c:	d508      	bpl.n	8010370 <_printf_i+0x144>
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	6861      	ldr	r1, [r4, #4]
 8010362:	4299      	cmp	r1, r3
 8010364:	bfde      	ittt	le
 8010366:	2330      	movle	r3, #48	@ 0x30
 8010368:	f806 3c01 	strble.w	r3, [r6, #-1]
 801036c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010370:	1b92      	subs	r2, r2, r6
 8010372:	6122      	str	r2, [r4, #16]
 8010374:	f8cd a000 	str.w	sl, [sp]
 8010378:	464b      	mov	r3, r9
 801037a:	aa03      	add	r2, sp, #12
 801037c:	4621      	mov	r1, r4
 801037e:	4640      	mov	r0, r8
 8010380:	f7ff fee6 	bl	8010150 <_printf_common>
 8010384:	3001      	adds	r0, #1
 8010386:	d14a      	bne.n	801041e <_printf_i+0x1f2>
 8010388:	f04f 30ff 	mov.w	r0, #4294967295
 801038c:	b004      	add	sp, #16
 801038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	f043 0320 	orr.w	r3, r3, #32
 8010398:	6023      	str	r3, [r4, #0]
 801039a:	4833      	ldr	r0, [pc, #204]	@ (8010468 <_printf_i+0x23c>)
 801039c:	2778      	movs	r7, #120	@ 0x78
 801039e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	6831      	ldr	r1, [r6, #0]
 80103a6:	061f      	lsls	r7, r3, #24
 80103a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80103ac:	d402      	bmi.n	80103b4 <_printf_i+0x188>
 80103ae:	065f      	lsls	r7, r3, #25
 80103b0:	bf48      	it	mi
 80103b2:	b2ad      	uxthmi	r5, r5
 80103b4:	6031      	str	r1, [r6, #0]
 80103b6:	07d9      	lsls	r1, r3, #31
 80103b8:	bf44      	itt	mi
 80103ba:	f043 0320 	orrmi.w	r3, r3, #32
 80103be:	6023      	strmi	r3, [r4, #0]
 80103c0:	b11d      	cbz	r5, 80103ca <_printf_i+0x19e>
 80103c2:	2310      	movs	r3, #16
 80103c4:	e7ac      	b.n	8010320 <_printf_i+0xf4>
 80103c6:	4827      	ldr	r0, [pc, #156]	@ (8010464 <_printf_i+0x238>)
 80103c8:	e7e9      	b.n	801039e <_printf_i+0x172>
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	f023 0320 	bic.w	r3, r3, #32
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	e7f6      	b.n	80103c2 <_printf_i+0x196>
 80103d4:	4616      	mov	r6, r2
 80103d6:	e7bd      	b.n	8010354 <_printf_i+0x128>
 80103d8:	6833      	ldr	r3, [r6, #0]
 80103da:	6825      	ldr	r5, [r4, #0]
 80103dc:	6961      	ldr	r1, [r4, #20]
 80103de:	1d18      	adds	r0, r3, #4
 80103e0:	6030      	str	r0, [r6, #0]
 80103e2:	062e      	lsls	r6, r5, #24
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	d501      	bpl.n	80103ec <_printf_i+0x1c0>
 80103e8:	6019      	str	r1, [r3, #0]
 80103ea:	e002      	b.n	80103f2 <_printf_i+0x1c6>
 80103ec:	0668      	lsls	r0, r5, #25
 80103ee:	d5fb      	bpl.n	80103e8 <_printf_i+0x1bc>
 80103f0:	8019      	strh	r1, [r3, #0]
 80103f2:	2300      	movs	r3, #0
 80103f4:	6123      	str	r3, [r4, #16]
 80103f6:	4616      	mov	r6, r2
 80103f8:	e7bc      	b.n	8010374 <_printf_i+0x148>
 80103fa:	6833      	ldr	r3, [r6, #0]
 80103fc:	1d1a      	adds	r2, r3, #4
 80103fe:	6032      	str	r2, [r6, #0]
 8010400:	681e      	ldr	r6, [r3, #0]
 8010402:	6862      	ldr	r2, [r4, #4]
 8010404:	2100      	movs	r1, #0
 8010406:	4630      	mov	r0, r6
 8010408:	f7ef fef2 	bl	80001f0 <memchr>
 801040c:	b108      	cbz	r0, 8010412 <_printf_i+0x1e6>
 801040e:	1b80      	subs	r0, r0, r6
 8010410:	6060      	str	r0, [r4, #4]
 8010412:	6863      	ldr	r3, [r4, #4]
 8010414:	6123      	str	r3, [r4, #16]
 8010416:	2300      	movs	r3, #0
 8010418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801041c:	e7aa      	b.n	8010374 <_printf_i+0x148>
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	4632      	mov	r2, r6
 8010422:	4649      	mov	r1, r9
 8010424:	4640      	mov	r0, r8
 8010426:	47d0      	blx	sl
 8010428:	3001      	adds	r0, #1
 801042a:	d0ad      	beq.n	8010388 <_printf_i+0x15c>
 801042c:	6823      	ldr	r3, [r4, #0]
 801042e:	079b      	lsls	r3, r3, #30
 8010430:	d413      	bmi.n	801045a <_printf_i+0x22e>
 8010432:	68e0      	ldr	r0, [r4, #12]
 8010434:	9b03      	ldr	r3, [sp, #12]
 8010436:	4298      	cmp	r0, r3
 8010438:	bfb8      	it	lt
 801043a:	4618      	movlt	r0, r3
 801043c:	e7a6      	b.n	801038c <_printf_i+0x160>
 801043e:	2301      	movs	r3, #1
 8010440:	4632      	mov	r2, r6
 8010442:	4649      	mov	r1, r9
 8010444:	4640      	mov	r0, r8
 8010446:	47d0      	blx	sl
 8010448:	3001      	adds	r0, #1
 801044a:	d09d      	beq.n	8010388 <_printf_i+0x15c>
 801044c:	3501      	adds	r5, #1
 801044e:	68e3      	ldr	r3, [r4, #12]
 8010450:	9903      	ldr	r1, [sp, #12]
 8010452:	1a5b      	subs	r3, r3, r1
 8010454:	42ab      	cmp	r3, r5
 8010456:	dcf2      	bgt.n	801043e <_printf_i+0x212>
 8010458:	e7eb      	b.n	8010432 <_printf_i+0x206>
 801045a:	2500      	movs	r5, #0
 801045c:	f104 0619 	add.w	r6, r4, #25
 8010460:	e7f5      	b.n	801044e <_printf_i+0x222>
 8010462:	bf00      	nop
 8010464:	080117f9 	.word	0x080117f9
 8010468:	0801180a 	.word	0x0801180a

0801046c <__sflush_r>:
 801046c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010474:	0716      	lsls	r6, r2, #28
 8010476:	4605      	mov	r5, r0
 8010478:	460c      	mov	r4, r1
 801047a:	d454      	bmi.n	8010526 <__sflush_r+0xba>
 801047c:	684b      	ldr	r3, [r1, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	dc02      	bgt.n	8010488 <__sflush_r+0x1c>
 8010482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010484:	2b00      	cmp	r3, #0
 8010486:	dd48      	ble.n	801051a <__sflush_r+0xae>
 8010488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801048a:	2e00      	cmp	r6, #0
 801048c:	d045      	beq.n	801051a <__sflush_r+0xae>
 801048e:	2300      	movs	r3, #0
 8010490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010494:	682f      	ldr	r7, [r5, #0]
 8010496:	6a21      	ldr	r1, [r4, #32]
 8010498:	602b      	str	r3, [r5, #0]
 801049a:	d030      	beq.n	80104fe <__sflush_r+0x92>
 801049c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	0759      	lsls	r1, r3, #29
 80104a2:	d505      	bpl.n	80104b0 <__sflush_r+0x44>
 80104a4:	6863      	ldr	r3, [r4, #4]
 80104a6:	1ad2      	subs	r2, r2, r3
 80104a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104aa:	b10b      	cbz	r3, 80104b0 <__sflush_r+0x44>
 80104ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104ae:	1ad2      	subs	r2, r2, r3
 80104b0:	2300      	movs	r3, #0
 80104b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104b4:	6a21      	ldr	r1, [r4, #32]
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b0      	blx	r6
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	d106      	bne.n	80104ce <__sflush_r+0x62>
 80104c0:	6829      	ldr	r1, [r5, #0]
 80104c2:	291d      	cmp	r1, #29
 80104c4:	d82b      	bhi.n	801051e <__sflush_r+0xb2>
 80104c6:	4a2a      	ldr	r2, [pc, #168]	@ (8010570 <__sflush_r+0x104>)
 80104c8:	410a      	asrs	r2, r1
 80104ca:	07d6      	lsls	r6, r2, #31
 80104cc:	d427      	bmi.n	801051e <__sflush_r+0xb2>
 80104ce:	2200      	movs	r2, #0
 80104d0:	6062      	str	r2, [r4, #4]
 80104d2:	04d9      	lsls	r1, r3, #19
 80104d4:	6922      	ldr	r2, [r4, #16]
 80104d6:	6022      	str	r2, [r4, #0]
 80104d8:	d504      	bpl.n	80104e4 <__sflush_r+0x78>
 80104da:	1c42      	adds	r2, r0, #1
 80104dc:	d101      	bne.n	80104e2 <__sflush_r+0x76>
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	b903      	cbnz	r3, 80104e4 <__sflush_r+0x78>
 80104e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80104e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104e6:	602f      	str	r7, [r5, #0]
 80104e8:	b1b9      	cbz	r1, 801051a <__sflush_r+0xae>
 80104ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104ee:	4299      	cmp	r1, r3
 80104f0:	d002      	beq.n	80104f8 <__sflush_r+0x8c>
 80104f2:	4628      	mov	r0, r5
 80104f4:	f7fe fbe0 	bl	800ecb8 <_free_r>
 80104f8:	2300      	movs	r3, #0
 80104fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80104fc:	e00d      	b.n	801051a <__sflush_r+0xae>
 80104fe:	2301      	movs	r3, #1
 8010500:	4628      	mov	r0, r5
 8010502:	47b0      	blx	r6
 8010504:	4602      	mov	r2, r0
 8010506:	1c50      	adds	r0, r2, #1
 8010508:	d1c9      	bne.n	801049e <__sflush_r+0x32>
 801050a:	682b      	ldr	r3, [r5, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d0c6      	beq.n	801049e <__sflush_r+0x32>
 8010510:	2b1d      	cmp	r3, #29
 8010512:	d001      	beq.n	8010518 <__sflush_r+0xac>
 8010514:	2b16      	cmp	r3, #22
 8010516:	d11e      	bne.n	8010556 <__sflush_r+0xea>
 8010518:	602f      	str	r7, [r5, #0]
 801051a:	2000      	movs	r0, #0
 801051c:	e022      	b.n	8010564 <__sflush_r+0xf8>
 801051e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010522:	b21b      	sxth	r3, r3
 8010524:	e01b      	b.n	801055e <__sflush_r+0xf2>
 8010526:	690f      	ldr	r7, [r1, #16]
 8010528:	2f00      	cmp	r7, #0
 801052a:	d0f6      	beq.n	801051a <__sflush_r+0xae>
 801052c:	0793      	lsls	r3, r2, #30
 801052e:	680e      	ldr	r6, [r1, #0]
 8010530:	bf08      	it	eq
 8010532:	694b      	ldreq	r3, [r1, #20]
 8010534:	600f      	str	r7, [r1, #0]
 8010536:	bf18      	it	ne
 8010538:	2300      	movne	r3, #0
 801053a:	eba6 0807 	sub.w	r8, r6, r7
 801053e:	608b      	str	r3, [r1, #8]
 8010540:	f1b8 0f00 	cmp.w	r8, #0
 8010544:	dde9      	ble.n	801051a <__sflush_r+0xae>
 8010546:	6a21      	ldr	r1, [r4, #32]
 8010548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801054a:	4643      	mov	r3, r8
 801054c:	463a      	mov	r2, r7
 801054e:	4628      	mov	r0, r5
 8010550:	47b0      	blx	r6
 8010552:	2800      	cmp	r0, #0
 8010554:	dc08      	bgt.n	8010568 <__sflush_r+0xfc>
 8010556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801055a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801055e:	81a3      	strh	r3, [r4, #12]
 8010560:	f04f 30ff 	mov.w	r0, #4294967295
 8010564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010568:	4407      	add	r7, r0
 801056a:	eba8 0800 	sub.w	r8, r8, r0
 801056e:	e7e7      	b.n	8010540 <__sflush_r+0xd4>
 8010570:	dfbffffe 	.word	0xdfbffffe

08010574 <_fflush_r>:
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	690b      	ldr	r3, [r1, #16]
 8010578:	4605      	mov	r5, r0
 801057a:	460c      	mov	r4, r1
 801057c:	b913      	cbnz	r3, 8010584 <_fflush_r+0x10>
 801057e:	2500      	movs	r5, #0
 8010580:	4628      	mov	r0, r5
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	b118      	cbz	r0, 801058e <_fflush_r+0x1a>
 8010586:	6a03      	ldr	r3, [r0, #32]
 8010588:	b90b      	cbnz	r3, 801058e <_fflush_r+0x1a>
 801058a:	f7fe f8dd 	bl	800e748 <__sinit>
 801058e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d0f3      	beq.n	801057e <_fflush_r+0xa>
 8010596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010598:	07d0      	lsls	r0, r2, #31
 801059a:	d404      	bmi.n	80105a6 <_fflush_r+0x32>
 801059c:	0599      	lsls	r1, r3, #22
 801059e:	d402      	bmi.n	80105a6 <_fflush_r+0x32>
 80105a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105a2:	f7fe fb4a 	bl	800ec3a <__retarget_lock_acquire_recursive>
 80105a6:	4628      	mov	r0, r5
 80105a8:	4621      	mov	r1, r4
 80105aa:	f7ff ff5f 	bl	801046c <__sflush_r>
 80105ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105b0:	07da      	lsls	r2, r3, #31
 80105b2:	4605      	mov	r5, r0
 80105b4:	d4e4      	bmi.n	8010580 <_fflush_r+0xc>
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	059b      	lsls	r3, r3, #22
 80105ba:	d4e1      	bmi.n	8010580 <_fflush_r+0xc>
 80105bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105be:	f7fe fb3d 	bl	800ec3c <__retarget_lock_release_recursive>
 80105c2:	e7dd      	b.n	8010580 <_fflush_r+0xc>

080105c4 <fiprintf>:
 80105c4:	b40e      	push	{r1, r2, r3}
 80105c6:	b503      	push	{r0, r1, lr}
 80105c8:	4601      	mov	r1, r0
 80105ca:	ab03      	add	r3, sp, #12
 80105cc:	4805      	ldr	r0, [pc, #20]	@ (80105e4 <fiprintf+0x20>)
 80105ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d2:	6800      	ldr	r0, [r0, #0]
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	f7ff fca3 	bl	800ff20 <_vfiprintf_r>
 80105da:	b002      	add	sp, #8
 80105dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80105e0:	b003      	add	sp, #12
 80105e2:	4770      	bx	lr
 80105e4:	200002b0 	.word	0x200002b0

080105e8 <__swhatbuf_r>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	460c      	mov	r4, r1
 80105ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f0:	2900      	cmp	r1, #0
 80105f2:	b096      	sub	sp, #88	@ 0x58
 80105f4:	4615      	mov	r5, r2
 80105f6:	461e      	mov	r6, r3
 80105f8:	da0d      	bge.n	8010616 <__swhatbuf_r+0x2e>
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010600:	f04f 0100 	mov.w	r1, #0
 8010604:	bf14      	ite	ne
 8010606:	2340      	movne	r3, #64	@ 0x40
 8010608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801060c:	2000      	movs	r0, #0
 801060e:	6031      	str	r1, [r6, #0]
 8010610:	602b      	str	r3, [r5, #0]
 8010612:	b016      	add	sp, #88	@ 0x58
 8010614:	bd70      	pop	{r4, r5, r6, pc}
 8010616:	466a      	mov	r2, sp
 8010618:	f000 f848 	bl	80106ac <_fstat_r>
 801061c:	2800      	cmp	r0, #0
 801061e:	dbec      	blt.n	80105fa <__swhatbuf_r+0x12>
 8010620:	9901      	ldr	r1, [sp, #4]
 8010622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801062a:	4259      	negs	r1, r3
 801062c:	4159      	adcs	r1, r3
 801062e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010632:	e7eb      	b.n	801060c <__swhatbuf_r+0x24>

08010634 <__smakebuf_r>:
 8010634:	898b      	ldrh	r3, [r1, #12]
 8010636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010638:	079d      	lsls	r5, r3, #30
 801063a:	4606      	mov	r6, r0
 801063c:	460c      	mov	r4, r1
 801063e:	d507      	bpl.n	8010650 <__smakebuf_r+0x1c>
 8010640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010644:	6023      	str	r3, [r4, #0]
 8010646:	6123      	str	r3, [r4, #16]
 8010648:	2301      	movs	r3, #1
 801064a:	6163      	str	r3, [r4, #20]
 801064c:	b003      	add	sp, #12
 801064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010650:	ab01      	add	r3, sp, #4
 8010652:	466a      	mov	r2, sp
 8010654:	f7ff ffc8 	bl	80105e8 <__swhatbuf_r>
 8010658:	9f00      	ldr	r7, [sp, #0]
 801065a:	4605      	mov	r5, r0
 801065c:	4639      	mov	r1, r7
 801065e:	4630      	mov	r0, r6
 8010660:	f7fe fed8 	bl	800f414 <_malloc_r>
 8010664:	b948      	cbnz	r0, 801067a <__smakebuf_r+0x46>
 8010666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801066a:	059a      	lsls	r2, r3, #22
 801066c:	d4ee      	bmi.n	801064c <__smakebuf_r+0x18>
 801066e:	f023 0303 	bic.w	r3, r3, #3
 8010672:	f043 0302 	orr.w	r3, r3, #2
 8010676:	81a3      	strh	r3, [r4, #12]
 8010678:	e7e2      	b.n	8010640 <__smakebuf_r+0xc>
 801067a:	89a3      	ldrh	r3, [r4, #12]
 801067c:	6020      	str	r0, [r4, #0]
 801067e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	9b01      	ldr	r3, [sp, #4]
 8010686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801068a:	b15b      	cbz	r3, 80106a4 <__smakebuf_r+0x70>
 801068c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010690:	4630      	mov	r0, r6
 8010692:	f000 f81d 	bl	80106d0 <_isatty_r>
 8010696:	b128      	cbz	r0, 80106a4 <__smakebuf_r+0x70>
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	f023 0303 	bic.w	r3, r3, #3
 801069e:	f043 0301 	orr.w	r3, r3, #1
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	431d      	orrs	r5, r3
 80106a8:	81a5      	strh	r5, [r4, #12]
 80106aa:	e7cf      	b.n	801064c <__smakebuf_r+0x18>

080106ac <_fstat_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4d07      	ldr	r5, [pc, #28]	@ (80106cc <_fstat_r+0x20>)
 80106b0:	2300      	movs	r3, #0
 80106b2:	4604      	mov	r4, r0
 80106b4:	4608      	mov	r0, r1
 80106b6:	4611      	mov	r1, r2
 80106b8:	602b      	str	r3, [r5, #0]
 80106ba:	f7f2 fe6d 	bl	8003398 <_fstat>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d102      	bne.n	80106c8 <_fstat_r+0x1c>
 80106c2:	682b      	ldr	r3, [r5, #0]
 80106c4:	b103      	cbz	r3, 80106c8 <_fstat_r+0x1c>
 80106c6:	6023      	str	r3, [r4, #0]
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	bf00      	nop
 80106cc:	20003130 	.word	0x20003130

080106d0 <_isatty_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4d06      	ldr	r5, [pc, #24]	@ (80106ec <_isatty_r+0x1c>)
 80106d4:	2300      	movs	r3, #0
 80106d6:	4604      	mov	r4, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	602b      	str	r3, [r5, #0]
 80106dc:	f7f2 fe6c 	bl	80033b8 <_isatty>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_isatty_r+0x1a>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_isatty_r+0x1a>
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	20003130 	.word	0x20003130

080106f0 <_sbrk_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d06      	ldr	r5, [pc, #24]	@ (801070c <_sbrk_r+0x1c>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	602b      	str	r3, [r5, #0]
 80106fc:	f7f2 fe74 	bl	80033e8 <_sbrk>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_sbrk_r+0x1a>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_sbrk_r+0x1a>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	20003130 	.word	0x20003130

08010710 <abort>:
 8010710:	b508      	push	{r3, lr}
 8010712:	2006      	movs	r0, #6
 8010714:	f000 f840 	bl	8010798 <raise>
 8010718:	2001      	movs	r0, #1
 801071a:	f7f2 fe09 	bl	8003330 <_exit>

0801071e <_calloc_r>:
 801071e:	b570      	push	{r4, r5, r6, lr}
 8010720:	fba1 5402 	umull	r5, r4, r1, r2
 8010724:	b93c      	cbnz	r4, 8010736 <_calloc_r+0x18>
 8010726:	4629      	mov	r1, r5
 8010728:	f7fe fe74 	bl	800f414 <_malloc_r>
 801072c:	4606      	mov	r6, r0
 801072e:	b928      	cbnz	r0, 801073c <_calloc_r+0x1e>
 8010730:	2600      	movs	r6, #0
 8010732:	4630      	mov	r0, r6
 8010734:	bd70      	pop	{r4, r5, r6, pc}
 8010736:	220c      	movs	r2, #12
 8010738:	6002      	str	r2, [r0, #0]
 801073a:	e7f9      	b.n	8010730 <_calloc_r+0x12>
 801073c:	462a      	mov	r2, r5
 801073e:	4621      	mov	r1, r4
 8010740:	f7fe f980 	bl	800ea44 <memset>
 8010744:	e7f5      	b.n	8010732 <_calloc_r+0x14>

08010746 <_raise_r>:
 8010746:	291f      	cmp	r1, #31
 8010748:	b538      	push	{r3, r4, r5, lr}
 801074a:	4605      	mov	r5, r0
 801074c:	460c      	mov	r4, r1
 801074e:	d904      	bls.n	801075a <_raise_r+0x14>
 8010750:	2316      	movs	r3, #22
 8010752:	6003      	str	r3, [r0, #0]
 8010754:	f04f 30ff 	mov.w	r0, #4294967295
 8010758:	bd38      	pop	{r3, r4, r5, pc}
 801075a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801075c:	b112      	cbz	r2, 8010764 <_raise_r+0x1e>
 801075e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010762:	b94b      	cbnz	r3, 8010778 <_raise_r+0x32>
 8010764:	4628      	mov	r0, r5
 8010766:	f000 f831 	bl	80107cc <_getpid_r>
 801076a:	4622      	mov	r2, r4
 801076c:	4601      	mov	r1, r0
 801076e:	4628      	mov	r0, r5
 8010770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010774:	f000 b818 	b.w	80107a8 <_kill_r>
 8010778:	2b01      	cmp	r3, #1
 801077a:	d00a      	beq.n	8010792 <_raise_r+0x4c>
 801077c:	1c59      	adds	r1, r3, #1
 801077e:	d103      	bne.n	8010788 <_raise_r+0x42>
 8010780:	2316      	movs	r3, #22
 8010782:	6003      	str	r3, [r0, #0]
 8010784:	2001      	movs	r0, #1
 8010786:	e7e7      	b.n	8010758 <_raise_r+0x12>
 8010788:	2100      	movs	r1, #0
 801078a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801078e:	4620      	mov	r0, r4
 8010790:	4798      	blx	r3
 8010792:	2000      	movs	r0, #0
 8010794:	e7e0      	b.n	8010758 <_raise_r+0x12>
	...

08010798 <raise>:
 8010798:	4b02      	ldr	r3, [pc, #8]	@ (80107a4 <raise+0xc>)
 801079a:	4601      	mov	r1, r0
 801079c:	6818      	ldr	r0, [r3, #0]
 801079e:	f7ff bfd2 	b.w	8010746 <_raise_r>
 80107a2:	bf00      	nop
 80107a4:	200002b0 	.word	0x200002b0

080107a8 <_kill_r>:
 80107a8:	b538      	push	{r3, r4, r5, lr}
 80107aa:	4d07      	ldr	r5, [pc, #28]	@ (80107c8 <_kill_r+0x20>)
 80107ac:	2300      	movs	r3, #0
 80107ae:	4604      	mov	r4, r0
 80107b0:	4608      	mov	r0, r1
 80107b2:	4611      	mov	r1, r2
 80107b4:	602b      	str	r3, [r5, #0]
 80107b6:	f7f2 fdab 	bl	8003310 <_kill>
 80107ba:	1c43      	adds	r3, r0, #1
 80107bc:	d102      	bne.n	80107c4 <_kill_r+0x1c>
 80107be:	682b      	ldr	r3, [r5, #0]
 80107c0:	b103      	cbz	r3, 80107c4 <_kill_r+0x1c>
 80107c2:	6023      	str	r3, [r4, #0]
 80107c4:	bd38      	pop	{r3, r4, r5, pc}
 80107c6:	bf00      	nop
 80107c8:	20003130 	.word	0x20003130

080107cc <_getpid_r>:
 80107cc:	f7f2 bd98 	b.w	8003300 <_getpid>

080107d0 <_init>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	bf00      	nop
 80107d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107d6:	bc08      	pop	{r3}
 80107d8:	469e      	mov	lr, r3
 80107da:	4770      	bx	lr

080107dc <_fini>:
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	bf00      	nop
 80107e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e2:	bc08      	pop	{r3}
 80107e4:	469e      	mov	lr, r3
 80107e6:	4770      	bx	lr
